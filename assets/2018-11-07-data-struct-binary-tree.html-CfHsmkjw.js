import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as r,o as n}from"./app-CI6hvVp1.js";const h={};function o(p,e){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树"><span>二叉树</span></a></h1><p>二叉树是树的一种，每个节点最多可具有两个子树，即结点的度最大为2（结点度：结点拥有的子树数）。</p><h1 id="常见的二叉树" tabindex="-1"><a class="header-anchor" href="#常见的二叉树"><span>常见的二叉树</span></a></h1><h2 id="斜树" tabindex="-1"><a class="header-anchor" href="#斜树"><span>斜树</span></a></h2><p>所有结点都只有左子树，或者右子树。</p><h2 id="满二叉树" tabindex="-1"><a class="header-anchor" href="#满二叉树"><span>满二叉树</span></a></h2><p>所有的分支节点都具有左右节点。</p><h2 id="完全二叉树" tabindex="-1"><a class="header-anchor" href="#完全二叉树"><span>完全二叉树</span></a></h2><p>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p><h1 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质"><span>二叉树的性质</span></a></h1><ol><li><p>二叉树第i层上的结点数目最多为 2^(i-1) (i≥1)</p></li><li><p>深度为h的二叉树至多有2^h-1个结点(h≥1)</p></li><li><p>包含n个结点的二叉树的高度至少为log2 (n+1)</p></li><li><p>在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1</p></li></ol><h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h1><h1 id="遍历方式" tabindex="-1"><a class="header-anchor" href="#遍历方式"><span>遍历方式</span></a></h1><h2 id="前序遍历" tabindex="-1"><a class="header-anchor" href="#前序遍历"><span>前序遍历</span></a></h2><h2 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历"><span>中序遍历</span></a></h2><h2 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历"><span>后序遍历</span></a></h2><h2 id="层级遍历" tabindex="-1"><a class="header-anchor" href="#层级遍历"><span>层级遍历</span></a></h2><h1 id="想法" tabindex="-1"><a class="header-anchor" href="#想法"><span>想法</span></a></h1><p>打印输出一个 ASCII 的树。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/二叉树</a></p><p><a href="http://ccc013.github.io/2016/08/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener noreferrer">二叉树的基本概念和实现</a></p><p><a href="https://blog.csdn.net/google19890102/article/details/53926704" target="_blank" rel="noopener noreferrer">数据结构与算法</a></p><p><a href="https://www.zhihu.com/question/37381035" target="_blank" rel="noopener noreferrer">二叉树及其拓展可以解决什么问题？</a></p><p><a href="http://wiki.jikexueyuan.com/project/easy-learn-algorithm/binary-tree.html" target="_blank" rel="noopener noreferrer">算法 10：二叉树</a></p><p><a href="https://segmentfault.com/a/1190000008850005" target="_blank" rel="noopener noreferrer">二叉树操作（面试必备）</a></p><p><a href="https://www.cnblogs.com/idorax/p/6441043.html" target="_blank" rel="noopener noreferrer">完美二叉树, 完全二叉树和完满二叉树</a></p>',27)]))}const c=a(h,[["render",o]]),d=JSON.parse('{"path":"/posts/data-struct/2018-11-07-data-struct-binary-tree.html","title":"Binary Tree","lang":"zh-CN","frontmatter":{"title":"Binary Tree","date":"2018-11-07T00:00:00.000Z","categories":["Data Struct"],"tags":["data-struct","sh"],"published":true,"excerpt":"数据结构之二叉树","description":"二叉树 二叉树是树的一种，每个节点最多可具有两个子树，即结点的度最大为2（结点度：结点拥有的子树数）。 常见的二叉树 斜树 所有结点都只有左子树，或者右子树。 满二叉树 所有的分支节点都具有左右节点。 完全二叉树 若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/data-struct/2018-11-07-data-struct-binary-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Binary Tree"}],["meta",{"property":"og:description","content":"二叉树 二叉树是树的一种，每个节点最多可具有两个子树，即结点的度最大为2（结点度：结点拥有的子树数）。 常见的二叉树 斜树 所有结点都只有左子树，或者右子树。 满二叉树 所有的分支节点都具有左右节点。 完全二叉树 若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T10:43:15.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-11-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T10:43:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Binary Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-11-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T10:43:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755705660000,"updatedTime":1755945795000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.45,"words":435},"filePathRelative":"posts/data-struct/2018-11-07-data-struct-binary-tree.md","localizedDate":"2018年11月7日","autoDesc":true}');export{c as comp,d as data};
