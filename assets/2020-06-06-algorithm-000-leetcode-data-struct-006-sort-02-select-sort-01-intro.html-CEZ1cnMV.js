import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as e}from"./app-DNaAVvYv.js";const r={};function n(h,s){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="排序系列" tabindex="-1"><a class="header-anchor" href="#排序系列"><span>排序系列</span></a></h1><p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-03-select-sort" target="_blank" rel="noopener noreferrer">sort-03-SelectSort 选择排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-04-heap-sort" target="_blank" rel="noopener noreferrer">sort-04-heap sort 堆排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-05-insert-sort" target="_blank" rel="noopener noreferrer">sort-05-insert sort 插入排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-06-shell-sort" target="_blank" rel="noopener noreferrer">sort-06-shell sort 希尔排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-07-merge-sort" target="_blank" rel="noopener noreferrer">sort-07-merge sort 归并排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-08-counting-sort" target="_blank" rel="noopener noreferrer">sort-08-counting sort 计数排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-09-bucket-sort" target="_blank" rel="noopener noreferrer">sort-09-bucket sort 桶排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-10-bigfile-sort" target="_blank" rel="noopener noreferrer">sort-10-bigfile 大文件外部排序</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>大家好，我是老马。</p><p>以前从工程的角度，已经梳理过一次排序算法。</p><p>这里从力扣算法的角度，重新梳理一遍。</p><p>核心内容包含：</p><p>1）常见排序算法介绍</p><p>2）背后的核心思想</p><p>3）leetcode 经典题目练习+讲解</p><p>4）应用场景、优缺点等对比总结</p><p>5）工程 sdk 包，这个已经完成。</p><ol start="6"><li>可视化</li></ol><h1 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h1><h2 id="🏷️-一、选择排序是什么" tabindex="-1"><a class="header-anchor" href="#🏷️-一、选择排序是什么"><span>🏷️ 一、选择排序是什么？</span></a></h2><p>选择排序是一种<strong>简单直观的排序算法</strong>，每一轮从剩余元素中<strong>选出最小值</strong>，放到当前“已排序区”末尾。</p><hr><h2 id="🔧-二、算法核心思想" tabindex="-1"><a class="header-anchor" href="#🔧-二、算法核心思想"><span>🔧 二、算法核心思想</span></a></h2><ul><li><p>将数组分成两部分：</p><ul><li><strong>已排序区间</strong>（初始为空）</li><li><strong>未排序区间</strong>（初始是整个数组）</li></ul></li><li><p>每轮从未排序区选出<strong>最小元素</strong>，和未排序区的第一个元素交换</p></li></ul><blockquote><p>📌 类似“每次选出班上最矮的排到队前面”</p></blockquote><hr><h2 id="🧠-三、伪代码逻辑" tabindex="-1"><a class="header-anchor" href="#🧠-三、伪代码逻辑"><span>🧠 三、伪代码逻辑</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>for i from 0 to n - 1:</span></span>
<span class="line"><span>    minIndex = i</span></span>
<span class="line"><span>    for j from i+1 to n - 1:</span></span>
<span class="line"><span>        if arr[j] &lt; arr[minIndex]:</span></span>
<span class="line"><span>            minIndex = j</span></span>
<span class="line"><span>    swap arr[i] and arr[minIndex]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-四、java-代码实现" tabindex="-1"><a class="header-anchor" href="#✅-四、java-代码实现"><span>✅ 四、Java 代码实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> selectionSort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] arr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> minIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (arr[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[minIndex]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                minIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (minIndex </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            arr[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[minIndex]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            arr[minIndex] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🎨-五、可视化示例-以-3-1-4-2-为例" tabindex="-1"><a class="header-anchor" href="#🎨-五、可视化示例-以-3-1-4-2-为例"><span>🎨 五、可视化示例（以 <code>[3, 1, 4, 2]</code> 为例）</span></a></h2><table><thead><tr><th>轮次</th><th>过程</th><th>结果</th></tr></thead><tbody><tr><td>第1轮</td><td>找最小值 1，交换 3 和 1</td><td><code>[1, 3, 4, 2]</code></td></tr><tr><td>第2轮</td><td>找最小值 2，交换 3 和 2</td><td><code>[1, 2, 4, 3]</code></td></tr><tr><td>第3轮</td><td>找最小值 3，交换 4 和 3</td><td><code>[1, 2, 3, 4]</code> ✅</td></tr></tbody></table><hr><h2 id="📈-六、复杂度分析" tabindex="-1"><a class="header-anchor" href="#📈-六、复杂度分析"><span>📈 六、复杂度分析</span></a></h2><table><thead><tr><th>维度</th><th>分析结果</th></tr></thead><tbody><tr><td>最好情况</td><td>O(n²)（不能提前终止）</td></tr><tr><td>最坏情况</td><td>O(n²)</td></tr><tr><td>平均情况</td><td>O(n²)</td></tr><tr><td>空间复杂度</td><td>O(1) 原地排序</td></tr><tr><td>稳定性</td><td>❌ 不稳定（相同元素可能会被交换顺序）</td></tr></tbody></table><blockquote><p>❗ 不管是否已经有序，<strong>每轮都必须找最小值并交换</strong>，所以不能优化为 O(n)</p></blockquote><hr><h2 id="📦-七、选择排序的特点总结" tabindex="-1"><a class="header-anchor" href="#📦-七、选择排序的特点总结"><span>📦 七、选择排序的特点总结</span></a></h2><table><thead><tr><th>特性</th><th>是否符合</th></tr></thead><tbody><tr><td>原地排序</td><td>✅</td></tr><tr><td>稳定排序</td><td>❌（可以通过特殊处理让它稳定，但默认不是）</td></tr><tr><td>实现简单</td><td>✅</td></tr><tr><td>适合小规模数据</td><td>✅</td></tr></tbody></table><hr><h2 id="⚖️-八、优缺点对比" tabindex="-1"><a class="header-anchor" href="#⚖️-八、优缺点对比"><span>⚖️ 八、优缺点对比</span></a></h2><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>实现简单、逻辑清晰</td><td>效率低，O(n²) 级别</td></tr><tr><td>不依赖数据初始状态（有序也不影响）</td><td>不稳定，可能打乱相等元素顺序</td></tr><tr><td>交换次数少（最多 n 次）</td><td>比冒泡/插入更慢，几乎无优势</td></tr></tbody></table><hr><h2 id="📌-九、适用场景" tabindex="-1"><a class="header-anchor" href="#📌-九、适用场景"><span>📌 九、适用场景</span></a></h2><table><thead><tr><th>场景</th><th>是否推荐</th></tr></thead><tbody><tr><td>初学者学习</td><td>✅ 非常适合</td></tr><tr><td>数据量小</td><td>✅ 勉强可用</td></tr><tr><td>稳定排序要求</td><td>❌ 不推荐</td></tr><tr><td>有序性较高</td><td>❌ 不推荐（无优化空间）</td></tr><tr><td>实际工程</td><td>❌ 基本不推荐，通常用库函数或快排类算法</td></tr></tbody></table><hr><h2 id="💡-十、leetcode-上可用选择排序解的题目" tabindex="-1"><a class="header-anchor" href="#💡-十、leetcode-上可用选择排序解的题目"><span>💡 十、LeetCode 上可用选择排序解的题目</span></a></h2><p>虽然选择排序不是最优方法，但在一些题目中可以用于练习排序和思维：</p><h3 id="🔹-912-排序数组" tabindex="-1"><a class="header-anchor" href="#🔹-912-排序数组"><span>🔹 <a href="https://leetcode.cn/problems/sort-an-array/" target="_blank" rel="noopener noreferrer">912. 排序数组</a></span></a></h3><ul><li>可以练习写选择排序实现 ✅</li></ul><h3 id="🔹-215-数组中的第k个最大元素" tabindex="-1"><a class="header-anchor" href="#🔹-215-数组中的第k个最大元素"><span>🔹 <a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener noreferrer">215. 数组中的第K个最大元素</a></span></a></h3><ul><li>虽然可以用堆更快，但选择排序变形版也可以找第K大元素（找前K大值）✅</li></ul><h3 id="🔹-面试题-10-01-合并排序的数组" tabindex="-1"><a class="header-anchor" href="#🔹-面试题-10-01-合并排序的数组"><span>🔹 <a href="https://leetcode.cn/problems/sorted-merge-lcci/" target="_blank" rel="noopener noreferrer">面试题 10.01. 合并排序的数组</a></span></a></h3><ul><li>如果题目要求“手写排序”，选择排序也可以作为备选方案练习。</li></ul><hr><h2 id="🔚-十一、一句话总结" tabindex="-1"><a class="header-anchor" href="#🔚-十一、一句话总结"><span>🔚 十一、一句话总结</span></a></h2><blockquote><p>选择排序通过<strong>每次挑选最小值并交换</strong>，不断将最小值推向数组前端，<strong>思路简单但效率低、稳定性差</strong>，适合教学但不推荐实战使用。</p></blockquote>`,64)]))}const o=t(r,[["render",n]]),d=JSON.parse('{"path":"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html","title":"leetcode sort 排序-02-selectSort 选择排序入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode sort 排序-02-selectSort 选择排序入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","sort","sf"],"published":true,"description":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode sort 排序-02-selectSort 选择排序入门介绍"}],["meta",{"property":"og:description","content":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"sort"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode sort 排序-02-selectSort 选择排序入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.66,"words":1097},"filePathRelative":"posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-00-overview-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-00-排序算法汇总</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-01-bubble-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-01-bubble sort 冒泡排序算法详解</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-02-quick-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-02-QuickSort 快速排序到底快在哪里？</a></p>","autoDesc":true}');export{o as comp,d as data};
