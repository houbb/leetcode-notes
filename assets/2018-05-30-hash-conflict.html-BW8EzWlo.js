import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o}from"./app-COTKsypl.js";const h={};function i(n,a){return o(),t("div",null,a[0]||(a[0]=[p('<h1 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h1><p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。</p><p>根据散列值作为地址存放数据，这种转换是一种压缩映射，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p><p>查找关键字数据（如K）的时候，若结构中存在和关键字相等的记录，则必定在f(K)的存储位置上。</p><p>由此，不需比较便可直接取得所查记录。我们称这个对应关系f为散列函数(Hash function)，按这个事件建立的表为散列表。</p><p>综上所述，根据散列函数f(key)和处理冲突的方法将一组关键字映象到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“象” 作为记录在表中的存储位置，这种表便称为散列表，这一映象过程称为散列造表或散列，所得的存储位置称散列地址。</p><h1 id="hash冲突" tabindex="-1"><a class="header-anchor" href="#hash冲突"><span>Hash冲突</span></a></h1><p>对不同的关键字可能得到同一散列地址，即key1≠key2，而f(key1)=f(key2)，这种现象称hash冲突。</p><p>即：key1通过f(key1)得到散列地址去存储key1，同理，key2发现自己对应的散列地址已经被key1占据了。</p><h2 id="解决办法-总共有四种" tabindex="-1"><a class="header-anchor" href="#解决办法-总共有四种"><span>解决办法（总共有四种）：</span></a></h2><ol><li><p>开放地址</p></li><li><p>再哈希</p></li><li><p>链地址</p></li><li><p>建立公共溢出区</p></li></ol><p>其中开放地址又分为：</p><ul><li><p>线性探测再散列</p></li><li><p>二次探测再散列</p></li><li><p>伪随机探测再散列</p></li></ul><h1 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法"><span>开放寻址法</span></a></h1><p>所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入 。</p><p>开放寻址法：Hi=(H(key) + di) MOD m,i=1,2,…，k(k&lt;=m-1)，其中H(key)为散列函数，m为散列表长，di为增量序列，可有下列三种取法：</p><p>1)． di=1,2,3,…，m-1，称线性探测再散列；</p><p>2)． di=1<sup>2,(-1)</sup>2,2<sup>2,(-2)</sup>2,(3)<sup>2,…，±(k)</sup>2,(k&lt;=m/2)称二次探测再散列；</p><p>3)． di=伪随机数序列，称伪随机探测再散列。</p><p>用开放定址法解决冲突的做法是：当冲突发生时，使用某种探测技术（线性探测法、二次探测法（解决线性探测的堆积问题）、随机探测法（和二次探测原理一致，不一样的是：二次探测以定值跳跃，而随机探测的散列地址跳跃长度是不定值））在散列表中形成一个探测序列。</p><p>沿此序列逐个单元地查找，直到找到给定的关键字，或者碰到一个开放的地址（即该地址单元为空）为止插入即可。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>比如说，我们的关键字集合为{12,67,56,16,25,37,22,29,15,47,48,34},表长为12。</p><p>我们用散列函数f(key) = key mod l2</p><p>当计算前S个数{12,67,56,16,25}时，都是没有冲突的散列地址，直接存入：</p><figure><img src="https://img2018.cnblogs.com/blog/1483005/201907/1483005-20190721110006387-1248464777.png" alt="iamge-url" tabindex="0" loading="lazy"><figcaption>iamge-url</figcaption></figure><p>计算key = 37时，发现f(37) = 1，此时就与25所在的位置冲突。</p><p>于是我们应用上面的公式f(37) = (f(37)+1) mod 12 = 2。</p><p>于是将37存入下标为2的位置：</p><figure><img src="https://img2018.cnblogs.com/blog/1483005/201907/1483005-20190721110126392-227879301.png" alt="iamge url2" tabindex="0" loading="lazy"><figcaption>iamge url2</figcaption></figure><h1 id="再哈希" tabindex="-1"><a class="header-anchor" href="#再哈希"><span>再哈希</span></a></h1><p>再哈希法又叫双哈希法，有多个不同的Hash函数，当发生冲突时，使用第二个，第三个，….，等哈希函数去计算地址，直到无冲突。</p><p>虽然不易发生聚集，但是增加了计算时间。</p><h1 id="链地址法-java-hashmap就是这么做的" tabindex="-1"><a class="header-anchor" href="#链地址法-java-hashmap就是这么做的"><span>链地址法(Java hashmap就是这么做的)</span></a></h1><p>链地址法的基本思想是：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，将所有关键字为同义词的结点链接在同一个单链表中，</p><h2 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子</span></a></h2><p>如：</p><p>设有 m ＝ 5 ， H(K) ＝ K mod 5 ，关键字值序例 5 ， 21 ， 17 ， 9 ， 15 ， 36 ， 41 ， 24 ，按外链地址法所建立的哈希表如下图所示：</p><figure><img src="https://segmentfault.com/img/bVZmbt?w=498&amp;h=486" alt="hashmap" tabindex="0" loading="lazy"><figcaption>hashmap</figcaption></figure><h1 id="建立公共溢出区" tabindex="-1"><a class="header-anchor" href="#建立公共溢出区"><span>建立公共溢出区</span></a></h1><p>建立公共溢出区的基本思想是：假设哈希函数的值域是 <code>[1,m-1]</code>，则设向量 <code>HashTable[0...m-1]</code> 为基本表，<br> 每个分量存放一个记录，另外设向量 <code>OverTable[0...v]</code> 为溢出表，所有关键字和基本表中关键字为同义词的记录，不管它们由哈希函数得到的哈希地址是什么，一旦发生冲突，都填入溢出表。</p><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="">bloom filter</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://segmentfault.com/a/1190000012201011" target="_blank" rel="noopener noreferrer">谈谈java中几种常见的散列算法及解决哈希碰撞的方式</a></p><p><a href="https://www.cnblogs.com/wangjiong/p/11220583.html" target="_blank" rel="noopener noreferrer">Java中实现hash算法</a></p>',46)]))}const c=e(h,[["render",i]]),l=JSON.parse('{"path":"/posts/algorithm/hash/2018-05-30-hash-conflict.html","title":"Hash conflict 哈希碰撞/哈希冲突解决方式","lang":"zh-CN","frontmatter":{"title":"Hash conflict 哈希碰撞/哈希冲突解决方式","date":"2018-05-30T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","hash"],"published":true,"description":"Hash Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。 根据散列值作为地址存放数据，这种转换是一种压缩映射，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 查找关键字数据（如K）的时候，若结构中存在和关键字相等的记录，则必定在f(K)的存储位置...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/hash/2018-05-30-hash-conflict.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Hash conflict 哈希碰撞/哈希冲突解决方式"}],["meta",{"property":"og:description","content":"Hash Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。 根据散列值作为地址存放数据，这种转换是一种压缩映射，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 查找关键字数据（如K）的时候，若结构中存在和关键字相等的记录，则必定在f(K)的存储位置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2018.cnblogs.com/blog/1483005/201907/1483005-20190721110006387-1248464777.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T04:59:26.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"hash"}],["meta",{"property":"article:published_time","content":"2018-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T04:59:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hash conflict 哈希碰撞/哈希冲突解决方式\\",\\"image\\":[\\"https://img2018.cnblogs.com/blog/1483005/201907/1483005-20190721110006387-1248464777.png\\",\\"https://img2018.cnblogs.com/blog/1483005/201907/1483005-20190721110126392-227879301.png\\",\\"https://segmentfault.com/img/bVZmbt?w=498&h=486\\"],\\"datePublished\\":\\"2018-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T04:59:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755925166000,"updatedTime":1755925166000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.24,"words":1271},"filePathRelative":"posts/algorithm/hash/2018-05-30-hash-conflict.md","localizedDate":"2018年5月30日","excerpt":"\\n<p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。</p>\\n<p>根据散列值作为地址存放数据，这种转换是一种压缩映射，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p>\\n<p>查找关键字数据（如K）的时候，若结构中存在和关键字相等的记录，则必定在f(K)的存储位置上。</p>\\n<p>由此，不需比较便可直接取得所查记录。我们称这个对应关系f为散列函数(Hash function)，按这个事件建立的表为散列表。</p>\\n<p>综上所述，根据散列函数f(key)和处理冲突的方法将一组关键字映象到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“象” 作为记录在表中的存储位置，这种表便称为散列表，这一映象过程称为散列造表或散列，所得的存储位置称散列地址。</p>","autoDesc":true}');export{c as comp,l as data};
