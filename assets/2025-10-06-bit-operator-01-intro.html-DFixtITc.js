import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-rGAVnKEK.js";const n={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h1><p>位运算（<strong>bitwise operations</strong>）是所有算法和底层逻辑的核心之一。</p><h2 id="🧩-一、什么是位运算" tabindex="-1"><a class="header-anchor" href="#🧩-一、什么是位运算"><span>🧩 一、什么是位运算？</span></a></h2><p>计算机底层存储的所有数据都是二进制的 <code>0</code> 和 <code>1</code>。<br><strong>位运算就是直接对这些二进制位（bit）进行操作的运算。</strong></p><p>它的好处是：</p><ul><li>⚡ 极快（比普通加减乘除还快）</li><li>💡 可以高效实现一些数学逻辑、掩码、集合、状态压缩、DP 等技巧</li><li>💪 很多算法题和面试题都用它（如 位计数、子集生成、奇偶判断、异或和）</li></ul><hr><h2 id="⚙️-二、常见位运算符" tabindex="-1"><a class="header-anchor" href="#⚙️-二、常见位运算符"><span>⚙️ 二、常见位运算符</span></a></h2><table><thead><tr><th>运算</th><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>按位与</td><td><code>&amp;</code></td><td>两个位都为 1 才为 1</td><td><code>6 &amp; 3 = 2</code> (<code>110 &amp; 011 = 010</code>)</td></tr><tr><td>按位或</td><td><code>|</code></td><td>有一个为 1 就为 1</td><td><code>6 | 3 = 7</code> (<code>110 | 011 = 111</code>)</td></tr><tr><td>按位异或</td><td><code>^</code></td><td>相同为 0，不同为 1</td><td><code>6 ^ 3 = 5</code> (<code>110 ^ 011 = 101</code>)</td></tr><tr><td>按位取反</td><td><code>~</code></td><td>0→1，1→0（符号位也反）</td><td><code>~6 = -7</code>（在补码中解释）</td></tr><tr><td>左移</td><td><code>&lt;&lt;</code></td><td>所有位左移，右边补 0</td><td><code>3 &lt;&lt; 1 = 6</code> (<code>11 → 110</code>)</td></tr><tr><td>右移</td><td><code>&gt;&gt;</code></td><td>所有位右移，符号位补</td><td><code>6 &gt;&gt; 1 = 3</code> (<code>110 → 11</code>)</td></tr><tr><td>无符号右移</td><td><code>&gt;&gt;&gt;</code></td><td>右移，左边补 0</td><td><code>-1 &gt;&gt;&gt; 1 = 2147483647</code></td></tr></tbody></table><hr><h2 id="📘-三、常见技巧与应用" tabindex="-1"><a class="header-anchor" href="#📘-三、常见技巧与应用"><span>📘 三、常见技巧与应用</span></a></h2><h3 id="_1️⃣-判断奇偶" tabindex="-1"><a class="header-anchor" href="#_1️⃣-判断奇偶"><span>1️⃣ 判断奇偶</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 偶数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 奇数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为二进制最后一位为 <code>1</code> 表示奇数。</p><hr><h3 id="_2️⃣-乘除-2-的幂-高效版" tabindex="-1"><a class="header-anchor" href="#_2️⃣-乘除-2-的幂-高效版"><span>2️⃣ 乘除 2 的幂（高效版）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 相当于 x * 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 相当于 x / 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 相当于 x * 2^k</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 相当于 x / 2^k</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ 注意：右移是向下取整（丢弃小数部分）。</p><hr><h3 id="_3️⃣-清除最低位的-1" tabindex="-1"><a class="header-anchor" href="#_3️⃣-清除最低位的-1"><span>3️⃣ 清除最低位的 1</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>👉 这个操作会 <strong>把 x 的二进制中最右边的那个 1 变成 0</strong>。</p><p>举例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x = 1100 (12)</span></span>
<span class="line"><span>x-1 = 1011 (11)</span></span>
<span class="line"><span>x &amp; (x-1) = 1000 (8)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用途：</p><ul><li>统计 1 的个数</li><li>子集枚举</li><li>最低位分析（比如 countBits）</li></ul><hr><h3 id="_4️⃣-提取最低位的-1" tabindex="-1"><a class="header-anchor" href="#_4️⃣-提取最低位的-1"><span>4️⃣ 提取最低位的 1</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">lowbit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>举例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x = 1100 (12)</span></span>
<span class="line"><span>-x = 0100 (补码)</span></span>
<span class="line"><span>x &amp; (-x) = 0100 (4)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 这个结果就是「最低位的 1」对应的值。<br> 在 <strong>树状数组（Fenwick Tree）</strong>、<strong>子集状态压缩</strong>、<strong>位掩码 DP</strong> 中都非常常用。</p><hr><h3 id="_5️⃣-翻转某一位" tabindex="-1"><a class="header-anchor" href="#_5️⃣-翻转某一位"><span>5️⃣ 翻转某一位</span></a></h3><p>如果想把第 k 位翻转：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x = 1010</span></span>
<span class="line"><span>k = 1</span></span>
<span class="line"><span>→ 1010 ^ 0010 = 1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6️⃣-置-1-或-清-0-某一位" tabindex="-1"><a class="header-anchor" href="#_6️⃣-置-1-或-清-0-某一位"><span>6️⃣ 置 1 或 清 0 某一位</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 置 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 清 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ~</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7️⃣-判断某一位是否为-1" tabindex="-1"><a class="header-anchor" href="#_7️⃣-判断某一位是否为-1"><span>7️⃣ 判断某一位是否为 1</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_8️⃣-统计二进制中-1-的个数-手动版" tabindex="-1"><a class="header-anchor" href="#_8️⃣-统计二进制中-1-的个数-手动版"><span>8️⃣ 统计二进制中 1 的个数（手动版）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 每次消掉最低的 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度 O(1 的个数)，比逐位判断快多了。</p><hr><h3 id="_9️⃣-异或的特殊性质" tabindex="-1"><a class="header-anchor" href="#_9️⃣-异或的特殊性质"><span>9️⃣ 异或的特殊性质</span></a></h3><p>异或（<code>^</code>）是位运算中最有“魔法”的操作，常用于：</p><ul><li>去重</li><li>加密</li><li>不用额外空间交换变量</li></ul><p><strong>常见性质：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>a ^ 0 = a</span></span>
<span class="line"><span>a ^ a = 0</span></span>
<span class="line"><span>a ^ b ^ a = b   // 可交换、可抵消</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不用临时变量交换</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🔟-子集枚举技巧-超常用" tabindex="-1"><a class="header-anchor" href="#🔟-子集枚举技巧-超常用"><span>🔟 子集枚举技巧（超常用）</span></a></h3><p>在很多「集合 DP」或「子集和」问题中，用 bitmask 表示集合：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mask </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0b1011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 表示集合 {0,1,3}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mask</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (sub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mask) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toBinaryString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sub));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个循环能枚举出 mask 的所有 <strong>非空子集</strong>。</p><hr><h2 id="🧠-四、位运算与-dp-的结合-典型例子" tabindex="-1"><a class="header-anchor" href="#🧠-四、位运算与-dp-的结合-典型例子"><span>🧠 四、位运算与 DP 的结合（典型例子）</span></a></h2><p>在 <code>countBits</code> 题中：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示：</p><ul><li><code>i &gt;&gt; 1</code> 去掉最低位；</li><li><code>(i &amp; 1)</code> 判断最低位是不是 1；</li><li>所以 <code>i</code> 的 1 数量 = “i/2 的 1 数量 + 最低位是否为 1”。</li></ul><p>或者：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">dp[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dp[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示：</p><ul><li><code>i &amp; (i - 1)</code> 去掉最低位的 1；</li><li>所以只要在“少一个 1 的状态”上 +1。</li></ul><hr><h2 id="🧩-五、总结口诀" tabindex="-1"><a class="header-anchor" href="#🧩-五、总结口诀"><span>🧩 五、总结口诀</span></a></h2><table><thead><tr><th>功能</th><th>位运算技巧</th><th></th></tr></thead><tbody><tr><td>判断奇偶</td><td><code>x &amp; 1</code></td><td></td></tr><tr><td>乘除 2^k</td><td><code>x &lt;&lt; k</code>, <code>x &gt;&gt; k</code></td><td></td></tr><tr><td>清除最低位的 1</td><td><code>x &amp;= (x - 1)</code></td><td></td></tr><tr><td>提取最低位的 1</td><td><code>x &amp; -x</code></td><td></td></tr><tr><td>翻转第 k 位</td><td><code>x ^= (1 &lt;&lt; k)</code></td><td></td></tr><tr><td>置第 k 位为 1</td><td>\`x</td><td>= (1 &lt;&lt; k)\`</td></tr><tr><td>清第 k 位为 0</td><td><code>x &amp;= ~(1 &lt;&lt; k)</code></td><td></td></tr><tr><td>判断第 k 位</td><td><code>(x &gt;&gt; k) &amp; 1</code></td><td></td></tr></tbody></table>`,74)]))}const p=s(n,[["render",h]]),r=JSON.parse('{"path":"/posts/algorithm/2025-10-06-bit-operator-01-intro.html","title":"位运算入门介绍 bit-operator","lang":"zh-CN","frontmatter":{"title":"位运算入门介绍 bit-operator","date":"2025-10-06T00:00:00.000Z","categories":["Althgorim"],"tags":["althgorim","bit-operator"],"published":true,"description":"位运算 位运算（bitwise operations）是所有算法和底层逻辑的核心之一。 🧩 一、什么是位运算？ 计算机底层存储的所有数据都是二进制的 0 和 1。 位运算就是直接对这些二进制位（bit）进行操作的运算。 它的好处是： ⚡ 极快（比普通加减乘除还快） 💡 可以高效实现一些数学逻辑、掩码、集合、状态压缩、DP 等技巧 💪 很多算法题和...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/2025-10-06-bit-operator-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"位运算入门介绍 bit-operator"}],["meta",{"property":"og:description","content":"位运算 位运算（bitwise operations）是所有算法和底层逻辑的核心之一。 🧩 一、什么是位运算？ 计算机底层存储的所有数据都是二进制的 0 和 1。 位运算就是直接对这些二进制位（bit）进行操作的运算。 它的好处是： ⚡ 极快（比普通加减乘除还快） 💡 可以高效实现一些数学逻辑、掩码、集合、状态压缩、DP 等技巧 💪 很多算法题和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-06T05:26:27.000Z"}],["meta",{"property":"article:tag","content":"althgorim"}],["meta",{"property":"article:tag","content":"bit-operator"}],["meta",{"property":"article:published_time","content":"2025-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-06T05:26:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"位运算入门介绍 bit-operator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-06T05:26:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759728387000,"updatedTime":1759728387000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.26,"words":979},"filePathRelative":"posts/algorithm/2025-10-06-bit-operator-01-intro.md","localizedDate":"2025年10月6日","excerpt":"\\n<p>位运算（<strong>bitwise operations</strong>）是所有算法和底层逻辑的核心之一。</p>\\n<h2>🧩 一、什么是位运算？</h2>\\n<p>计算机底层存储的所有数据都是二进制的 <code>0</code> 和 <code>1</code>。<br>\\n<strong>位运算就是直接对这些二进制位（bit）进行操作的运算。</strong></p>\\n<p>它的好处是：</p>\\n<ul>\\n<li>⚡ 极快（比普通加减乘除还快）</li>\\n<li>💡 可以高效实现一些数学逻辑、掩码、集合、状态压缩、DP 等技巧</li>\\n<li>💪 很多算法题和面试题都用它（如 位计数、子集生成、奇偶判断、异或和）</li>\\n</ul>","autoDesc":true}');export{p as comp,r as data};
