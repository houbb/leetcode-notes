import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DBlQJIml.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="位运算专题" tabindex="-1"><a class="header-anchor" href="#位运算专题"><span>位运算专题</span></a></h1><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-intro" target="_blank" rel="noopener noreferrer">leetcode bit operator 位运算入门介绍</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.260 single-number-iii 力扣.260 只出现一次的数字III</a></p><h1 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h1><p>给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。</p><p>请你找出并返回那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。</p><p>示例 1：</p><p>输入：nums = [2,2,3,2]<br> 输出：3<br> 示例 2：</p><p>输入：nums = [0,1,0,1,0,1,99]<br> 输出：99</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 3 * 10^4</p><p>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</p><p>nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次</p><h1 id="v1-基本解法" tabindex="-1"><a class="header-anchor" href="#v1-基本解法"><span>v1-基本解法</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>通过 HashMap 记录每一个元素出现的次数，然后找到为1的。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 需要存储对应的历史数据</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 如果不是位运算这种技巧 那么使用 HashMap 最方便</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">countMap</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            countMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">countMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOrDefault</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 找到 values 为1 的数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> countMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entrySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5ms 26.25%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>效果比较差。</p><h1 id="v2-排序" tabindex="-1"><a class="header-anchor" href="#v2-排序"><span>v2-排序</span></a></h1><h2 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1"><span>思路</span></a></h2><p>数字排序，出现一次的下一个元素和当前元素一定不同。</p><h2 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 对数组进行排序</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 如果当前数字与下一个和下下个不同，说明该数字出现次数为 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不会执行到，防止编译器报错</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果-1" tabindex="-1"><a class="header-anchor" href="#效果-1"><span>效果</span></a></h2><p>3ms 39.66%</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>其实也是不错的解法。</p><h1 id="v3-位运算-能想到的版本" tabindex="-1"><a class="header-anchor" href="#v3-位运算-能想到的版本"><span>V3-位运算，能想到的版本</span></a></h1><h2 id="思路-2" tabindex="-1"><a class="header-anchor" href="#思路-2"><span>思路</span></a></h2><p>因为数组是 int 类型，所以位数一定是 32 位以内。</p><p>我们可以记录每个数字二进制每一位的个数累加起来，那么如果这个位置的个数是 3 的倍数，那么说明是出现了3次的数字，可以忽略。</p><p>如果不是 3 的倍数，说明一定是只出现了一次，则为我们要寻找的数字。</p><p>如果这个位是 0，本身就可以忽略。</p><p>分成两步：</p><p>1）累加每一位 1 的个数，用 <code>&amp;</code> 计算每一位是否为 1</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 0 1 1 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 11</span></span>
<span class="line"><span>0 0 0 1 = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望统计每一位1的数字，只需要右移即可。</p><p>2）找到不是 3 的倍数的位，用 <code>|</code> 位运算推出原来的数字。</p><p>1 1 0 1</p><p>然后左移计算原来的值。</p><h2 id="算法实现" tabindex="-1"><a class="header-anchor" href="#算法实现"><span>算法实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] bits </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 统计1的个数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // 这里如果希望获取每一位的是否为1，应该右移</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // 增加1的个数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                    bits[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bits[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 反推出这个数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bits[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // 左移反向复现原来的数字</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="v4-位运算别人家的" tabindex="-1"><a class="header-anchor" href="#v4-位运算别人家的"><span>v4-位运算别人家的</span></a></h1><p>想到使用位运算，但是没想到怎么用，但是这个很不实用，完全记不住。</p><p>说实在的 这个算法能理解的一般是搞硬件电路的吧。</p><p>不然谁天天记这个。</p><h2 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ones </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> twos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 更新 twos 和 ones</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        ones </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (ones </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ~</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">twos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        twos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (twos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ~</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ones</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ones 中的数字就是只出现一次的数字</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果-2" tabindex="-1"><a class="header-anchor" href="#效果-2"><span>效果</span></a></h2><p>0ms 100%</p><p>效果拔群</p><h2 id="解释一下" tabindex="-1"><a class="header-anchor" href="#解释一下"><span>解释一下</span></a></h2><p>这个解法使用了两个变量 <code>ones</code> 和 <code>twos</code> 来追踪数组中每个数字的出现次数，并通过位运算来有效地找出那个只出现一次的数字。</p><p>关键在于如何利用异或运算（^）和按位与运算（&amp;）来控制数字出现的次数，并最终过滤掉出现三次的数字。</p><h3 id="问题回顾" tabindex="-1"><a class="header-anchor" href="#问题回顾"><span>问题回顾</span></a></h3><p>题目要求在一个数组中找到那个只出现一次的数字，其他所有数字都恰好出现三次。</p><p>你不能使用额外的空间来存储频率（例如哈希表），也要求时间复杂度为 O(n)，空间复杂度为 O(1)。</p><h3 id="解法思路" tabindex="-1"><a class="header-anchor" href="#解法思路"><span>解法思路</span></a></h3><p><strong>核心思路</strong>：</p><ul><li><p>使用两个变量 <code>ones</code> 和 <code>twos</code> 来分别记录每个数字在数组中出现次数的不同阶段：<code>ones</code> 记录出现次数为 1 的位，<code>twos</code> 记录出现次数为 2 的位。</p></li><li><p>通过按位运算（异或和按位与），我们可以把出现次数为 3 的数字从 <code>ones</code> 和 <code>twos</code> 中移除，最终 <code>ones</code> 中只剩下那个出现一次的数字。</p></li></ul><h3 id="位运算的作用" tabindex="-1"><a class="header-anchor" href="#位运算的作用"><span>位运算的作用</span></a></h3><h4 id="异或-运算" tabindex="-1"><a class="header-anchor" href="#异或-运算"><span>异或（^）运算：</span></a></h4><ul><li><p><strong>异或的基本特性</strong>：</p><ul><li><code>a ^ a = 0</code>（相同的数异或结果为 0）</li><li><code>a ^ 0 = a</code>（任何数与 0 异或结果是它自己）</li><li>异或是交换律和结合律的：<code>a ^ b ^ c = a ^ c ^ b</code></li></ul><p>因此，<code>ones ^ num</code> 的作用就是当数字 <code>num</code> 在 <code>ones</code> 中已经出现过一次时，它将从 <code>ones</code> 中去除（因为 <code>a ^ a = 0</code>），如果 <code>num</code> 是第一次出现，它将被添加到 <code>ones</code>。</p></li></ul><h4 id="按位与-运算" tabindex="-1"><a class="header-anchor" href="#按位与-运算"><span>按位与（&amp;）运算：</span></a></h4><ul><li><p><code>&amp;</code> 运算符用于判断某些位是否为 1。如果位是 1，则保留，否则清除。</p></li><li><p>我们用 <code>~twos</code> 和 <code>~ones</code> 来清除掉已经在 <code>twos</code> 或 <code>ones</code> 中出现过的位。</p></li></ul><h3 id="步骤解析" tabindex="-1"><a class="header-anchor" href="#步骤解析"><span>步骤解析</span></a></h3><ol><li>初始化：<code>int ones = 0, twos = 0;</code></li></ol><ul><li><code>ones</code> 和 <code>twos</code> 分别用来记录出现次数为 1 和 2 的位。初始化为 0。</li></ul><ol start="2"><li>更新 <code>ones</code>：<code>ones = (ones ^ num) &amp; ~twos;</code></li></ol><ul><li><strong>异或操作</strong>：<code>ones ^ num</code> 会翻转 <code>ones</code> 中与 <code>num</code> 对应的位。</li></ul><p>如果该位是 0，则变成 1；如果该位是 1，则变成 0。也就是说，这一步会更新 <code>ones</code> 中的值，记录哪些数字出现过一次。</p><ul><li><strong>按位与操作</strong>：<code>&amp; ~twos</code> 保证 <code>ones</code> 中的位不会受到那些已经出现两次的数字的影响。</li></ul><p><code>twos</code> 中的 1 表示某个位已经出现了两次，因此 <code>~twos</code> 会把该位清零，确保 <code>ones</code> 中那些已出现两次的位不会被设置为 1。</p><p>简单来说：这一步操作确保只有那些只出现一次的数字保留在 <code>ones</code> 中，出现三次的数字会被排除掉。</p><ol start="3"><li>更新 <code>twos</code>：<code>twos = (twos ^ num) &amp; ~ones;</code></li></ol><ul><li><p><strong>异或操作</strong>：<code>twos ^ num</code> 会翻转 <code>twos</code> 中与 <code>num</code> 对应的位。如果 <code>num</code> 出现过一次，就将该位设置为 1。如果 <code>num</code> 出现过两次，就将该位设置为 0。</p></li><li><p><strong>按位与操作</strong>：<code>&amp; ~ones</code> 保证 <code>twos</code> 中的位不会受到那些已经在 <code>ones</code> 中出现过一次的数字的影响。如果某个位已经在 <code>ones</code> 中设置为 1，说明该数字已经出现过一次，我们就不希望将其计入 <code>twos</code> 中。</p></li></ul><p>简单来说：这一步操作确保只有那些出现两次的数字的位会出现在 <code>twos</code> 中，出现三次的数字会被排除掉。</p><ol start="4"><li>返回结果：<code>return ones;</code></li></ol><ul><li>最终，<code>ones</code> 中会存储那个只出现一次的数字，因为它没有被 <code>twos</code> 中的逻辑清除。</li></ul><p>出现三次的数字会在 <code>ones</code> 和 <code>twos</code> 中都被清除，最终只剩下那个只出现一次的数字。</p><h2 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子"><span>举个例子</span></a></h2><p>假设输入数组是 <code>[2, 2, 3, 2, 3, 3, 4]</code>。</p><ul><li><strong>初始化</strong>：<code>ones = 0, twos = 0</code></li><li>第 1 个数字 <code>2</code>： <ul><li><code>ones = (0 ^ 2) &amp; ~0 = 2 &amp; ~0 = 2</code></li><li><code>twos = (0 ^ 2) &amp; ~2 = 2 &amp; ~2 = 0</code></li></ul></li><li>第 2 个数字 <code>2</code>： <ul><li><code>ones = (2 ^ 2) &amp; ~0 = 0 &amp; ~0 = 0</code></li><li><code>twos = (0 ^ 2) &amp; ~0 = 2 &amp; ~0 = 2</code></li></ul></li><li>第 3 个数字 <code>3</code>： <ul><li><code>ones = (0 ^ 3) &amp; ~2 = 3 &amp; ~2 = 1</code></li><li><code>twos = (2 ^ 3) &amp; ~1 = 1 &amp; ~1 = 0</code></li></ul></li><li>第 4 个数字 <code>2</code>： <ul><li><code>ones = (1 ^ 2) &amp; ~0 = 3 &amp; ~0 = 3</code></li><li><code>twos = (0 ^ 2) &amp; ~3 = 2 &amp; ~3 = 0</code></li></ul></li><li>第 5 个数字 <code>3</code>： <ul><li><code>ones = (3 ^ 3) &amp; ~0 = 0 &amp; ~0 = 0</code></li><li><code>twos = (0 ^ 3) &amp; ~0 = 3 &amp; ~0 = 3</code></li></ul></li><li>第 6 个数字 <code>3</code>： <ul><li><code>ones = (0 ^ 3) &amp; ~3 = 3 &amp; ~3 = 0</code></li><li><code>twos = (3 ^ 3) &amp; ~0 = 0 &amp; ~0 = 0</code></li></ul></li><li>第 7 个数字 <code>4</code>： <ul><li><code>ones = (0 ^ 4) &amp; ~0 = 4 &amp; ~0 = 4</code></li><li><code>twos = (0 ^ 4) &amp; ~4 = 0 &amp; ~4 = 0</code></li></ul></li></ul><p>最终，<code>ones = 4</code>，<code>twos = 0</code>，所以返回 <code>4</code>，即那个只出现一次的数字。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>位运算的核心思想</strong>：通过 <code>ones</code> 和 <code>twos</code> 来追踪每个数字出现的次数。</li></ul><p>利用异或（^）和按位与（&amp;）操作，确保每个数字的出现次数正确地记录下来，最终留下只出现一次的数字。</p><ul><li>这个解法非常高效，能够在 O(n) 时间复杂度和 O(1) 空间复杂度下完成，适用于大规模数据。</li></ul><h2 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h2><p>这个有一个要求 就是我们必须要能想到这个异或的计算技巧。</p>`,98)]))}const d=s(l,[["render",t]]),r=JSON.parse('{"path":"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html","title":"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算","lang":"zh-CN","frontmatter":{"title":"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","bit-operator","sf"],"published":true,"description":"位运算专题 Java Bit Operation-位运算基本概念介绍 Java Bit Operation-位运算类型转换 leetcode bit operator 位运算入门介绍 leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 leetcode 002-leetcode.137 sin...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算"}],["meta",{"property":"og:description","content":"位运算专题 Java Bit Operation-位运算基本概念介绍 Java Bit Operation-位运算类型转换 leetcode bit operator 位运算入门介绍 leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 leetcode 002-leetcode.137 sin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"bit-operator"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":7.66,"words":2298},"filePathRelative":"posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Bit Operation-位运算基本概念介绍</a></p>\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Bit Operation-位运算类型转换</a></p>","autoDesc":true}');export{d as comp,r as data};
