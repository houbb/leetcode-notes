import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-BEgvPj1K.js";const h={};function l(e,s){return n(),t("div",null,s[0]||(s[0]=[a(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="sliding-window-滑动窗口" tabindex="-1"><a class="header-anchor" href="#sliding-window-滑动窗口"><span>Sliding Window 滑动窗口</span></a></h1><p>滑动窗口（Sliding Window）是一种常用于数组、字符串等线性数据结构中的算法技巧，特别适用于解决<strong>子区间</strong>或<strong>子串</strong>相关的问题，比如「最长子串」、「最大和子数组」、「包含某种元素的最小子数组」等。</p><hr><h2 id="🧠-核心思想" tabindex="-1"><a class="header-anchor" href="#🧠-核心思想"><span>🧠 核心思想</span></a></h2><p>滑动窗口的本质就是<strong>两个指针形成一个窗口</strong>，然后在这个窗口内进行操作：</p><ul><li><strong>左指针</strong>表示窗口的起始位置</li><li><strong>右指针</strong>表示窗口的结束位置（通常是开放的，即不包括右边界）</li></ul><p>通过不断移动左右指针，动态维护这个窗口的状态，从而达到：</p><ul><li>减少不必要的重复计算</li><li>降低时间复杂度</li></ul><hr><h2 id="📦-常见类型" tabindex="-1"><a class="header-anchor" href="#📦-常见类型"><span>📦 常见类型</span></a></h2><h3 id="_1-固定长度窗口" tabindex="-1"><a class="header-anchor" href="#_1-固定长度窗口"><span>1. <strong>固定长度窗口</strong></span></a></h3><p>适用于要求窗口长度固定的问题。</p><blockquote><p>例题：求一个数组中所有长度为 <code>k</code> 的子数组的最大和。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxSum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> max </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        max </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(max, sum);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-动态长度窗口-也叫可变窗口" tabindex="-1"><a class="header-anchor" href="#_2-动态长度窗口-也叫可变窗口"><span>2. <strong>动态长度窗口（也叫可变窗口）</strong></span></a></h3><p>适用于窗口长度不确定，但要满足某种<strong>条件</strong>（比如：包含所有字符、和不超过某个值等）。</p><blockquote><p>例题：最小覆盖子串（LeetCode 76）</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> minWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> t) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] need </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">128</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toCharArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) need[c]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> start </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> minLen </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (need[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(right++)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> minLen) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                minLen </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                start </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">need[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(left++)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> minLen </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(start, start </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> minLen);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧩-适用场景" tabindex="-1"><a class="header-anchor" href="#🧩-适用场景"><span>🧩 适用场景</span></a></h2><p>滑动窗口特别适合这些题型：</p><table><thead><tr><th>题型</th><th>举例</th></tr></thead><tbody><tr><td>固定长度的子数组</td><td>最大/最小和、平均值</td></tr><tr><td>动态长度子数组</td><td>最小长度满足条件的区间</td></tr><tr><td>子串问题</td><td>最长无重复字符子串、最小覆盖子串</td></tr><tr><td>数量统计类</td><td>至多/至少包含 K 个不同字符的子串</td></tr></tbody></table><hr><h2 id="⏱️-时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#⏱️-时间复杂度分析"><span>⏱️ 时间复杂度分析</span></a></h2><p>滑动窗口的优点之一就是：</p><ul><li><strong>每个元素最多进出窗口一次</strong> ⇒ 整体复杂度为 <strong>O(n)</strong>，比暴力解法的 O(n²) 更高效。</li></ul><hr><h2 id="🛠️-实战技巧" tabindex="-1"><a class="header-anchor" href="#🛠️-实战技巧"><span>🛠️ 实战技巧</span></a></h2><ol><li><p><strong>窗口中需要统计什么内容？</strong></p><ul><li>比如：元素个数、元素频率、和等</li></ul></li><li><p><strong>什么时候扩展窗口（移动右指针）？</strong></p><ul><li>一般是为了让窗口「满足条件」</li></ul></li><li><p><strong>什么时候收缩窗口（移动左指针）？</strong></p><ul><li>一般是为了让窗口「不再满足条件」后恢复到合法状态</li></ul></li><li><p><strong>如何判断窗口是否满足条件？</strong></p><ul><li>常用的变量如：<code>valid</code>，<code>count</code>，<code>match</code> 等</li></ul></li></ol><h1 id="滑动窗口看起来和双指针有些类似-二者的区别与联系" tabindex="-1"><a class="header-anchor" href="#滑动窗口看起来和双指针有些类似-二者的区别与联系"><span>滑动窗口看起来和双指针有些类似，二者的区别与联系</span></a></h1><p>滑动窗口（Sliding Window）和双指针（Two Pointers）确实非常相似，很多人初学时容易混淆。</p><p>但它们其实是<strong>一对“重叠又有区别”的技巧</strong>，可以说：</p><blockquote><p><strong>滑动窗口 是双指针的一种特化</strong>。</p></blockquote><hr><h2 id="🧭-二者的联系" tabindex="-1"><a class="header-anchor" href="#🧭-二者的联系"><span>🧭 二者的联系</span></a></h2><table><thead><tr><th>类别</th><th>滑动窗口 &amp; 双指针</th></tr></thead><tbody><tr><td>✅ 本质</td><td>都是用两个指针遍历数组（或字符串）</td></tr><tr><td>✅ 目的</td><td>减少暴力遍历的冗余计算，提升效率</td></tr><tr><td>✅ 复杂度</td><td>通常是 O(n)，而非 O(n²)</td></tr><tr><td>✅ 使用结构</td><td>线性结构：数组、字符串、链表等</td></tr></tbody></table><hr><h2 id="🔍-核心区别对比" tabindex="-1"><a class="header-anchor" href="#🔍-核心区别对比"><span>🔍 核心区别对比</span></a></h2><table><thead><tr><th>对比项</th><th>滑动窗口</th><th>双指针</th></tr></thead><tbody><tr><td>📌 关注点</td><td><strong>窗口内的内容</strong>（通常是连续子数组/子串）</td><td><strong>两个位置的关系</strong>（可以连续，也可以不连续）</td></tr><tr><td>📐 应用场景</td><td>统计窗口内的信息（子数组和、字符频率、是否满足条件）</td><td>排序数组中的搜索、配对、快慢指针类问题</td></tr><tr><td>📊 窗口长度</td><td><strong>通常变化的</strong>（动态窗口）、有时固定</td><td><strong>不强调窗口</strong>，强调两个点</td></tr><tr><td>↔️ 移动方式</td><td>一般是 <code>right</code> 先动，再根据条件 <code>left</code> 动</td><td>两个指针可以一起动，也可以独立移动</td></tr><tr><td>💡 常配合结构</td><td>频率表、哈希表、前缀和等</td><td>不一定，有时只是比较值、移动位置</td></tr></tbody></table><h2 id="🧠-总结口诀" tabindex="-1"><a class="header-anchor" href="#🧠-总结口诀"><span>🧠 总结口诀</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>滑动窗口：用来统计连续区间的状态（子串、子数组等）</span></span>
<span class="line"><span>双指针：用来比较两个位置的值或找某种“配对”关系</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-简单区分建议" tabindex="-1"><a class="header-anchor" href="#✅-简单区分建议"><span>✅ 简单区分建议：</span></a></h3><table><thead><tr><th>你要做的事</th><th>用</th></tr></thead><tbody><tr><td>子数组/子串统计、满足某种限制、最大最小长度等</td><td>滑动窗口</td></tr><tr><td>两端收缩查找、元素比较、链表操作等</td><td>双指针</td></tr></tbody></table><hr><h2 id="🧪-如果你还在纠结-可以记住这三点" tabindex="-1"><a class="header-anchor" href="#🧪-如果你还在纠结-可以记住这三点"><span>🧪 如果你还在纠结，可以记住这三点：</span></a></h2><ol><li><strong>滑动窗口一般处理连续的一段区间</strong></li><li><strong>双指针处理两个独立位置的值/关系</strong></li><li><strong>滑动窗口可以看作是“受控的”双指针</strong></li></ol><h1 id="给出滑动窗口的经典题目-一简单-2中等-1困难" tabindex="-1"><a class="header-anchor" href="#给出滑动窗口的经典题目-一简单-2中等-1困难"><span>给出滑动窗口的经典题目，一简单，2中等，1困难</span></a></h1><table><thead><tr><th>难度</th><th>题目编号 &amp; 名称</th><th>链接</th><th>类型</th></tr></thead><tbody><tr><td>简单</td><td>643. 子数组最大平均数 I</td><td><a href="https://leetcode.cn/problems/maximum-average-subarray-i/" target="_blank" rel="noopener noreferrer">力扣链接</a></td><td>固定长度滑窗</td></tr><tr><td>中等</td><td>3. 无重复字符的最长子串</td><td><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">力扣链接</a></td><td>动态窗口 + 去重</td></tr><tr><td>中等</td><td>438. 找到字符串中所有字母异位词</td><td><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener noreferrer">力扣链接</a></td><td>动态窗口 + 频率统计</td></tr><tr><td>困难</td><td>76. 最小覆盖子串</td><td><a href="https://leetcode.cn/problems/minimum-window-substring/" target="_blank" rel="noopener noreferrer">力扣链接</a></td><td>动态窗口 + 最小长度</td></tr></tbody></table><hr><h1 id="数组基本知识-技巧" tabindex="-1"><a class="header-anchor" href="#数组基本知识-技巧"><span>数组基本知识+技巧</span></a></h1><table><thead><tr><th>分类</th><th>代表技巧</th></tr></thead><tbody><tr><td>遍历类</td><td>遍历、双指针、滑窗</td></tr><tr><td>前缀/差分类</td><td>前缀和、差分、后缀数组</td></tr><tr><td>查找类</td><td>二分、哈希、离散化</td></tr><tr><td>空间/状态优化</td><td>状压、滚动数组、差分压缩</td></tr><tr><td>排序/归并类</td><td>排序、归并逆序对、树状数组、线段树</td></tr><tr><td>子数组/序列</td><td>动规、中心扩展、单调栈</td></tr><tr><td>矩阵类</td><td>二维差分、DFS/BFS、旋转模拟</td></tr><tr><td>特殊技巧</td><td>快速幂、滚动哈希、模拟题技巧</td></tr></tbody></table><h2 id="🎯-常见遍历技巧-力扣题目对照表" tabindex="-1"><a class="header-anchor" href="#🎯-常见遍历技巧-力扣题目对照表"><span>🎯 常见遍历技巧 + 力扣题目对照表</span></a></h2><table><thead><tr><th>技巧</th><th>力扣题目</th><th>说明</th></tr></thead><tbody><tr><td>基础遍历</td><td>27.移除元素</td><td>直接遍历+判断</td></tr><tr><td>快慢指针</td><td>26. 删除重复项</td><td>原地去重</td></tr><tr><td>左右夹逼</td><td>167.两数之和 II</td><td>排序+夹逼</td></tr><tr><td>滑动窗口</td><td>209. 长度最小子数组</td><td>动态控制窗口</td></tr><tr><td>子数组枚举</td><td>560. 和为K的子数组</td><td>前缀和优化</td></tr><tr><td>子序列枚举</td><td>491. 递增子序列</td><td>回溯</td></tr><tr><td>倒序遍历</td><td>198. 打家劫舍</td><td>动态规划</td></tr><tr><td>规则模拟</td><td>54. 螺旋矩阵</td><td>控制方向循环遍历</td></tr></tbody></table>`,62)]))}const r=i(h,[["render",l]]),k=JSON.parse('{"path":"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html","title":"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍","lang":"zh-CN","frontmatter":{"title":"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","topics","leetcode","array","traverse","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"traverse"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":5.94,"words":1782},"filePathRelative":"posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{r as comp,k as data};
