import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as n}from"./app-DqjL2Wvd.js";const o={};function l(d,e){return n(),r("div",null,e[0]||(e[0]=[a('<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇"><span>基础篇</span></a></h1><p>数组-矩阵</p><p>字符串-字符串匹配</p><p>排序：计数+桶+基数</p><p>模拟</p><p>枚举</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下力扣基础之字符串" tabindex="-1"><a class="header-anchor" href="#详细介绍一下力扣基础之字符串"><span>详细介绍一下力扣基础之字符串</span></a></h2><p>我们来系统讲解力扣（LeetCode）中关于<strong>基础算法技巧之字符串（String）</strong>，包括：</p><hr><h2 id="一、字符串是什么" tabindex="-1"><a class="header-anchor" href="#一、字符串是什么"><span>一、字符串是什么？</span></a></h2><p>在编程中，<strong>字符串 = 字符的序列</strong>，例如 <code>&quot;abc&quot;</code>、<code>&quot;leetcode&quot;</code>，你可以把它看作一个字符数组。</p><ul><li>Java：<code>String</code>, <code>StringBuilder</code>, <code>char[]</code></li><li>Python：<code>str</code>, 可用切片操作</li><li>C++：<code>string</code>, <code>char[]</code></li></ul><hr><h2 id="二、力扣中字符串题的常见考点分类" tabindex="-1"><a class="header-anchor" href="#二、力扣中字符串题的常见考点分类"><span>二、力扣中字符串题的常见考点分类</span></a></h2><p>我们可以把字符串题大致分为以下几类：</p><hr><h3 id="_1-✅-字符串基础操作类" tabindex="-1"><a class="header-anchor" href="#_1-✅-字符串基础操作类"><span>1. ✅ <strong>字符串基础操作类</strong></span></a></h3><p>主要考察字符串遍历、拼接、反转、查找等基本操作。</p><h4 id="📌-常见操作" tabindex="-1"><a class="header-anchor" href="#📌-常见操作"><span>📌 常见操作：</span></a></h4><ul><li>遍历字符：<code>for(char c : s.toCharArray())</code></li><li>拼接字符串：用 <code>StringBuilder</code></li><li>截取子串：<code>s.substring(i, j)</code></li><li>比较字符串：<code>equals()</code> 而不是 <code>==</code></li></ul><h4 id="🎯-典型题目" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/reverse-string/" target="_blank" rel="noopener noreferrer">344. 反转字符串</a></li><li><a href="https://leetcode.cn/problems/reverse-string-ii/" target="_blank" rel="noopener noreferrer">541. 反转字符串 II</a></li><li><a href="https://leetcode.cn/problems/length-of-last-word/" target="_blank" rel="noopener noreferrer">58. 最后一个单词的长度</a></li></ul><hr><h3 id="_2-✅-双指针技巧类" tabindex="-1"><a class="header-anchor" href="#_2-✅-双指针技巧类"><span>2. ✅ <strong>双指针技巧类</strong></span></a></h3><p>用两个指针在字符串上滑动、查找子串、压缩等。</p><h4 id="📌-常见问题" tabindex="-1"><a class="header-anchor" href="#📌-常见问题"><span>📌 常见问题：</span></a></h4><ul><li>找最长无重复子串</li><li>判断是否是回文</li><li>最小覆盖子串</li></ul><h4 id="🎯-典型题目-1" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目-1"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">3. 无重复字符的最长子串</a></li><li><a href="https://leetcode.cn/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">5. 最长回文子串</a></li><li><a href="https://leetcode.cn/problems/minimum-window-substring/" target="_blank" rel="noopener noreferrer">76. 最小覆盖子串</a></li></ul><hr><h3 id="_3-✅-模拟类-字符串变换" tabindex="-1"><a class="header-anchor" href="#_3-✅-模拟类-字符串变换"><span>3. ✅ <strong>模拟类（字符串变换）</strong></span></a></h3><p>根据题目描述“手搓”实现字符串变化过程。</p><h4 id="📌-常见场景" tabindex="-1"><a class="header-anchor" href="#📌-常见场景"><span>📌 常见场景：</span></a></h4><ul><li>加密解密（如 Zigzag）</li><li>自定义解析（如表达式、路径）</li><li>移除/插入字符、编辑操作</li></ul><h4 id="🎯-典型题目-2" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目-2"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/zigzag-conversion/" target="_blank" rel="noopener noreferrer">6. Z 字形变换</a></li><li><a href="https://leetcode.cn/problems/reverse-words-in-a-string/" target="_blank" rel="noopener noreferrer">151. 反转字符串中的单词</a></li><li><a href="https://leetcode.cn/problems/decode-string/" target="_blank" rel="noopener noreferrer">394. 字符串解码</a></li></ul><hr><h3 id="_4-✅-哈希-频次数组类" tabindex="-1"><a class="header-anchor" href="#_4-✅-哈希-频次数组类"><span>4. ✅ <strong>哈希 / 频次数组类</strong></span></a></h3><p>利用字符的频率、映射表等快速判断两个字符串之间的关系。</p><h4 id="📌-常见应用" tabindex="-1"><a class="header-anchor" href="#📌-常见应用"><span>📌 常见应用：</span></a></h4><ul><li>判断两个字符串是否是变位词（异位词）</li><li>字母统计、字符比较</li><li>滑动窗口配合哈希表</li></ul><h4 id="🎯-典型题目-3" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目-3"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242. 有效的字母异位词</a></li><li><a href="https://leetcode.cn/problems/group-anagrams/" target="_blank" rel="noopener noreferrer">49. 字母异位词分组</a></li><li><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener noreferrer">438. 找到字符串中所有字母异位词</a></li></ul><hr><h3 id="_5-✅-kmp-rabin-karp-等高级匹配算法" tabindex="-1"><a class="header-anchor" href="#_5-✅-kmp-rabin-karp-等高级匹配算法"><span>5. ✅ <strong>KMP / Rabin-Karp 等高级匹配算法</strong></span></a></h3><p>用于高效查找子串，面试中常用于“字符串匹配引擎”的底层实现。</p><h4 id="🎯-典型题目-4" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目-4"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/" target="_blank" rel="noopener noreferrer">28. 找出字符串中第一个匹配项的下标</a></li><li><a href="https://leetcode.cn/problems/repeated-string-match/" target="_blank" rel="noopener noreferrer">686. 重复叠加字符串匹配</a></li></ul><blockquote><p>初学者建议掌握 KMP 理解原理、但不强求记住背板。</p></blockquote><hr><h3 id="_6-✅-动态规划类" tabindex="-1"><a class="header-anchor" href="#_6-✅-动态规划类"><span>6. ✅ <strong>动态规划类</strong></span></a></h3><p>通常出现在回文子串、编辑距离等需要“重复子问题”的场景。</p><h4 id="🎯-典型题目-5" tabindex="-1"><a class="header-anchor" href="#🎯-典型题目-5"><span>🎯 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">5. 最长回文子串（DP解法）</a></li><li><a href="https://leetcode.cn/problems/edit-distance/" target="_blank" rel="noopener noreferrer">72. 编辑距离</a></li><li><a href="https://leetcode.cn/problems/distinct-subsequences/" target="_blank" rel="noopener noreferrer">115. 不同的子序列</a></li></ul><hr><h2 id="三、字符串常用操作总结-java-示例" tabindex="-1"><a class="header-anchor" href="#三、字符串常用操作总结-java-示例"><span>三、字符串常用操作总结（Java 示例）</span></a></h2><table><thead><tr><th>操作</th><th>示例</th></tr></thead><tbody><tr><td>获取长度</td><td><code>s.length()</code></td></tr><tr><td>获取字符</td><td><code>s.charAt(i)</code></td></tr><tr><td>截取子串</td><td><code>s.substring(i, j)</code></td></tr><tr><td>转为数组</td><td><code>char[] cs = s.toCharArray()</code></td></tr><tr><td>替换字符</td><td><code>s.replace(&quot;a&quot;, &quot;b&quot;)</code></td></tr><tr><td>去除前后空格</td><td><code>s.trim()</code></td></tr><tr><td>分割字符串</td><td><code>s.split(&quot; &quot;)</code></td></tr></tbody></table><hr><h2 id="四、字符串题常见技巧总结" tabindex="-1"><a class="header-anchor" href="#四、字符串题常见技巧总结"><span>四、字符串题常见技巧总结</span></a></h2><table><thead><tr><th>技巧</th><th>用法</th></tr></thead><tbody><tr><td>双指针</td><td>左右移动处理子串、回文</td></tr><tr><td>滑动窗口</td><td>固定窗口 / 动态窗口统计</td></tr><tr><td>字符哈希表</td><td>判断是否匹配、记录频率</td></tr><tr><td>前缀和 / 差分</td><td>处理频率类题目</td></tr><tr><td>栈</td><td>处理嵌套字符串（如解码）</td></tr></tbody></table><hr><h2 id="五、刷题推荐路线-基础-→-提升" tabindex="-1"><a class="header-anchor" href="#五、刷题推荐路线-基础-→-提升"><span>五、刷题推荐路线（基础 → 提升）</span></a></h2><h3 id="✅-入门-操作类" tabindex="-1"><a class="header-anchor" href="#✅-入门-操作类"><span>✅ 入门（操作类）：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/reverse-string/" target="_blank" rel="noopener noreferrer">344. 反转字符串</a></li><li><a href="https://leetcode.cn/problems/length-of-last-word/" target="_blank" rel="noopener noreferrer">58. 最后一个单词的长度</a></li><li><a href="https://leetcode.cn/problems/longest-common-prefix/" target="_blank" rel="noopener noreferrer">14. 最长公共前缀</a></li></ul><h3 id="✅-进阶-滑动-哈希" tabindex="-1"><a class="header-anchor" href="#✅-进阶-滑动-哈希"><span>✅ 进阶（滑动/哈希）：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">3. 无重复字符的最长子串</a></li><li><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242. 有效的字母异位词</a></li><li><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener noreferrer">438. 找到字符串中所有字母异位词</a></li></ul><h3 id="✅-高阶-模拟-动态规划" tabindex="-1"><a class="header-anchor" href="#✅-高阶-模拟-动态规划"><span>✅ 高阶（模拟 / 动态规划）：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">5. 最长回文子串</a></li><li><a href="https://leetcode.cn/problems/decode-string/" target="_blank" rel="noopener noreferrer">394. 字符串解码</a></li><li><a href="https://leetcode.cn/problems/edit-distance/" target="_blank" rel="noopener noreferrer">72. 编辑距离</a></li></ul><hr><h2 id="六、常见面试问题" tabindex="-1"><a class="header-anchor" href="#六、常见面试问题"><span>六、常见面试问题</span></a></h2><table><thead><tr><th>问题</th><th>技巧</th></tr></thead><tbody><tr><td>判断回文字符串</td><td>双指针</td></tr><tr><td>判断两个字符串是否是变位词</td><td>频次数组或排序</td></tr><tr><td>字符串中第一个不重复的字符</td><td>哈希表</td></tr><tr><td>字符串压缩或解码</td><td>栈 / 模拟</td></tr></tbody></table><hr><h2 id="七、小结" tabindex="-1"><a class="header-anchor" href="#七、小结"><span>七、小结</span></a></h2><table><thead><tr><th>字符串考点</th><th>说明</th></tr></thead><tbody><tr><td>字符操作</td><td>字符遍历、拼接、截取</td></tr><tr><td>子串分析</td><td>子串枚举、匹配、滑窗</td></tr><tr><td>高频统计</td><td>哈希映射、频次数组</td></tr><tr><td>模拟执行</td><td>解码、编辑、压缩</td></tr><tr><td>回文分析</td><td>双指针、动态规划</td></tr></tbody></table><hr><p>如果你想，我可以：</p><ul><li>给你推荐一套刷题计划（含每道题思路）</li><li>对某一道字符串题详细讲解 + 代码演示</li><li>讲某一类技巧（如回文、KMP、哈希）专项训练</li></ul>',87)]))}const h=t(o,[["render",l]]),p=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html","title":"leetcode 基础篇专题之字符串 string 01-入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode 基础篇专题之字符串 string 01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","topics","leetcode","string","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 基础篇专题之字符串 string 01-入门介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T07:11:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"string"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T07:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 基础篇专题之字符串 string 01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T07:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755501103000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":4.66,"words":1397},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{h as comp,p as data};
