import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-D2ZdncbP.js";const n={};function l(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="lc700-二叉搜索树中的搜索-search-in-a-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#lc700-二叉搜索树中的搜索-search-in-a-binary-search-tree"><span>LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree</span></a></h1><p>给定二叉搜索树（BST）的根节点 root 和一个整数值 val。</p><p>你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。</p><p>示例 1:</p><figure><img src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>输入：root = [4,2,7,1,3], val = 2<br> 输出：[2,1,3]</p><p>示例 2:</p><figure><img src="https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><p>输入：root = [4,2,7,1,3], val = 5<br> 输出：[]</p><p>提示：</p><p>树中节点数在 [1, 5000] 范围内<br> 1 &lt;= Node.val &lt;= 10^7<br> root 是二叉搜索树<br> 1 &lt;= val &lt;= 10^7</p><h1 id="v1-bst" tabindex="-1"><a class="header-anchor" href="#v1-bst"><span>v1-BST</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>因为 BST 的特性，和二分法差不多。</p><p>实现也很简单。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> searchBST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> val) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 递归即可</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }       </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> val) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(val </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 看右边</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> searchBST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> val)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> searchBST</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> val)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p>0ms 100%</p><h2 id="反思" tabindex="-1"><a class="header-anchor" href="#反思"><span>反思</span></a></h2><p>没有太大区分度。</p><p>BST 本身这个数据结构还是比较重要的。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,23)]))}const k=i(n,[["render",l]]),d=JSON.parse('{"path":"/posts/leetcode/leetcode-75/2025-09-30-binary-tree-09-LC700-search-in-a-binary-search-tree.html","title":"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree","lang":"zh-CN","frontmatter":{"title":"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree","date":"2025-09-30T00:00:00.000Z","categories":["Leetcode-75"],"tags":["leetcode","Leetcode-75","binary-tree","bst"],"published":true,"description":"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree 给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 示例 1: 11 输入：root = [4,2,7,1,3], val ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/leetcode-75/2025-09-30-binary-tree-09-LC700-search-in-a-binary-search-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree"}],["meta",{"property":"og:description","content":"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree 给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 示例 1: 11 输入：root = [4,2,7,1,3], val ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T09:51:06.000Z"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"Leetcode-75"}],["meta",{"property":"article:tag","content":"binary-tree"}],["meta",{"property":"article:tag","content":"bst"}],["meta",{"property":"article:published_time","content":"2025-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-30T09:51:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LC700. 二叉搜索树中的搜索 search-in-a-binary-search-tree\\",\\"image\\":[\\"https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg\\",\\"https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg\\"],\\"datePublished\\":\\"2025-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-30T09:51:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759225866000,"updatedTime":1759225866000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":0.9,"words":271},"filePathRelative":"posts/leetcode/leetcode-75/2025-09-30-binary-tree-09-LC700-search-in-a-binary-search-tree.md","localizedDate":"2025年9月30日","excerpt":"\\n<p>给定二叉搜索树（BST）的根节点 root 和一个整数值 val。</p>\\n<p>你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。</p>\\n<p>示例 1:</p>\\n<figure><img src=\\"https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg\\" alt=\\"1\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1</figcaption></figure>\\n<p>输入：root = [4,2,7,1,3], val = 2<br>\\n输出：[2,1,3]</p>","autoDesc":true}');export{k as comp,d as data};
