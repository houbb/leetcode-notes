import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as p}from"./app-DNaAVvYv.js";const o={};function n(s,e){return p(),a("div",null,e[0]||(e[0]=[r('<h1 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B+树</span></a></h1><p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。</p><p>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。</p><p>B+ 树元素自底向上插入，这与二叉树恰好相反。</p><p>B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个内部节点内的子节点的数目减少树的高度，平衡操作不经常发生，而且效率增加了。这种价值得以确立通常需要每个节点在次级存储中占据完整的磁盘块或近似的大小。</p><p>B+ 背后的想法是内部节点可以有在预定范围内的可变数目的子节点。因此，B+ 树不需要象其他自平衡二叉查找树那样经常的重新平衡。对于特定的实现在子节点数目上的低和高边界是固定的。例如，在 2-3 B 树（常简称为2-3 树）中，每个内部节点只可能有 2 或 3 个子节点。如果节点有无效数目的子节点则被当作处于违规状态。</p><p>B+ 树的创造者 Rudolf Bayer 没有解释B代表什么。</p><p>最常见的观点是B代表平衡(balanced)，因为所有的叶子节点在树中都在相同的级别上。B也可能代表Bayer，或者是波音（Boeing），因为他曾经工作于波音科学研究实验室。</p><h1 id="b-树的优点" tabindex="-1"><a class="header-anchor" href="#b-树的优点"><span>B+ 树的优点</span></a></h1><p>根据B+树的结构，我们可以发现B+树相比于B树，在文件系统，数据库系统当中，更有优势，原因如下：</p><h2 id="b-树的磁盘读写代价更低" tabindex="-1"><a class="header-anchor" href="#b-树的磁盘读写代价更低"><span>B+树的磁盘读写代价更低</span></a></h2><p>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说I/O读写次数也就降低了。</p><h2 id="b-树的查询效率更加稳定" tabindex="-1"><a class="header-anchor" href="#b-树的查询效率更加稳定"><span>B+树的查询效率更加稳定</span></a></h2><p>由于内部结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p><h2 id="b-树更有利于对数据库的扫描" tabindex="-1"><a class="header-anchor" href="#b-树更有利于对数据库的扫描"><span>B+树更有利于对数据库的扫描</span></a></h2><p>B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题，而B+树只需要遍历叶子节点就可以解决对全部关键字信息的扫描，所以对于数据库中频繁使用的range query，B+树有着更高的性能。</p><hr><p>本文来自 guoziqing506 的CSDN 博客 ，全文地址请点击：<a href="https://blog.csdn.net/guoziqing506/article/details/64122287?utm_source=copy" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/guoziqing506/article/details/64122287?utm_source=copy</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91" target="_blank" rel="noopener noreferrer">B+树</a></p><p><a href="https://blog.csdn.net/v_JULY_v/article/details/6530142" target="_blank" rel="noopener noreferrer">从B树、B+树、B*树谈到R 树</a></p><p><a href="https://zhuanlan.zhihu.com/p/27700617" target="_blank" rel="noopener noreferrer">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了</a></p><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener noreferrer">B树和B+树的插入、删除图文详解</a></p>',23)]))}const h=t(o,[["render",n]]),l=JSON.parse('{"path":"/posts/leetcode/datastruct/2018-09-12-b-tree.html","title":"数据结构之 B Tree","lang":"zh-CN","frontmatter":{"title":"数据结构之 B Tree","date":"2018-09-12T00:00:00.000Z","categories":["Data-Struct"],"tags":["data-struct","java","sh"],"published":true,"description":"B+树 B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。 B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。 B+ 树元素自底向上插入，这与二叉树恰好相反。 B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/datastruct/2018-09-12-b-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"数据结构之 B Tree"}],["meta",{"property":"og:description","content":"B+树 B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。 B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。 B+ 树元素自底向上插入，这与二叉树恰好相反。 B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T16:01:00.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-20T16:01:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构之 B Tree\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-20T16:01:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755705660000,"updatedTime":1755705660000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.03,"words":909},"filePathRelative":"posts/leetcode/datastruct/2018-09-12-b-tree.md","localizedDate":"2018年9月12日","excerpt":"\\n<p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。</p>\\n<p>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。</p>\\n<p>B+ 树元素自底向上插入，这与二叉树恰好相反。</p>\\n<p>B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个内部节点内的子节点的数目减少树的高度，平衡操作不经常发生，而且效率增加了。这种价值得以确立通常需要每个节点在次级存储中占据完整的磁盘块或近似的大小。</p>\\n<p>B+ 背后的想法是内部节点可以有在预定范围内的可变数目的子节点。因此，B+ 树不需要象其他自平衡二叉查找树那样经常的重新平衡。对于特定的实现在子节点数目上的低和高边界是固定的。例如，在 2-3 B 树（常简称为2-3 树）中，每个内部节点只可能有 2 或 3 个子节点。如果节点有无效数目的子节点则被当作处于违规状态。</p>","autoDesc":true}');export{h as comp,l as data};
