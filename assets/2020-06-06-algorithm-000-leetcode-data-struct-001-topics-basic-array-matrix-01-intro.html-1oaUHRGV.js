import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as n}from"./app-qVG_elFh.js";const l={};function o(i,e){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇"><span>基础篇</span></a></h1><p>数组-矩阵</p><p>字符串-字符串匹配</p><p>排序：计数+桶+基数</p><p>模拟</p><p>枚举</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下力扣基础数据结构之矩阵" tabindex="-1"><a class="header-anchor" href="#详细介绍一下力扣基础数据结构之矩阵"><span>详细介绍一下力扣基础数据结构之矩阵</span></a></h2><p>好的，我们来系统讲讲 LeetCode（力扣）中关于**矩阵（Matrix）**的常见知识点、题型分类、常用技巧以及典型题目。</p><hr><h2 id="一、矩阵基础知识" tabindex="-1"><a class="header-anchor" href="#一、矩阵基础知识"><span>一、矩阵基础知识</span></a></h2><p>在 LeetCode 中，<strong>矩阵 = 二维数组（二维列表）</strong>，是非常常见的结构。它的特点：</p><ul><li>行（row）和列（col）</li><li>下标通常从 (0, 0) 开始</li><li>常见数据结构是 <code>int[][] matrix</code>（Java）或 <code>int[][]</code>（C++）或 <code>List&lt;List&lt;Integer&gt;&gt;</code>（Python 中也常简化为 <code>List[List[int]]</code>）</li></ul><hr><h2 id="二、常见题型分类" tabindex="-1"><a class="header-anchor" href="#二、常见题型分类"><span>二、常见题型分类</span></a></h2><p>我们可以把矩阵类题目大致分为以下几类：</p><hr><h3 id="_1-遍历类" tabindex="-1"><a class="header-anchor" href="#_1-遍历类"><span>1. <strong>遍历类</strong></span></a></h3><p>目标是遍历矩阵的所有元素，有时是普通遍历，有时是特殊顺序。</p><h4 id="✅-常见考点" tabindex="-1"><a class="header-anchor" href="#✅-常见考点"><span>✅ 常见考点：</span></a></h4><ul><li>行优先 / 列优先遍历</li><li>螺旋顺序、Z字形遍历、对角线遍历等</li></ul><h4 id="📌-典型题目" tabindex="-1"><a class="header-anchor" href="#📌-典型题目"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noopener noreferrer">54. 螺旋矩阵</a></li><li><a href="https://leetcode.cn/problems/diagonal-traverse/" target="_blank" rel="noopener noreferrer">498. 对角线遍历</a></li><li><a href="https://leetcode.cn/problems/set-matrix-zeroes/" target="_blank" rel="noopener noreferrer">73. 矩阵置零</a></li></ul><hr><h3 id="_2-搜索类-dfs-bfs" tabindex="-1"><a class="header-anchor" href="#_2-搜索类-dfs-bfs"><span>2. <strong>搜索类（DFS / BFS）</strong></span></a></h3><p>在矩阵中进行“从一个格子出发”的搜索。</p><h4 id="✅-常见考点-1" tabindex="-1"><a class="header-anchor" href="#✅-常见考点-1"><span>✅ 常见考点：</span></a></h4><ul><li>DFS / BFS 搜索路径</li><li>连通区域染色</li><li>flood fill（泛洪填充）</li></ul><h4 id="📌-典型题目-1" tabindex="-1"><a class="header-anchor" href="#📌-典型题目-1"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/number-of-islands/" target="_blank" rel="noopener noreferrer">200. 岛屿数量</a></li><li><a href="https://leetcode.cn/problems/flood-fill/" target="_blank" rel="noopener noreferrer">733. 图像渲染</a></li><li><a href="https://leetcode.cn/problems/max-area-of-island/" target="_blank" rel="noopener noreferrer">695. 岛屿的最大面积</a></li></ul><hr><h3 id="_3-前缀和类" tabindex="-1"><a class="header-anchor" href="#_3-前缀和类"><span>3. <strong>前缀和类</strong></span></a></h3><p>预处理出二维前缀和，用于快速求某一子矩阵的和。</p><h4 id="✅-常见考点-2" tabindex="-1"><a class="header-anchor" href="#✅-常见考点-2"><span>✅ 常见考点：</span></a></h4><ul><li>经典二维前缀和公式</li><li>枚举子矩阵 + 快速求和</li></ul><h4 id="📌-典型题目-2" tabindex="-1"><a class="header-anchor" href="#📌-典型题目-2"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/" target="_blank" rel="noopener noreferrer">304. 二维区域和检索 - 矩阵不可变</a></li><li><a href="https://leetcode.cn/problems/matrix-block-sum/" target="_blank" rel="noopener noreferrer">1314. 矩阵区域和</a></li></ul><hr><h3 id="_4-模拟类" tabindex="-1"><a class="header-anchor" href="#_4-模拟类"><span>4. <strong>模拟类</strong></span></a></h3><p>对矩阵执行某些操作或变换，完全靠代码逻辑去“手搓”模拟。</p><h4 id="✅-常见考点-3" tabindex="-1"><a class="header-anchor" href="#✅-常见考点-3"><span>✅ 常见考点：</span></a></h4><ul><li>旋转矩阵（顺时针 90 度）</li><li>填充矩阵（例如构造螺旋矩阵）</li><li>行列变换</li></ul><h4 id="📌-典型题目-3" tabindex="-1"><a class="header-anchor" href="#📌-典型题目-3"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noopener noreferrer">48. 旋转图像</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">59. 螺旋矩阵 II</a></li><li><a href="https://leetcode.cn/problems/valid-sudoku/" target="_blank" rel="noopener noreferrer">36. 有效的数独</a></li></ul><hr><h3 id="_5-动态规划类-dp" tabindex="-1"><a class="header-anchor" href="#_5-动态规划类-dp"><span>5. <strong>动态规划类（DP）</strong></span></a></h3><p>在矩阵中状态转移，常用于路径、子问题优化等。</p><h4 id="✅-常见考点-4" tabindex="-1"><a class="header-anchor" href="#✅-常见考点-4"><span>✅ 常见考点：</span></a></h4><ul><li>最短路径/最大路径</li><li>子矩阵最大面积问题</li><li>状态转移方向（从上、左、对角线）</li></ul><h4 id="📌-典型题目-4" tabindex="-1"><a class="header-anchor" href="#📌-典型题目-4"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/unique-paths/" target="_blank" rel="noopener noreferrer">62. 不同路径</a></li><li><a href="https://leetcode.cn/problems/minimum-path-sum/" target="_blank" rel="noopener noreferrer">64. 最小路径和</a></li><li><a href="https://leetcode.cn/problems/maximal-square/" target="_blank" rel="noopener noreferrer">221. 最大正方形</a></li><li><a href="https://leetcode.cn/problems/maximal-rectangle/" target="_blank" rel="noopener noreferrer">85. 最大矩形</a></li></ul><hr><h3 id="_6-位运算-哈希辅助类" tabindex="-1"><a class="header-anchor" href="#_6-位运算-哈希辅助类"><span>6. <strong>位运算 / 哈希辅助类</strong></span></a></h3><p>矩阵中的元素可以当作坐标、位图，辅助做剪枝或去重。</p><h4 id="📌-典型题目-5" tabindex="-1"><a class="header-anchor" href="#📌-典型题目-5"><span>📌 典型题目：</span></a></h4><ul><li><a href="https://leetcode.cn/problems/valid-sudoku/" target="_blank" rel="noopener noreferrer">36. 有效的数独</a></li><li><a href="https://leetcode.cn/problems/game-of-life/" target="_blank" rel="noopener noreferrer">289. 生命游戏</a>（原地处理 + 位操作）</li></ul><hr><h2 id="三、矩阵常用技巧" tabindex="-1"><a class="header-anchor" href="#三、矩阵常用技巧"><span>三、矩阵常用技巧</span></a></h2><table><thead><tr><th>技巧名</th><th>说明</th></tr></thead><tbody><tr><td>四方向数组</td><td><code>dx = [0, 1, 0, -1]</code>, <code>dy = [1, 0, -1, 0]</code> 用于上下左右移动</td></tr><tr><td>二维前缀和</td><td>用二维数组预处理每个子矩阵的快速求和</td></tr><tr><td>visited 数组</td><td>记录访问过的位置，避免死循环</td></tr><tr><td>原地修改</td><td>有些题不允许使用额外空间，需要巧妙使用原矩阵改值</td></tr><tr><td>状态压缩</td><td>处理数独、矩阵状态等时，压缩成位图提高效率</td></tr></tbody></table><hr><h2 id="四、面试中的高频矩阵题" tabindex="-1"><a class="header-anchor" href="#四、面试中的高频矩阵题"><span>四、面试中的高频矩阵题</span></a></h2><table><thead><tr><th>题目</th><th>难度</th><th>关键词</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noopener noreferrer">54. 螺旋矩阵</a></td><td>中等</td><td>模拟</td></tr><tr><td><a href="https://leetcode.cn/problems/number-of-islands/" target="_blank" rel="noopener noreferrer">200. 岛屿数量</a></td><td>中等</td><td>DFS / BFS</td></tr><tr><td><a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noopener noreferrer">48. 旋转图像</a></td><td>中等</td><td>旋转、模拟</td></tr><tr><td><a href="https://leetcode.cn/problems/minimum-path-sum/" target="_blank" rel="noopener noreferrer">64. 最小路径和</a></td><td>中等</td><td>动态规划</td></tr><tr><td><a href="https://leetcode.cn/problems/maximal-square/" target="_blank" rel="noopener noreferrer">221. 最大正方形</a></td><td>中等</td><td>动态规划</td></tr></tbody></table><hr><h2 id="五、推荐刷题顺序-从简单到复杂" tabindex="-1"><a class="header-anchor" href="#五、推荐刷题顺序-从简单到复杂"><span>五、推荐刷题顺序（从简单到复杂）</span></a></h2><ol><li>基础遍历：54 螺旋矩阵、498 对角线遍历</li><li>模拟变化：48 旋转图像、73 矩阵置零</li><li>搜索类题目：200 岛屿数量、695 最大面积</li><li>前缀和技巧：304 二维前缀和</li><li>DP 应用：62 不同路径、221 最大正方形</li><li>综合难题：85 最大矩形</li></ol>',74)]))}const d=t(l,[["render",o]]),h=JSON.parse('{"path":"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html","title":"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","topics","leetcode","array","matrix","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"matrix"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.91,"words":1174},"filePathRelative":"posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{d as comp,h as data};
