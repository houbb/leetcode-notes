const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index.html-DGGUcNje.js","assets/plugin-vue_export-helper-DlAUqK2U.js","assets/intro.html-C6UUuOhZ.js","assets/2018-05-30-algorithm-analysis.html-D8gg9mq4.js","assets/2018-12-05-bloom-filter.html-PciU5OD9.js","assets/2019-01-03-many-number-sort.html-BYNa0KTY.js","assets/2019-01-04-prority-queue.html-29nTLulu.js","assets/2019-01-08-althgorim-min-max.html-DVr_Sj9F.js","assets/2019-04-05-althgorim-gifford.html-DZbA5648.js","assets/2018-06-19-data-struct-dynamic-array.html-B8FwIEGQ.js","assets/2018-11-07-data-struct-binary-heap.html-toFMmfrM.js","assets/2018-11-07-data-struct-binary-tree.html-BX493-YC.js","assets/2018-11-09-althgorim-compress-01-overview.html-CwxO-zCk.js","assets/2018-11-09-althgorim-compress-02-althgorim-zip.html-BBOn9Y-3.js","assets/2018-11-09-althgorim-compress-03-apache-compress-overview.html-BMrf_Sl_.js","assets/2018-11-09-althgorim-compress-04-apache-compress-notes.html-BpnPHtet.js","assets/2018-11-09-althgorim-compress-05-apache-compress-archivers.html-CSG4iG0w.js","assets/2018-11-09-althgorim-compress-06-apache-compress-compressor.html-CmUYJQC2.js","assets/2018-11-09-althgorim-compress-07-apache-compress-extend.html-B5FQLw7p.js","assets/2018-11-09-althgorim-compress-08-framework-compress-bit.html-DfC343AY.js","assets/2021-07-09-althgorim-cryptograph-01-overview-01.html-D5mIAd96.js","assets/2021-07-09-althgorim-cryptograph-02-common-02.html-Da5l2crW.js","assets/2021-07-09-althgorim-cryptograph-03-base64.html-B17GY1we.js","assets/2021-07-09-althgorim-cryptograph-04-sm4.html-CtZv-hwC.js","assets/2021-07-09-althgorim-cryptograph-05-des.html-BTULOwjI.js","assets/2021-07-09-althgorim-cryptograph-06-3des.html-BDVOqHmC.js","assets/2021-07-09-althgorim-cryptograph-07-aes.html-BOWi6BZn.js","assets/2021-07-09-althgorim-cryptograph-08-symmetry.html-swTVCuEl.js","assets/2021-07-09-althgorim-cryptograph-09-rsa.html-CV4yJXDi.js","assets/2021-07-09-althgorim-cryptograph-09-rsa2.html-WmVDz_hS.js","assets/2018-05-30-hash-10-chat-intro.html-B-a0VGLx.js","assets/2018-05-30-hash-11-chat-hash-functional.html-C6i8lSGu.js","assets/2018-05-30-hash-12-chat-hash-data-struct-hashmap.html-DbCpEmU2.js","assets/2018-05-30-hash-13-chat-hash-data-struct-hashset.html-Bd2Zk8VB.js","assets/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html-eyaY51wt.js","assets/2018-05-30-hash-15-chat-hash-data-struct-merkle-tree.html-BJGO5rbv.js","assets/2018-05-30-hash-15-chat-hash-load-balance-consist-hash.html-C5TeIn9o.js","assets/2018-05-30-hash-conflict.html-Dk8uMiKe.js","assets/2018-05-30-hash-impl.html-CIKktIt9.js","assets/2018-05-30-hash-perfect.html-b0UkJf0I.js","assets/2018-05-30-hash.html-B7JDuTnY.js","assets/2018-09-10-algorithm-load-balance.html-OLDlcKG0.js","assets/2018-07-26-search.html-C1NY9cys.js","assets/2018-06-19-data-struct-dynamic-array.html-DXZ5T1Qi.js","assets/2018-09-10-index-lsm.html-C2gGpNCm.js","assets/2018-09-10-index-slimtrie.html-QCjYfKiO.js","assets/2018-09-12-b-tree.html-Cmkww9E4.js","assets/2018-09-12-data-struct-red-black-tree.html-BXKDoUmT.js","assets/2018-11-07-data-struct-binary-heap.html-Cii5VGjf.js","assets/2018-11-07-data-struct-binary-tree.html-Bzd1FktC.js","assets/2018-12-25-bitmap.html-DEieChPd.js","assets/2019-02-13-datastruct-skiplist.html-OYvhkier.js","assets/2019-02-19-data-struct-00-overview.html-CiOD5Gee.js","assets/2019-02-19-data-struct-01-identify-hash-map.html-DU740dcs.js","assets/2019-02-19-data-struct-02-arraylist-source-code.html-wSTKibrG.js","assets/2019-02-19-data-struct-03-linkedlist-source-code.html-DHxihoD3.js","assets/2019-02-19-data-struct-04-stack-source-code.html-0DZSwkNM.js","assets/2019-02-19-data-struct-05-hashset.html-DR10omZx.js","assets/2019-02-19-data-struct-06-treeset.html-BfglAb0-.js","assets/2020-01-23-data-struct-learn-00-index.html-CfxozppE.js","assets/2020-01-23-data-struct-learn-01-book-algorithm-index.html-B_xMj47A.js","assets/2020-01-23-data-struct-learn-02-base-type.html-B_-u2UnO.js","assets/2020-01-23-data-struct-learn-03-dag-schedule.html-QHs2UfOg.js","assets/2020-01-23-data-struct-learn-03-dag-topological-sorting.html-DO3DaDXA.js","assets/2020-01-23-data-struct-learn-03-dag.html-B-cABeCM.js","assets/2020-01-23-data-struct-learn-03-direct-graph.html-DlqK4hZ1.js","assets/2020-01-23-data-struct-learn-03-graph-dijkstra.html-DRx0prn4.js","assets/2020-01-23-data-struct-learn-03-graph-floyd.html-B_dJBvPY.js","assets/2020-01-23-data-struct-learn-05-gene.html-CRcUvlaA.js","assets/2020-01-23-data-struct-learn-06-vertibi.html-CNejRkAL.js","assets/2020-01-23-data-struct-learn-07-base-backtracking.html-DQdLXd3m.js","assets/2020-01-23-data-struct-learn-07-base-divided.html-BBgrslge.js","assets/2020-01-23-data-struct-learn-07-base-dp-fib.html-CQj8Akh6.js","assets/2020-01-23-data-struct-learn-07-base-dp.html-CDFS39jp.js","assets/2020-01-23-data-struct-learn-07-base-enum.html-ClKS2d9Q.js","assets/2020-01-23-data-struct-learn-07-base-greedy.html-x0982-Uv.js","assets/2020-01-23-data-struct-learn-07-base.html-BcXFbsza.js","assets/2020-01-23-data-struct-learn-08-dfs-bfs.html-D5Rq0U9v.js","assets/2020-11-24-data-struct-tree-00-overview.html-D2MWAnpn.js","assets/2020-11-24-data-struct-tree-01-binary-tree.html-C5t8o-Jw.js","assets/2020-11-24-data-struct-tree-02-binary-search-tree.html-B2nxCV5l.js","assets/2020-11-24-data-struct-tree-03-avl-tree.html-CqWX9VK7.js","assets/2020-11-24-data-struct-tree-04-red-black-tree.html-eLIgai8z.js","assets/2020-11-24-data-struct-tree-05-spaly-tree.html-B36C-neb.js","assets/2020-11-24-data-struct-tree-06-2-3-tree.html-_U3onZJ-.js","assets/2020-11-24-data-struct-tree-08-b-tree.html-Dq9mj9xo.js","assets/2020-11-24-data-struct-tree-09-bplus-tree.html-OFvsbdim.js","assets/2020-11-24-data-struct-tree-10-bstar-tree.html-gv1ihV0r.js","assets/2020-11-24-data-struct-tree-11-database-index.html-MW6BYtxX.js","assets/2020-06-06-algorithm-001-leetcode-01-ksum.html-Cjlltz91.js","assets/2020-06-06-algorithm-002-leetcode-02-add-two-numbers.html-lzHxBuM0.js","assets/2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters.html-CvESr4RY.js","assets/2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays.html-BN-ourEv.js","assets/2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring.html-g19N_p_M.js","assets/2020-06-06-algorithm-006-leetcode-06-zigzag-conversion.html-C_Be7buh.js","assets/2020-06-06-algorithm-007-leetcode-07-reverse-integer.html-Ba4iimOX.js","assets/2020-06-06-algorithm-008-leetcode-10-regex-match.html-C7nH2kCo.js","assets/2020-06-06-algorithm-009-leetcode-11-container-with-most-water.html-BnPbOJLt.js","assets/2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list.html-CP8T1bWT.js","assets/2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists.html-DhOK0J3-.js","assets/2020-06-06-algorithm-012-leetcode-22-generate-parentheses.html-DVNscUDc.js","assets/2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group.html-C2By9xT1.js","assets/2020-06-06-algorithm-014-leetcode-29-divide-two-integers.html-C-J53K1C.js","assets/2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words.html-CqoKIgwg.js","assets/2020-06-06-algorithm-016-leetcode-31-next-permutation.html-BYsXY3Eu.js","assets/2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array.html-DqkiTLaT.js","assets/2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array.html-MnuMAR-P.js","assets/2020-06-06-algorithm-019-leetcode-36-valid-suduku.html-DNO74WbK.js","assets/2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color.html-TC0yFQDA.js","assets/2020-06-06-algorithm-020-leetcode-39-combination-sum.html-Bl0mv4Bn.js","assets/2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock.html-CVVCwaCj.js","assets/2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii.html-CZfGdGtQ.js","assets/2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii.html-R-bkIbiX.js","assets/2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv.html-DPUvJeL9.js","assets/2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown.html-D0R9WCv5.js","assets/2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee.html-BBaGLc_R.js","assets/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html-_mbxtO8v.js","assets/2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum.html-DfbtPW9V.js","assets/2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724.html-ClWuyLiU.js","assets/2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self.html-CptE_U8a.js","assets/2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable.html-oKi3wbve.js","assets/2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable.html-CogF1-L2.js","assets/2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array.html-KLAKvP1Y.js","assets/2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval.html-B9YtQl53.js","assets/2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum.html-DnNF-2iJ.js","assets/2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum.html-CYboqh9U.js","assets/2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k.html-Ky3LTDCs.js","assets/2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array.html-BOqj2YzX.js","assets/2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k.html-FC1Mv3qW.js","assets/2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts.html-Vc70GTkp.js","assets/2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber.html-DjqT8klN.js","assets/2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii.html-BcU0GB4j.js","assets/2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii.html-Dntxq_3d.js","assets/2020-06-06-algorithm-020-leetcode-70-greedy-overview.html-D-w0rMcJ.js","assets/2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight.html-BH3mZ21P.js","assets/2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty.html-Cm2byR93.js","assets/2020-06-06-algorithm-020-leetcode-73-3195_dfs.html-BbTQ7Ljm.js","assets/2020-06-06-algorithm-020-leetcode-80-recursive-overview.html-DVURYHyM.js","assets/2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo.html-4kjZdSC9.js","assets/2020-06-06-algorithm-098-space-complex-intro.html-_AXuGFaE.js","assets/2020-06-06-algorithm-098-time-complex-fast-table.html-DGdMcGlD.js","assets/2020-06-06-algorithm-098-time-complex-intro.html-CHwZ9rdm.js","assets/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html-DY9thDMN.js","assets/2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise.html-Do7WWdJ-.js","assets/2020-06-08-algorithm-01-Manacher-Algorithm.html-e2O_TLLg.js","assets/2020-06-08-algorithm-11-leetcode-039-combine-sum.html-Ca1h2Myz.js","assets/2020-06-08-algorithm-11-leetcode-126-word-ladder-ii.html-Hvr0Z5Ks.js","assets/2020-06-08-algorithm-13-bst-nums.html-D-h0NPcz.js","assets/2020-06-08-algorithm-14-bst-best-solve.html-B51n6sGm.js","assets/2020-06-08-algorithm-14-bst-solves.html-B7eAT5NJ.js","assets/2020-06-08-algorithm-15-bst-valid.html-BcrysSm0.js","assets/2020-06-08-algorithm-16-binary-tree-travel-pic.html-DWs1meZu.js","assets/2020-06-08-algorithm-16-binary-tree-travel.html-COsktQGa.js","assets/2020-06-08-algorithm-17-construct-binray-tree.html-CYNepUjC.js","assets/2020-06-08-algorithm-18-binary-tree-path-sum.html-C-YgoqNy.js","assets/2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list.html-DdUzmEQL.js","assets/2020-06-08-algorithm-20-binary-tree-next-pointer.html-JmJPz20g.js","assets/2020-06-08-algorithm-21-dp-minest-path.html-B5ZFCKkA.js","assets/2020-06-08-algorithm-22-gas-station.html-Ddwf3DpI.js","assets/2020-06-08-algorithm-23-single-number.html-PJ9DQSbK.js","assets/2020-06-08-algorithm-24-number-of-digit-one.html-C9pgpmM8.js","assets/2020-06-08-algorithm-25-major-element.html-DpeH3aLq.js","assets/2020-06-08-algorithm-26-topk-freq.html-7igkVgx0.js","assets/2020-06-08-algorithm-27-leetcode-115-distinct-sequences.html-DVZVCJ5F.js","assets/2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii.html-zUXZJRdn.js","assets/2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning.html-DdHMqFz-.js","assets/2020-06-08-algorithm-29-leetcode-135-candy.html-C5VQj4wv.js","assets/2020-06-08-algorithm-30-leetcode-139-word-break.html-B61F8au2.js","assets/2020-06-08-algorithm-31-leetcode-141-linked-list-cycle.html-ACb7Kdyb.js","assets/2020-06-08-algorithm-32-leetcode-032-valid-parentheses.html-Cu-GKyK5.js","assets/2020-06-08-algorithm-33-leetcode-042-trapping-rain-water.html-KiZXmamm.js","assets/2020-06-08-algorithm-34-leetcode-permutation.html-TNaBtaYj.js","assets/2020-06-08-algorithm-36-leetcode-edit-distance.html-DEy0-4iy.js","assets/2020-06-08-algorithm-37-leetcode-minimum-window-substring.html-BZbTd-tn.js","assets/2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram.html-6o8o1_ud.js","assets/2020-06-08-algorithm-39-leetcode-maximal-rectangle.html-DpOVtM1K.js","assets/2020-06-08-algorithm-40-leetcode-scramble-string.html-DhJnQnZI.js","assets/2020-06-08-algorithm-41-leetcode-lru-cache.html-CRGyjufi.js","assets/2020-06-08-algorithm-42-leetcode-reverse-polish-notation.html-BYbttA_p.js","assets/2020-06-08-algorithm-43-leetcode-maximum-product-subarray.html-YD084d8e.js","assets/2020-06-08-algorithm-44-leetcode-largest-number.html-XNn_O7mk.js","assets/2020-06-08-algorithm-45-leetcode-house-robber.html-DfKIqwvu.js","assets/2020-06-08-algorithm-46-leetcode-count-primes.html-C_XE6GYU.js","assets/2020-06-08-algorithm-47-leetcode-course-schedule.html-BWu3ye0a.js","assets/2020-06-08-algorithm-48-leetcode-trie-tree.html-DNEFSpKO.js","assets/2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum.html-7qw-b4d-.js","assets/2020-06-08-algorithm-50-leecode-shortest-palindrome.html-C3u-qk0o.js","assets/2020-06-08-algorithm-51-leecode-217-duplicate-nums.html-D7WPRzAg.js","assets/2020-06-08-algorithm-51-leecode-218-skyline.html-B3dSzp7Z.js","assets/2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii.html-ByJNva2f.js","assets/2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii.html-CsRf5mtn.js","assets/2020-06-08-algorithm-52-leecode-253-min-room.html-D2qSyPol.js","assets/2020-06-08-algorithm-52-leecode-253-move.html-mOm8MEhr.js","assets/2020-06-08-algorithm-52-leecode-681-closest-next-time copy 2.html-DOuvbw4N.js","assets/2020-06-08-algorithm-52-leecode-681-closest-next-time.html-BkzSBEQ3.js","assets/2020-06-08-algorithm-52-leecode-716-max-stack.html-Cz9Zi8rn.js","assets/2020-06-06-algorithm-000-index-01-overview.html-DniD0w0W.js","assets/2020-06-06-algorithm-000-index-02-how-to-learn.html-CLCe_Hry.js","assets/2020-06-06-algorithm-000-index-03-topics.html-D7hGQWPk.js","assets/2025-08-22-how-to-cross-leetcodes.html-CDSdNfix.js","assets/2025-08-31-array-string-01-LC1768-merge-strings-alternately.html-Jg667yn1.js","assets/2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings.html-Dfb6DH3S.js","assets/2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies.html-CzHsEGps.js","assets/2025-08-31-array-string-04-LC605-can-place-flowers.html-BqTli8BO.js","assets/2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string.html-CvXCVt44.js","assets/2025-08-31-array-string-06-LC151-reverse-words-in-a-string.html-BQvXwLMV.js","assets/2025-08-31-array-string-08-LC334-increasing-triplet-subsequence.html-24wnRtzU.js","assets/2025-08-31-array-string-09-LC443-string-compression.html-ChAudC_M.js","assets/2025-08-31-two-pointer-01-LC283-move-zeros.html-Btb8k8HL.js","assets/2025-08-31-two-pointer-02-LC392-is-subsequence.html-H2JXek8N.js","assets/2025-08-31-two-pointer-03-LC11-container-with-most-water.html-C1wK1pi_.js","assets/2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs.html-CTWZUZeG.js","assets/2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i.html-BV9KfQMJ.js","assets/2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length.html-BcJ8OW5b.js","assets/2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii.html-gW-MqzGH.js","assets/2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element.html-BY9qKuZy.js","assets/2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays.html-B7YdQ4bk.js","assets/2025-09-09-hash-02-LC1207-unique-number-of-occurrences.html-CKWUL0VK.js","assets/2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close.html-lMTbu4CT.js","assets/2025-09-09-hash-04-LC2352-equal-row-and-column-pairs.html-DbRx6pb0.js","assets/2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude.html-CxVzeJUy.js","assets/2025-09-09-prefixsum-02-LC724-find-pivot-index.html-C282Xo2Z.js","assets/2025-09-18-stack-01-LC2390-removing-stars-from-a-string.html-BXDZoB6k.js","assets/2025-09-18-stack-02-LC735-asteroid-collision.html-B5q43JnW.js","assets/2025-09-18-stack-03-LC394-decode-string copy.html-DY4IGZOp.js","assets/2025-09-18-stack-03-LC394-decode-string.html-5k253iws.js","assets/2016-07-14-sort-00-overview-sort.html-BkQMPzPA.js","assets/2016-07-14-sort-01-bubble-sort.html-CHBWFGdQ.js","assets/2016-07-14-sort-02-quick-sort.html-CNaoD1vl.js","assets/2016-07-14-sort-03-select-sort.html-CCKc0Fei.js","assets/2016-07-14-sort-04-heap-sort.html-mRZ61q4v.js","assets/2016-07-14-sort-05-insert-sort.html-BWim7NEA.js","assets/2016-07-14-sort-06-shell-sort.html-DZk0zdvZ.js","assets/2016-07-14-sort-07-merge-sort.html-YUZBFfoQ.js","assets/2016-07-14-sort-08-counting-sort.html-B-w3lnaQ.js","assets/2016-07-14-sort-09-bucket-sort.html-64pe1i1Q.js","assets/2016-07-14-sort-10-bigfile-sort.html-CXlPpg_0.js","assets/2018-07-26-timesort.html-DuVesZNv.js","assets/2025-08-22-dp-01-LC70-climbing-stairs.html-CY1-S4Au.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro.html-Y8bbs2ND.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs.html-CKsesmx0.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations.html-CIOiW_ME.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations.html-DyVg0mtd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets.html-DrLv-Lup.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number.html-DwZ8g8Zq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum.html-Cp1kJZ4C.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses.html-DndITfiq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search.html-DcR3Qepg.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning.html-Bi5IcK9j.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens.html-Dv5bEOtQ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro.html-P7Vy7BLu.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html-9Qw4A5mx.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html-C6-aDgxW.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview.html-CsylxHJ-.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray.html-vOeOhnWN.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence.html-HpY6RrGH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum.html-DTo_nN9-.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii.html-DXVFDwnR.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii.html-CW2d_pUT.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv.html-5PuvJqNV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum.html-B_ZxE7ky.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest.html-CjHL7Afm.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller.html-BbYCblvo.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num.html-C7MxcJaK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii.html-D3tlv7ck.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html-mVGUXLhe.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query.html-C8nKXdiy.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline.html-DSJBbaUX.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area.html-DSkOUHR9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room.html-CcQ1d04I.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii.html-BR51SiwS.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles.html-BztZCQFg.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak.html-COUk4JWG.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle.html-CPGddiS0.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap.html-Btn4oaqa.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii.html-fAsxKEbI.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate.html-CJZs9tAE.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii.html-OvQJ5ayr.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii.html-CLoK_dvl.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html-Beahqm41.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189.html-CxXSY5QL.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238.html-CrsuESqC.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41.html-D-XBILb1.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53.html-BgQ5TjEl.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56.html-C-cOFEQS.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro.html-z6pcJfYH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854.html-BVXj8YsM.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370.html-C_vivSLS.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109.html-CIGwsWCV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094.html-Cfr-Bmkz.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html-y4bHrLU6.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240.html-D55tkDai.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48.html-B1RD-TV2.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54.html-CI0WQ1o6.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73.html-Cxmddpqf.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74.html-6DWQBNGQ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html-vFa60hDp.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314.html-CmqIoQll.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304.html-foa7Ajxq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732.html-Dj3w5IYE.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277.html-DJ5v4hT1.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro.html-StKgLgu-.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089.html-pJWLaCLd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11.html-BWqkwjxj.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15.html-CQjnxknK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26.html-E3S2iIKr.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27.html-BuGXMIwf.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283.html-21rjR9UT.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31.html-B6aMG7QH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42.html-B4_5fmPD.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html-DtHk3Bs_.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3.html-nc5tBiw9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438.html-C87s_80Y.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643.html-CzJog5qV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76.html-n2Q6yh5B.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html-DX4QqjIt.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro.html-CepkeLii.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro.html-DJhmlDuH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html-Cv88Iq_A.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert.html-B3eDSsVZ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro.html-CpZwbHO_.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number.html-BxC3M_dZ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html-8j3OdCMS.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii.html-BiED2uJx.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number.html-35ypFtZo.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array.html-WypzzsCx.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro.html-D4BHZ4ca.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro.html-t1hEnuAW.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro.html-ePJh7VaK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro.html-RviLjcTL.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro.html-BOCosc7m.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro.html-CA_4Nm2l.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro.html-D0vdv8l7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro.html-CM93OYtm.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro.html-DZ2YyAs8.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro.html-Di5EVXno.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template.html-CJqRuW6m.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs.html-D38dTIN0.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle.html-CMDLNUE9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber.html-2oaTB1q1.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares.html-i9MFX43O.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change.html-Dpk0B0EZ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break.html-t482cWsM.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence.html-Cj7HGbND.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence.html-8TC3t6y4.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray.html-DCIZunGa.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum.html-ythy2FXV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html-DFFa5lTL.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths.html-BzXZMDp3.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence.html-DU8fO0_-.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum.html-DQP9fjuF.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring.html-CgmxecM2.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance.html-y12KxMdB.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro.html-0NnhRzML.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step.html-DF0OkUVV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree.html-BDFU5dQV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill.html-b3uJ2IxY.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph.html-B9uV_XBW.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter.html-Cicv6tdk.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands.html-CLLqf2_w.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island.html-bYTzeIs9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces.html-EnlXYKvq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves.html-lBzMm-VD.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges.html-DiGnxJjE.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands.html-Cx2Se1a9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule.html-DnYZHR5y.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro.html-DHDoGWyX.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock.html-gLm8ReTo.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels.html-B8EzsG3f.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string.html-Dss4vmq7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game.html-C36k7-Z2.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii.html-C1QW5A-9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro.html-BY_W0UWL.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html-BCB42qkG.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro.html-deizN2lI.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01.html-CPlLw41x.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128.html-DjBJ_8Rg.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49.html-BHQhBM55.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro.html-CTwqgsOR.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro.html-DjZ-nrS5.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream.html-DkZB7CeX.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array.html--TSojecm.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements.html-CdqAuaaU.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro.html-DWpjn_C7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160.html-Ch8Vm0wc.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206.html-9-5ffSDZ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234.html-CJyVZUPN.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141.html-Eepruk6k.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142.html-b-TPFyNl.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21.html-pxsIXViC.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2.html-Cmz-DdQ_.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19.html-DO5aQrVV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24.html-B_4F2_kU.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25.html-BU_HPvut.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138.html-DZHsYf-7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148.html-DZTTTdgc.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23.html-CDEFk1nY.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146.html-CirYCsTi.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro.html-C1fKtgjd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-.html-BLGl0Miq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro.html-PSGyWcal.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro.html-CI-JXgfS.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro.html-DbJi6Wgf.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro.html-Ckk5VJz8.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html-Dx_VZlVQ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro.html-DCF2fZk5.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro.html-B64dqaEr.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro.html-CSroQxO4.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro.html-CLMiCcky.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html-adUJfLKi.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704.html-ByGGyVXg.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034.html-CGvgWX3H.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035.html-BEnd-HLH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034.html-496HJg_d.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852.html-CdQFFhbH.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875.html-Cfkwy_kA.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011.html-IMD9N3oK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033.html-CMKpIrA4.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153.html-CgkGwfZp.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154.html-DMAxEMjk.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4.html-D5m371Ow.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit.html-Da7MxBHg.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html-CZH1LgU_.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html-CI_p_xFp.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro.html-D-wk2sHs.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912.html-dyv-34Vy.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html-D9TPd_y1.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html-BKlHuX-q.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro.html-CTF8l7xo.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro.html-B7JdYQKC.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html-BHbwOyw8.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro.html-DgRyAkGM.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro.html-BlxNdtqP.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75.html-C0VH7JPi.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242.html-Yeajo7sN.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299.html-CveANPLy.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383.html-B1TuaFX6.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389.html-1VLBWVO9.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085.html-B1BcS4u3.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro.html-CPSYUSx7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451.html-BVABe7fi.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164.html-BTx4xhCa.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro.html-DVH8YlVK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164.html-D4FDYZyd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro.html-BzmC11mb.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html-eKr-Kx6R.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack.html-BjoEbuSj.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string.html-ODNwwoHO.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures.html-B8TtVJiG.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram.html-D6isoQA-.js","assets/2019-03-11-algorithm-string-match-01-BF.html-DVUkkkRE.js","assets/2019-03-11-algorithm-string-match-02-KMP.html-CPbWPdGJ.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html-kWVxrFtr.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239.html-DCloWbOt.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560.html-BYUWUYRa.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html-D9yChQgy.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro.html-M3Vqxdb-.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro.html-BWHfIHLd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102.html-B80qHaab.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104.html-DJW2v3rd.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226.html-MwBhThDm.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94.html-B7yhToTV.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101.html-C2XwduWK.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543.html-CBkY_mA_.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108.html-fHAunw-J.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98.html-BKLl2Nr3.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230.html-DilwCpCe.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199.html-DF0Ik3iq.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114.html-BmjS6u0V.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105.html-DSW5qOcO.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437.html-BRU9YxqT.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124.html-CXnueGW7.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html-D3lsx0Nj.js","assets/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro.html-HDu1nvUn.js","assets/404.html-6Mp5rMQH.js","assets/index.html-CFA8rZHF.js","assets/index.html-C21NMNd_.js","assets/index.html-BLiJOWB2.js","assets/index.html-PSgFZhid.js","assets/index.html-BKdKB8q_.js","assets/index.html-DNGB9Lwl.js","assets/index.html-DExGYxhw.js","assets/index.html-2gZNMKgw.js","assets/index.html-vEbov-yH.js","assets/index.html-C63dCdXz.js","assets/index.html-fK06ohYi.js","assets/index.html-CD1xwG0f.js","assets/index.html-P_k3fYy9.js","assets/index.html-CKwFws96.js","assets/index.html-BveelRNI.js","assets/index.html-Cq-XFvaT.js","assets/index.html-DDnXDiv2.js","assets/index.html-0ZTHt8m1.js","assets/index.html-DzK1YLbB.js","assets/index.html-CJegDDUY.js","assets/index.html-BB8oy9il.js","assets/index.html-I46P9eNR.js","assets/index.html-BZqiyqCO.js","assets/index.html-BSxoeZWB.js","assets/index.html-yQwvDz4N.js","assets/index.html-DF3879w0.js","assets/index.html-SjUyu2F7.js","assets/index.html-CyhOGouU.js","assets/index.html-Hunixcml.js","assets/index.html--82XTVXd.js","assets/index.html-pBhmQCY7.js","assets/index.html-QebNf92B.js","assets/index.html-C-6BpAow.js","assets/index.html-Dg949YDg.js","assets/index.html-D4MLvQez.js","assets/index.html-BhdK_prW.js","assets/index.html-BbVxnbaw.js","assets/index.html-D73OjpCY.js","assets/index.html-yJGoLmiT.js","assets/index.html-9PurLXH9.js","assets/index.html-xI-1ydTv.js","assets/index.html-DryxXH1i.js","assets/index.html-C0UrzVex.js","assets/index.html-CI6v_y8y.js","assets/index.html-BuAzvDH9.js","assets/index.html-uqetNRKp.js","assets/index.html-DAGgBcI4.js","assets/index.html-DdTFe1T1.js","assets/index.html-SBZlp96z.js","assets/index.html-D8fumbPY.js","assets/index.html-CrEcVHlF.js","assets/index.html-vJkWgPL5.js","assets/index.html-TJyL8vi1.js","assets/index.html-CBOJgn_w.js","assets/index.html-Co4-uzmn.js","assets/index.html-BwMl7ljG.js","assets/index.html-DcasrmxA.js","assets/index.html-DORiT0D5.js","assets/index.html-BVyE8Crl.js","assets/index.html-BcGpVgGv.js","assets/index.html-DxDMLFLC.js","assets/index.html-BhoVGg4d.js","assets/index.html-C-dUwJmX.js","assets/index.html-RQEXpYVA.js","assets/index.html-CQOcDMbZ.js","assets/index.html-DmdYWdzO.js","assets/index.html-CBJKKKRu.js","assets/index.html-DuTLIYFL.js","assets/index.html-BxZCxocb.js","assets/index.html-D9xKSiBW.js","assets/index.html-IM-WjtCH.js","assets/index.html-eS5hXLju.js","assets/index.html-DB0jzabT.js","assets/index.html-CtHRsddq.js","assets/index.html-CTox470q.js","assets/index.html-Ch_ODAKU.js","assets/index.html-Dthwzh_4.js","assets/index.html-CkGaQZRs.js","assets/index.html-CkLBQ0IG.js","assets/index.html-BMzpRi84.js","assets/index.html-CfpQ6_Ic.js","assets/index.html-CY83sEWe.js","assets/index.html-CR9dE8pk.js","assets/index.html-DBz9GhQf.js","assets/index.html-TrUuWfsE.js","assets/index.html-CjNcbDcD.js","assets/index.html-Bg2QxUSp.js","assets/index.html-DGTSnKaw.js","assets/index.html-Bnc3yiTj.js","assets/index.html-0mmsdC8Z.js","assets/index.html-DdWMn_Xp.js","assets/index.html-But5yO4P.js","assets/index.html-CLZpJIw-.js","assets/index.html-DEI2Kooh.js","assets/index.html-r7h9pDYH.js","assets/index.html-BRFxc150.js","assets/index.html-BUY364wb.js","assets/index.html-BFYcHkk5.js","assets/index.html-C1R4tAzb.js","assets/index.html-DzLgSV8M.js","assets/index.html-CMFoQHWh.js","assets/index.html-DYyr1zTd.js","assets/index.html-_Ly7TuDV.js","assets/index.html-BZTZx94p.js","assets/index.html-CeTSO6gx.js","assets/index.html-DoQ_hnfD.js","assets/index.html-TzVAO9hk.js","assets/index.html-tpCBPdQQ.js","assets/index.html-DDsUhm8r.js","assets/index.html-BpcsMvqk.js","assets/index.html-DkG7wG__.js","assets/index.html-Cnvf-CUC.js","assets/index.html-BIBe0Rum.js","assets/index.html-BA6A-cwa.js","assets/index.html-BSdexirO.js","assets/index.html-DZCjoQvI.js","assets/index.html-CU9r4es4.js","assets/index.html-BrlcBwwD.js","assets/index.html-jCgaVujb.js","assets/index.html-DhUbqCg-.js","assets/index.html-BLcRGAWt.js","assets/index.html-DReVOu-V.js","assets/index.html-CatxwdiX.js","assets/index.html-B-UURI_i.js","assets/index.html-w26DLykE.js","assets/index.html-DJQ3b-3W.js","assets/index.html-Cw8GzepL.js","assets/index.html-DB3-zvVc.js"])))=>i.map(i=>d[i]);
var Y0=Object.defineProperty;var X0=(e,l,t)=>l in e?Y0(e,l,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[l]=t;var Wn=(e,l,t)=>X0(e,typeof l!="symbol"?l+"":l,t);/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Yr(e){const l=Object.create(null);for(const t of e.split(","))l[t]=1;return t=>t in l}const Ae={},qt=[],Il=()=>{},Z0=()=>!1,Ri=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),Xr=e=>e.startsWith("onUpdate:"),Ve=Object.assign,Zr=(e,l)=>{const t=e.indexOf(l);t>-1&&e.splice(t,1)},eh=Object.prototype.hasOwnProperty,ke=(e,l)=>eh.call(e,l),te=Array.isArray,ui=e=>Fn(e)==="[object Map]",lh=e=>Fn(e)==="[object Set]",ie=e=>typeof e=="function",Be=e=>typeof e=="string",Zt=e=>typeof e=="symbol",Fe=e=>e!==null&&typeof e=="object",Fo=e=>(Fe(e)||ie(e))&&ie(e.then)&&ie(e.catch),th=Object.prototype.toString,Fn=e=>th.call(e),ih=e=>Fn(e).slice(8,-1),nh=e=>Fn(e)==="[object Object]",es=e=>Be(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Mt=Yr(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Sn=e=>{const l=Object.create(null);return t=>l[t]||(l[t]=e(t))},rh=/-(\w)/g,He=Sn(e=>e.replace(rh,(l,t)=>t?t.toUpperCase():"")),sh=/\B([A-Z])/g,At=Sn(e=>e.replace(sh,"-$1").toLowerCase()),ei=Sn(e=>e.charAt(0).toUpperCase()+e.slice(1)),Kn=Sn(e=>e?`on${ei(e)}`:""),nt=(e,l)=>!Object.is(e,l),Jn=(e,...l)=>{for(let t=0;t<e.length;t++)e[t](...l)},So=(e,l,t,i=!1)=>{Object.defineProperty(e,l,{configurable:!0,enumerable:!1,writable:i,value:t})},ah=e=>{const l=parseFloat(e);return isNaN(l)?e:l},oh=e=>{const l=Be(e)?Number(e):NaN;return isNaN(l)?e:l};let Qs;const In=()=>Qs||(Qs=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function ls(e){if(te(e)){const l={};for(let t=0;t<e.length;t++){const i=e[t],n=Be(i)?ph(i):ls(i);if(n)for(const r in n)l[r]=n[r]}return l}else if(Be(e)||Fe(e))return e}const ch=/;(?![^(]*\))/g,dh=/:([^]+)/,hh=/\/\*[^]*?\*\//g;function ph(e){const l={};return e.replace(hh,"").split(ch).forEach(t=>{if(t){const i=t.split(dh);i.length>1&&(l[i[0].trim()]=i[1].trim())}}),l}function ts(e){let l="";if(Be(e))l=e;else if(te(e))for(let t=0;t<e.length;t++){const i=ts(e[t]);i&&(l+=i+" ")}else if(Fe(e))for(const t in e)e[t]&&(l+=t+" ");return l.trim()}const uh="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",gh=Yr(uh);function Io(e){return!!e||e===""}/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Ge;class mh{constructor(l=!1){this.detached=l,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Ge,!l&&Ge&&(this.index=(Ge.scopes||(Ge.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let l,t;if(this.scopes)for(l=0,t=this.scopes.length;l<t;l++)this.scopes[l].pause();for(l=0,t=this.effects.length;l<t;l++)this.effects[l].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let l,t;if(this.scopes)for(l=0,t=this.scopes.length;l<t;l++)this.scopes[l].resume();for(l=0,t=this.effects.length;l<t;l++)this.effects[l].resume()}}run(l){if(this._active){const t=Ge;try{return Ge=this,l()}finally{Ge=t}}}on(){Ge=this}off(){Ge=this.parent}stop(l){if(this._active){this._active=!1;let t,i;for(t=0,i=this.effects.length;t<i;t++)this.effects[t].stop();for(this.effects.length=0,t=0,i=this.cleanups.length;t<i;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,i=this.scopes.length;t<i;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!l){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0}}}function Oo(){return Ge}function vh(e,l=!1){Ge&&Ge.cleanups.push(e)}let Le;const Qn=new WeakSet;class Po{constructor(l){this.fn=l,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Ge&&Ge.active&&Ge.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,Qn.has(this)&&(Qn.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||Ro(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,Ys(this),Vo(this);const l=Le,t=fl;Le=this,fl=!0;try{return this.fn()}finally{Bo(this),Le=l,fl=t,this.flags&=-3}}stop(){if(this.flags&1){for(let l=this.deps;l;l=l.nextDep)rs(l);this.deps=this.depsTail=void 0,Ys(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?Qn.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){xr(this)&&this.run()}get dirty(){return xr(this)}}let jo=0,gi,mi;function Ro(e,l=!1){if(e.flags|=8,l){e.next=mi,mi=e;return}e.next=gi,gi=e}function is(){jo++}function ns(){if(--jo>0)return;if(mi){let l=mi;for(mi=void 0;l;){const t=l.next;l.next=void 0,l.flags&=-9,l=t}}let e;for(;gi;){let l=gi;for(gi=void 0;l;){const t=l.next;if(l.next=void 0,l.flags&=-9,l.flags&1)try{l.trigger()}catch(i){e||(e=i)}l=t}}if(e)throw e}function Vo(e){for(let l=e.deps;l;l=l.nextDep)l.version=-1,l.prevActiveLink=l.dep.activeLink,l.dep.activeLink=l}function Bo(e){let l,t=e.depsTail,i=t;for(;i;){const n=i.prevDep;i.version===-1?(i===t&&(t=n),rs(i),kh(i)):l=i,i.dep.activeLink=i.prevActiveLink,i.prevActiveLink=void 0,i=n}e.deps=l,e.depsTail=t}function xr(e){for(let l=e.deps;l;l=l.nextDep)if(l.dep.version!==l.version||l.dep.computed&&(zo(l.dep.computed)||l.dep.version!==l.version))return!0;return!!e._dirty}function zo(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===Li))return;e.globalVersion=Li;const l=e.dep;if(e.flags|=2,l.version>0&&!e.isSSR&&e.deps&&!xr(e)){e.flags&=-3;return}const t=Le,i=fl;Le=e,fl=!0;try{Vo(e);const n=e.fn(e._value);(l.version===0||nt(n,e._value))&&(e._value=n,l.version++)}catch(n){throw l.version++,n}finally{Le=t,fl=i,Bo(e),e.flags&=-3}}function rs(e,l=!1){const{dep:t,prevSub:i,nextSub:n}=e;if(i&&(i.nextSub=n,e.prevSub=void 0),n&&(n.prevSub=i,e.nextSub=void 0),t.subs===e&&(t.subs=i,!i&&t.computed)){t.computed.flags&=-5;for(let r=t.computed.deps;r;r=r.nextDep)rs(r,!0)}!l&&!--t.sc&&t.map&&t.map.delete(t.key)}function kh(e){const{prevDep:l,nextDep:t}=e;l&&(l.nextDep=t,e.prevDep=void 0),t&&(t.prevDep=l,e.nextDep=void 0)}let fl=!0;const qo=[];function at(){qo.push(fl),fl=!1}function ot(){const e=qo.pop();fl=e===void 0?!0:e}function Ys(e){const{cleanup:l}=e;if(e.cleanup=void 0,l){const t=Le;Le=void 0;try{l()}finally{Le=t}}}let Li=0;class fh{constructor(l,t){this.sub=l,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class On{constructor(l){this.computed=l,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(l){if(!Le||!fl||Le===this.computed)return;let t=this.activeLink;if(t===void 0||t.sub!==Le)t=this.activeLink=new fh(Le,this),Le.deps?(t.prevDep=Le.depsTail,Le.depsTail.nextDep=t,Le.depsTail=t):Le.deps=Le.depsTail=t,Mo(t);else if(t.version===-1&&(t.version=this.version,t.nextDep)){const i=t.nextDep;i.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=i),t.prevDep=Le.depsTail,t.nextDep=void 0,Le.depsTail.nextDep=t,Le.depsTail=t,Le.deps===t&&(Le.deps=i)}return t}trigger(l){this.version++,Li++,this.notify(l)}notify(l){is();try{for(let t=this.subs;t;t=t.prevSub)t.sub.notify()&&t.sub.dep.notify()}finally{ns()}}}function Mo(e){if(e.dep.sc++,e.sub.flags&4){const l=e.dep.computed;if(l&&!e.dep.subs){l.flags|=20;for(let i=l.deps;i;i=i.nextDep)Mo(i)}const t=e.dep.subs;t!==e&&(e.prevSub=t,t&&(t.nextSub=e)),e.dep.subs=e}}const bn=new WeakMap,ft=Symbol(""),Lr=Symbol(""),Ai=Symbol("");function $e(e,l,t){if(fl&&Le){let i=bn.get(e);i||bn.set(e,i=new Map);let n=i.get(t);n||(i.set(t,n=new On),n.map=i,n.key=t),n.track()}}function Ml(e,l,t,i,n,r){const s=bn.get(e);if(!s){Li++;return}const a=c=>{c&&c.trigger()};if(is(),l==="clear")s.forEach(a);else{const c=te(e),d=c&&es(t);if(c&&t==="length"){const p=Number(i);s.forEach((u,g)=>{(g==="length"||g===Ai||!Zt(g)&&g>=p)&&a(u)})}else switch((t!==void 0||s.has(void 0))&&a(s.get(t)),d&&a(s.get(Ai)),l){case"add":c?d&&a(s.get("length")):(a(s.get(ft)),ui(e)&&a(s.get(Lr)));break;case"delete":c||(a(s.get(ft)),ui(e)&&a(s.get(Lr)));break;case"set":ui(e)&&a(s.get(ft));break}}ns()}function bh(e,l){const t=bn.get(e);return t&&t.get(l)}function It(e){const l=oe(e);return l===e?l:($e(l,"iterate",Ai),bl(e)?l:l.map(We))}function ss(e){return $e(e=oe(e),"iterate",Ai),e}const yh={__proto__:null,[Symbol.iterator](){return Yn(this,Symbol.iterator,We)},concat(...e){return It(this).concat(...e.map(l=>te(l)?It(l):l))},entries(){return Yn(this,"entries",e=>(e[1]=We(e[1]),e))},every(e,l){return Rl(this,"every",e,l,void 0,arguments)},filter(e,l){return Rl(this,"filter",e,l,t=>t.map(We),arguments)},find(e,l){return Rl(this,"find",e,l,We,arguments)},findIndex(e,l){return Rl(this,"findIndex",e,l,void 0,arguments)},findLast(e,l){return Rl(this,"findLast",e,l,We,arguments)},findLastIndex(e,l){return Rl(this,"findLastIndex",e,l,void 0,arguments)},forEach(e,l){return Rl(this,"forEach",e,l,void 0,arguments)},includes(...e){return Xn(this,"includes",e)},indexOf(...e){return Xn(this,"indexOf",e)},join(e){return It(this).join(e)},lastIndexOf(...e){return Xn(this,"lastIndexOf",e)},map(e,l){return Rl(this,"map",e,l,void 0,arguments)},pop(){return ai(this,"pop")},push(...e){return ai(this,"push",e)},reduce(e,...l){return Xs(this,"reduce",e,l)},reduceRight(e,...l){return Xs(this,"reduceRight",e,l)},shift(){return ai(this,"shift")},some(e,l){return Rl(this,"some",e,l,void 0,arguments)},splice(...e){return ai(this,"splice",e)},toReversed(){return It(this).toReversed()},toSorted(e){return It(this).toSorted(e)},toSpliced(...e){return It(this).toSpliced(...e)},unshift(...e){return ai(this,"unshift",e)},values(){return Yn(this,"values",We)}};function Yn(e,l,t){const i=ss(e),n=i[l]();return i!==e&&!bl(e)&&(n._next=n.next,n.next=()=>{const r=n._next();return r.value&&(r.value=t(r.value)),r}),n}const _h=Array.prototype;function Rl(e,l,t,i,n,r){const s=ss(e),a=s!==e&&!bl(e),c=s[l];if(c!==_h[l]){const u=c.apply(e,r);return a?We(u):u}let d=t;s!==e&&(a?d=function(u,g){return t.call(this,We(u),g,e)}:t.length>2&&(d=function(u,g){return t.call(this,u,g,e)}));const p=c.call(s,d,i);return a&&n?n(p):p}function Xs(e,l,t,i){const n=ss(e);let r=t;return n!==e&&(bl(e)?t.length>3&&(r=function(s,a,c){return t.call(this,s,a,c,e)}):r=function(s,a,c){return t.call(this,s,We(a),c,e)}),n[l](r,...i)}function Xn(e,l,t){const i=oe(e);$e(i,"iterate",Ai);const n=i[l](...t);return(n===-1||n===!1)&&cs(t[0])?(t[0]=oe(t[0]),i[l](...t)):n}function ai(e,l,t=[]){at(),is();const i=oe(e)[l].apply(e,t);return ns(),ot(),i}const xh=Yr("__proto__,__v_isRef,__isVue"),$o=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Zt));function Lh(e){Zt(e)||(e=String(e));const l=oe(this);return $e(l,"has",e),l.hasOwnProperty(e)}class Ho{constructor(l=!1,t=!1){this._isReadonly=l,this._isShallow=t}get(l,t,i){if(t==="__v_skip")return l.__v_skip;const n=this._isReadonly,r=this._isShallow;if(t==="__v_isReactive")return!n;if(t==="__v_isReadonly")return n;if(t==="__v_isShallow")return r;if(t==="__v_raw")return i===(n?r?Oh:Wo:r?Go:Uo).get(l)||Object.getPrototypeOf(l)===Object.getPrototypeOf(i)?l:void 0;const s=te(l);if(!n){let c;if(s&&(c=yh[t]))return c;if(t==="hasOwnProperty")return Lh}const a=Reflect.get(l,t,Pe(l)?l:i);return(Zt(t)?$o.has(t):xh(t))||(n||$e(l,"get",t),r)?a:Pe(a)?s&&es(t)?a:a.value:Fe(a)?n?Et(a):_t(a):a}}class No extends Ho{constructor(l=!1){super(!1,l)}set(l,t,i,n){let r=l[t];if(!this._isShallow){const c=xt(r);if(!bl(i)&&!xt(i)&&(r=oe(r),i=oe(i)),!te(l)&&Pe(r)&&!Pe(i))return c?!1:(r.value=i,!0)}const s=te(l)&&es(t)?Number(t)<l.length:ke(l,t),a=Reflect.set(l,t,i,Pe(l)?l:n);return l===oe(n)&&(s?nt(i,r)&&Ml(l,"set",t,i):Ml(l,"add",t,i)),a}deleteProperty(l,t){const i=ke(l,t);l[t];const n=Reflect.deleteProperty(l,t);return n&&i&&Ml(l,"delete",t,void 0),n}has(l,t){const i=Reflect.has(l,t);return(!Zt(t)||!$o.has(t))&&$e(l,"has",t),i}ownKeys(l){return $e(l,"iterate",te(l)?"length":ft),Reflect.ownKeys(l)}}class Ah extends Ho{constructor(l=!1){super(!0,l)}set(l,t){return!0}deleteProperty(l,t){return!0}}const Eh=new No,wh=new Ah,Th=new No(!0);const Ar=e=>e,en=e=>Reflect.getPrototypeOf(e);function Ch(e,l,t){return function(...i){const n=this.__v_raw,r=oe(n),s=ui(r),a=e==="entries"||e===Symbol.iterator&&s,c=e==="keys"&&s,d=n[e](...i),p=t?Ar:l?Er:We;return!l&&$e(r,"iterate",c?Lr:ft),{next(){const{value:u,done:g}=d.next();return g?{value:u,done:g}:{value:a?[p(u[0]),p(u[1])]:p(u),done:g}},[Symbol.iterator](){return this}}}}function ln(e){return function(...l){return e==="delete"?!1:e==="clear"?void 0:this}}function Dh(e,l){const t={get(n){const r=this.__v_raw,s=oe(r),a=oe(n);e||(nt(n,a)&&$e(s,"get",n),$e(s,"get",a));const{has:c}=en(s),d=l?Ar:e?Er:We;if(c.call(s,n))return d(r.get(n));if(c.call(s,a))return d(r.get(a));r!==s&&r.get(n)},get size(){const n=this.__v_raw;return!e&&$e(oe(n),"iterate",ft),Reflect.get(n,"size",n)},has(n){const r=this.__v_raw,s=oe(r),a=oe(n);return e||(nt(n,a)&&$e(s,"has",n),$e(s,"has",a)),n===a?r.has(n):r.has(n)||r.has(a)},forEach(n,r){const s=this,a=s.__v_raw,c=oe(a),d=l?Ar:e?Er:We;return!e&&$e(c,"iterate",ft),a.forEach((p,u)=>n.call(r,d(p),d(u),s))}};return Ve(t,e?{add:ln("add"),set:ln("set"),delete:ln("delete"),clear:ln("clear")}:{add(n){!l&&!bl(n)&&!xt(n)&&(n=oe(n));const r=oe(this);return en(r).has.call(r,n)||(r.add(n),Ml(r,"add",n,n)),this},set(n,r){!l&&!bl(r)&&!xt(r)&&(r=oe(r));const s=oe(this),{has:a,get:c}=en(s);let d=a.call(s,n);d||(n=oe(n),d=a.call(s,n));const p=c.call(s,n);return s.set(n,r),d?nt(r,p)&&Ml(s,"set",n,r):Ml(s,"add",n,r),this},delete(n){const r=oe(this),{has:s,get:a}=en(r);let c=s.call(r,n);c||(n=oe(n),c=s.call(r,n)),a&&a.call(r,n);const d=r.delete(n);return c&&Ml(r,"delete",n,void 0),d},clear(){const n=oe(this),r=n.size!==0,s=n.clear();return r&&Ml(n,"clear",void 0,void 0),s}}),["keys","values","entries",Symbol.iterator].forEach(n=>{t[n]=Ch(n,e,l)}),t}function as(e,l){const t=Dh(e,l);return(i,n,r)=>n==="__v_isReactive"?!e:n==="__v_isReadonly"?e:n==="__v_raw"?i:Reflect.get(ke(t,n)&&n in i?t:i,n,r)}const Fh={get:as(!1,!1)},Sh={get:as(!1,!0)},Ih={get:as(!0,!1)};const Uo=new WeakMap,Go=new WeakMap,Wo=new WeakMap,Oh=new WeakMap;function Ph(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function jh(e){return e.__v_skip||!Object.isExtensible(e)?0:Ph(ih(e))}function _t(e){return xt(e)?e:os(e,!1,Eh,Fh,Uo)}function Ko(e){return os(e,!1,Th,Sh,Go)}function Et(e){return os(e,!0,wh,Ih,Wo)}function os(e,l,t,i,n){if(!Fe(e)||e.__v_raw&&!(l&&e.__v_isReactive))return e;const r=n.get(e);if(r)return r;const s=jh(e);if(s===0)return e;const a=new Proxy(e,s===2?i:t);return n.set(e,a),a}function $t(e){return xt(e)?$t(e.__v_raw):!!(e&&e.__v_isReactive)}function xt(e){return!!(e&&e.__v_isReadonly)}function bl(e){return!!(e&&e.__v_isShallow)}function cs(e){return e?!!e.__v_raw:!1}function oe(e){const l=e&&e.__v_raw;return l?oe(l):e}function Rh(e){return!ke(e,"__v_skip")&&Object.isExtensible(e)&&So(e,"__v_skip",!0),e}const We=e=>Fe(e)?_t(e):e,Er=e=>Fe(e)?Et(e):e;function Pe(e){return e?e.__v_isRef===!0:!1}function ee(e){return Jo(e,!1)}function ne(e){return Jo(e,!0)}function Jo(e,l){return Pe(e)?e:new Vh(e,l)}class Vh{constructor(l,t){this.dep=new On,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?l:oe(l),this._value=t?l:We(l),this.__v_isShallow=t}get value(){return this.dep.track(),this._value}set value(l){const t=this._rawValue,i=this.__v_isShallow||bl(l)||xt(l);l=i?l:oe(l),nt(l,t)&&(this._rawValue=l,this._value=i?l:We(l),this.dep.trigger())}}function rt(e){return Pe(e)?e.value:e}function ce(e){return ie(e)?e():rt(e)}const Bh={get:(e,l,t)=>l==="__v_raw"?e:rt(Reflect.get(e,l,t)),set:(e,l,t,i)=>{const n=e[l];return Pe(n)&&!Pe(t)?(n.value=t,!0):Reflect.set(e,l,t,i)}};function Qo(e){return $t(e)?e:new Proxy(e,Bh)}class zh{constructor(l){this.__v_isRef=!0,this._value=void 0;const t=this.dep=new On,{get:i,set:n}=l(t.track.bind(t),t.trigger.bind(t));this._get=i,this._set=n}get value(){return this._value=this._get()}set value(l){this._set(l)}}function Yo(e){return new zh(e)}function qh(e){const l=te(e)?new Array(e.length):{};for(const t in e)l[t]=Xo(e,t);return l}class Mh{constructor(l,t,i){this._object=l,this._key=t,this._defaultValue=i,this.__v_isRef=!0,this._value=void 0}get value(){const l=this._object[this._key];return this._value=l===void 0?this._defaultValue:l}set value(l){this._object[this._key]=l}get dep(){return bh(oe(this._object),this._key)}}class $h{constructor(l){this._getter=l,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function wt(e,l,t){return Pe(e)?e:ie(e)?new $h(e):Fe(e)&&arguments.length>1?Xo(e,l,t):ee(e)}function Xo(e,l,t){const i=e[l];return Pe(i)?i:new Mh(e,l,t)}class Hh{constructor(l,t,i){this.fn=l,this.setter=t,this._value=void 0,this.dep=new On(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Li-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=i}notify(){if(this.flags|=16,!(this.flags&8)&&Le!==this)return Ro(this,!0),!0}get value(){const l=this.dep.track();return zo(this),l&&(l.version=this.dep.version),this._value}set value(l){this.setter&&this.setter(l)}}function Nh(e,l,t=!1){let i,n;return ie(e)?i=e:(i=e.get,n=e.set),new Hh(i,n,t)}const tn={},yn=new WeakMap;let mt;function Uh(e,l=!1,t=mt){if(t){let i=yn.get(t);i||yn.set(t,i=[]),i.push(e)}}function Gh(e,l,t=Ae){const{immediate:i,deep:n,once:r,scheduler:s,augmentJob:a,call:c}=t,d=A=>n?A:bl(A)||n===!1||n===0?it(A,1):it(A);let p,u,g,m,k=!1,y=!1;if(Pe(e)?(u=()=>e.value,k=bl(e)):$t(e)?(u=()=>d(e),k=!0):te(e)?(y=!0,k=e.some(A=>$t(A)||bl(A)),u=()=>e.map(A=>{if(Pe(A))return A.value;if($t(A))return d(A);if(ie(A))return c?c(A,2):A()})):ie(e)?l?u=c?()=>c(e,2):e:u=()=>{if(g){at();try{g()}finally{ot()}}const A=mt;mt=p;try{return c?c(e,3,[m]):e(m)}finally{mt=A}}:u=Il,l&&n){const A=u,I=n===!0?1/0:n;u=()=>it(A(),I)}const x=Oo(),E=()=>{p.stop(),x&&x.active&&Zr(x.effects,p)};if(r&&l){const A=l;l=(...I)=>{A(...I),E()}}let _=y?new Array(e.length).fill(tn):tn;const f=A=>{if(!(!(p.flags&1)||!p.dirty&&!A))if(l){const I=p.run();if(n||k||(y?I.some((M,T)=>nt(M,_[T])):nt(I,_))){g&&g();const M=mt;mt=p;try{const T=[I,_===tn?void 0:y&&_[0]===tn?[]:_,m];c?c(l,3,T):l(...T),_=I}finally{mt=M}}}else p.run()};return a&&a(f),p=new Po(u),p.scheduler=s?()=>s(f,!1):f,m=A=>Uh(A,!1,p),g=p.onStop=()=>{const A=yn.get(p);if(A){if(c)c(A,4);else for(const I of A)I();yn.delete(p)}},l?i?f(!0):_=p.run():s?s(f.bind(null,!0),!0):p.run(),E.pause=p.pause.bind(p),E.resume=p.resume.bind(p),E.stop=E,E}function it(e,l=1/0,t){if(l<=0||!Fe(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),l--,Pe(e))it(e.value,l,t);else if(te(e))for(let i=0;i<e.length;i++)it(e[i],l,t);else if(lh(e)||ui(e))e.forEach(i=>{it(i,l,t)});else if(nh(e)){for(const i in e)it(e[i],l,t);for(const i of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,i)&&it(e[i],l,t)}return e}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Vi(e,l,t,i){try{return i?e(...i):e()}catch(n){Bi(n,l,t)}}function _l(e,l,t,i){if(ie(e)){const n=Vi(e,l,t,i);return n&&Fo(n)&&n.catch(r=>{Bi(r,l,t)}),n}if(te(e)){const n=[];for(let r=0;r<e.length;r++)n.push(_l(e[r],l,t,i));return n}}function Bi(e,l,t,i=!0){const n=l?l.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:s}=l&&l.appContext.config||Ae;if(l){let a=l.parent;const c=l.proxy,d=`https://vuejs.org/error-reference/#runtime-${t}`;for(;a;){const p=a.ec;if(p){for(let u=0;u<p.length;u++)if(p[u](e,c,d)===!1)return}a=a.parent}if(r){at(),Vi(r,null,10,[e,c,d]),ot();return}}Wh(e,t,n,i,s)}function Wh(e,l,t,i=!0,n=!1){if(n)throw e;console.error(e)}const Ke=[];let Fl=-1;const Ht=[];let Zl=null,jt=0;const Zo=Promise.resolve();let _n=null;function ct(e){const l=_n||Zo;return e?l.then(this?e.bind(this):e):l}function Kh(e){let l=Fl+1,t=Ke.length;for(;l<t;){const i=l+t>>>1,n=Ke[i],r=Ei(n);r<e||r===e&&n.flags&2?l=i+1:t=i}return l}function ds(e){if(!(e.flags&1)){const l=Ei(e),t=Ke[Ke.length-1];!t||!(e.flags&2)&&l>=Ei(t)?Ke.push(e):Ke.splice(Kh(l),0,e),e.flags|=1,ec()}}function ec(){_n||(_n=Zo.then(lc))}function Jh(e){te(e)?Ht.push(...e):Zl&&e.id===-1?Zl.splice(jt+1,0,e):e.flags&1||(Ht.push(e),e.flags|=1),ec()}function Zs(e,l,t=Fl+1){for(;t<Ke.length;t++){const i=Ke[t];if(i&&i.flags&2){if(e&&i.id!==e.uid)continue;Ke.splice(t,1),t--,i.flags&4&&(i.flags&=-2),i(),i.flags&4||(i.flags&=-2)}}}function xn(e){if(Ht.length){const l=[...new Set(Ht)].sort((t,i)=>Ei(t)-Ei(i));if(Ht.length=0,Zl){Zl.push(...l);return}for(Zl=l,jt=0;jt<Zl.length;jt++){const t=Zl[jt];t.flags&4&&(t.flags&=-2),t.flags&8||t(),t.flags&=-2}Zl=null,jt=0}}const Ei=e=>e.id==null?e.flags&2?-1:1/0:e.id;function lc(e){try{for(Fl=0;Fl<Ke.length;Fl++){const l=Ke[Fl];l&&!(l.flags&8)&&(l.flags&4&&(l.flags&=-2),Vi(l,l.i,l.i?15:14),l.flags&4||(l.flags&=-2))}}finally{for(;Fl<Ke.length;Fl++){const l=Ke[Fl];l&&(l.flags&=-2)}Fl=-1,Ke.length=0,xn(),_n=null,(Ke.length||Ht.length)&&lc()}}let sl=null,tc=null;function Ln(e){const l=sl;return sl=e,tc=e&&e.type.__scopeId||null,l}function Qh(e,l=sl,t){if(!l||e._n)return e;const i=(...n)=>{i._d&&ha(-1);const r=Ln(l);let s;try{s=e(...n)}finally{Ln(r),i._d&&ha(1)}return s};return i._n=!0,i._c=!0,i._d=!0,i}function Sl(e,l,t,i){const n=e.dirs,r=l&&l.dirs;for(let s=0;s<n.length;s++){const a=n[s];r&&(a.oldValue=r[s].value);let c=a.dir[i];c&&(at(),_l(c,t,8,[e.el,a,e,l]),ot())}}const Yh=Symbol("_vte"),ic=e=>e.__isTeleport,et=Symbol("_leaveCb"),nn=Symbol("_enterCb");function nc(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Ee(()=>{e.isMounted=!0}),us(()=>{e.isUnmounting=!0}),e}const hl=[Function,Array],rc={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:hl,onEnter:hl,onAfterEnter:hl,onEnterCancelled:hl,onBeforeLeave:hl,onLeave:hl,onAfterLeave:hl,onLeaveCancelled:hl,onBeforeAppear:hl,onAppear:hl,onAfterAppear:hl,onAppearCancelled:hl},sc=e=>{const l=e.subTree;return l.component?sc(l.component):l},Xh={name:"BaseTransition",props:rc,setup(e,{slots:l}){const t=Ct(),i=nc();return()=>{const n=l.default&&hs(l.default(),!0);if(!n||!n.length)return;const r=ac(n),s=oe(e),{mode:a}=s;if(i.isLeaving)return Zn(r);const c=ea(r);if(!c)return Zn(r);let d=wi(c,s,i,t,u=>d=u);c.type!==nl&&Lt(c,d);let p=t.subTree&&ea(t.subTree);if(p&&p.type!==nl&&!vt(c,p)&&sc(t).type!==nl){let u=wi(p,s,i,t);if(Lt(p,u),a==="out-in"&&c.type!==nl)return i.isLeaving=!0,u.afterLeave=()=>{i.isLeaving=!1,t.job.flags&8||t.update(),delete u.afterLeave,p=void 0},Zn(r);a==="in-out"&&c.type!==nl?u.delayLeave=(g,m,k)=>{const y=oc(i,p);y[String(p.key)]=p,g[et]=()=>{m(),g[et]=void 0,delete d.delayedLeave,p=void 0},d.delayedLeave=()=>{k(),delete d.delayedLeave,p=void 0}}:p=void 0}else p&&(p=void 0);return r}}};function ac(e){let l=e[0];if(e.length>1){for(const t of e)if(t.type!==nl){l=t;break}}return l}const Zh=Xh;function oc(e,l){const{leavingVNodes:t}=e;let i=t.get(l.type);return i||(i=Object.create(null),t.set(l.type,i)),i}function wi(e,l,t,i,n){const{appear:r,mode:s,persisted:a=!1,onBeforeEnter:c,onEnter:d,onAfterEnter:p,onEnterCancelled:u,onBeforeLeave:g,onLeave:m,onAfterLeave:k,onLeaveCancelled:y,onBeforeAppear:x,onAppear:E,onAfterAppear:_,onAppearCancelled:f}=l,A=String(e.key),I=oc(t,e),M=(F,B)=>{F&&_l(F,i,9,B)},T=(F,B)=>{const j=B[1];M(F,B),te(F)?F.every(S=>S.length<=1)&&j():F.length<=1&&j()},N={mode:s,persisted:a,beforeEnter(F){let B=c;if(!t.isMounted)if(r)B=x||c;else return;F[et]&&F[et](!0);const j=I[A];j&&vt(e,j)&&j.el[et]&&j.el[et](),M(B,[F])},enter(F){let B=d,j=p,S=u;if(!t.isMounted)if(r)B=E||d,j=_||p,S=f||u;else return;let H=!1;const re=F[nn]=ge=>{H||(H=!0,ge?M(S,[F]):M(j,[F]),N.delayedLeave&&N.delayedLeave(),F[nn]=void 0)};B?T(B,[F,re]):re()},leave(F,B){const j=String(e.key);if(F[nn]&&F[nn](!0),t.isUnmounting)return B();M(g,[F]);let S=!1;const H=F[et]=re=>{S||(S=!0,B(),re?M(y,[F]):M(k,[F]),F[et]=void 0,I[j]===e&&delete I[j])};I[j]=e,m?T(m,[F,H]):H()},clone(F){const B=wi(F,l,t,i,n);return n&&n(B),B}};return N}function Zn(e){if(zi(e))return e=st(e),e.children=null,e}function ea(e){if(!zi(e))return ic(e.type)&&e.children?ac(e.children):e;const{shapeFlag:l,children:t}=e;if(t){if(l&16)return t[0];if(l&32&&ie(t.default))return t.default()}}function Lt(e,l){e.shapeFlag&6&&e.component?(e.transition=l,Lt(e.component.subTree,l)):e.shapeFlag&128?(e.ssContent.transition=l.clone(e.ssContent),e.ssFallback.transition=l.clone(e.ssFallback)):e.transition=l}function hs(e,l=!1,t){let i=[],n=0;for(let r=0;r<e.length;r++){let s=e[r];const a=t==null?s.key:String(t)+String(s.key!=null?s.key:r);s.type===il?(s.patchFlag&128&&n++,i=i.concat(hs(s.children,l,a))):(l||s.type!==nl)&&i.push(a!=null?st(s,{key:a}):s)}if(n>1)for(let r=0;r<i.length;r++)i[r].patchFlag=-2;return i}/*! #__NO_SIDE_EFFECTS__ */function V(e,l){return ie(e)?Ve({name:e.name},l,{setup:e}):e}function ps(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function Ti(e,l,t,i,n=!1){if(te(e)){e.forEach((k,y)=>Ti(k,l&&(te(l)?l[y]:l),t,i,n));return}if(Nt(i)&&!n){i.shapeFlag&512&&i.type.__asyncResolved&&i.component.subTree.component&&Ti(e,l,t,i.component.subTree);return}const r=i.shapeFlag&4?fs(i.component):i.el,s=n?null:r,{i:a,r:c}=e,d=l&&l.r,p=a.refs===Ae?a.refs={}:a.refs,u=a.setupState,g=oe(u),m=u===Ae?()=>!1:k=>ke(g,k);if(d!=null&&d!==c&&(Be(d)?(p[d]=null,m(d)&&(u[d]=null)):Pe(d)&&(d.value=null)),ie(c))Vi(c,a,12,[s,p]);else{const k=Be(c),y=Pe(c);if(k||y){const x=()=>{if(e.f){const E=k?m(c)?u[c]:p[c]:c.value;n?te(E)&&Zr(E,r):te(E)?E.includes(r)||E.push(r):k?(p[c]=[r],m(c)&&(u[c]=p[c])):(c.value=[r],e.k&&(p[e.k]=c.value))}else k?(p[c]=s,m(c)&&(u[c]=s)):y&&(c.value=s,e.k&&(p[e.k]=s))};s?(x.id=-1,tl(x,t)):x()}}}let la=!1;const Ot=()=>{la||(console.error("Hydration completed but contains mismatches."),la=!0)},ep=e=>e.namespaceURI.includes("svg")&&e.tagName!=="foreignObject",lp=e=>e.namespaceURI.includes("MathML"),rn=e=>{if(e.nodeType===1){if(ep(e))return"svg";if(lp(e))return"mathml"}},Bt=e=>e.nodeType===8;function tp(e){const{mt:l,p:t,o:{patchProp:i,createText:n,nextSibling:r,parentNode:s,remove:a,insert:c,createComment:d}}=e,p=(f,A)=>{if(!A.hasChildNodes()){t(null,f,A),xn(),A._vnode=f;return}u(A.firstChild,f,null,null,null),xn(),A._vnode=f},u=(f,A,I,M,T,N=!1)=>{N=N||!!A.dynamicChildren;const F=Bt(f)&&f.data==="[",B=()=>y(f,A,I,M,T,F),{type:j,ref:S,shapeFlag:H,patchFlag:re}=A;let ge=f.nodeType;A.el=f,re===-2&&(N=!1,A.dynamicChildren=null);let K=null;switch(j){case yt:ge!==3?A.children===""?(c(A.el=n(""),s(f),f),K=f):K=B():(f.data!==A.children&&(Ot(),f.data=A.children),K=r(f));break;case nl:_(f)?(K=r(f),E(A.el=f.content.firstChild,f,I)):ge!==8||F?K=B():K=r(f);break;case ki:if(F&&(f=r(f),ge=f.nodeType),ge===1||ge===3){K=f;const X=!A.children.length;for(let J=0;J<A.staticCount;J++)X&&(A.children+=K.nodeType===1?K.outerHTML:K.data),J===A.staticCount-1&&(A.anchor=K),K=r(K);return F?r(K):K}else B();break;case il:F?K=k(f,A,I,M,T,N):K=B();break;default:if(H&1)(ge!==1||A.type.toLowerCase()!==f.tagName.toLowerCase())&&!_(f)?K=B():K=g(f,A,I,M,T,N);else if(H&6){A.slotScopeIds=T;const X=s(f);if(F?K=x(f):Bt(f)&&f.data==="teleport start"?K=x(f,f.data,"teleport end"):K=r(f),l(A,X,null,I,M,rn(X),N),Nt(A)&&!A.type.__asyncResolved){let J;F?(J=Re(il),J.anchor=K?K.previousSibling:X.lastChild):J=f.nodeType===3?Pc(""):Re("div"),J.el=f,A.component.subTree=J}}else H&64?ge!==8?K=B():K=A.type.hydrate(f,A,I,M,T,N,e,m):H&128&&(K=A.type.hydrate(f,A,I,M,rn(s(f)),T,N,e,u))}return S!=null&&Ti(S,null,M,A),K},g=(f,A,I,M,T,N)=>{N=N||!!A.dynamicChildren;const{type:F,props:B,patchFlag:j,shapeFlag:S,dirs:H,transition:re}=A,ge=F==="input"||F==="option";if(ge||j!==-1){H&&Sl(A,null,I,"created");let K=!1;if(_(f)){K=Ac(null,re)&&I&&I.vnode.props&&I.vnode.props.appear;const J=f.content.firstChild;K&&re.beforeEnter(J),E(J,f,I),A.el=f=J}if(S&16&&!(B&&(B.innerHTML||B.textContent))){let J=m(f.firstChild,A,f,I,M,T,N);for(;J;){sn(f,1)||Ot();const me=J;J=J.nextSibling,a(me)}}else if(S&8){let J=A.children;J[0]===`
`&&(f.tagName==="PRE"||f.tagName==="TEXTAREA")&&(J=J.slice(1)),f.textContent!==J&&(sn(f,0)||Ot(),f.textContent=A.children)}if(B){if(ge||!N||j&48){const J=f.tagName.includes("-");for(const me in B)(ge&&(me.endsWith("value")||me==="indeterminate")||Ri(me)&&!Mt(me)||me[0]==="."||J)&&i(f,me,null,B[me],void 0,I)}else if(B.onClick)i(f,"onClick",null,B.onClick,void 0,I);else if(j&4&&$t(B.style))for(const J in B.style)B.style[J]}let X;(X=B&&B.onVnodeBeforeMount)&&pl(X,I,A),H&&Sl(A,null,I,"beforeMount"),((X=B&&B.onVnodeMounted)||H||K)&&Sc(()=>{X&&pl(X,I,A),K&&re.enter(f),H&&Sl(A,null,I,"mounted")},M)}return f.nextSibling},m=(f,A,I,M,T,N,F)=>{F=F||!!A.dynamicChildren;const B=A.children,j=B.length;for(let S=0;S<j;S++){const H=F?B[S]:B[S]=gl(B[S]),re=H.type===yt;f?(re&&!F&&S+1<j&&gl(B[S+1]).type===yt&&(c(n(f.data.slice(H.children.length)),I,r(f)),f.data=H.children),f=u(f,H,M,T,N,F)):re&&!H.children?c(H.el=n(""),I):(sn(I,1)||Ot(),t(null,H,I,null,M,T,rn(I),N))}return f},k=(f,A,I,M,T,N)=>{const{slotScopeIds:F}=A;F&&(T=T?T.concat(F):F);const B=s(f),j=m(r(f),A,B,I,M,T,N);return j&&Bt(j)&&j.data==="]"?r(A.anchor=j):(Ot(),c(A.anchor=d("]"),B,j),j)},y=(f,A,I,M,T,N)=>{if(sn(f.parentElement,1)||Ot(),A.el=null,N){const j=x(f);for(;;){const S=r(f);if(S&&S!==j)a(S);else break}}const F=r(f),B=s(f);return a(f),t(null,A,B,F,I,M,rn(B),T),I&&(I.vnode.el=A.el,Dc(I,A.el)),F},x=(f,A="[",I="]")=>{let M=0;for(;f;)if(f=r(f),f&&Bt(f)&&(f.data===A&&M++,f.data===I)){if(M===0)return r(f);M--}return f},E=(f,A,I)=>{const M=A.parentNode;M&&M.replaceChild(f,A);let T=I;for(;T;)T.vnode.el===A&&(T.vnode.el=T.subTree.el=f),T=T.parent},_=f=>f.nodeType===1&&f.tagName==="TEMPLATE";return[p,u]}const ta="data-allow-mismatch",ip={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function sn(e,l){if(l===0||l===1)for(;e&&!e.hasAttribute(ta);)e=e.parentElement;const t=e&&e.getAttribute(ta);if(t==null)return!1;if(t==="")return!0;{const i=t.split(",");return l===0&&i.includes("children")?!0:t.split(",").includes(ip[l])}}In().requestIdleCallback;In().cancelIdleCallback;function np(e,l){if(Bt(e)&&e.data==="["){let t=1,i=e.nextSibling;for(;i;){if(i.nodeType===1){if(l(i)===!1)break}else if(Bt(i))if(i.data==="]"){if(--t===0)break}else i.data==="["&&t++;i=i.nextSibling}}else l(e)}const Nt=e=>!!e.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function rp(e){ie(e)&&(e={loader:e});const{loader:l,loadingComponent:t,errorComponent:i,delay:n=200,hydrate:r,timeout:s,suspensible:a=!0,onError:c}=e;let d=null,p,u=0;const g=()=>(u++,d=null,m()),m=()=>{let k;return d||(k=d=l().catch(y=>{if(y=y instanceof Error?y:new Error(String(y)),c)return new Promise((x,E)=>{c(y,()=>x(g()),()=>E(y),u+1)});throw y}).then(y=>k!==d&&d?d:(y&&(y.__esModule||y[Symbol.toStringTag]==="Module")&&(y=y.default),p=y,y)))};return V({name:"AsyncComponentWrapper",__asyncLoader:m,__asyncHydrate(k,y,x){const E=r?()=>{const _=r(x,f=>np(k,f));_&&(y.bum||(y.bum=[])).push(_)}:x;p?E():m().then(()=>!y.isUnmounted&&E())},get __asyncResolved(){return p},setup(){const k=je;if(ps(k),p)return()=>er(p,k);const y=f=>{d=null,Bi(f,k,13,!i)};if(a&&k.suspense||Kt)return m().then(f=>()=>er(f,k)).catch(f=>(y(f),()=>i?Re(i,{error:f}):null));const x=ee(!1),E=ee(),_=ee(!!n);return n&&setTimeout(()=>{_.value=!1},n),s!=null&&setTimeout(()=>{if(!x.value&&!E.value){const f=new Error(`Async component timed out after ${s}ms.`);y(f),E.value=f}},s),m().then(()=>{x.value=!0,k.parent&&zi(k.parent.vnode)&&k.parent.update()}).catch(f=>{y(f),E.value=f}),()=>{if(x.value&&p)return er(p,k);if(E.value&&i)return Re(i,{error:E.value});if(t&&!_.value)return Re(t)}}})}function er(e,l){const{ref:t,props:i,children:n,ce:r}=l.vnode,s=Re(e,i,n);return s.ref=t,s.ce=r,delete l.vnode.ce,s}const zi=e=>e.type.__isKeepAlive;function sp(e,l){cc(e,"a",l)}function ap(e,l){cc(e,"da",l)}function cc(e,l,t=je){const i=e.__wdc||(e.__wdc=()=>{let n=t;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(Pn(l,i,t),t){let n=t.parent;for(;n&&n.parent;)zi(n.parent.vnode)&&op(i,l,t,n),n=n.parent}}function op(e,l,t,i){const n=Pn(l,e,i,!0);Tt(()=>{Zr(i[l],n)},t)}function Pn(e,l,t=je,i=!1){if(t){const n=t[e]||(t[e]=[]),r=l.__weh||(l.__weh=(...s)=>{at();const a=qi(t),c=_l(l,t,e,s);return a(),ot(),c});return i?n.unshift(r):n.push(r),r}}const Nl=e=>(l,t=je)=>{(!Kt||e==="sp")&&Pn(e,(...i)=>l(...i),t)},cp=Nl("bm"),Ee=Nl("m"),dp=Nl("bu"),dc=Nl("u"),us=Nl("bum"),Tt=Nl("um"),hp=Nl("sp"),pp=Nl("rtg"),up=Nl("rtc");function gp(e,l=je){Pn("ec",e,l)}const mp="components";function Ce(e,l){return kp(mp,e,!0,l)||e}const vp=Symbol.for("v-ndc");function kp(e,l,t=!0,i=!1){const n=sl||je;if(n){const r=n.type;{const a=l2(r,!1);if(a&&(a===l||a===He(l)||a===ei(He(l))))return r}const s=ia(n[e]||r[e],l)||ia(n.appContext[e],l);return!s&&i?r:s}}function ia(e,l){return e&&(e[l]||e[He(l)]||e[ei(He(l))])}const wr=e=>e?jc(e)?fs(e):wr(e.parent):null,vi=Ve(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>wr(e.parent),$root:e=>wr(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>pc(e),$forceUpdate:e=>e.f||(e.f=()=>{ds(e.update)}),$nextTick:e=>e.n||(e.n=ct.bind(e.proxy)),$watch:e=>Vp.bind(e)}),lr=(e,l)=>e!==Ae&&!e.__isScriptSetup&&ke(e,l),fp={get({_:e},l){if(l==="__v_skip")return!0;const{ctx:t,setupState:i,data:n,props:r,accessCache:s,type:a,appContext:c}=e;let d;if(l[0]!=="$"){const m=s[l];if(m!==void 0)switch(m){case 1:return i[l];case 2:return n[l];case 4:return t[l];case 3:return r[l]}else{if(lr(i,l))return s[l]=1,i[l];if(n!==Ae&&ke(n,l))return s[l]=2,n[l];if((d=e.propsOptions[0])&&ke(d,l))return s[l]=3,r[l];if(t!==Ae&&ke(t,l))return s[l]=4,t[l];Tr&&(s[l]=0)}}const p=vi[l];let u,g;if(p)return l==="$attrs"&&$e(e.attrs,"get",""),p(e);if((u=a.__cssModules)&&(u=u[l]))return u;if(t!==Ae&&ke(t,l))return s[l]=4,t[l];if(g=c.config.globalProperties,ke(g,l))return g[l]},set({_:e},l,t){const{data:i,setupState:n,ctx:r}=e;return lr(n,l)?(n[l]=t,!0):i!==Ae&&ke(i,l)?(i[l]=t,!0):ke(e.props,l)||l[0]==="$"&&l.slice(1)in e?!1:(r[l]=t,!0)},has({_:{data:e,setupState:l,accessCache:t,ctx:i,appContext:n,propsOptions:r}},s){let a;return!!t[s]||e!==Ae&&ke(e,s)||lr(l,s)||(a=r[0])&&ke(a,s)||ke(i,s)||ke(vi,s)||ke(n.config.globalProperties,s)},defineProperty(e,l,t){return t.get!=null?e._.accessCache[l]=0:ke(t,"value")&&this.set(e,l,t.value,null),Reflect.defineProperty(e,l,t)}};function na(e){return te(e)?e.reduce((l,t)=>(l[t]=null,l),{}):e}let Tr=!0;function bp(e){const l=pc(e),t=e.proxy,i=e.ctx;Tr=!1,l.beforeCreate&&ra(l.beforeCreate,e,"bc");const{data:n,computed:r,methods:s,watch:a,provide:c,inject:d,created:p,beforeMount:u,mounted:g,beforeUpdate:m,updated:k,activated:y,deactivated:x,beforeDestroy:E,beforeUnmount:_,destroyed:f,unmounted:A,render:I,renderTracked:M,renderTriggered:T,errorCaptured:N,serverPrefetch:F,expose:B,inheritAttrs:j,components:S,directives:H,filters:re}=l;if(d&&yp(d,i,null),s)for(const X in s){const J=s[X];ie(J)&&(i[X]=J.bind(t))}if(n){const X=n.call(t,t);Fe(X)&&(e.data=_t(X))}if(Tr=!0,r)for(const X in r){const J=r[X],me=ie(J)?J.bind(t,t):ie(J.get)?J.get.bind(t,t):Il,wl=!ie(J)&&ie(J.set)?J.set.bind(t):Il,dl=L({get:me,set:wl});Object.defineProperty(i,X,{enumerable:!0,configurable:!0,get:()=>dl.value,set:ze=>dl.value=ze})}if(a)for(const X in a)hc(a[X],i,t,X);if(c){const X=ie(c)?c.call(t):c;Reflect.ownKeys(X).forEach(J=>{yl(J,X[J])})}p&&ra(p,e,"c");function K(X,J){te(J)?J.forEach(me=>X(me.bind(t))):J&&X(J.bind(t))}if(K(cp,u),K(Ee,g),K(dp,m),K(dc,k),K(sp,y),K(ap,x),K(gp,N),K(up,M),K(pp,T),K(us,_),K(Tt,A),K(hp,F),te(B))if(B.length){const X=e.exposed||(e.exposed={});B.forEach(J=>{Object.defineProperty(X,J,{get:()=>t[J],set:me=>t[J]=me})})}else e.exposed||(e.exposed={});I&&e.render===Il&&(e.render=I),j!=null&&(e.inheritAttrs=j),S&&(e.components=S),H&&(e.directives=H),F&&ps(e)}function yp(e,l,t=Il){te(e)&&(e=Cr(e));for(const i in e){const n=e[i];let r;Fe(n)?"default"in n?r=Te(n.from||i,n.default,!0):r=Te(n.from||i):r=Te(n),Pe(r)?Object.defineProperty(l,i,{enumerable:!0,configurable:!0,get:()=>r.value,set:s=>r.value=s}):l[i]=r}}function ra(e,l,t){_l(te(e)?e.map(i=>i.bind(l.proxy)):e.bind(l.proxy),l,t)}function hc(e,l,t,i){let n=i.includes(".")?Tc(t,i):()=>t[i];if(Be(e)){const r=l[e];ie(r)&&Ie(n,r)}else if(ie(e))Ie(n,e.bind(t));else if(Fe(e))if(te(e))e.forEach(r=>hc(r,l,t,i));else{const r=ie(e.handler)?e.handler.bind(t):l[e.handler];ie(r)&&Ie(n,r,e)}}function pc(e){const l=e.type,{mixins:t,extends:i}=l,{mixins:n,optionsCache:r,config:{optionMergeStrategies:s}}=e.appContext,a=r.get(l);let c;return a?c=a:!n.length&&!t&&!i?c=l:(c={},n.length&&n.forEach(d=>An(c,d,s,!0)),An(c,l,s)),Fe(l)&&r.set(l,c),c}function An(e,l,t,i=!1){const{mixins:n,extends:r}=l;r&&An(e,r,t,!0),n&&n.forEach(s=>An(e,s,t,!0));for(const s in l)if(!(i&&s==="expose")){const a=_p[s]||t&&t[s];e[s]=a?a(e[s],l[s]):l[s]}return e}const _p={data:sa,props:aa,emits:aa,methods:hi,computed:hi,beforeCreate:Ue,created:Ue,beforeMount:Ue,mounted:Ue,beforeUpdate:Ue,updated:Ue,beforeDestroy:Ue,beforeUnmount:Ue,destroyed:Ue,unmounted:Ue,activated:Ue,deactivated:Ue,errorCaptured:Ue,serverPrefetch:Ue,components:hi,directives:hi,watch:Lp,provide:sa,inject:xp};function sa(e,l){return l?e?function(){return Ve(ie(e)?e.call(this,this):e,ie(l)?l.call(this,this):l)}:l:e}function xp(e,l){return hi(Cr(e),Cr(l))}function Cr(e){if(te(e)){const l={};for(let t=0;t<e.length;t++)l[e[t]]=e[t];return l}return e}function Ue(e,l){return e?[...new Set([].concat(e,l))]:l}function hi(e,l){return e?Ve(Object.create(null),e,l):l}function aa(e,l){return e?te(e)&&te(l)?[...new Set([...e,...l])]:Ve(Object.create(null),na(e),na(l??{})):l}function Lp(e,l){if(!e)return l;if(!l)return e;const t=Ve(Object.create(null),e);for(const i in l)t[i]=Ue(e[i],l[i]);return t}function uc(){return{app:null,config:{isNativeTag:Z0,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Ap=0;function Ep(e,l){return function(i,n=null){ie(i)||(i=Ve({},i)),n!=null&&!Fe(n)&&(n=null);const r=uc(),s=new WeakSet,a=[];let c=!1;const d=r.app={_uid:Ap++,_component:i,_props:n,_container:null,_context:r,_instance:null,version:i2,get config(){return r.config},set config(p){},use(p,...u){return s.has(p)||(p&&ie(p.install)?(s.add(p),p.install(d,...u)):ie(p)&&(s.add(p),p(d,...u))),d},mixin(p){return r.mixins.includes(p)||r.mixins.push(p),d},component(p,u){return u?(r.components[p]=u,d):r.components[p]},directive(p,u){return u?(r.directives[p]=u,d):r.directives[p]},mount(p,u,g){if(!c){const m=d._ceVNode||Re(i,n);return m.appContext=r,g===!0?g="svg":g===!1&&(g=void 0),u&&l?l(m,p):e(m,p,g),c=!0,d._container=p,p.__vue_app__=d,fs(m.component)}},onUnmount(p){a.push(p)},unmount(){c&&(_l(a,d._instance,16),e(null,d._container),delete d._container.__vue_app__)},provide(p,u){return r.provides[p]=u,d},runWithContext(p){const u=bt;bt=d;try{return p()}finally{bt=u}}};return d}}let bt=null;function yl(e,l){if(je){let t=je.provides;const i=je.parent&&je.parent.provides;i===t&&(t=je.provides=Object.create(i)),t[e]=l}}function Te(e,l,t=!1){const i=je||sl;if(i||bt){const n=bt?bt._context.provides:i?i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides:void 0;if(n&&e in n)return n[e];if(arguments.length>1)return t&&ie(l)?l.call(i&&i.proxy):l}}function gc(){return!!(je||sl||bt)}const mc={},vc=()=>Object.create(mc),kc=e=>Object.getPrototypeOf(e)===mc;function wp(e,l,t,i=!1){const n={},r=vc();e.propsDefaults=Object.create(null),fc(e,l,n,r);for(const s in e.propsOptions[0])s in n||(n[s]=void 0);t?e.props=i?n:Ko(n):e.type.props?e.props=n:e.props=r,e.attrs=r}function Tp(e,l,t,i){const{props:n,attrs:r,vnode:{patchFlag:s}}=e,a=oe(n),[c]=e.propsOptions;let d=!1;if((i||s>0)&&!(s&16)){if(s&8){const p=e.vnode.dynamicProps;for(let u=0;u<p.length;u++){let g=p[u];if(jn(e.emitsOptions,g))continue;const m=l[g];if(c)if(ke(r,g))m!==r[g]&&(r[g]=m,d=!0);else{const k=He(g);n[k]=Dr(c,a,k,m,e,!1)}else m!==r[g]&&(r[g]=m,d=!0)}}}else{fc(e,l,n,r)&&(d=!0);let p;for(const u in a)(!l||!ke(l,u)&&((p=At(u))===u||!ke(l,p)))&&(c?t&&(t[u]!==void 0||t[p]!==void 0)&&(n[u]=Dr(c,a,u,void 0,e,!0)):delete n[u]);if(r!==a)for(const u in r)(!l||!ke(l,u))&&(delete r[u],d=!0)}d&&Ml(e.attrs,"set","")}function fc(e,l,t,i){const[n,r]=e.propsOptions;let s=!1,a;if(l)for(let c in l){if(Mt(c))continue;const d=l[c];let p;n&&ke(n,p=He(c))?!r||!r.includes(p)?t[p]=d:(a||(a={}))[p]=d:jn(e.emitsOptions,c)||(!(c in i)||d!==i[c])&&(i[c]=d,s=!0)}if(r){const c=oe(t),d=a||Ae;for(let p=0;p<r.length;p++){const u=r[p];t[u]=Dr(n,c,u,d[u],e,!ke(d,u))}}return s}function Dr(e,l,t,i,n,r){const s=e[t];if(s!=null){const a=ke(s,"default");if(a&&i===void 0){const c=s.default;if(s.type!==Function&&!s.skipFactory&&ie(c)){const{propsDefaults:d}=n;if(t in d)i=d[t];else{const p=qi(n);i=d[t]=c.call(null,l),p()}}else i=c;n.ce&&n.ce._setProp(t,i)}s[0]&&(r&&!a?i=!1:s[1]&&(i===""||i===At(t))&&(i=!0))}return i}const Cp=new WeakMap;function bc(e,l,t=!1){const i=t?Cp:l.propsCache,n=i.get(e);if(n)return n;const r=e.props,s={},a=[];let c=!1;if(!ie(e)){const p=u=>{c=!0;const[g,m]=bc(u,l,!0);Ve(s,g),m&&a.push(...m)};!t&&l.mixins.length&&l.mixins.forEach(p),e.extends&&p(e.extends),e.mixins&&e.mixins.forEach(p)}if(!r&&!c)return Fe(e)&&i.set(e,qt),qt;if(te(r))for(let p=0;p<r.length;p++){const u=He(r[p]);oa(u)&&(s[u]=Ae)}else if(r)for(const p in r){const u=He(p);if(oa(u)){const g=r[p],m=s[u]=te(g)||ie(g)?{type:g}:Ve({},g),k=m.type;let y=!1,x=!0;if(te(k))for(let E=0;E<k.length;++E){const _=k[E],f=ie(_)&&_.name;if(f==="Boolean"){y=!0;break}else f==="String"&&(x=!1)}else y=ie(k)&&k.name==="Boolean";m[0]=y,m[1]=x,(y||ke(m,"default"))&&a.push(u)}}const d=[s,a];return Fe(e)&&i.set(e,d),d}function oa(e){return e[0]!=="$"&&!Mt(e)}const yc=e=>e[0]==="_"||e==="$stable",gs=e=>te(e)?e.map(gl):[gl(e)],Dp=(e,l,t)=>{if(l._n)return l;const i=Qh((...n)=>gs(l(...n)),t);return i._c=!1,i},_c=(e,l,t)=>{const i=e._ctx;for(const n in e){if(yc(n))continue;const r=e[n];if(ie(r))l[n]=Dp(n,r,i);else if(r!=null){const s=gs(r);l[n]=()=>s}}},xc=(e,l)=>{const t=gs(l);e.slots.default=()=>t},Lc=(e,l,t)=>{for(const i in l)(t||i!=="_")&&(e[i]=l[i])},Fp=(e,l,t)=>{const i=e.slots=vc();if(e.vnode.shapeFlag&32){const n=l._;n?(Lc(i,l,t),t&&So(i,"_",n,!0)):_c(l,i)}else l&&xc(e,l)},Sp=(e,l,t)=>{const{vnode:i,slots:n}=e;let r=!0,s=Ae;if(i.shapeFlag&32){const a=l._;a?t&&a===1?r=!1:Lc(n,l,t):(r=!l.$stable,_c(l,n)),s=l}else l&&(xc(e,l),s={default:1});if(r)for(const a in n)!yc(a)&&s[a]==null&&delete n[a]},tl=Sc;function Ip(e){return Op(e,tp)}function Op(e,l){const t=In();t.__VUE__=!0;const{insert:i,remove:n,patchProp:r,createElement:s,createText:a,createComment:c,setText:d,setElementText:p,parentNode:u,nextSibling:g,setScopeId:m=Il,insertStaticContent:k}=e,y=(v,b,w,O=null,D=null,P=null,U=void 0,q=null,z=!!b.dynamicChildren)=>{if(v===b)return;v&&!vt(v,b)&&(O=C(v),ze(v,D,P,!0),v=null),b.patchFlag===-2&&(z=!1,b.dynamicChildren=null);const{type:R,ref:Z,shapeFlag:W}=b;switch(R){case yt:x(v,b,w,O);break;case nl:E(v,b,w,O);break;case ki:v==null&&_(b,w,O,U);break;case il:S(v,b,w,O,D,P,U,q,z);break;default:W&1?I(v,b,w,O,D,P,U,q,z):W&6?H(v,b,w,O,D,P,U,q,z):(W&64||W&128)&&R.process(v,b,w,O,D,P,U,q,z,Q)}Z!=null&&D&&Ti(Z,v&&v.ref,P,b||v,!b)},x=(v,b,w,O)=>{if(v==null)i(b.el=a(b.children),w,O);else{const D=b.el=v.el;b.children!==v.children&&d(D,b.children)}},E=(v,b,w,O)=>{v==null?i(b.el=c(b.children||""),w,O):b.el=v.el},_=(v,b,w,O)=>{[v.el,v.anchor]=k(v.children,b,w,O,v.el,v.anchor)},f=({el:v,anchor:b},w,O)=>{let D;for(;v&&v!==b;)D=g(v),i(v,w,O),v=D;i(b,w,O)},A=({el:v,anchor:b})=>{let w;for(;v&&v!==b;)w=g(v),n(v),v=w;n(b)},I=(v,b,w,O,D,P,U,q,z)=>{b.type==="svg"?U="svg":b.type==="math"&&(U="mathml"),v==null?M(b,w,O,D,P,U,q,z):F(v,b,D,P,U,q,z)},M=(v,b,w,O,D,P,U,q)=>{let z,R;const{props:Z,shapeFlag:W,transition:Y,dirs:le}=v;if(z=v.el=s(v.type,P,Z&&Z.is,Z),W&8?p(z,v.children):W&16&&N(v.children,z,null,O,D,tr(v,P),U,q),le&&Sl(v,null,O,"created"),T(z,v,v.scopeId,U,O),Z){for(const xe in Z)xe!=="value"&&!Mt(xe)&&r(z,xe,null,Z[xe],P,O);"value"in Z&&r(z,"value",null,Z.value,P),(R=Z.onVnodeBeforeMount)&&pl(R,O,v)}le&&Sl(v,null,O,"beforeMount");const ae=Ac(D,Y);ae&&Y.beforeEnter(z),i(z,b,w),((R=Z&&Z.onVnodeMounted)||ae||le)&&tl(()=>{R&&pl(R,O,v),ae&&Y.enter(z),le&&Sl(v,null,O,"mounted")},D)},T=(v,b,w,O,D)=>{if(w&&m(v,w),O)for(let P=0;P<O.length;P++)m(v,O[P]);if(D){let P=D.subTree;if(b===P||Fc(P.type)&&(P.ssContent===b||P.ssFallback===b)){const U=D.vnode;T(v,U,U.scopeId,U.slotScopeIds,D.parent)}}},N=(v,b,w,O,D,P,U,q,z=0)=>{for(let R=z;R<v.length;R++){const Z=v[R]=q?lt(v[R]):gl(v[R]);y(null,Z,b,w,O,D,P,U,q)}},F=(v,b,w,O,D,P,U)=>{const q=b.el=v.el;let{patchFlag:z,dynamicChildren:R,dirs:Z}=b;z|=v.patchFlag&16;const W=v.props||Ae,Y=b.props||Ae;let le;if(w&&pt(w,!1),(le=Y.onVnodeBeforeUpdate)&&pl(le,w,b,v),Z&&Sl(b,v,w,"beforeUpdate"),w&&pt(w,!0),(W.innerHTML&&Y.innerHTML==null||W.textContent&&Y.textContent==null)&&p(q,""),R?B(v.dynamicChildren,R,q,w,O,tr(b,D),P):U||J(v,b,q,null,w,O,tr(b,D),P,!1),z>0){if(z&16)j(q,W,Y,w,D);else if(z&2&&W.class!==Y.class&&r(q,"class",null,Y.class,D),z&4&&r(q,"style",W.style,Y.style,D),z&8){const ae=b.dynamicProps;for(let xe=0;xe<ae.length;xe++){const fe=ae[xe],Ze=W[fe],Me=Y[fe];(Me!==Ze||fe==="value")&&r(q,fe,Ze,Me,D,w)}}z&1&&v.children!==b.children&&p(q,b.children)}else!U&&R==null&&j(q,W,Y,w,D);((le=Y.onVnodeUpdated)||Z)&&tl(()=>{le&&pl(le,w,b,v),Z&&Sl(b,v,w,"updated")},O)},B=(v,b,w,O,D,P,U)=>{for(let q=0;q<b.length;q++){const z=v[q],R=b[q],Z=z.el&&(z.type===il||!vt(z,R)||z.shapeFlag&70)?u(z.el):w;y(z,R,Z,null,O,D,P,U,!0)}},j=(v,b,w,O,D)=>{if(b!==w){if(b!==Ae)for(const P in b)!Mt(P)&&!(P in w)&&r(v,P,b[P],null,D,O);for(const P in w){if(Mt(P))continue;const U=w[P],q=b[P];U!==q&&P!=="value"&&r(v,P,q,U,D,O)}"value"in w&&r(v,"value",b.value,w.value,D)}},S=(v,b,w,O,D,P,U,q,z)=>{const R=b.el=v?v.el:a(""),Z=b.anchor=v?v.anchor:a("");let{patchFlag:W,dynamicChildren:Y,slotScopeIds:le}=b;le&&(q=q?q.concat(le):le),v==null?(i(R,w,O),i(Z,w,O),N(b.children||[],w,Z,D,P,U,q,z)):W>0&&W&64&&Y&&v.dynamicChildren?(B(v.dynamicChildren,Y,w,D,P,U,q),(b.key!=null||D&&b===D.subTree)&&Ec(v,b,!0)):J(v,b,w,Z,D,P,U,q,z)},H=(v,b,w,O,D,P,U,q,z)=>{b.slotScopeIds=q,v==null?b.shapeFlag&512?D.ctx.activate(b,w,O,U,z):re(b,w,O,D,P,U,z):ge(v,b,z)},re=(v,b,w,O,D,P,U)=>{const q=v.component=Qp(v,O,D);if(zi(v)&&(q.ctx.renderer=Q),Yp(q,!1,U),q.asyncDep){if(D&&D.registerDep(q,K,U),!v.el){const z=q.subTree=Re(nl);E(null,z,b,w)}}else K(q,v,b,w,D,P,U)},ge=(v,b,w)=>{const O=b.component=v.component;if($p(v,b,w))if(O.asyncDep&&!O.asyncResolved){X(O,b,w);return}else O.next=b,O.update();else b.el=v.el,O.vnode=b},K=(v,b,w,O,D,P,U)=>{const q=()=>{if(v.isMounted){let{next:W,bu:Y,u:le,parent:ae,vnode:xe}=v;{const el=wc(v);if(el){W&&(W.el=xe.el,X(v,W,U)),el.asyncDep.then(()=>{v.isUnmounted||q()});return}}let fe=W,Ze;pt(v,!1),W?(W.el=xe.el,X(v,W,U)):W=xe,Y&&Jn(Y),(Ze=W.props&&W.props.onVnodeBeforeUpdate)&&pl(Ze,ae,W,xe),pt(v,!0);const Me=ir(v),vl=v.subTree;v.subTree=Me,y(vl,Me,u(vl.el),C(vl),v,D,P),W.el=Me.el,fe===null&&Dc(v,Me.el),le&&tl(le,D),(Ze=W.props&&W.props.onVnodeUpdated)&&tl(()=>pl(Ze,ae,W,xe),D)}else{let W;const{el:Y,props:le}=b,{bm:ae,m:xe,parent:fe,root:Ze,type:Me}=v,vl=Nt(b);if(pt(v,!1),ae&&Jn(ae),!vl&&(W=le&&le.onVnodeBeforeMount)&&pl(W,fe,b),pt(v,!0),Y&&be){const el=()=>{v.subTree=ir(v),be(Y,v.subTree,v,D,null)};vl&&Me.__asyncHydrate?Me.__asyncHydrate(Y,v,el):el()}else{Ze.ce&&Ze.ce._injectChildStyle(Me);const el=v.subTree=ir(v);y(null,el,w,O,v,D,P),b.el=el.el}if(xe&&tl(xe,D),!vl&&(W=le&&le.onVnodeMounted)){const el=b;tl(()=>pl(W,fe,el),D)}(b.shapeFlag&256||fe&&Nt(fe.vnode)&&fe.vnode.shapeFlag&256)&&v.a&&tl(v.a,D),v.isMounted=!0,b=w=O=null}};v.scope.on();const z=v.effect=new Po(q);v.scope.off();const R=v.update=z.run.bind(z),Z=v.job=z.runIfDirty.bind(z);Z.i=v,Z.id=v.uid,z.scheduler=()=>ds(Z),pt(v,!0),R()},X=(v,b,w)=>{b.component=v;const O=v.vnode.props;v.vnode=b,v.next=null,Tp(v,b.props,O,w),Sp(v,b.children,w),at(),Zs(v),ot()},J=(v,b,w,O,D,P,U,q,z=!1)=>{const R=v&&v.children,Z=v?v.shapeFlag:0,W=b.children,{patchFlag:Y,shapeFlag:le}=b;if(Y>0){if(Y&128){wl(R,W,w,O,D,P,U,q,z);return}else if(Y&256){me(R,W,w,O,D,P,U,q,z);return}}le&8?(Z&16&&qe(R,D,P),W!==R&&p(w,W)):Z&16?le&16?wl(R,W,w,O,D,P,U,q,z):qe(R,D,P,!0):(Z&8&&p(w,""),le&16&&N(W,w,O,D,P,U,q,z))},me=(v,b,w,O,D,P,U,q,z)=>{v=v||qt,b=b||qt;const R=v.length,Z=b.length,W=Math.min(R,Z);let Y;for(Y=0;Y<W;Y++){const le=b[Y]=z?lt(b[Y]):gl(b[Y]);y(v[Y],le,w,null,D,P,U,q,z)}R>Z?qe(v,D,P,!0,!1,W):N(b,w,O,D,P,U,q,z,W)},wl=(v,b,w,O,D,P,U,q,z)=>{let R=0;const Z=b.length;let W=v.length-1,Y=Z-1;for(;R<=W&&R<=Y;){const le=v[R],ae=b[R]=z?lt(b[R]):gl(b[R]);if(vt(le,ae))y(le,ae,w,null,D,P,U,q,z);else break;R++}for(;R<=W&&R<=Y;){const le=v[W],ae=b[Y]=z?lt(b[Y]):gl(b[Y]);if(vt(le,ae))y(le,ae,w,null,D,P,U,q,z);else break;W--,Y--}if(R>W){if(R<=Y){const le=Y+1,ae=le<Z?b[le].el:O;for(;R<=Y;)y(null,b[R]=z?lt(b[R]):gl(b[R]),w,ae,D,P,U,q,z),R++}}else if(R>Y)for(;R<=W;)ze(v[R],D,P,!0),R++;else{const le=R,ae=R,xe=new Map;for(R=ae;R<=Y;R++){const ll=b[R]=z?lt(b[R]):gl(b[R]);ll.key!=null&&xe.set(ll.key,R)}let fe,Ze=0;const Me=Y-ae+1;let vl=!1,el=0;const si=new Array(Me);for(R=0;R<Me;R++)si[R]=0;for(R=le;R<=W;R++){const ll=v[R];if(Ze>=Me){ze(ll,D,P,!0);continue}let Cl;if(ll.key!=null)Cl=xe.get(ll.key);else for(fe=ae;fe<=Y;fe++)if(si[fe-ae]===0&&vt(ll,b[fe])){Cl=fe;break}Cl===void 0?ze(ll,D,P,!0):(si[Cl-ae]=R+1,Cl>=el?el=Cl:vl=!0,y(ll,b[Cl],w,null,D,P,U,q,z),Ze++)}const Ks=vl?Pp(si):qt;for(fe=Ks.length-1,R=Me-1;R>=0;R--){const ll=ae+R,Cl=b[ll],Js=ll+1<Z?b[ll+1].el:O;si[R]===0?y(null,Cl,w,Js,D,P,U,q,z):vl&&(fe<0||R!==Ks[fe]?dl(Cl,w,Js,2):fe--)}}},dl=(v,b,w,O,D=null)=>{const{el:P,type:U,transition:q,children:z,shapeFlag:R}=v;if(R&6){dl(v.component.subTree,b,w,O);return}if(R&128){v.suspense.move(b,w,O);return}if(R&64){U.move(v,b,w,Q);return}if(U===il){i(P,b,w);for(let W=0;W<z.length;W++)dl(z[W],b,w,O);i(v.anchor,b,w);return}if(U===ki){f(v,b,w);return}if(O!==2&&R&1&&q)if(O===0)q.beforeEnter(P),i(P,b,w),tl(()=>q.enter(P),D);else{const{leave:W,delayLeave:Y,afterLeave:le}=q,ae=()=>i(P,b,w),xe=()=>{W(P,()=>{ae(),le&&le()})};Y?Y(P,ae,xe):xe()}else i(P,b,w)},ze=(v,b,w,O=!1,D=!1)=>{const{type:P,props:U,ref:q,children:z,dynamicChildren:R,shapeFlag:Z,patchFlag:W,dirs:Y,cacheIndex:le}=v;if(W===-2&&(D=!1),q!=null&&Ti(q,null,w,v,!0),le!=null&&(b.renderCache[le]=void 0),Z&256){b.ctx.deactivate(v);return}const ae=Z&1&&Y,xe=!Nt(v);let fe;if(xe&&(fe=U&&U.onVnodeBeforeUnmount)&&pl(fe,b,v),Z&6)Tl(v.component,w,O);else{if(Z&128){v.suspense.unmount(w,O);return}ae&&Sl(v,null,b,"beforeUnmount"),Z&64?v.type.remove(v,b,w,Q,O):R&&!R.hasOnce&&(P!==il||W>0&&W&64)?qe(R,b,w,!1,!0):(P===il&&W&384||!D&&Z&16)&&qe(z,b,w),O&&Xe(v)}(xe&&(fe=U&&U.onVnodeUnmounted)||ae)&&tl(()=>{fe&&pl(fe,b,v),ae&&Sl(v,null,b,"unmounted")},w)},Xe=v=>{const{type:b,el:w,anchor:O,transition:D}=v;if(b===il){jl(w,O);return}if(b===ki){A(v);return}const P=()=>{n(w),D&&!D.persisted&&D.afterLeave&&D.afterLeave()};if(v.shapeFlag&1&&D&&!D.persisted){const{leave:U,delayLeave:q}=D,z=()=>U(w,P);q?q(v.el,P,z):z()}else P()},jl=(v,b)=>{let w;for(;v!==b;)w=g(v),n(v),v=w;n(b)},Tl=(v,b,w)=>{const{bum:O,scope:D,job:P,subTree:U,um:q,m:z,a:R}=v;ca(z),ca(R),O&&Jn(O),D.stop(),P&&(P.flags|=8,ze(U,v,b,w)),q&&tl(q,b),tl(()=>{v.isUnmounted=!0},b),b&&b.pendingBranch&&!b.isUnmounted&&v.asyncDep&&!v.asyncResolved&&v.suspenseId===b.pendingId&&(b.deps--,b.deps===0&&b.resolve())},qe=(v,b,w,O=!1,D=!1,P=0)=>{for(let U=P;U<v.length;U++)ze(v[U],b,w,O,D)},C=v=>{if(v.shapeFlag&6)return C(v.component.subTree);if(v.shapeFlag&128)return v.suspense.next();const b=g(v.anchor||v.el),w=b&&b[Yh];return w?g(w):b};let G=!1;const $=(v,b,w)=>{v==null?b._vnode&&ze(b._vnode,null,null,!0):y(b._vnode||null,v,b,null,null,null,w),b._vnode=v,G||(G=!0,Zs(),xn(),G=!1)},Q={p:y,um:ze,m:dl,r:Xe,mt:re,mc:N,pc:J,pbc:B,n:C,o:e};let de,be;return l&&([de,be]=l(Q)),{render:$,hydrate:de,createApp:Ep($,de)}}function tr({type:e,props:l},t){return t==="svg"&&e==="foreignObject"||t==="mathml"&&e==="annotation-xml"&&l&&l.encoding&&l.encoding.includes("html")?void 0:t}function pt({effect:e,job:l},t){t?(e.flags|=32,l.flags|=4):(e.flags&=-33,l.flags&=-5)}function Ac(e,l){return(!e||e&&!e.pendingBranch)&&l&&!l.persisted}function Ec(e,l,t=!1){const i=e.children,n=l.children;if(te(i)&&te(n))for(let r=0;r<i.length;r++){const s=i[r];let a=n[r];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=n[r]=lt(n[r]),a.el=s.el),!t&&a.patchFlag!==-2&&Ec(s,a)),a.type===yt&&(a.el=s.el)}}function Pp(e){const l=e.slice(),t=[0];let i,n,r,s,a;const c=e.length;for(i=0;i<c;i++){const d=e[i];if(d!==0){if(n=t[t.length-1],e[n]<d){l[i]=n,t.push(i);continue}for(r=0,s=t.length-1;r<s;)a=r+s>>1,e[t[a]]<d?r=a+1:s=a;d<e[t[r]]&&(r>0&&(l[i]=t[r-1]),t[r]=i)}}for(r=t.length,s=t[r-1];r-- >0;)t[r]=s,s=l[s];return t}function wc(e){const l=e.subTree.component;if(l)return l.asyncDep&&!l.asyncResolved?l:wc(l)}function ca(e){if(e)for(let l=0;l<e.length;l++)e[l].flags|=8}const jp=Symbol.for("v-scx"),Rp=()=>Te(jp);function ms(e,l){return vs(e,null,l)}function Ie(e,l,t){return vs(e,l,t)}function vs(e,l,t=Ae){const{immediate:i,deep:n,flush:r,once:s}=t,a=Ve({},t),c=l&&i||!l&&r!=="post";let d;if(Kt){if(r==="sync"){const m=Rp();d=m.__watcherHandles||(m.__watcherHandles=[])}else if(!c){const m=()=>{};return m.stop=Il,m.resume=Il,m.pause=Il,m}}const p=je;a.call=(m,k,y)=>_l(m,p,k,y);let u=!1;r==="post"?a.scheduler=m=>{tl(m,p&&p.suspense)}:r!=="sync"&&(u=!0,a.scheduler=(m,k)=>{k?m():ds(m)}),a.augmentJob=m=>{l&&(m.flags|=4),u&&(m.flags|=2,p&&(m.id=p.uid,m.i=p))};const g=Gh(e,l,a);return Kt&&(d?d.push(g):c&&g()),g}function Vp(e,l,t){const i=this.proxy,n=Be(e)?e.includes(".")?Tc(i,e):()=>i[e]:e.bind(i,i);let r;ie(l)?r=l:(r=l.handler,t=l);const s=qi(this),a=vs(n,r.bind(i),t);return s(),a}function Tc(e,l){const t=l.split(".");return()=>{let i=e;for(let n=0;n<t.length&&i;n++)i=i[t[n]];return i}}const Bp=(e,l)=>l==="modelValue"||l==="model-value"?e.modelModifiers:e[`${l}Modifiers`]||e[`${He(l)}Modifiers`]||e[`${At(l)}Modifiers`];function zp(e,l,...t){if(e.isUnmounted)return;const i=e.vnode.props||Ae;let n=t;const r=l.startsWith("update:"),s=r&&Bp(i,l.slice(7));s&&(s.trim&&(n=t.map(p=>Be(p)?p.trim():p)),s.number&&(n=t.map(ah)));let a,c=i[a=Kn(l)]||i[a=Kn(He(l))];!c&&r&&(c=i[a=Kn(At(l))]),c&&_l(c,e,6,n);const d=i[a+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,_l(d,e,6,n)}}function Cc(e,l,t=!1){const i=l.emitsCache,n=i.get(e);if(n!==void 0)return n;const r=e.emits;let s={},a=!1;if(!ie(e)){const c=d=>{const p=Cc(d,l,!0);p&&(a=!0,Ve(s,p))};!t&&l.mixins.length&&l.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!r&&!a?(Fe(e)&&i.set(e,null),null):(te(r)?r.forEach(c=>s[c]=null):Ve(s,r),Fe(e)&&i.set(e,s),s)}function jn(e,l){return!e||!Ri(l)?!1:(l=l.slice(2).replace(/Once$/,""),ke(e,l[0].toLowerCase()+l.slice(1))||ke(e,At(l))||ke(e,l))}function ir(e){const{type:l,vnode:t,proxy:i,withProxy:n,propsOptions:[r],slots:s,attrs:a,emit:c,render:d,renderCache:p,props:u,data:g,setupState:m,ctx:k,inheritAttrs:y}=e,x=Ln(e);let E,_;try{if(t.shapeFlag&4){const A=n||i,I=A;E=gl(d.call(I,A,p,u,m,g,k)),_=a}else{const A=l;E=gl(A.length>1?A(u,{attrs:a,slots:s,emit:c}):A(u,null)),_=l.props?a:qp(a)}}catch(A){fi.length=0,Bi(A,e,1),E=Re(nl)}let f=E;if(_&&y!==!1){const A=Object.keys(_),{shapeFlag:I}=f;A.length&&I&7&&(r&&A.some(Xr)&&(_=Mp(_,r)),f=st(f,_,!1,!0))}return t.dirs&&(f=st(f,null,!1,!0),f.dirs=f.dirs?f.dirs.concat(t.dirs):t.dirs),t.transition&&Lt(f,t.transition),E=f,Ln(x),E}const qp=e=>{let l;for(const t in e)(t==="class"||t==="style"||Ri(t))&&((l||(l={}))[t]=e[t]);return l},Mp=(e,l)=>{const t={};for(const i in e)(!Xr(i)||!(i.slice(9)in l))&&(t[i]=e[i]);return t};function $p(e,l,t){const{props:i,children:n,component:r}=e,{props:s,children:a,patchFlag:c}=l,d=r.emitsOptions;if(l.dirs||l.transition)return!0;if(t&&c>=0){if(c&1024)return!0;if(c&16)return i?da(i,s,d):!!s;if(c&8){const p=l.dynamicProps;for(let u=0;u<p.length;u++){const g=p[u];if(s[g]!==i[g]&&!jn(d,g))return!0}}}else return(n||a)&&(!a||!a.$stable)?!0:i===s?!1:i?s?da(i,s,d):!0:!!s;return!1}function da(e,l,t){const i=Object.keys(l);if(i.length!==Object.keys(e).length)return!0;for(let n=0;n<i.length;n++){const r=i[n];if(l[r]!==e[r]&&!jn(t,r))return!0}return!1}function Dc({vnode:e,parent:l},t){for(;l;){const i=l.subTree;if(i.suspense&&i.suspense.activeBranch===e&&(i.el=e.el),i===e)(e=l.vnode).el=t,l=l.parent;else break}}const Fc=e=>e.__isSuspense;function Sc(e,l){l&&l.pendingBranch?te(e)?l.effects.push(...e):l.effects.push(e):Jh(e)}const il=Symbol.for("v-fgt"),yt=Symbol.for("v-txt"),nl=Symbol.for("v-cmt"),ki=Symbol.for("v-stc"),fi=[];let al=null;function Y3(e=!1){fi.push(al=e?null:[])}function Hp(){fi.pop(),al=fi[fi.length-1]||null}let Ci=1;function ha(e,l=!1){Ci+=e,e<0&&al&&l&&(al.hasOnce=!0)}function Np(e){return e.dynamicChildren=Ci>0?al||qt:null,Hp(),Ci>0&&al&&al.push(e),e}function X3(e,l,t,i,n,r){return Np(Oc(e,l,t,i,n,r,!0))}function En(e){return e?e.__v_isVNode===!0:!1}function vt(e,l){return e.type===l.type&&e.key===l.key}const Ic=({key:e})=>e??null,gn=({ref:e,ref_key:l,ref_for:t})=>(typeof e=="number"&&(e=""+e),e!=null?Be(e)||Pe(e)||ie(e)?{i:sl,r:e,k:l,f:!!t}:e:null);function Oc(e,l=null,t=null,i=0,n=null,r=e===il?0:1,s=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:l,key:l&&Ic(l),ref:l&&gn(l),scopeId:tc,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:i,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:sl};return a?(ks(c,t),r&128&&e.normalize(c)):t&&(c.shapeFlag|=Be(t)?8:16),Ci>0&&!s&&al&&(c.patchFlag>0||r&6)&&c.patchFlag!==32&&al.push(c),c}const Re=Up;function Up(e,l=null,t=null,i=0,n=null,r=!1){if((!e||e===vp)&&(e=nl),En(e)){const a=st(e,l,!0);return t&&ks(a,t),Ci>0&&!r&&al&&(a.shapeFlag&6?al[al.indexOf(e)]=a:al.push(a)),a.patchFlag=-2,a}if(t2(e)&&(e=e.__vccOpts),l){l=Gp(l);let{class:a,style:c}=l;a&&!Be(a)&&(l.class=ts(a)),Fe(c)&&(cs(c)&&!te(c)&&(c=Ve({},c)),l.style=ls(c))}const s=Be(e)?1:Fc(e)?128:ic(e)?64:Fe(e)?4:ie(e)?2:0;return Oc(e,l,t,i,n,s,r,!0)}function Gp(e){return e?cs(e)||kc(e)?Ve({},e):e:null}function st(e,l,t=!1,i=!1){const{props:n,ref:r,patchFlag:s,children:a,transition:c}=e,d=l?Wp(n||{},l):n,p={__v_isVNode:!0,__v_skip:!0,type:e.type,props:d,key:d&&Ic(d),ref:l&&l.ref?t&&r?te(r)?r.concat(gn(l)):[r,gn(l)]:gn(l):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:a,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:l&&e.type!==il?s===-1?16:s|16:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&st(e.ssContent),ssFallback:e.ssFallback&&st(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&i&&Lt(p,c.clone(p)),p}function Pc(e=" ",l=0){return Re(yt,null,e,l)}function Z3(e,l){const t=Re(ki,null,e);return t.staticCount=l,t}function gl(e){return e==null||typeof e=="boolean"?Re(nl):te(e)?Re(il,null,e.slice()):En(e)?lt(e):Re(yt,null,String(e))}function lt(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:st(e)}function ks(e,l){let t=0;const{shapeFlag:i}=e;if(l==null)l=null;else if(te(l))t=16;else if(typeof l=="object")if(i&65){const n=l.default;n&&(n._c&&(n._d=!1),ks(e,n()),n._c&&(n._d=!0));return}else{t=32;const n=l._;!n&&!kc(l)?l._ctx=sl:n===3&&sl&&(sl.slots._===1?l._=1:(l._=2,e.patchFlag|=1024))}else ie(l)?(l={default:l,_ctx:sl},t=32):(l=String(l),i&64?(t=16,l=[Pc(l)]):t=8);e.children=l,e.shapeFlag|=t}function Wp(...e){const l={};for(let t=0;t<e.length;t++){const i=e[t];for(const n in i)if(n==="class")l.class!==i.class&&(l.class=ts([l.class,i.class]));else if(n==="style")l.style=ls([l.style,i.style]);else if(Ri(n)){const r=l[n],s=i[n];s&&r!==s&&!(te(r)&&r.includes(s))&&(l[n]=r?[].concat(r,s):s)}else n!==""&&(l[n]=i[n])}return l}function pl(e,l,t,i=null){_l(e,l,7,[t,i])}const Kp=uc();let Jp=0;function Qp(e,l,t){const i=e.type,n=(l?l.appContext:e.appContext)||Kp,r={uid:Jp++,vnode:e,type:i,parent:l,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new mh(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:l?l.provides:Object.create(n.provides),ids:l?l.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:bc(i,n),emitsOptions:Cc(i,n),emit:null,emitted:null,propsDefaults:Ae,inheritAttrs:i.inheritAttrs,ctx:Ae,data:Ae,props:Ae,attrs:Ae,slots:Ae,refs:Ae,setupState:Ae,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=l?l.root:r,r.emit=zp.bind(null,r),e.ce&&e.ce(r),r}let je=null;const Ct=()=>je||sl;let wn,Fr;{const e=In(),l=(t,i)=>{let n;return(n=e[t])||(n=e[t]=[]),n.push(i),r=>{n.length>1?n.forEach(s=>s(r)):n[0](r)}};wn=l("__VUE_INSTANCE_SETTERS__",t=>je=t),Fr=l("__VUE_SSR_SETTERS__",t=>Kt=t)}const qi=e=>{const l=je;return wn(e),e.scope.on(),()=>{e.scope.off(),wn(l)}},pa=()=>{je&&je.scope.off(),wn(null)};function jc(e){return e.vnode.shapeFlag&4}let Kt=!1;function Yp(e,l=!1,t=!1){l&&Fr(l);const{props:i,children:n}=e.vnode,r=jc(e);wp(e,i,r,l),Fp(e,n,t);const s=r?Xp(e,l):void 0;return l&&Fr(!1),s}function Xp(e,l){const t=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,fp);const{setup:i}=t;if(i){at();const n=e.setupContext=i.length>1?e2(e):null,r=qi(e),s=Vi(i,e,0,[e.props,n]),a=Fo(s);if(ot(),r(),(a||e.sp)&&!Nt(e)&&ps(e),a){if(s.then(pa,pa),l)return s.then(c=>{ua(e,c)}).catch(c=>{Bi(c,e,0)});e.asyncDep=s}else ua(e,s)}else Rc(e)}function ua(e,l,t){ie(l)?e.type.__ssrInlineRender?e.ssrRender=l:e.render=l:Fe(l)&&(e.setupState=Qo(l)),Rc(e)}function Rc(e,l,t){const i=e.type;e.render||(e.render=i.render||Il);{const n=qi(e);at();try{bp(e)}finally{ot(),n()}}}const Zp={get(e,l){return $e(e,"get",""),e[l]}};function e2(e){const l=t=>{e.exposed=t||{}};return{attrs:new Proxy(e.attrs,Zp),slots:e.slots,emit:e.emit,expose:l}}function fs(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(Qo(Rh(e.exposed)),{get(l,t){if(t in l)return l[t];if(t in vi)return vi[t](e)},has(l,t){return t in l||t in vi}})):e.proxy}function l2(e,l=!0){return ie(e)?e.displayName||e.name:e.name||l&&e.__name}function t2(e){return ie(e)&&"__vccOpts"in e}const L=(e,l)=>Nh(e,l,Kt);function o(e,l,t){const i=arguments.length;return i===2?Fe(l)&&!te(l)?En(l)?Re(e,null,[l]):Re(e,l):Re(e,null,l):(i>3?t=Array.prototype.slice.call(arguments,2):i===3&&En(t)&&(t=[t]),Re(e,l,t))}const i2="3.5.13";/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Sr;const ga=typeof window<"u"&&window.trustedTypes;if(ga)try{Sr=ga.createPolicy("vue",{createHTML:e=>e})}catch{}const Vc=Sr?e=>Sr.createHTML(e):e=>e,n2="http://www.w3.org/2000/svg",r2="http://www.w3.org/1998/Math/MathML",ql=typeof document<"u"?document:null,ma=ql&&ql.createElement("template"),s2={insert:(e,l,t)=>{l.insertBefore(e,t||null)},remove:e=>{const l=e.parentNode;l&&l.removeChild(e)},createElement:(e,l,t,i)=>{const n=l==="svg"?ql.createElementNS(n2,e):l==="mathml"?ql.createElementNS(r2,e):t?ql.createElement(e,{is:t}):ql.createElement(e);return e==="select"&&i&&i.multiple!=null&&n.setAttribute("multiple",i.multiple),n},createText:e=>ql.createTextNode(e),createComment:e=>ql.createComment(e),setText:(e,l)=>{e.nodeValue=l},setElementText:(e,l)=>{e.textContent=l},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ql.querySelector(e),setScopeId(e,l){e.setAttribute(l,"")},insertStaticContent(e,l,t,i,n,r){const s=t?t.previousSibling:l.lastChild;if(n&&(n===r||n.nextSibling))for(;l.insertBefore(n.cloneNode(!0),t),!(n===r||!(n=n.nextSibling)););else{ma.innerHTML=Vc(i==="svg"?`<svg>${e}</svg>`:i==="mathml"?`<math>${e}</math>`:e);const a=ma.content;if(i==="svg"||i==="mathml"){const c=a.firstChild;for(;c.firstChild;)a.appendChild(c.firstChild);a.removeChild(c)}l.insertBefore(a,t)}return[s?s.nextSibling:l.firstChild,t?t.previousSibling:l.lastChild]}},Jl="transition",oi="animation",Jt=Symbol("_vtc"),Bc={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},zc=Ve({},rc,Bc),a2=e=>(e.displayName="Transition",e.props=zc,e),Qt=a2((e,{slots:l})=>o(Zh,qc(e),l)),ut=(e,l=[])=>{te(e)?e.forEach(t=>t(...l)):e&&e(...l)},va=e=>e?te(e)?e.some(l=>l.length>1):e.length>1:!1;function qc(e){const l={};for(const S in e)S in Bc||(l[S]=e[S]);if(e.css===!1)return l;const{name:t="v",type:i,duration:n,enterFromClass:r=`${t}-enter-from`,enterActiveClass:s=`${t}-enter-active`,enterToClass:a=`${t}-enter-to`,appearFromClass:c=r,appearActiveClass:d=s,appearToClass:p=a,leaveFromClass:u=`${t}-leave-from`,leaveActiveClass:g=`${t}-leave-active`,leaveToClass:m=`${t}-leave-to`}=e,k=o2(n),y=k&&k[0],x=k&&k[1],{onBeforeEnter:E,onEnter:_,onEnterCancelled:f,onLeave:A,onLeaveCancelled:I,onBeforeAppear:M=E,onAppear:T=_,onAppearCancelled:N=f}=l,F=(S,H,re,ge)=>{S._enterCancelled=ge,Xl(S,H?p:a),Xl(S,H?d:s),re&&re()},B=(S,H)=>{S._isLeaving=!1,Xl(S,u),Xl(S,m),Xl(S,g),H&&H()},j=S=>(H,re)=>{const ge=S?T:_,K=()=>F(H,S,re);ut(ge,[H,K]),ka(()=>{Xl(H,S?c:r),Dl(H,S?p:a),va(ge)||fa(H,i,y,K)})};return Ve(l,{onBeforeEnter(S){ut(E,[S]),Dl(S,r),Dl(S,s)},onBeforeAppear(S){ut(M,[S]),Dl(S,c),Dl(S,d)},onEnter:j(!1),onAppear:j(!0),onLeave(S,H){S._isLeaving=!0;const re=()=>B(S,H);Dl(S,u),S._enterCancelled?(Dl(S,g),Ir()):(Ir(),Dl(S,g)),ka(()=>{S._isLeaving&&(Xl(S,u),Dl(S,m),va(A)||fa(S,i,x,re))}),ut(A,[S,re])},onEnterCancelled(S){F(S,!1,void 0,!0),ut(f,[S])},onAppearCancelled(S){F(S,!0,void 0,!0),ut(N,[S])},onLeaveCancelled(S){B(S),ut(I,[S])}})}function o2(e){if(e==null)return null;if(Fe(e))return[nr(e.enter),nr(e.leave)];{const l=nr(e);return[l,l]}}function nr(e){return oh(e)}function Dl(e,l){l.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e[Jt]||(e[Jt]=new Set)).add(l)}function Xl(e,l){l.split(/\s+/).forEach(i=>i&&e.classList.remove(i));const t=e[Jt];t&&(t.delete(l),t.size||(e[Jt]=void 0))}function ka(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let c2=0;function fa(e,l,t,i){const n=e._endId=++c2,r=()=>{n===e._endId&&i()};if(t!=null)return setTimeout(r,t);const{type:s,timeout:a,propCount:c}=Mc(e,l);if(!s)return i();const d=s+"end";let p=0;const u=()=>{e.removeEventListener(d,g),r()},g=m=>{m.target===e&&++p>=c&&u()};setTimeout(()=>{p<c&&u()},a+1),e.addEventListener(d,g)}function Mc(e,l){const t=window.getComputedStyle(e),i=k=>(t[k]||"").split(", "),n=i(`${Jl}Delay`),r=i(`${Jl}Duration`),s=ba(n,r),a=i(`${oi}Delay`),c=i(`${oi}Duration`),d=ba(a,c);let p=null,u=0,g=0;l===Jl?s>0&&(p=Jl,u=s,g=r.length):l===oi?d>0&&(p=oi,u=d,g=c.length):(u=Math.max(s,d),p=u>0?s>d?Jl:oi:null,g=p?p===Jl?r.length:c.length:0);const m=p===Jl&&/\b(transform|all)(,|$)/.test(i(`${Jl}Property`).toString());return{type:p,timeout:u,propCount:g,hasTransform:m}}function ba(e,l){for(;e.length<l.length;)e=e.concat(e);return Math.max(...l.map((t,i)=>ya(t)+ya(e[i])))}function ya(e){return e==="auto"?0:Number(e.slice(0,-1).replace(",","."))*1e3}function Ir(){return document.body.offsetHeight}function d2(e,l,t){const i=e[Jt];i&&(l=(l?[l,...i]:[...i]).join(" ")),l==null?e.removeAttribute("class"):t?e.setAttribute("class",l):e.className=l}const _a=Symbol("_vod"),h2=Symbol("_vsh"),p2=Symbol(""),u2=/(^|;)\s*display\s*:/;function g2(e,l,t){const i=e.style,n=Be(t);let r=!1;if(t&&!n){if(l)if(Be(l))for(const s of l.split(";")){const a=s.slice(0,s.indexOf(":")).trim();t[a]==null&&mn(i,a,"")}else for(const s in l)t[s]==null&&mn(i,s,"");for(const s in t)s==="display"&&(r=!0),mn(i,s,t[s])}else if(n){if(l!==t){const s=i[p2];s&&(t+=";"+s),i.cssText=t,r=u2.test(t)}}else l&&e.removeAttribute("style");_a in e&&(e[_a]=r?i.display:"",e[h2]&&(i.display="none"))}const xa=/\s*!important$/;function mn(e,l,t){if(te(t))t.forEach(i=>mn(e,l,i));else if(t==null&&(t=""),l.startsWith("--"))e.setProperty(l,t);else{const i=m2(e,l);xa.test(t)?e.setProperty(At(i),t.replace(xa,""),"important"):e[i]=t}}const La=["Webkit","Moz","ms"],rr={};function m2(e,l){const t=rr[l];if(t)return t;let i=He(l);if(i!=="filter"&&i in e)return rr[l]=i;i=ei(i);for(let n=0;n<La.length;n++){const r=La[n]+i;if(r in e)return rr[l]=r}return l}const Aa="http://www.w3.org/1999/xlink";function Ea(e,l,t,i,n,r=gh(l)){i&&l.startsWith("xlink:")?t==null?e.removeAttributeNS(Aa,l.slice(6,l.length)):e.setAttributeNS(Aa,l,t):t==null||r&&!Io(t)?e.removeAttribute(l):e.setAttribute(l,r?"":Zt(t)?String(t):t)}function wa(e,l,t,i,n){if(l==="innerHTML"||l==="textContent"){t!=null&&(e[l]=l==="innerHTML"?Vc(t):t);return}const r=e.tagName;if(l==="value"&&r!=="PROGRESS"&&!r.includes("-")){const a=r==="OPTION"?e.getAttribute("value")||"":e.value,c=t==null?e.type==="checkbox"?"on":"":String(t);(a!==c||!("_value"in e))&&(e.value=c),t==null&&e.removeAttribute(l),e._value=t;return}let s=!1;if(t===""||t==null){const a=typeof e[l];a==="boolean"?t=Io(t):t==null&&a==="string"?(t="",s=!0):a==="number"&&(t=0,s=!0)}try{e[l]=t}catch{}s&&e.removeAttribute(n||l)}function v2(e,l,t,i){e.addEventListener(l,t,i)}function k2(e,l,t,i){e.removeEventListener(l,t,i)}const Ta=Symbol("_vei");function f2(e,l,t,i,n=null){const r=e[Ta]||(e[Ta]={}),s=r[l];if(i&&s)s.value=i;else{const[a,c]=b2(l);if(i){const d=r[l]=x2(i,n);v2(e,a,d,c)}else s&&(k2(e,a,s,c),r[l]=void 0)}}const Ca=/(?:Once|Passive|Capture)$/;function b2(e){let l;if(Ca.test(e)){l={};let i;for(;i=e.match(Ca);)e=e.slice(0,e.length-i[0].length),l[i[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):At(e.slice(2)),l]}let sr=0;const y2=Promise.resolve(),_2=()=>sr||(y2.then(()=>sr=0),sr=Date.now());function x2(e,l){const t=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=t.attached)return;_l(L2(i,t.value),l,5,[i])};return t.value=e,t.attached=_2(),t}function L2(e,l){if(te(l)){const t=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{t.call(e),e._stopped=!0},l.map(i=>n=>!n._stopped&&i&&i(n))}else return l}const Da=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,A2=(e,l,t,i,n,r)=>{const s=n==="svg";l==="class"?d2(e,i,s):l==="style"?g2(e,t,i):Ri(l)?Xr(l)||f2(e,l,t,i,r):(l[0]==="."?(l=l.slice(1),!0):l[0]==="^"?(l=l.slice(1),!1):E2(e,l,i,s))?(wa(e,l,i),!e.tagName.includes("-")&&(l==="value"||l==="checked"||l==="selected")&&Ea(e,l,i,s,r,l!=="value")):e._isVueCE&&(/[A-Z]/.test(l)||!Be(i))?wa(e,He(l),i,r,l):(l==="true-value"?e._trueValue=i:l==="false-value"&&(e._falseValue=i),Ea(e,l,i,s))};function E2(e,l,t,i){if(i)return!!(l==="innerHTML"||l==="textContent"||l in e&&Da(l)&&ie(t));if(l==="spellcheck"||l==="draggable"||l==="translate"||l==="form"||l==="list"&&e.tagName==="INPUT"||l==="type"&&e.tagName==="TEXTAREA")return!1;if(l==="width"||l==="height"){const n=e.tagName;if(n==="IMG"||n==="VIDEO"||n==="CANVAS"||n==="SOURCE")return!1}return Da(l)&&Be(t)?!1:l in e}const $c=new WeakMap,Hc=new WeakMap,Tn=Symbol("_moveCb"),Fa=Symbol("_enterCb"),w2=e=>(delete e.props.mode,e),T2=w2({name:"TransitionGroup",props:Ve({},zc,{tag:String,moveClass:String}),setup(e,{slots:l}){const t=Ct(),i=nc();let n,r;return dc(()=>{if(!n.length)return;const s=e.moveClass||`${e.name||"v"}-move`;if(!S2(n[0].el,t.vnode.el,s))return;n.forEach(C2),n.forEach(D2);const a=n.filter(F2);Ir(),a.forEach(c=>{const d=c.el,p=d.style;Dl(d,s),p.transform=p.webkitTransform=p.transitionDuration="";const u=d[Tn]=g=>{g&&g.target!==d||(!g||/transform$/.test(g.propertyName))&&(d.removeEventListener("transitionend",u),d[Tn]=null,Xl(d,s))};d.addEventListener("transitionend",u)})}),()=>{const s=oe(e),a=qc(s);let c=s.tag||il;if(n=[],r)for(let d=0;d<r.length;d++){const p=r[d];p.el&&p.el instanceof Element&&(n.push(p),Lt(p,wi(p,a,i,t)),$c.set(p,p.el.getBoundingClientRect()))}r=l.default?hs(l.default()):[];for(let d=0;d<r.length;d++){const p=r[d];p.key!=null&&Lt(p,wi(p,a,i,t))}return Re(c,null,r)}}}),Nc=T2;function C2(e){const l=e.el;l[Tn]&&l[Tn](),l[Fa]&&l[Fa]()}function D2(e){Hc.set(e,e.el.getBoundingClientRect())}function F2(e){const l=$c.get(e),t=Hc.get(e),i=l.left-t.left,n=l.top-t.top;if(i||n){const r=e.el.style;return r.transform=r.webkitTransform=`translate(${i}px,${n}px)`,r.transitionDuration="0s",e}}function S2(e,l,t){const i=e.cloneNode(),n=e[Jt];n&&n.forEach(a=>{a.split(/\s+/).forEach(c=>c&&i.classList.remove(c))}),t.split(/\s+/).forEach(a=>a&&i.classList.add(a)),i.style.display="none";const r=l.nodeType===1?l:l.parentNode;r.appendChild(i);const{hasTransform:s}=Mc(i);return r.removeChild(i),s}const I2=Ve({patchProp:A2},s2);let ar,Sa=!1;function O2(){return ar=Sa?ar:Ip(I2),Sa=!0,ar}const P2=(...e)=>{const l=O2().createApp(...e),{mount:t}=l;return l.mount=i=>{const n=R2(i);if(n)return t(n,!0,j2(n))},l};function j2(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function R2(e){return Be(e)?document.querySelector(e):e}var Mi=e=>/^[a-z][a-z0-9+.-]*:/.test(e)||e.startsWith("//"),V2=/.md((\?|#).*)?$/,Rn=(e,l="/")=>Mi(e)||e.startsWith("/")&&!e.startsWith(l)&&!V2.test(e),li=e=>/^(https?:)?\/\//.test(e),Ia=e=>{if(!e||e.endsWith("/"))return e;let l=e.replace(/(^|\/)README.md$/i,"$1index.html");return l.endsWith(".md")?l=`${l.substring(0,l.length-3)}.html`:l.endsWith(".html")||(l=`${l}.html`),l.endsWith("/index.html")&&(l=l.substring(0,l.length-10)),l},B2="http://.",z2=(e,l)=>{if(!e.startsWith("/")&&l){const t=l.slice(0,l.lastIndexOf("/"));return Ia(new URL(`${t}/${e}`,B2).pathname)}return Ia(e)},q2=(e,l)=>{const t=Object.keys(e).sort((i,n)=>{const r=n.split("/").length-i.split("/").length;return r!==0?r:n.length-i.length});for(const i of t)if(l.startsWith(i))return i;return"/"},M2=/(#|\?)/,Uc=e=>{const[l,...t]=e.split(M2);return{pathname:l,hashAndQueries:t.join("")}},$2=["link","meta","script","style","noscript","template"],H2=["title","base"],N2=([e,l,t])=>H2.includes(e)?e:$2.includes(e)?e==="meta"&&l.name?`${e}.${l.name}`:e==="template"&&l.id?`${e}.${l.id}`:JSON.stringify([e,Object.entries(l).map(([i,n])=>typeof n=="boolean"?n?[i,""]:null:[i,n]).filter(i=>i!=null).sort(([i],[n])=>i.localeCompare(n)),t]):null,U2=e=>{const l=new Set,t=[];return e.forEach(i=>{const n=N2(i);n&&!l.has(n)&&(l.add(n),t.push(i))}),t},G2=e=>e.startsWith("/")?e:`/${e}`,Gc=e=>e.endsWith("/")||e.endsWith(".html")?e:`${e}/`,bs=e=>e.endsWith("/")?e.slice(0,-1):e,Wc=e=>e.startsWith("/")?e.slice(1):e,ti=e=>Object.prototype.toString.call(e)==="[object Object]",De=e=>typeof e=="string";const W2="modulepreload",K2=function(e){return"/leetcode-notes/"+e},Oa={},h=function(l,t,i){let n=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),a=(s==null?void 0:s.nonce)||(s==null?void 0:s.getAttribute("nonce"));n=Promise.allSettled(t.map(c=>{if(c=K2(c),c in Oa)return;Oa[c]=!0;const d=c.endsWith(".css"),p=d?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${p}`))return;const u=document.createElement("link");if(u.rel=d?"stylesheet":W2,d||(u.as="script"),u.crossOrigin="",u.href=c,a&&u.setAttribute("nonce",a),document.head.appendChild(u),d)return new Promise((g,m)=>{u.addEventListener("load",g),u.addEventListener("error",()=>m(new Error(`Unable to preload CSS for ${c}`)))})}))}function r(s){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=s,window.dispatchEvent(a),!a.defaultPrevented)throw s}return n.then(s=>{for(const a of s||[])a.status==="rejected"&&r(a.reason);return l().catch(r)})},J2=JSON.parse("{}"),Q2=Object.fromEntries([["/",{loader:()=>h(()=>import("./index.html-DGGUcNje.js"),__vite__mapDeps([0,1])),meta:{title:"老马啸西风",icon:"house"}}],["/intro.html",{loader:()=>h(()=>import("./intro.html-C6UUuOhZ.js"),__vite__mapDeps([2,1])),meta:{date:1755499309e3,sticky:!0,cover:"/assets/images/cover3.jpg",excerpt:`
<p>大家好，我是老马啸西风。</p>
<p>一位兴趣使然的技术开发者。</p>
<h1>个人博客</h1>
<blockquote>
<p><a href="https://houbb.github.io" target="_blank" rel="noopener noreferrer">https://houbb.github.io</a></p>
</blockquote>
<h2>关于我</h2>
<blockquote>
<p><a href="https://houbb.github.io/about/" target="_blank" rel="noopener noreferrer"></a></p>
</blockquote>`,readingTime:{minutes:.18,words:53},title:"介绍页",icon:"circle-info",type:"article"}}],["/posts/algorithm/2018-05-30-algorithm-analysis.html",{loader:()=>h(()=>import("./2018-05-30-algorithm-analysis.html-D8gg9mq4.js"),__vite__mapDeps([3,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm"],excerpt:`
<p><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">算法</a>（Algorithm）是对解决某类问题方法的精确定义。<br>
它能执行计算任务、处理数据，并进行自动化推理。</p>
<h1>算法分析</h1>
<p><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90" target="_blank" rel="noopener noreferrer">算法分析</a>（Analysis of algorithms）旨在评估算法的计算复杂度，即执行算法所需的时间、存储空间及其他资源量。</p>`,readingTime:{minutes:1.56,words:468},title:"Algorithm Analysis 算法分析 时间复杂度",type:"article"}}],["/posts/algorithm/2018-12-05-bloom-filter.html",{loader:()=>h(()=>import("./2018-12-05-bloom-filter.html-PciU5OD9.js"),__vite__mapDeps([4,1])),meta:{date:1543968e6,localizedDate:"2018年12月5日",category:["Althgorim"],tag:["althgorim","sh"],excerpt:"Bloom Filter 布隆过滤器算法",readingTime:{minutes:5.72,words:1715},title:"Bloom Filter",type:"article"}}],["/posts/algorithm/2019-01-03-many-number-sort.html",{loader:()=>h(()=>import("./2019-01-03-many-number-sort.html-BYNa0KTY.js"),__vite__mapDeps([5,1])),meta:{date:15464736e5,localizedDate:"2019年1月3日",category:["Althgorim"],tag:["althgorim","sh"],excerpt:"如何对 1 千万个整数进行排序",readingTime:{minutes:4.95,words:1486},title:"位图法对大量整数进行排序",type:"article"}}],["/posts/algorithm/2019-01-04-prority-queue.html",{loader:()=>h(()=>import("./2019-01-04-prority-queue.html-29nTLulu.js"),__vite__mapDeps([6,1])),meta:{date:154656e7,localizedDate:"2019年1月4日",category:["Althgorim"],tag:["althgorim","sh"],excerpt:`
<p>不同于先进先出队列，其对每一个元素指定了优先级，一般情况下，出队时，优先级越高的元素越先出队。</p>
<h1>问题</h1>
<h2>题目</h2>
<p>实现一个优先级队列，此队列具有enqueue（val，prior）和dequeue（）两种操作，分别代表入队和出队。</p>
<p>其中enqueue（val，prior）第一个参数val为值，第二个参数prior为优先级（prior越大，优先级越高），优先级越高越先出队</p>
<p>dequeue（）出队操作，每调用一次从队列中找到一个优先级最高的元素出队，并返回此元素的值（val）</p>
<p>要求：在O（logn）时间复杂度内完成两种操作</p>`,readingTime:{minutes:4.76,words:1429},title:"优先级队列与堆排序 PriorityQueue & heap sort",type:"article"}}],["/posts/algorithm/2019-01-08-althgorim-min-max.html",{loader:()=>h(()=>import("./2019-01-08-althgorim-min-max.html-DVr_Sj9F.js"),__vite__mapDeps([7,1])),meta:{date:15468192e5,localizedDate:"2019年1月7日",category:["Althgorim"],tag:["althgorim","sh"],excerpt:"算法之最大值、最小值",readingTime:{minutes:2.44,words:731},title:"算法之最大值、最小值",type:"article"}}],["/posts/algorithm/2019-04-05-althgorim-gifford.html",{loader:()=>h(()=>import("./2019-04-05-althgorim-gifford.html-DZbA5648.js"),__vite__mapDeps([8,1])),meta:{date:15544224e5,localizedDate:"2019年4月5日",category:["Althgorim"],tag:["althgorim","distributed","paper","TODO","sh"],excerpt:`
<p>分布式计算机系统的要求刺激了将相同信息的副本保存在计算机网络中的不同节点的兴趣。</p>
<p>数据复制允许信息位于其使用点附近，可以通过在高使用区域中静态定位副本，也可以根据需要动态创建临时副本。</p>
<p>通过允许许多节点并行处理对相同信息的请求，数据复制也增加了数据的可用性，并掩盖部分系统故障。</p>
<p>因此，在某些情况下，维护副本的成本会被复制数据所提供的性能，通信成本和可靠性优势所抵消。</p>
<h2>新算法</h2>
<p>我们提出了一种维护复制文件的新算法。</p>
<p>该算法可以通过以下描述简要表征：</p>
<ul>
<li>
<p>为复制文件的每个副本分配一定数量的投票。</p>
</li>
<li>
<p>每个事务收集读取法定数量的r票数以读取文件，以及写入法定数量的w票数以写入文件，使得r + w大于分配给文件的总票数。</p>
</li>
<li>
<p>这可确保每个读取仲裁与每个写入仲裁之间存在非空交集。 总是有一个文件代表的子集，其总票数为w当前。</p>
</li>
<li>
<p>因此，所收集的任何读取法定数量都保证具有当前副本。</p>
</li>
<li>
<p>版本号可以确定哪些副本是最新的。</p>
</li>
</ul>`,readingTime:{minutes:7.82,words:2345},title:"Gifford 算法",type:"article"}}],["/posts/data-struct/2018-06-19-data-struct-dynamic-array.html",{loader:()=>h(()=>import("./2018-06-19-data-struct-dynamic-array.html-B8FwIEGQ.js"),__vite__mapDeps([9,1])),meta:{date:15293664e5,localizedDate:"2018年6月19日",category:["Data Struct"],tag:["data struct"],excerpt:`
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Dynamic_array" target="_blank" rel="noopener noreferrer">Dynamic_array</a></p>
</blockquote>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="noopener noreferrer">Linked List</a></p>
</blockquote>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Doubly_linked_list" target="_blank" rel="noopener noreferrer">Doubly linked list</a></p>
</blockquote>`,readingTime:{minutes:.11,words:34},title:"Data Struct-01-Dynamic Array",type:"article"}}],["/posts/data-struct/2018-11-07-data-struct-binary-heap.html",{loader:()=>h(()=>import("./2018-11-07-data-struct-binary-heap.html-toFMmfrM.js"),__vite__mapDeps([10,1])),meta:{date:15415488e5,localizedDate:"2018年11月7日",category:["Data Struct"],tag:["data-struct","sh"],excerpt:"数据结构之二叉堆",readingTime:{minutes:.31,words:93},title:"Binary Heap",type:"article"}}],["/posts/data-struct/2018-11-07-data-struct-binary-tree.html",{loader:()=>h(()=>import("./2018-11-07-data-struct-binary-tree.html-BX493-YC.js"),__vite__mapDeps([11,1])),meta:{date:15415488e5,localizedDate:"2018年11月7日",category:["Data Struct"],tag:["data-struct","sh"],excerpt:"数据结构之二叉树",readingTime:{minutes:1.45,words:435},title:"Binary Tree",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-01-overview.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-01-overview.html-CwxO-zCk.js"),__vite__mapDeps([12,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<p>不久前，我发现需要一台PNG装载机用于我的一个小项目。作为一个完整的工具，我当然决定自己写一个 - 毕竟，为什么在还有车轮等待重新发明时为自己省力？如果你愿意的话，可以在这里查看inflater代码的来源 - 它写得非常干净。事实上，我专门写它是为了易于阅读，而不是最快的实现。</p>
<p>我当时对Deflate了解不多。我知道它基于LZ系列算法（LZ77 / L7SS等）。我听说有人说它只是“只是”LZSS，除了他们在匹配向量上应用霍夫曼编码。嗯，事实证明这是真的。均田。但是当我更深入地阅读规范时，它让我觉得这里发生了一些非常聪明的事情，我之前没有看到过任何明确提出过的事情。所以我想为什么不试着在这里解释Deflate的本质。我不打算在严格的细节上涵盖整个工作;如果你想要那就去阅读规范。</p>`,readingTime:{minutes:11.96,words:3587},title:"Compress Althgorim-01-压缩算法概览",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-02-althgorim-zip.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-02-althgorim-zip.html-BBOn9Y-3.js"),__vite__mapDeps([13,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<p>数据压缩是一门通信原理和计算机科学都会涉及到的学科，在通信原理中，一般称为信源编码，在计算机科学里，一般称为数据压缩，两者本质上没啥区别，在数学家看来，都是映射。</p>
<p>一方面在进行通信的时候，有必要将待传输的数据进行压缩，以减少带宽需求；另一方面，计算机存储数据的时候，为了减少磁盘容量需求，也会将文件进行压缩，尽管现在的网络带宽越来越高，压缩已经不像90年代初那个时候那么迫切，但在很多场合下仍然需要，其中一个原因是压缩后的数据容量减小后，磁盘访问IO的时间也缩短，尽管压缩和解压缩过程会消耗CPU资源，但是CPU计算资源增长得很快，但是磁盘IO资源却变化得很慢，比如目前主流的SATA硬盘仍然是7200转，如果把磁盘的IO压力转化到CPU上，总体上能够提升系统运行速度。</p>`,readingTime:{minutes:39.37,words:11810},title:"Compress Althgorim-02-压缩算法 ZIP Deflate 算法",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-03-apache-compress-overview.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-03-apache-compress-overview.html-BMrf_Sl_.js"),__vite__mapDeps([14,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<p>Apache Commons Compress库定义了一个API，用于处理ar，cpio，Unix转储，tar，zip，gzip，XZ，Pack200，bzip2,7z，arj，lzma，snappy，DEFLATE，lz4，Brotli，Zstandard，DEFLATE64和Z文件。</p>
<h2>代码来源</h2>
<p>此组件中的代码有许多来源：</p>
<p>bzip2，tar和zip支持来自Avalon的Excalibur，但最初来自Ant，就像Apache的生活一样。</p>
<p>tar包最初是Tim Endres的公共域包。 bzip2包基于Keiron Liddle以及Julian Seward的libbzip2所做的工作。</p>`,readingTime:{minutes:1.94,words:582},title:"Compress Althgorim-03-Apache Common Compress 包",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-04-apache-compress-notes.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-04-apache-compress-notes.html-BpnPHtet.js"),__vite__mapDeps([15,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<p>Commons Compress调用压缩单个数据压缩器格式流的所有格式，而在单个（可能压缩的）存档中收集多个条目的所有格式都是归档格式。</p>
<p>支持的压缩器格式有gzip，bzip2，xz，lzma，Pack200，DEFLATE，Brotli，DEFLATE64，ZStandard和Z。</p>
<p>归档格式为7z，ar，arj，cpio，dump，tar和zip。</p>
<p>Pack200是一种特殊情况，因为它只能压缩JAR文件。</p>
<p>我们目前只为arj，dump，Brotli，DEFLATE64和Z提供读取支持.arj只能读取未压缩的档案，7z可以读取具有7z支持的许多压缩和加密算法的档案，但在编写档案时不支持加密。</p>`,readingTime:{minutes:2.04,words:613},title:"Compress Althgorim-04-Common Compress 通用笔记",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-05-apache-compress-archivers.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-05-apache-compress-archivers.html-CSG4iG0w.js"),__vite__mapDeps([16,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<h2>不支持的功能</h2>
<p>许多支持的格式已经开发了不同的方言和扩展，一些格式允许Commons Compress支持的功能（尚未）。</p>
<p>ArchiveInputStream类提供了一个方法canReadEntryData，如果Commons Compress可以检测到存档使用当前实现不支持的功能，则该方法将返回false。</p>
<p>如果它返回false，则不应尝试读取该条目，而应跳过该条目。</p>
<h2>条目名称</h2>
<p>所有归档格式都通过ArchiveEntry（或者更确切的子类）的实例提供有关各个归档条目的元数据。从存档读取时，提供的信息getName方法是存储在存档内的原始名称。无法保证名称代表目标操作系统上的相对文件名甚至有效文件名。尝试从条目名称创建文件名时，应仔细检查结果。</p>`,readingTime:{minutes:11.16,words:3348},title:"Compress Althgorim-05-Common Compress 归档器",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-06-apache-compress-compressor.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-06-apache-compress-compressor.html-CmUYJQC2.js"),__vite__mapDeps([17,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<h2>连锁流</h2>
<p>对于bzip2，gzip和xz格式以及带框架的lz4格式，单个压缩文件实际上可能包含多个流，这些流在解压缩时将由命令行实用程序连接。</p>
<p>从Commons Compress 1.4开始，这些格式的* CompressorInputStreams也支持连接流，但默认情况下它们不会这样做。</p>
<p>您必须使用two-arg构造函数并显式启用支持。</p>
<h1>Brotli</h1>
<p>该软件包的实现由 <a href="https://github.com/google/brotli" target="_blank" rel="noopener noreferrer">Google Brotli dec</a> 库提供。</p>`,readingTime:{minutes:6.09,words:1828},title:"Compress Althgorim-06-Common Compress 压缩器",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-07-apache-compress-extend.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-07-apache-compress-extend.html-B5FQLw7p.js"),__vite__mapDeps([18,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","sh"],excerpt:`
<p>从1.13版开始，现在可以使用Java的ServiceLoader机制添加Compressor和ArchiverStream实现。</p>
<h1>扩展Commons压缩压缩器</h1>
<p>要提供自己的压缩器，必须在类路径上提供名为 <code>META-INF/services/org.apache.commons.compress.compressors.CompressorStreamProvider</code> 的文件。</p>
<p>该文件必须每行包含一个完全限定的类名。</p>
<p>例如：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>org.apache.commons.compress.compressors.TestCompressorStreamProvider</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:.68,words:205},title:"Compress Althgorim-07-Common Compress 自定义拓展",type:"article"}}],["/posts/algorithm/compress/2018-11-09-althgorim-compress-08-framework-compress-bit.html",{loader:()=>h(()=>import("./2018-11-09-althgorim-compress-08-framework-compress-bit.html-DfC343AY.js"),__vite__mapDeps([19,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","compress","bitmap","sh"],excerpt:`
<p><a href="http://roaringbitmap.org/" target="_blank" rel="noopener noreferrer">Roaring bitmaps</a> are compressed bitmaps.</p>
<p>They can be hundreds of times faster.</p>
<h1>位图</h1>
<p>位集（也称为位图）通常用作快速数据结构。</p>
<p>不幸的是，他们可能会使用太多内存。</p>
<p>为了补偿，我们经常使用压缩位图。</p>
<p>Roaring bitmaps 是压缩位图，其倾向于优于常规压缩位图，例如WAH，EWAH或简洁。</p>`,readingTime:{minutes:4.68,words:1404},title:"Roaring bitmap-08-更好的压缩位图算法",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-01-overview-01.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-01-overview-01.html-D5mIAd96.js"),__vite__mapDeps([20,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","croptograph","secret","sh"],excerpt:`
<p>这是我在布朗大学2016年春季数论课上写的一篇文章。它是由Jupyter笔记本编写并最初呈现的，并在此网站上进行了更改。</p>
<p><a href="https://gist.github.com/davidlowryduda/c0e8d526a8e144997fac" target="_blank" rel="noopener noreferrer">github</a> 上有一个版本的笔记。</p>
<h1>Cryptography</h1>
<p>回想一下加密的基本设置。我们有两个人，Anabel和Bartolo。 Anabel希望向Bartolo发送安全信息。我们的意思是什么？“安全？”我们的意思是，即使那个卑鄙的夏娃可以拦截和阅读传输的信息，夏娃也不会了解安娜贝尔想要发送给巴托洛的实际信息。</p>`,readingTime:{minutes:16.85,words:5054},title:"加密算法简介",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-02-common-02.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-02-common-02.html-Da5l2crW.js"),__vite__mapDeps([21,1])),meta:{date:15417216e5,localizedDate:"2018年11月9日",category:["Althgorim"],tag:["althgorim","croptograph","secret","sh"],excerpt:`
<p>数字签名、信息加密是前后端开发都经常需要使用到的技术，应用场景包括了用户登入、交易、信息通讯、oauth 等等，不同的应用场景也会需要使用到不同的签名加密算法，或者需要搭配不一样的签名加密算法来达到业务目标。</p>
<p>这里简单的给大家介绍几种常见的签名加密算法和一些典型场景下的应用。</p>
<h1>数字签名</h1>
<p>数字签名，简单来说就是通过提供可鉴别的数字信息验证自身身份的一种方式。</p>
<p>一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。</p>
<p>分别由发送者持有能够代表自己身份的私钥 (私钥不可泄露),由接受者持有与私钥对应的公钥，能够在接受到来自发送者信息时用于验证其身份。</p>`,readingTime:{minutes:11.75,words:3524},title:"几种常见的加密算法",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-03-base64.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-03-base64.html-B17GY1we.js"),__vite__mapDeps([22,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`<h2>场景</h2>
<p>对于很多场景，比如说图片展示，还有一些前后端请求，有时候通过 url 会比较麻烦。</p>
<p>通过 Base64 转换处理之后比较方便，当然也有把这个当做一种加密策略的。（实际上只是转码，不是严格意义的加密）</p>
<p>Base64是一种能将任意Binary资料用64种字元组合成字串的方法，而这个Binary资料和字串资料彼此之间是可以互相转换的，十分方便。</p>
<p>在实际应用上，Base64除了能将Binary资料可视化之外，也常用来表示字串加密过后的内容。</p>
<h2>java 实现方式</h2>
<h3>早期作法</h3>
<p>早期在Java上做Base64的编码与解码，会使用到JDK里sun.misc套件下的BASE64Encoder和BASE64Decoder这两个类别，用法如下：</p>`,readingTime:{minutes:7.13,words:2139},title:"Base64 加密算法详解",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-04-sm4.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-04-sm4.html-CtZv-hwC.js"),__vite__mapDeps([23,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>神探夏洛克</p>
<p>二战加解密</p>
<p>卷福</p>
<h1>SM4-中国人自己的加密算法</h1>
<p>好的算法：告诉你算法，没有秘钥，也无法破解。</p>
<p>SM4是一种分组密码算法，其分组长度为128位（即16字节，4字），密钥长度也为128位（即16字节，4字）。</p>
<p>其加解密过程采用了32轮迭代机制（与DES、AES类似），每一轮需要一个轮密钥（与DES、AES类似）。</p>
<h1>快速体验</h1>
<h2>maven 依赖</h2>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.bouncycastle&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;bcprov-jdk15on&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1.59&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:17.11,words:5134},title:"SM4 国密算法入门介绍",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-05-des.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-05-des.html-BTULOwjI.js"),__vite__mapDeps([24,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>DES全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。</p>
<h1>设计原则</h1>
<p>DES设计中使用了分组密码设计的两个原则：混淆（confusion）和扩散(diffusion)，其目的是抗击敌手对密码系统的统计分析。</p>
<p>混淆是使密文的统计特性与密钥的取值之间的关系尽可能复杂化，以使密钥和明文以及密文之间的依赖性对密码分析者来说是无法利用的。</p>
<p>扩散的作用就是将每一位明文的影响尽可能迅速地作用到较多的输出密文位中，以便在大量的密文中消除明文的统计结构，并且使每一位密钥的影响尽可能迅速地扩展到较多的密文位中，以防对密钥进行逐段破译。</p>`,readingTime:{minutes:14.99,words:4496},title:"DES 加密算法入门及算法原理",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-06-3des.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-06-3des.html-BDVOqHmC.js"),__vite__mapDeps([25,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。</p>
<p>它相当于是对每个数据块应用三次DES加密算法。</p>
<p>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解；</p>
<p>3DES 即是设计用来提供一种相对简单的方法，即<strong>通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法</strong>。</p>
<h1>算法介绍</h1>
<p>3DES又称Triple DES，是DES加密算法的一种模式，它使用2条不同的56位的密钥对数据进行三次加密。</p>`,readingTime:{minutes:5.53,words:1658},title:"3DES 加密算法入门及算法原理",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-07-aes.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-07-aes.html-BOWi6BZn.js"),__vite__mapDeps([26,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>密码学中的高级加密标准（Advanced Encryption Standard，AES），又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。</p>
<p>这个标准用来替代原先的DES（Data Encryption Standard），已经被多方分析且广为全世界所使用。</p>
<p>经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。</p>
<p>2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>
<p>该算法为比利时密码学家Joan Daemen和Vincent Rijmen所设计，结合两位作者的名字，以Rijdael之名命之，投稿高级加密标准的甄选流程。（Rijdael的发音近于 "Rhine doll"。）</p>`,readingTime:{minutes:8.66,words:2597},title:"AES 加密算法入门及算法原理",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-08-symmetry.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-08-symmetry.html-swTVCuEl.js"),__vite__mapDeps([27,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>如果你是黑帮老大，平时和手下沟通，如何保证自己的信息安全呢？</p>
<p>在神探夏洛克的第一季中，就讲述了一个如何侦破黑帮的加密交流的故事。</p>
<figure><img src="https://images.gitee.com/uploads/images/2021/0710/192758_95ec6e5b_508704.jpeg" alt="神探夏洛克" tabindex="0" loading="lazy"><figcaption>密码.jpg</figcaption></figure>
<p>这种密码利用的是密码字典。</p>
<p>密码本身可以是一本书，比如常见的《圣经》、《杀死一只知更鸟》，或者纽约地图？</p>`,readingTime:{minutes:13.93,words:4178},title:"和你一起走进对称加密算法的世界",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-09-rsa.html-CV4yJXDi.js"),__vite__mapDeps([28,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>RSA加密是一种非对称加密。</p>
<p>可以在不直接传递密钥的情况下，完成解密。</p>
<p>这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。</p>
<p>是由一对密钥来进行加解密的过程，分别称为公钥和私钥。</p>
<p>两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p>
<h1>RSA加密、签名区别</h1>
<p>加密和签名都是为了安全性考虑，但略有不同。常</p>
<p>有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。</p>
<p>简单的说，<strong>加密是为了防止信息被泄露，而签名是为了防止信息被篡改</strong>。</p>`,readingTime:{minutes:16.23,words:4870},title:"RSA 非对称加密算法原理详解及 java 实现",type:"article"}}],["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa2.html",{loader:()=>h(()=>import("./2021-07-09-althgorim-cryptograph-09-rsa2.html-WmVDz_hS.js"),__vite__mapDeps([29,1])),meta:{date:1592352e6,localizedDate:"2020年6月17日",category:["Algorithm"],tag:["algorithm","secret","sh"],excerpt:`
<p>RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。</p>
<p>这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。</p>
<p>是由一对密钥来进行加解密的过程，分别称为公钥和私钥。</p>
<p>两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。</p>
<p>通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p>
<h1>RSA加密、签名区别</h1>
<p>加密和签名都是为了安全性考虑，但略有不同。</p>
<p>常有人问加密和签名是用私钥还是公钥？</p>
<p>其实都是对加密和签名的作用有所混淆。</p>`,readingTime:{minutes:7.4,words:2219},title:"RSA 非对称加密算法原理详解及 java 实现 02 一点额外的思考",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-10-chat-intro.html",{loader:()=>h(()=>import("./2018-05-30-hash-10-chat-intro.html-B-a0VGLx.js"),__vite__mapDeps([30,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:6.38,words:1913},title:"Hash-10-聊一聊哈希",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.html",{loader:()=>h(()=>import("./2018-05-30-hash-11-chat-hash-functional.html-C6i8lSGu.js"),__vite__mapDeps([31,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:6.64,words:1993},title:"Hash-11-聊一聊哈希函数 Hash Function",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-12-chat-hash-data-struct-hashmap.html",{loader:()=>h(()=>import("./2018-05-30-hash-12-chat-hash-data-struct-hashmap.html-DbCpEmU2.js"),__vite__mapDeps([32,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:3.61,words:1082},title:"Hash-12-聊一聊哈希数据结构之 HashMap",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-13-chat-hash-data-struct-hashset.html",{loader:()=>h(()=>import("./2018-05-30-hash-13-chat-hash-data-struct-hashset.html-Bd2Zk8VB.js"),__vite__mapDeps([33,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:3.35,words:1006},title:"Hash-13-聊一聊哈希数据结构之 HashSet",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html",{loader:()=>h(()=>import("./2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html-eyaY51wt.js"),__vite__mapDeps([34,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:13.92,words:4176},title:"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-data-struct-merkle-tree.html",{loader:()=>h(()=>import("./2018-05-30-hash-15-chat-hash-data-struct-merkle-tree.html-BJGO5rbv.js"),__vite__mapDeps([35,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing","tree"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:3.11,words:934},title:"Hash-13-聊一聊哈希数据结构之 Merkle Tree（默克尔树）",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-load-balance-consist-hash.html",{loader:()=>h(()=>import("./2018-05-30-hash-15-chat-hash-load-balance-consist-hash.html-C5TeIn9o.js"),__vite__mapDeps([36,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing","load-balance"],excerpt:`
<p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p>
<p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p>`,readingTime:{minutes:3.91,words:1174},title:"Hash-15-聊一聊哈希负载均衡之一致性哈希 Consistent Hashing",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-conflict.html",{loader:()=>h(()=>import("./2018-05-30-hash-conflict.html-Dk8uMiKe.js"),__vite__mapDeps([37,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash"],excerpt:`
<p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入，通过散列算法，变换成固定长度的输出，该输出就是散列值。</p>
<p>根据散列值作为地址存放数据，这种转换是一种压缩映射，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p>
<p>查找关键字数据（如K）的时候，若结构中存在和关键字相等的记录，则必定在f(K)的存储位置上。</p>
<p>由此，不需比较便可直接取得所查记录。我们称这个对应关系f为散列函数(Hash function)，按这个事件建立的表为散列表。</p>
<p>综上所述，根据散列函数f(key)和处理冲突的方法将一组关键字映象到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“象” 作为记录在表中的存储位置，这种表便称为散列表，这一映象过程称为散列造表或散列，所得的存储位置称散列地址。</p>`,readingTime:{minutes:4.24,words:1271},title:"Hash conflict 哈希碰撞/哈希冲突解决方式",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-impl.html",{loader:()=>h(()=>import("./2018-05-30-hash-impl.html-CIKktIt9.js"),__vite__mapDeps([38,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<h2>jdk7 HashMap</h2>
<p>JDK7 hashMap 的 hash 源码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * Retrieve object hash code and applies a supplemental hash function to the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * result hash, which defends against poor quality hash functions.  This is</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * critical because HashMap uses power-of-two length hash tables, that</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * otherwise encounter collisions for hashCodes that do not differ</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     * in lower bits. Note: Null keys always map to hash 0, thus index 0.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hash</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> k) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> hashSeed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> String) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> sun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">misc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Hashing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">stringHash32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((String) k);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">^=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // This function ensures that hashCodes that differ only by</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // constant multiples at each bit position have a bounded</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // number of collisions (approximately 8 at default load factor).</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">^=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 12</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">^</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (h </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:12.98,words:3895},title:"Hash implement in java 哈希算法实现",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash-perfect.html",{loader:()=>h(()=>import("./2018-05-30-hash-perfect.html-b0UkJf0I.js"),__vite__mapDeps([39,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","sh"],excerpt:`
<p>前几天去参加云栖大会 2019，在会上听到这个名词。</p>
<p>感觉很有趣，值得学习一波。</p>
<h1>完美哈希函数(Perfect Hash Function)</h1>
<p>完美 哈希函数（Perfect Hash Function，简称PHF）是没有冲突的哈希函数，也就是，函数 H 将 N 个 KEY 值映射到 M 个整数上，这里 M&gt;=N ，而且，对于任意的 KEY1 ，KEY2 ，H( KEY1 ) != H( KEY2 ) ，并且，如果 M = = N ，则 H 是最小完美哈希函数（Minimal Perfect Hash Function，简称MPHF）。</p>`,readingTime:{minutes:8.8,words:2639},title:"完美哈希函数(Perfect Hash Function)",type:"article"}}],["/posts/algorithm/hash/2018-05-30-hash.html",{loader:()=>h(()=>import("./2018-05-30-hash.html-B7JDuTnY.js"),__vite__mapDeps([40,1])),meta:{date:15276384e5,localizedDate:"2018年5月30日",category:["Algorithm"],tag:["algorithm","hash","hashing"],excerpt:`
<p>散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。</p>
<p>也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>
<h2>基础概念</h2>
<p>比方我们存储 70 个元素，但我们可能为这 70 个元素申请了 100 个元素的空间。</p>
<p><code>70/100=0.7</code>，这个数字称为<strong>负载因子</strong>。</p>
<p>我们之所以这样做，也是为了“高速存取”的目的。</p>
<p>我们基于一种结果尽可能随机平均分布的固定函数H为每一个元素安排存储位置，这样就能够避免遍历性质的线性搜索，以达到高速存取。</p>`,readingTime:{minutes:15.47,words:4641},title:"Hash 哈希",type:"article"}}],["/posts/algorithm/load-balance/2018-09-10-algorithm-load-balance.html",{loader:()=>h(()=>import("./2018-09-10-algorithm-load-balance.html-OLDlcKG0.js"),__vite__mapDeps([41,1])),meta:{date:15365376e5,localizedDate:"2018年9月10日",category:["Algorithm"],tag:["algorithm","sh"],excerpt:`
<h2>概念</h2>
<p>负载平衡（Load balancing）是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。</p>
<p>使用带有负载平衡的多个服务器组件，取代单一的组件，可以通过冗余提高可靠性。负载平衡服务通常是由专用软件和硬件来完成。</p>
<p>主要作用是将大量作业合理地分摊到多个操作单元上进行执行，用于解决互联网架构中的高并发和高可用的问题。</p>
<h1>负载均衡分类</h1>
<p>现在我们知道，负载均衡就是一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁碟驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。那么，这种计算机技术的实现方式有多种。大致可以分为以下几种，其中最常用的是四层和七层负载均衡：</p>`,readingTime:{minutes:18.89,words:5668},title:"Algorithm Load Balance 负载均衡算法",type:"article"}}],["/posts/algorithm/search/2018-07-26-search.html",{loader:()=>h(()=>import("./2018-07-26-search.html-C1NY9cys.js"),__vite__mapDeps([42,1])),meta:{date:15325632e5,localizedDate:"2018年7月26日",category:["Algorithm"],tag:["algorithm","search"],excerpt:`
<p>顺序查找适合于存储结构为顺序存储或链接存储的线性表。</p>
<p>基本思想：顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。</p>
<h2>复杂度分析：</h2>
<p>查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;</p>
<p>当查找不成功时，需要n+1次比较，时间复杂度为O(n);</p>
<p>所以，顺序查找的时间复杂度为O(n)。</p>
<h2>代码实现</h2>`,readingTime:{minutes:2.74,words:823},title:"Search 二分查找法",type:"article"}}],["/posts/leetcode/datastruct/2018-06-19-data-struct-dynamic-array.html",{loader:()=>h(()=>import("./2018-06-19-data-struct-dynamic-array.html-DXZ5T1Qi.js"),__vite__mapDeps([43,1])),meta:{date:15293664e5,localizedDate:"2018年6月19日",category:["Data Struct"],tag:["data struct"],excerpt:`
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Dynamic_array" target="_blank" rel="noopener noreferrer">Dynamic_array</a></p>
</blockquote>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="noopener noreferrer">Linked List</a></p>
</blockquote>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Doubly_linked_list" target="_blank" rel="noopener noreferrer">Doubly linked list</a></p>
</blockquote>`,readingTime:{minutes:.11,words:34},title:"Data Struct-01-Dynamic Array",type:"article"}}],["/posts/leetcode/datastruct/2018-09-10-index-lsm.html",{loader:()=>h(()=>import("./2018-09-10-index-lsm.html-C2gGpNCm.js"),__vite__mapDeps([44,1])),meta:{date:15362784e5,localizedDate:"2018年9月7日",category:["Data-Struct"],tag:["index","data-struct","sh"],excerpt:`
<p>LSM树而且通过批量存储技术规避磁盘随机写入问题。</p>
<p>LSM树的设计思想非常朴素, 它的原理是把一颗大树拆分成N棵小树，它首先写入到内存中（内存没有寻道速度的问题，随机写的性能得到大幅提升），在内存中构建一颗有序小树，随着小树越来越大，内存的小树会flush到磁盘上。磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能。</p>
<h1>常见索引对比</h1>
<p>一般来说，索引本身很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。</p>
<p>这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以决定索引性能的一个最重要指标就是在查找过程中磁盘I/O操作次数的渐进复杂度，换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。</p>`,readingTime:{minutes:3.18,words:954},title:"LSM 索引",type:"article"}}],["/posts/leetcode/datastruct/2018-09-10-index-slimtrie.html",{loader:()=>h(()=>import("./2018-09-10-index-slimtrie.html-QCjYfKiO.js"),__vite__mapDeps([45,1])),meta:{date:15362784e5,localizedDate:"2018年9月7日",category:["Data-Struct"],tag:["index","data-struct","sh"],excerpt:`
<p><a href="https://github.com/openacid/slim" target="_blank" rel="noopener noreferrer">Slim</a> Slim is collection of surprisingly space efficient data types, with corresponding serialisation APIs to persisting them on-disk or for transport.</p>
<h1>索引的一点背景知识</h1>
<p>索引可以被认为是业务数据（用户文件）之外的一些"额外"的数据, 在这些额外的数据帮助下, 可以在大量的数据中快速找到自己想要的内容. 就像一本数学课本的2个"索引": 一个是目录, 一个是关键词索引.</p>`,readingTime:{minutes:5.64,words:1691},title:"Slim 战胜Btree索引",type:"article"}}],["/posts/leetcode/datastruct/2018-09-12-b-tree.html",{loader:()=>h(()=>import("./2018-09-12-b-tree.html-Cmkww9E4.js"),__vite__mapDeps([46,1])),meta:{date:15367104e5,localizedDate:"2018年9月12日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。</p>
<p>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。</p>
<p>B+ 树元素自底向上插入，这与二叉树恰好相反。</p>
<p>B+ 树在节点访问时间远远超过节点内部访问时间的时候，比可作为替代的实现有着实在的优势。这通常在多数节点在次级存储比如硬盘中的时候出现。通过最大化在每个内部节点内的子节点的数目减少树的高度，平衡操作不经常发生，而且效率增加了。这种价值得以确立通常需要每个节点在次级存储中占据完整的磁盘块或近似的大小。</p>
<p>B+ 背后的想法是内部节点可以有在预定范围内的可变数目的子节点。因此，B+ 树不需要象其他自平衡二叉查找树那样经常的重新平衡。对于特定的实现在子节点数目上的低和高边界是固定的。例如，在 2-3 B 树（常简称为2-3 树）中，每个内部节点只可能有 2 或 3 个子节点。如果节点有无效数目的子节点则被当作处于违规状态。</p>`,readingTime:{minutes:3.03,words:909},title:"数据结构之 B Tree",type:"article"}}],["/posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.html",{loader:()=>h(()=>import("./2018-09-12-data-struct-red-black-tree.html-BXKDoUmT.js"),__vite__mapDeps([47,1])),meta:{date:15367104e5,localizedDate:"2018年9月12日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。</p>
<p>它是在1972年由鲁道夫·贝尔发明的，他称之为"对称二叉B树"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。</p>
<p>它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在 <code>O(lg(n))</code> 时间内做查找，插入和删除，这里的 n 是树中元素的数目。</p>
<h2>用途和好处</h2>
<p>红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。</p>`,readingTime:{minutes:12.47,words:3741},title:"数据结构之红黑树 Red Black Tree",type:"article"}}],["/posts/leetcode/datastruct/2018-11-07-data-struct-binary-heap.html",{loader:()=>h(()=>import("./2018-11-07-data-struct-binary-heap.html-Cii5VGjf.js"),__vite__mapDeps([48,1])),meta:{date:15415488e5,localizedDate:"2018年11月7日",category:["Data Struct"],tag:["data-struct","sh"],excerpt:"数据结构之二叉堆",readingTime:{minutes:.31,words:93},title:"Binary Heap",type:"article"}}],["/posts/leetcode/datastruct/2018-11-07-data-struct-binary-tree.html",{loader:()=>h(()=>import("./2018-11-07-data-struct-binary-tree.html-Bzd1FktC.js"),__vite__mapDeps([49,1])),meta:{date:15415488e5,localizedDate:"2018年11月7日",category:["Data Struct"],tag:["data-struct","sh"],excerpt:"数据结构之二叉树",readingTime:{minutes:1.45,words:435},title:"Binary Tree",type:"article"}}],["/posts/leetcode/datastruct/2018-12-25-bitmap.html",{loader:()=>h(()=>import("./2018-12-25-bitmap.html-DEieChPd.js"),__vite__mapDeps([50,1])),meta:{date:1545696e6,localizedDate:"2018年12月25日",category:["Data-Struct"],tag:["data-struct","map","bit","sh"],excerpt:`
<p>我们先来看个简单的问题。</p>
<p>假如给你20亿个非负数的int型整数，然后再给你一个非负数的int型整数 t ，让你判断t是否存在于这20亿数中，你会怎么做呢？</p>
<p>有人可能会用一个int数组，然后把20亿个数给存进去，然后再循环遍历一下就可以了。</p>
<p>想一下，这样的话，时间复杂度是O(n)，所需要的内存空间</p>
<p>4byte * 20亿，一共需要80亿个字节，</p>
<p>大概需要8GB的内存空间，显然有些计算机的内存一次是加载不了这么这么多的数据的。</p>
<h1>初步优化</h1>
<p>按照上面的做法，时间复杂度是O(n)，内存是8GB，实际上我们是可以把时间复杂度降低到O(1)的。</p>`,readingTime:{minutes:4.78,words:1434},title:"数据结构之 Bitmap",type:"article"}}],["/posts/leetcode/datastruct/2019-02-13-datastruct-skiplist.html",{loader:()=>h(()=>import("./2019-02-13-datastruct-skiplist.html-OYvhkier.js"),__vite__mapDeps([51,1])),meta:{date:1550016e6,localizedDate:"2019年2月13日",category:["Data-Struct"],tag:["data-struct","index","sh"],excerpt:"跳跃表(SkipList)",readingTime:{minutes:28.74,words:8623},title:"跳跃表(SkipList)",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-00-overview.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-00-overview.html-CiOD5Gee.js"),__vite__mapDeps([52,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","overview","topics","sh"],excerpt:`
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>程序 = 数据结构+算法</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:2.72,words:816},title:"数据结构 00 概览 数据结构专题汇总",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-01-identify-hash-map.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-01-identify-hash-map.html-DU740dcs.js"),__vite__mapDeps([53,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","source-code","jdk","cache","sh"],excerpt:`
<h2>简介</h2>
<p>IdentityHashMap 类利用哈希表实现 Map 接口，比较键（和值）时使用引用相等性代替对象相等性。</p>
<p>换句话说，在 IdentityHashMap 中，当且仅当 (k1==k2) 时，才认为两个键 k1 和 k2 相等（在正常 Map 实现（如 HashMap）中，</p>
<p>当且仅当满足下列条件时才认为两个键 k1 和 k2 相等：(k1<mark>null ? k2</mark>null : e1.equals(e2))）。</p>
<h2>注意</h2>
<p>此类不是 通用 Map 实现！此类实现 Map 接口时，它有意违反 Map 的常规协定，该协定在比较对象时强制使用 equals 方法。此类设计仅用于其中需要引用相等性语义的罕见情况。 此类的典型用法是拓扑保留对象图形转换，如序列化或深层复制。</p>`,readingTime:{minutes:9.38,words:2815},title:"数据结构 01 IdentityHashMap 详解",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-02-arraylist-source-code.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-02-arraylist-source-code.html-wSTKibrG.js"),__vite__mapDeps([54,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","list","source-code","sh"],excerpt:`
<p>以前学习数据结构的时候，自己通过实现过 ArrayList。</p>
<p>但是 jdk 中的源码没有仔细研读过。</p>
<p>本篇查缺补漏，好好学习一下。</p>
<blockquote>
<p>jdk 版本为 11</p>
</blockquote>
<h2>类定义</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ArrayList</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AbstractList</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> List</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> RandomAccess</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Cloneable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75"> java.io.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Serializable</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.76,words:1729},title:"数据结构 02 ArrayList 源码分析",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-03-linkedlist-source-code.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-03-linkedlist-source-code.html-DHxihoD3.js"),__vite__mapDeps([55,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","list","source-code","sh"],excerpt:`
<h2>类定义</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> LinkedList</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AbstractSequentialList</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> List</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Deque</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Cloneable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75"> java.io.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Serializable</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.36,words:1608},title:"数据结构 03 LinkedList 源码分析",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-04-stack-source-code.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-04-stack-source-code.html-0DZSwkNM.js"),__vite__mapDeps([56,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","source-code","sh"],excerpt:`
<h2>类定义</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * (LIFO) stack of objects. It extends class &lt;tt&gt;Vector&lt;/tt&gt; with five</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * operations that allow a vector to be treated as a stack. The usual</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;tt&gt;push&lt;/tt&gt; and &lt;tt&gt;pop&lt;/tt&gt; operations are provided, as well as a</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * method to &lt;tt&gt;peek&lt;/tt&gt; at the top item on the stack, a method to test</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * for whether the stack is &lt;tt&gt;empty&lt;/tt&gt;, and a method to &lt;tt&gt;search&lt;/tt&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * the stack for an item and discover how far it is from the top.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * When a stack is first created, it contains no items.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;A more complete and consistent set of LIFO stack operations is</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * provided by the {@link Deque} interface and its implementations, which</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * should be used in preference to this class.  For example:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;pre&gt;   {@code</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *   Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();}&lt;/pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  Jonathan Payne</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@since</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   JDK1.0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Stack</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Vector</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.15,words:644},title:"数据结构 04 Stack 源码分析",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-05-hashset.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-05-hashset.html-DR10omZx.js"),__vite__mapDeps([57,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","source-code","hash","sh"],excerpt:`
<h2>类定义</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * This class implements the {@code Set} interface, backed by a hash table</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * (actually a {@code HashMap} instance).  It makes no guarantees as to the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * iteration order of the set; in particular, it does not guarantee that the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * order will remain constant over time.  This class permits the {@code null}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * element.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;This class offers constant time performance for the basic operations</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * ({@code add}, {@code remove}, {@code contains} and {@code size}),</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * assuming the hash function disperses the elements properly among the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * buckets.  Iterating over this set requires time proportional to the sum of</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * the {@code HashSet} instance's size (the number of elements) plus the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * "capacity" of the backing {@code HashMap} instance (the number of</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * buckets).  Thus, it's very important not to set the initial capacity too</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * high (or the load factor too low) if iteration performance is important.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * If multiple threads access a hash set concurrently, and at least one of</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * the threads modifies the set, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * This is typically accomplished by synchronizing on some object that</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * naturally encapsulates the set.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * If no such object exists, the set should be "wrapped" using the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * {@link Collections#synchronizedSet Collections.synchronizedSet}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * method.  This is best done at creation time, to prevent accidental</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * unsynchronized access to the set:&lt;pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *   Set s = Collections.synchronizedSet(new HashSet(...));&lt;/pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;The iterators returned by this class's {@code iterator} method are</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * created, in any way except through the iterator's own {@code remove}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * method, the Iterator throws a {@link ConcurrentModificationException}.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Thus, in the face of concurrent modification, the iterator fails quickly</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * and cleanly, rather than risking arbitrary, non-deterministic behavior at</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * an undetermined time in the future.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * as it is, generally speaking, impossible to make any hard guarantees in the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * presence of unsynchronized concurrent modification.  Fail-fast iterators</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * throw {@code ConcurrentModificationException} on a best-effort basis.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Therefore, it would be wrong to write a program that depended on this</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * exception for its correctness: &lt;i&gt;the fail-fast behavior of iterators</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * should be used only to detect bugs.&lt;/i&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;This class is a member of the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;a href="{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework"&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Java Collections Framework&lt;/a&gt;.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> &lt;E&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> the type of elements maintained by this set</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  Josh Bloch</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  Neal Gafter</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@see</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     Collection</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@see</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     Set</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@see</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     TreeSet</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@see</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     HashMap</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@since</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   1.2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HashSet</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AbstractSet</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Set</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Cloneable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75"> java.io.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Serializable</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.58,words:1673},title:"数据结构 05 HashSet 源码分析",type:"article"}}],["/posts/leetcode/datastruct/2019-02-19-data-struct-06-treeset.html",{loader:()=>h(()=>import("./2019-02-19-data-struct-06-treeset.html-BfglAb0-.js"),__vite__mapDeps([58,1])),meta:{date:15505344e5,localizedDate:"2019年2月19日",category:["Data-Struct"],tag:["data-struct","source-code","tree","sh"],excerpt:`
<h2>类定义</h2>
<p>基于 TreeMap 的实现。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * A {@link NavigableSet} implementation based on a {@link TreeMap}.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * The elements are ordered using their {@linkplain Comparable natural</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * ordering}, or by a {@link Comparator} provided at set creation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * time, depending on which constructor is used.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;This implementation provides guaranteed log(n) time cost for the basic</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * operations ({@code add}, {@code remove} and {@code contains}).</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;Note that the ordering maintained by a set (whether or not an explicit</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * comparator is provided) must be &lt;i&gt;consistent with equals&lt;/i&gt; if it is to</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * correctly implement the {@code Set} interface.  (See {@code Comparable}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * or {@code Comparator} for a precise definition of &lt;i&gt;consistent with</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * equals&lt;/i&gt;.)  This is so because the {@code Set} interface is defined in</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * terms of the {@code equals} operation, but a {@code TreeSet} instance</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * performs all element comparisons using its {@code compareTo} (or</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * {@code compare}) method, so two elements that are deemed equal by this method</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * are, from the standpoint of the set, equal.  The behavior of a set</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;i&gt;is&lt;/i&gt; well-defined even if its ordering is inconsistent with equals; it</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * just fails to obey the general contract of the {@code Set} interface.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * If multiple threads access a tree set concurrently, and at least one</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * of the threads modifies the set, it &lt;i&gt;must&lt;/i&gt; be synchronized</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * externally.  This is typically accomplished by synchronizing on some</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * object that naturally encapsulates the set.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * If no such object exists, the set should be "wrapped" using the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * method.  This is best done at creation time, to prevent accidental</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * unsynchronized access to the set: &lt;pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));&lt;/pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;The iterators returned by this class's {@code iterator} method are</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;i&gt;fail-fast&lt;/i&gt;: if the set is modified at any time after the iterator is</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * created, in any way except through the iterator's own {@code remove}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * method, the iterator will throw a {@link ConcurrentModificationException}.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Thus, in the face of concurrent modification, the iterator fails quickly</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * and cleanly, rather than risking arbitrary, non-deterministic behavior at</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * an undetermined time in the future.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;Note that the fail-fast behavior of an iterator cannot be guaranteed</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * as it is, generally speaking, impossible to make any hard guarantees in the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * presence of unsynchronized concurrent modification.  Fail-fast iterators</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * throw {@code ConcurrentModificationException} on a best-effort basis.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Therefore, it would be wrong to write a program that depended on this</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * exception for its correctness:   &lt;i&gt;the fail-fast behavior of iterators</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * should be used only to detect bugs.&lt;/i&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;p&gt;This class is a member of the</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * &lt;a href="{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework"&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * Java Collections Framework&lt;/a&gt;.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TreeSet</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AbstractSet</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NavigableSet</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">E</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Cloneable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75"> java.io.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Serializable</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.56,words:1667},title:"数据结构 06 TreeSet + NavigableMap 源码分析",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-00-index.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-00-index.html-CfxozppE.js"),__vite__mapDeps([59,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","index","sh"],excerpt:`
<h2>书籍</h2>
<p>《算法 第四版》</p>
<p>《数据结构与算法分析》</p>
<p>《算法导论》</p>
<p>《大话数据结构》</p>
<h2>做题</h2>
<p>leetcode + c语言实现</p>
<h1>书籍的目录就是学习的大纲</h1>
`,readingTime:{minutes:.25,words:76},title:"数据结构与算法学习目录",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-01-book-algorithm-index.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-01-book-algorithm-index.html-B_xMj47A.js"),__vite__mapDeps([60,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>第1章　 基础<br>
1.1　基础编程模型<br>
1.1.1　Java程序的基本结构<br>
1.1.2　原始数据类型与表达式<br>
1.1.3　 语句<br>
1.1.4　 简便记法<br>
1.1.5　 数组<br>
1.1.6　 静态方法<br>
1.1.7　 API<br>
1.1.8　 字符串<br>
1.1.9　 输入输出<br>
1.1.10　 二分查找<br>
1.1.11　 展望<br>
1.2　 数据抽象<br>
1.2.1　 使用抽象数据类型<br>
1.2.2　 抽象数据类型举例<br>
1.2.3　 抽象数据类型的实现<br>
1.2.4　 更多抽象数据类型的实现<br>
1.2.5　 数据类型的设计<br>
1.3　 背包、队列和栈<br>
1.3.1　 API<br>
1.3.2　 集合类数据类型的实现<br>
1.3.3　 链表<br>
1.3.4　 综述<br>
1.4　 算法分析<br>
1.4.1　 科学方法<br>
1.4.2　 观察<br>
1.4.3　 数学模型<br>
1.4.4　 增长数量级的分类<br>
1.4.5　 设计更快的算法<br>
1.4.6　 倍率实验<br>
1.4.7　 注意事项<br>
1.4.8　 处理对于输入的依赖<br>
1.4.9　 内存<br>
1.4.10　 展望<br>
1.5　 案例研究：union-find算法<br>
1.5.1　 动态连通性<br>
1.5.2　 实现<br>
1.5.3　 展望<br>
第2章　 排序<br>
2.1　 初级排序算法<br>
2.1.1　 游戏规则<br>
2.1.2　 选择排序<br>
2.1.3　 插入排序<br>
2.1.4　 排序算法的可视化<br>
2.1.5　 比较两种排序算法<br>
2.1.6　 希尔排序<br>
2.2　 归并排序<br>
2.2.1　 原地归并的抽象方法<br>
2.2.2　 自顶向下的归并排序<br>
2.2.3　 自底向上的归并排序<br>
2.2.4　 排序算法的复杂度<br>
2.3　 快速排序<br>
2.3.1　 基本算法<br>
2.3.2　 性能特点<br>
2.3.3　 算法改进<br>
2.4　 优先队列<br>
2.4.1　 API<br>
2.4.2　 初级实现<br>
2.4.3　 堆的定义<br>
2.4.4　 堆的算法<br>
2.4.5　 堆排序<br>
2.5　 应用<br>
2.5.1　 将各种数据排序<br>
2.5.2　 我应该使用哪种排序算法<br>
2.5.3　 问题的归约<br>
2.5.4　 排序应用一览<br>
第3章　查找<br>
3.1　符号表<br>
3.1.1　API<br>
3.1.2　有序符号表<br>
3.1.3　用例举例<br>
3.1.4　无序链表中的顺序查找<br>
3.1.5　有序数组中的二分查找<br>
3.1.6　对二分查找的分析<br>
3.1.7　预览<br>
3.2　二叉查找树<br>
3.2.1　基本实现<br>
3.2.2　分析<br>
3.2.3　有序性相关的方法与删除操作<br>
3.3　平衡查找树<br>
3.3.1　2-3查找树<br>
3.3.2　红黑二叉查找树<br>
3.3.3　实现<br>
3.3.4　删除操作<br>
3.3.5　红黑树的性质<br>
3.4　散列表<br>
3.4.1　散列函数<br>
3.4.2　基于拉链法的散列表<br>
3.4.3　基于线性探测法的散列表<br>
3.4.4　调整数组大小<br>
3.4.5　内存使用<br>
3.5　应用<br>
3.5.1　我应该使用符号表的哪种实现<br>
3.5.2　集合的API<br>
3.5.3　字典类用例<br>
3.5.4　索引类用例<br>
3.5.5　稀疏向量<br>
第4章　 图<br>
4.1　 无向图<br>
4.1.1　 术语表<br>
4.1.2　 表示无向图的数据类型<br>
4.1.3　 深度优先搜索<br>
4.1.4　 寻找路径<br>
4.1.5　 广度优先搜索<br>
4.1.6　 连通分量<br>
4.1.7　 符号图<br>
4.1.8　 总结<br>
4.2　 有向图<br>
4.2.1　 术语<br>
4.2.2　 有向图的数据类型<br>
4.2.3　 有向图中的可达性<br>
4.2.4　 环和有向无环图<br>
4.2.5　 有向图中的强连通性<br>
4.2.6　 总结<br>
4.3　 最小生成树<br>
4.3.1　 原理<br>
4.3.2　 加权无向图的数据类型<br>
4.3.3　 最小生成树的API和测试用例<br>
4.3.4　 Prim算法<br>
4.3.5　 Prim算法的即时实现<br>
4.3.6　 Kruskal算法<br>
4.3.7　 展望<br>
4.4　 最短路径<br>
4.4.1　 最短路径的性质<br>
4.4.2　 加权有向图的数据结构<br>
4.4.3　 最短路径算法的理论基础<br>
4.4.4　 Dijkstra算法<br>
4.4.5　 无环加权有向图中的最短路径算法<br>
4.4.6　 一般加权有向图中的最短路径问题<br>
4.4.7　 展望<br>
第5章　 字符串<br>
5.1　 字符串排序<br>
5.1.1　 键索引计数法<br>
5.1.2　 低位优先的字符串排序<br>
5.1.3　 高位优先的字符串排序<br>
5.1.4　 三向字符串快速排序<br>
5.1.5　 字符串排序算法的选择<br>
5.2　 单词查找树<br>
5.2.1　 单词查找树<br>
5.2.2　 单词查找树的性质<br>
5.2.3　 三向单词查找树<br>
5.2.4　 三向单词查找树的性质<br>
5.2.5　 应该使用字符串符号表的哪种实现<br>
5.3　 子字符串查找<br>
5.3.1　 历史简介<br>
5.3.2　 暴力子字符串查找算法<br>
5.3.3　 Knuth-Morris-Pratt子字符串查找算法<br>
5.3.4　 Boyer-Moore字符串查找算法<br>
5.3.5　 Rabin-Karp指纹字符串查找算法<br>
5.3.6　 总结<br>
5.4　 正则表达式<br>
5.4.1　 使用正则表达式描述模式<br>
5.4.2　 缩略写法<br>
5.4.3　 正则表达式的实际应用<br>
5.4.4　 非确定有限状态自动机<br>
5.4.5　 模拟NFA的运行<br>
5.4.6　 构造与正则表达式对应的<br>
5.5　 数据压缩<br>
5.5.1　 游戏规则<br>
5.5.2　 读写二进制数据<br>
5.5.3　 局限<br>
5.5.4　 热身运动：基因组<br>
5.5.5　 游程编码<br>
5.5.6　 霍夫曼压缩<br>
第6章　 背景<br>
索引</p>`,readingTime:{minutes:3.85,words:1155},title:"数据结构与算法学习-《算法》目录",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-02-base-type.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-02-base-type.html-B_-u2UnO.js"),__vite__mapDeps([61,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","sh"],excerpt:`
<p>提到数据结构，不得不说数据类型，有人将他们比作分子和原子的关系，我们都知道大自然最小的构成单位是原子，数据类型描述的是原子的内部，如质子、中子的情况，而数据结构是分子，由不同的原子以各种各样的结构组成。</p>
<h2>java 的数据类型</h2>
<p>先说Java的数据类型，包括八种基本类型以及对象类型，</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>内置类型　　八种基本类型	值类型	传输时传输值本身	内存随着值传输而变化</span></span>
<span class="line"><span>扩展类型	对象类型	引用类型	传输时仅传递引用	对象在内存的位置不发生变化</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.83,words:1750},title:"数据结构之背包，栈，队列，链表",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-schedule.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-dag-schedule.html-QHs2UfOg.js"),__vite__mapDeps([62,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","dag","schedule","sh"],excerpt:`
<p>定时任务是软件开发中经常遇到的问题。</p>
<p>简单的定时任务只需要在固定时间触发它的执行就可以了。</p>
<p>但是对于复杂的定时任务，可能是由多个任务组成一个任务组，它们之间存在依赖关系，一个任务执行的条件，必须是它的前置任务已经执行成功（或者没有前置任务），它才可以执行。</p>
<p>例如下面这幅图：</p>
<figure><img src="https://user-images.githubusercontent.com/18375710/72712952-12404300-3ba7-11ea-86f6-9a6610c616dd.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,readingTime:{minutes:3.43,words:1028},title:"利用有向无环图（DAG）进行任务调度",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-topological-sorting.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-dag-topological-sorting.html-DO3DaDXA.js"),__vite__mapDeps([63,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","graph","sh"],excerpt:`
<p>拓扑序列是顶点活动网中将活动按发生的先后次序进行的一种排列。</p>
<p>拓扑排序，是对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。</p>
<p>简单的说，<strong>由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</strong></p>
<h2>相关简介</h2>
<p>有向无环图（Directed Acyclic Graph, DAG）是有向图的一种，字面意思的理解就是图中没有环。常常被用来表示事件之间的驱动依赖关系，管理任务之间的调度。</p>`,readingTime:{minutes:7.54,words:2263},title:"DAG 拓扑序列 什么是拓扑排序 Topological Sorting",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-dag.html-B-cABeCM.js"),__vite__mapDeps([64,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>中文分词算法中，有一步就需要实现 DGA（有向无环图）。</p>
<p>所以来学习一下这种数据结构。</p>
<h1>图</h1>
<p>图是数据结构中最为复杂的一种，我在上大学的时候，图的这一章会被老师划到考试范围之外，作为我们的课后兴趣部分。</p>
<p>但实际上，图在信息化社会中的应用非常广泛。</p>
<h2>图主要包括：</h2>
<p>无向图，结点的简单连接</p>
<p>有向图，连接有方向性</p>
<p>加权图，连接带有权值</p>
<p>加权有向图，连接既有方向性，又带有权值</p>
<p>图是由一组顶点和一组能够将两个顶点相连的边组成。</p>
<p>常见的地图，电路，网络等都是图的结构。</p>`,readingTime:{minutes:15.85,words:4754},title:"DAG 有向无环图（Directed Acyclic Graph）",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-direct-graph.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-direct-graph.html-DlqK4hZ1.js"),__vite__mapDeps([65,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<h1>图</h1>
<p>图是数据结构中最为复杂的一种，我在上大学的时候，图的这一章会被老师划到考试范围之外，作为我们的课后兴趣部分。</p>
<p>但实际上，图在信息化社会中的应用非常广泛。图主要包括：</p>
<ul>
<li>
<p>无向图，结点的简单连接</p>
</li>
<li>
<p>有向图，连接有方向性</p>
</li>
<li>
<p>加权图，连接带有权值</p>
</li>
<li>
<p>加权有向图，连接既有方向性，又带有权值</p>
</li>
</ul>
<p>图是由一组顶点和一组能够将两个顶点相连的边组成。</p>
<p>常见的地图，电路，网络等都是图的结构。</p>`,readingTime:{minutes:11.36,words:3408},title:"java 实现有向图(Direct Graph)",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-dijkstra.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-graph-dijkstra.html-DRx0prn4.js"),__vite__mapDeps([66,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>求解单元点的最短路径问题：给定带权有向图G和源点v，求v到G中其他顶点的最短路径</p>
<p>限制条件：图G中不存在负权值的边（这个可以通过弗洛伊德算法，后期将进行讲解）</p>
<h1>核心思想</h1>
<p>设G=(V,E)是一个带权有向图，把图中顶点集合V分成两组，第一组为已求出最短路径的顶点集合（用S表示，初始时S中只有一个源点，以后每求得一条最短路径 , 就将加入到集合S中，直到全部顶点都加入到S中，算法就结束了），第二组为其余未确定最短路径的顶点集合（用U表示），按最短路径长度的递增次序依次把第二组的顶点加入S中。</p>
<p>在加入的过程中，总保持从源点v到S中各顶点的最短路径长度不大于从源点v到U中任何顶点的最短路径长度。</p>`,readingTime:{minutes:11.19,words:3358},title:"图最短路径算法之迪杰斯特拉算法（Dijkstra）",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-floyd.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-03-graph-floyd.html-B_dJBvPY.js"),__vite__mapDeps([67,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<h2>定义概览</h2>
<p>Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包。</p>
<p>Floyd-Warshall算法的时间复杂度为O(N<sup>3)，空间复杂度为O(N</sup>2)。</p>
<h2>算法描述</h2>
<h3>1) 算法思想原理：</h3>
<p>Floyd算法是一个经典的动态规划算法。用通俗的语言来描述的话，首先我们的目标是寻找从点i到点j的最短路径。</p>
<p>从动态规划的角度看问题，我们需要为这个目标重新做一个诠释（这个诠释正是动态规划最富创造力的精华所在）</p>`,readingTime:{minutes:8.76,words:2628},title:"图最短路径算法之弗洛伊德算法（Floyd）",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-05-gene.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-05-gene.html-CRcUvlaA.js"),__vite__mapDeps([68,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>说一说跨学库的东西。</p>
<p>生物学中的进化论可谓无人不知，无人不晓。</p>
<p>数学中的梯度下降和牛顿迭代，收敛的效果能否进一步优化呢？</p>
<p>这也使我想起来以前阅读的两本书《失控》和《超级智能》</p>
<h1>什么是遗传算法？</h1>
<h2>遗传算法的科学定义</h2>
<p>遗传算法（Genetic Algorithm, GA）是<strong>模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。</strong></p>
<p>其主要特点是直接对结构对象进行操作，不存在求导和函数连续性的限定；具有内在的隐并行性和更好的全局寻优能力；采用概率化的寻优方法，不需要确定的规则就能自动获取和指导优化的搜索空间，自适应地调整搜索方向。</p>`,readingTime:{minutes:21.46,words:6438},title:"遗传算法详解",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-06-vertibi.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-06-vertibi.html-CNejRkAL.js"),__vite__mapDeps([69,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>基本思想：问题的最优解如果可以由子问题的最优解推导得到，则可以先求解子问题的最优解，在构造原问题的最优解；若子问题有较多的重复出现，则可以自底向上从最终子问题向原问题逐步求解。</p>
<h2>使用条件</h2>
<p>可分为多个相关子问题，子问题的解被重复使用</p>
<h3>Optimal substructure（优化子结构）：</h3>
<p>一个问题的优化解包含了子问题的优化解</p>
<p>缩小子问题集合，只需那些优化问题中包含的子问题，降低实现复杂性</p>
<p>我们可以自下而上的</p>
<h3>Subteties（重叠子问题）</h3>
<p>在问题的求解过程中，很多子问题的解将被多次使用。</p>`,readingTime:{minutes:8.94,words:2682},title:"viterbi 算法：利用动态规划寻找最短路径",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-backtracking.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-backtracking.html-DQdLXd3m.js"),__vite__mapDeps([70,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`<p>面试算法：回溯算法与分割回文串实战</p>
<h1>回溯算法</h1>
<p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p>
<p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。</p>
<p>但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p>
<p>许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p>
<h2>与穷举的联系</h2>
<p>回溯法简单来说就是按照深度优先的顺序，穷举所有可能性的算法，但是回溯算法比暴力穷举法更高明的地方就是回溯算法可以随时判断当前状态是否符合问题的条件。</p>`,readingTime:{minutes:9.9,words:2970},title:"五大基本算法之回溯算法 backtracking",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-divided.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-divided.html-BBgrslge.js"),__vite__mapDeps([71,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。</p>
<p>求出子问题的解，就可得到原问题的解。即一种分目标完成程序算法，简单问题可用二分法完成。</p>
<h1>基本思想</h1>
<p>当我们求解某些问题时，由于这些问题要处理的数据相当多，或求解过程相当复杂，使得直接求解法在时间上相当长，或者根本无法直接求出。</p>
<p>对于这类问题，我们往往先把它分解成几个子问题，找到求出这几个子问题的解法后，再找到合适的方法，把它们组合成求整个问题的解法。</p>
<p><strong>如果这些子问题还较大，难以解决，可以再把它们分成几个更小的子问题，以此类推，直至可以直接求出解为止。</strong></p>`,readingTime:{minutes:4.3,words:1290},title:"五大基本算法之分治算法 Divided",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp-fib.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-dp-fib.html-CQj8Akh6.js"),__vite__mapDeps([72,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>今天，我们就重新学习一下，这个每一位学习过递归的同学都见过的题目—斐波那契数列。</p>
<p>但是，你真的理解这个数列了吗？</p>
<p><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener noreferrer">509. 斐波那契数</a></p>
<p>斐波那契数，通常用&nbsp;F(n) 表示，形成的序列称为 斐波那契数列 。</p>
<p>该数列由&nbsp;0 和 1 开始，后面的每一项数字都是前面两项数字的和。</p>
<p>也就是：</p>`,readingTime:{minutes:5.55,words:1666},title:"面试算法：斐波那契数列时间复杂度为 O(1) 的解法，你会吗？",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-dp.html-CDFS39jp.js"),__vite__mapDeps([73,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。</p>
<p>20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。</p>
<p>1957年出版了他的名著《Dynamic Programming》，这是该领域的第一本著作。</p>`,readingTime:{minutes:21.78,words:6535},title:"五大基本算法之动态规划算法 DP dynamic programming",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-enum.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-enum.html-ClKS2d9Q.js"),__vite__mapDeps([74,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<h2>定义</h2>
<p>穷举法又称穷举搜索法，是一种在问题域的解空间中对所有可能的解穷举搜索，并根据条件选择最优解的方法的总称。</p>
<p>数学上也把穷举法称为枚举法，就是在一个由有限个元素构成的集合中，把所有元素一一枚举研究的方法。</p>
<p>使用穷举法解决问题，基本上就是以下两个步骤：</p>
<ol>
<li>
<p>确定问题的解（或状态）的定义、解空间的范围以及正确解的判定条件；</p>
</li>
<li>
<p>根据解空间的特点来选择搜索策略，逐个检验解空间中的候选解是否正确；</p>
</li>
</ol>
<p>穷举是用计算机求解问题最常用的方法之一，常用来解决那些通过公式推导、规则演绎的方法不能解决的问题。</p>`,readingTime:{minutes:10.81,words:3242},title:"五大基本算法之穷举算法",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-greedy.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base-greedy.html-x0982-Uv.js"),__vite__mapDeps([75,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。</p>
<p>也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</p>
<p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的<strong>贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</strong></p>
<h1>基本要素</h1>
<h2>贪心选择</h2>
<p>贪心选择是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。</p>
<p>这是贪心算法可行的第一个基本要素，也是贪心算法与动态规划算法的主要区别。</p>`,readingTime:{minutes:7.52,words:2255},title:"五大基本算法之贪心算法 Greedy",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-07-base.html-BcXFbsza.js"),__vite__mapDeps([76,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。</p>
<p>也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。</p>
<p>如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。</p>
<p>不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。</p>
<p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和（可能为空的）初始输入开始，经过一系列有限而清晰定义的状态，最终产生输出并停止于一个终态。一个状态到另一个状态的转移不一定是确定的。</p>`,readingTime:{minutes:10.42,words:3127},title:"五大基本算法概览",type:"article"}}],["/posts/leetcode/datastruct/2020-01-23-data-struct-learn-08-dfs-bfs.html",{loader:()=>h(()=>import("./2020-01-23-data-struct-learn-08-dfs-bfs.html-D5Rq0U9v.js"),__vite__mapDeps([77,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","algorithm","sh"],excerpt:`
<p>深度优先搜索是用来遍历或搜索树和图数据结构的算法，它是可以从任意跟节点开始，选择一条路径走到底，并通过回溯来访问所有节点的算法。</p>
<p>简单来说就是通过选择一条道路走到无路可走的时候回退到上一个岔路口，并标记这条路已走过，选择另外一条道路继续走，直到走遍每一条路。</p>
<h1>DFS 深度优先搜索的思想</h1>
<p>DFS 思修基于递归思想，通过递归的形式来缩小问题规模，把一件事分割成若干个相同的小事，逐步完成。</p>
<p>深度优先搜索的步骤分为 1.递归下去 2.回溯上来。</p>
<p>顾名思义，深度优先，则是以深度为准则，先一条路走到底，直到达到目标。这里称之为递归下去。</p>`,readingTime:{minutes:18.79,words:5637},title:"DFS 深度优先遍历与 BFS 广度优先遍历详解",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-00-overview.html-D2MWAnpn.js"),__vite__mapDeps([78,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","tree","overview","sf"],excerpt:`
<p>排序</p>
<p>二分查找法</p>
<p>Tree</p>
<p>二叉查找树</p>
<p>AVL Tree</p>
<p>红黑树</p>
<p>B Tree</p>
<p>B+ Tree</p>
<hr>
<p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-00-overview" target="_blank" rel="noopener noreferrer">Tree-00-概览</a></p>
<p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-01-binary-tree" target="_blank" rel="noopener noreferrer">Tree-01-二叉树 Binary Tree</a></p>`,readingTime:{minutes:2.66,words:799},title:"Tree-00-概览",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-01-binary-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-01-binary-tree.html-C5t8o-Jw.js"),__vite__mapDeps([79,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","tree","sf"],excerpt:`
<p>顾名思义，就是一个节点分出两个节点，称其为左右子节点；每个子节点又可以分出两个子节点，这样递归分叉，其形状很像一颗倒着的树。</p>
<p>二叉树限制了每个节点最多有两个子节点，没有子节点的节点称为叶子。</p>
<p>二叉树引导出很多名词概念，这里先不做系统介绍，遇到时再结合例子一一说明。</p>
<p>如下一个二叉树：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/*   A simple binary tree</span></span>
<span class="line"><span> *        A ---------&gt; A is root node</span></span>
<span class="line"><span> *       / \\</span></span>
<span class="line"><span> *      /   \\</span></span>
<span class="line"><span> *     B     C</span></span>
<span class="line"><span> *    /     / \\</span></span>
<span class="line"><span> *   /     /   \\</span></span>
<span class="line"><span> *   D     E    F ---&gt; leaves: D, E, F</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> *       (1)      ---&gt; Height: 3</span></span>
<span class="line"><span> */</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:42.91,words:12873},title:"Tree-01-二叉树 Binary Tree",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-02-binary-search-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-02-binary-search-tree.html-B2nxCV5l.js"),__vite__mapDeps([80,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","tree","sf"],excerpt:`
<p>前面我们学习了 <a href="https://www.jianshu.com/u/f151b42ebf74" target="_blank" rel="noopener noreferrer">java 如何实现 binary search 二分查找法？</a>。</p>
<p>那么，有没有一种数据结构，可以让我们更好的实现二分查找呢？</p>
<p>有的，那就是我们今天的二叉查询树。</p>
<p>让我们从二叉树开始，一起完成这次查询的学习之旅吧。</p>
<h1>二叉树（Binary Tree）</h1>
<h2>概念</h2>
<p>顾名思义，就是一个节点分出两个节点，称其为左右子节点；每个子节点又可以分出两个子节点，这样递归分叉，其形状很像一颗倒着的树。</p>`,readingTime:{minutes:23.47,words:7041},title:"Tree-02-java 实现 BST 二叉查询树详解",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-03-avl-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-03-avl-tree.html-CqWX9VK7.js"),__vite__mapDeps([81,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","tree","sf"],excerpt:`<figure><img src="https://p6-tt-ipv6.byteimg.com/origin/pgc-image/cca555274e614d54a34ea237b477d3cb" alt="思维导图" tabindex="0" loading="lazy"><figcaption>思维导图</figcaption></figure>
<h1>AVL树</h1>
<p>AVL树是根据它的发明者G.M. Adelson-Velsky和E.M. Landis命名的。</p>
<p>它是最先发明的自平衡二叉查找树（Self-balancing binary search tree），也被称为高度平衡树。</p>`,readingTime:{minutes:8.03,words:2410},title:"Tree-03-图解 AVL 自平衡二叉查找树及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-04-red-black-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-04-red-black-tree.html-eLIgai8z.js"),__vite__mapDeps([82,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。</p>
<p>它是在1972年由鲁道夫·贝尔发明的，他称之为"对称二叉B树"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。</p>
<p>它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在 <code>O(lg(n))</code> 时间内做查找，插入和删除，这里的 n 是树中元素的数目。</p>
<h2>用途和好处</h2>
<p>红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。</p>`,readingTime:{minutes:32,words:9599},title:"Tree-04-图解红黑树 Red Black Tree 及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-05-spaly-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-05-spaly-tree.html-B36C-neb.js"),__vite__mapDeps([83,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>伸展树（英语：Splay Tree）是一种能够自我平衡的二叉查找树，它能在均摊 <code>O(log n)</code> 的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。</p>
<p>它是由丹尼尔·斯立特（Daniel Sleator）和罗伯特·塔扬在1985年发明的。</p>
<h2>核心思想</h2>
<p>考虑到局部性原理（刚被访问的内容下次可能仍会被访问，查找次数多的内容可能下一次会被访问），为了使整个查找时间更小，被查频率高的那些节点应当经常处于靠近树根的位置。</p>
<p>ps: 这个思想实际上非常的简单，也非常的实用。我们以前实现的 LFU 的思想是类似的。</p>`,readingTime:{minutes:23.56,words:7068},title:"Tree-05-伸展树 Splay Tree 及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-06-2-3-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-06-2-3-tree.html-_U3onZJ-.js"),__vite__mapDeps([84,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>2–3树是一种树型数据结构，内部节点（存在子节点的节点）要么有2个孩子和1个数据元素，要么有3个孩子和2个数据元素，叶子节点没有孩子，并且有1个或2个数据元素。</p>
<p>2–3树由约翰·霍普克洛夫特于1970年发明。</p>
<p>2–3树和AA树是等距同构的，意味着它们是同一种数据结构。</p>
<p>换句话说，<strong>对于每个2–3树，都至少有1个AA树和它的元素排列是相同的。</strong></p>
<p>2–3树是平衡树，意味着右边，左边，中间的子树的元素数量都是相同或接近的。</p>
<h2>定义</h2>
<p>（1）2-3 树要么为空要么具有以下性质：</p>`,readingTime:{minutes:7.36,words:2207},title:"Tree-06- B 树之 2-3 Tree",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-08-b-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-08-b-tree.html-Dq9mj9xo.js"),__vite__mapDeps([85,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>在1970年，Bayer＆McCreight发表的论文《ORGANIZATION AND MAINTENANCE OF LARGE ORDERED INDICES》（大型有序索引的组织和维护）中提出了一种新的数据结构来维护大型索引，这种数据结构在论文中称为B Tree。</p>
<h2>B树的定义</h2>
<p>h：代表树的高度，k 是个自然数，一个B树要么是空的，要么满足以下条件：</p>
<ol>
<li>
<p>所有叶子节点到根节点的路径长度相同，即具有相同的高度；（树是平衡的）</p>
</li>
<li>
<p>每个非叶子和根节点（即内部节点）至少有 k+1 个孩子节点，根至少有 2 个孩子；（这是关键的部分，因为节点都是分裂而来的，而每次分裂得到的节点至少有 k 个元素，也就有 k+1 个孩子；但根节点在分裂后可能只有一个元素，因为不需要向上融合，中间元素作为新的根节点，因此最少有两个孩子。而叶子节点没有孩子。）</p>
</li>
<li>
<p>每个节点最多有 2k+1 个孩子节点。（规定了节点的最大容量）</p>
</li>
<li>
<p>每个节点内的键都是递增的</p>
</li>
</ol>`,readingTime:{minutes:39.82,words:11946},title:"Tree-08-多路查找树 BTree 及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-09-bplus-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-09-bplus-tree.html-OFvsbdim.js"),__vite__mapDeps([86,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>B+ 树是应文件系统所需而产生的一种B Tree的变形树。</p>
<h2>描述</h2>
<p>B Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p>
<p>与B Tree相比，B+Tree有以下不同点：</p>
<p>每个节点的指针上限为2d而不是2d+1。</p>
<p>内节点不存储data，只存储key；叶子节点不存储指针。</p>
<p>图3是一个简单的B+Tree示意。</p>
<figure><img src="https://images.gitee.com/uploads/images/2020/1201/210315_49c9152f_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure>`,readingTime:{minutes:11.38,words:3415},title:"Tree-09-多路查找树 B+ 树 及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-10-bstar-tree.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-10-bstar-tree.html-gv1ihV0r.js"),__vite__mapDeps([87,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","java","sh"],excerpt:`
<p>B* Tree 是 B+ Tree的变体，在 B+ Tree的非根和非叶子结点再增加指向兄弟的指针；</p>
<p>B* Tree定义了非叶子结点关键字个数至少为 <code>(2/3)*M</code>，即块的最低使用率为2/3（代替B+树的1/2）。</p>
<h1>实际例子</h1>
<p>给出了一个简单实例，如下图所示：</p>
<figure><img src="https://images.gitee.com/uploads/images/2020/1201/203629_cbac4a2e_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure>`,readingTime:{minutes:1.25,words:376},title:"Tree-10-多路查找树 B* 树 及 java 实现",type:"article"}}],["/posts/leetcode/datastruct/2020-11-24-data-struct-tree-11-database-index.html",{loader:()=>h(()=>import("./2020-11-24-data-struct-tree-11-database-index.html-MW6BYtxX.js"),__vite__mapDeps([88,1])),meta:{date:16028928e5,localizedDate:"2020年10月17日",category:["Data-Struct"],tag:["data-struct","mysql","index","sh"],excerpt:`
<p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
<p>我们知道，数据库查询是数据库的最主要功能之一。</p>
<p>我们都希望查询数据的速度能尽可能的快，因此数据库系统的设计者会从查询算法的角度进行优化。</p>
<p>最基本的查询算法当然是顺序查找（linear search），这种复杂度为O(n)的算法在数据量很大时显然是糟糕的，好在计算机科学的发展提供了很多更优秀的查找算法，例如二分查找（binary search）、二叉树查找（binary tree search）等。</p>`,readingTime:{minutes:5.47,words:1642},title:"Tree-11-mysql index 数据库索引",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-001-leetcode-01-ksum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-001-leetcode-01-ksum.html-Cjlltz91.js"),__vite__mapDeps([89,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`<h2>1. Two Sum 两数之和</h2>
<figure><img src="https://img-blog.csdnimg.cn/1f51f5a81b7a4c19844c6bf169ce1f12.png#pic_center" alt="PIC" tabindex="0" loading="lazy"><figcaption>PIC</figcaption></figure>
<h3>题目</h3>
<p>给定一个整数数组 nums&nbsp;和一个目标值 target，请你在该数组中找出和为目标值的那&nbsp;两个&nbsp;整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>`,readingTime:{minutes:9.42,words:2827},title:"01-ksum 求符合条件的 k 个数  1. Two Sum/15. 3Sum/18. 4Sum/",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-002-leetcode-02-add-two-numbers.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-002-leetcode-02-add-two-numbers.html-lzHxBuM0.js"),__vite__mapDeps([90,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>给你两个&nbsp;非空 的链表，表示两个非负的整数。它们每位数字都是按照&nbsp;逆序&nbsp;的方式存储的，并且每个节点只能存储&nbsp;一位&nbsp;数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p>
<h2>例子</h2>
<p>示例 1：</p>
<figure><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="例子" tabindex="0" loading="lazy"><figcaption>例子</figcaption></figure>`,readingTime:{minutes:6.45,words:1936},title:"02-leetcode 2. 两数相加 add two numbers",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters.html-CvESr4RY.js"),__vite__mapDeps([91,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>给定一个字符串 s ，请你找出其中不含有重复字符的&nbsp;最长子串&nbsp;的长度。</p>
<h2>例子</h2>
<p>示例&nbsp;1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: s = "abcabcbb"</span></span>
<span class="line"><span>输出: 3 </span></span>
<span class="line"><span>解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4,words:1200},title:"03-leetcode 3. 无重复字符的最长子串 Longest Substring Without Repeating Characters",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays.html-BN-ourEv.js"),__vite__mapDeps([92,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`<h2>4. 题目</h2>
<p>给定两个大小为 m 和 n 的正序（从小到大）数组&nbsp;nums1 和&nbsp;nums2。</p>
<p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为&nbsp;O(log(m + n))。</p>
<p>你可以假设&nbsp;nums1&nbsp;和&nbsp;nums2&nbsp;不会同时为空。</p>
<h3>示例 1:</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>nums1 = [1, 3]</span></span>
<span class="line"><span>nums2 = [2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>则中位数是 2.0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.22,words:2465},title:"04-4.median of two sorted arrays 寻找两个正序数组的中位数",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring.html-g19N_p_M.js"),__vite__mapDeps([93,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>给你一个字符串 s，找到 s 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<h2>例子</h2>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：s = "babad"</span></span>
<span class="line"><span>输出："bab"</span></span>
<span class="line"><span>解释："aba" 同样是符合题意的答案。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.14,words:1243},title:"05-5. 最长回文子串 Longest Palindromic Substring",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-006-leetcode-06-zigzag-conversion.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-006-leetcode-06-zigzag-conversion.html-C_Be7buh.js"),__vite__mapDeps([94,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行&nbsp;Z 字形排列。</p>
<p>比如输入字符串为 "PAYPALISHIRING"&nbsp;行数为 3 时，排列如下：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>P   A   H   N</span></span>
<span class="line"><span>A P L S I I G</span></span>
<span class="line"><span>Y   I   R</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.49,words:1346},title:"06-6. N 字形变换 zigzag conversion",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-007-leetcode-07-reverse-integer.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-007-leetcode-07-reverse-integer.html-Ba4iimOX.js"),__vite__mapDeps([95,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围&nbsp;[−2^31,&nbsp; 2^31&nbsp;− 1] ，就返回 0。</p>
<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<h2>例子</h2>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：x = 123</span></span>
<span class="line"><span>输出：321</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.8,words:2040},title:"07-7. 整数反转 reverse integer 整数的位运算汇总",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-008-leetcode-10-regex-match.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-008-leetcode-10-regex-match.html-C7nH2kCo.js"),__vite__mapDeps([96,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","dp","leetcode","sf"],excerpt:`<h2>10. Regular Expression Matching 题目</h2>
<p>给你一个字符串&nbsp;s&nbsp;和一个字符规律&nbsp;p，请你来实现一个支持 '.'&nbsp;和&nbsp;'*'&nbsp;的正则表达式匹配。</p>
<p>'.' 匹配任意单个字符</p>
<p>'*' 匹配零个或多个前面的那一个元素</p>
<p>所谓匹配，是要涵盖&nbsp;整个&nbsp;字符串&nbsp;s的，而不是部分字符串。</p>
<p>说明:</p>
<p>s&nbsp;可能为空，且只包含从&nbsp;a-z&nbsp;的小写字母。</p>
<p>p&nbsp;可能为空，且只包含从&nbsp;a-z&nbsp;的小写字母，以及字符&nbsp;.&nbsp;和&nbsp;*。</p>`,readingTime:{minutes:14.44,words:4332},title:"08 - 10. Regular Expression Matching 正则表达式匹配 + 42.Wildcard Matching 通配符匹配",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-009-leetcode-11-container-with-most-water.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-009-leetcode-11-container-with-most-water.html-BnPbOJLt.js"),__vite__mapDeps([97,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","dp","leetcode","sf"],excerpt:`
<p>给定一个长度为 n 的整数数组&nbsp;height&nbsp;。有&nbsp;n&nbsp;条垂线，第 i 条线的两个端点是&nbsp;(i, 0)&nbsp;和&nbsp;(i, height[i])&nbsp;。</p>
<p>找出其中的两条线，使得它们与&nbsp;x&nbsp;轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p>说明：你不能倾斜容器。</p>
<h2>例子</h2>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：[1,8,6,2,5,4,8,3,7]</span></span>
<span class="line"><span>输出：49 </span></span>
<span class="line"><span>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:15.58,words:4673},title:"009 - 11. 盛最多水的容器 Container With Most Water 双指针法 + 42. 接雨水 Trapping Rain Water + 407. Trapping Rain Water II",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list.html-CP8T1bWT.js"),__vite__mapDeps([98,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","list","leetcode","sf"],excerpt:`
<p>给你一个链表，删除链表的倒数第&nbsp;n&nbsp;个结点，并且返回链表的头结点。</p>
<h2>示例</h2>
<p>示例 1：</p>
<p>输入：head = [1,2,3,4,5], n = 2<br>
输出：[1,2,3,5]</p>
<p>示例 2：</p>
<p>输入：head = [1], n = 1<br>
输出：[]</p>
<p>示例 3：</p>
<p>输入：head = [1,2], n = 1<br>
输出：[1]</p>
<h2>提示：</h2>
<p>链表中结点的数目为 sz</p>
<p>1 &lt;= sz &lt;= 30</p>
<p>0 &lt;= Node.val &lt;= 100</p>`,readingTime:{minutes:4.28,words:1284},title:"010-19. 删除链表的倒数第 N 个结点 Remove Nth Node From End of List  双指针",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists.html-DhOK0J3-.js"),__vite__mapDeps([99,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","list","leetcode","sf"],excerpt:`<h2>开胃菜</h2>
<p>在进入本节的正题之前，我们先来看一道开胃菜。</p>
<h3>题目 21. 合并两个有序链表</h3>
<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>
<p>示例：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></span>
<span class="line"><span>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.54,words:1961},title:"011-21.合并多个有序的链表 merge k sorted lists",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-012-leetcode-22-generate-parentheses.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-012-leetcode-22-generate-parentheses.html-DVNscUDc.js"),__vite__mapDeps([100,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","data-struct","leetcode","sf"],excerpt:`
<h2>题目</h2>
<p>给定一个只包括 <code>()[]{}</code>&nbsp;的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>
<p>左括号必须用相同类型的右括号闭合。</p>
</li>
<li>
<p>左括号必须以正确的顺序闭合。</p>
</li>
<li>
<p>每个右括号都有一个对应的相同类型的左括号。</p>
</li>
</ol>
<h3>例子</h3>
<p>示例 1：</p>
<p>输入：s = "()"<br>
输出：true</p>
<p>示例&nbsp;2：</p>
<p>输入：s = "()[]{}"<br>
输出：true</p>`,readingTime:{minutes:17.6,words:5279},title:"012-22.括号生成 generate-parentheses + 20. 有效的括号 valid parentheses + 32. 最长有效括号 Longest Valid Parentheses",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group.html-C2By9xT1.js"),__vite__mapDeps([101,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","list","leetcode","sf"],excerpt:`
<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。</p>
<p>你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<h2>示例</h2>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：head = [1,2,3,4]</span></span>
<span class="line"><span>输出：[2,1,4,3]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.43,words:728},title:"013-25.K 个一组翻转链表 Reverse Nodes in k-Group + 24. 两两交换链表中的节点 swap nodes in pairs",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-014-leetcode-29-divide-two-integers.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-014-leetcode-29-divide-two-integers.html-C-J53K1C.js"),__vite__mapDeps([102,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","data-struct","leetcode","sf"],excerpt:`<h2>29.整数相除</h2>
<p>给定两个整数，被除数&nbsp;dividend&nbsp;和除数&nbsp;divisor。</p>
<p>将两数相除，<strong>要求不使用乘法、除法和 mod 运算符。</strong></p>
<p>返回被除数&nbsp;dividend&nbsp;除以除数&nbsp;divisor&nbsp;得到的商。</p>
<p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p>
<p>示例&nbsp;1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: dividend = 10, divisor = 3</span></span>
<span class="line"><span>输出: 3</span></span>
<span class="line"><span>解释: 10/3 = truncate(3.33333..) = truncate(3) = 3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.51,words:1354},title:"014-29.两数相除 divide two integers",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words.html-CqoKIgwg.js"),__vite__mapDeps([103,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","data-struct","leetcode","sf"],excerpt:`<h2>串联所有单词的子串</h2>
<p>给定一个字符串&nbsp;s&nbsp;和一些长度相同的单词&nbsp;words。找出 s 中恰好可以由&nbsp;words 中所有单词串联形成的子串的起始位置。</p>
<p>注意子串要与&nbsp;words 中的单词完全匹配，中间不能有其他字符，但不需要考虑&nbsp;words&nbsp;中单词串联的顺序。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>  s = "barfoothefoobarman",</span></span>
<span class="line"><span>  words = ["foo","bar"]</span></span>
<span class="line"><span>输出：[0,9]</span></span>
<span class="line"><span>解释：</span></span>
<span class="line"><span>从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。</span></span>
<span class="line"><span>输出的顺序不重要, [9,0] 也是有效答案。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.33,words:2499},title:"015-30.串联所有单词的子串 Substring with Concatenation of All Words",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-016-leetcode-31-next-permutation.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-016-leetcode-31-next-permutation.html-BYsXY3Eu.js"),__vite__mapDeps([104,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","backtrack","leetcode","sf"],excerpt:`
<h2>题目</h2>
<p>整数数组的一个 排列&nbsp; 就是将其所有成员以序列或线性顺序排列。</p>
<p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。</p>
<p>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。</p>
<p>更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。</p>
<p>如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p>`,readingTime:{minutes:12.98,words:3894},title:"016-31.下一个排列 next permutation + 46. 全排列 permutations + 47. 全排列 II permutations-ii + 60. 排列序列 permutation sequence",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array.html-DqkiTLaT.js"),__vite__mapDeps([105,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["Algorithm","list","leetcode","sf"],excerpt:`
<h2>题目</h2>
<p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p>
<p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。</p>
<p>例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为&nbsp;[4,5,6,7,0,1,2] 。</p>
<p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回&nbsp;-1&nbsp;。</p>`,readingTime:{minutes:9.46,words:2839},title:"017-33. 搜索旋转排序数组 Search in Rotated Sorted Array + 81. Search in Rotated Sorted Array II + 153. Find Minimum in Rotated Sorted Array 寻找旋转排序数组中的最小值 + 154.Find Minimum in Rotated Sorted Array II",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array.html-MnuMAR-P.js"),__vite__mapDeps([106,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","binary-search","leetcode"],excerpt:`
<p>有些题目看起来很简单，深挖下去往往有很多值得深思的东西。</p>
<p>本文就来讨论一下二分查找法的问题，以及这道题背后真正想考察的东西。</p>
<h1>34. 在排序数组中查找元素的第一个和最后一个位置</h1>
<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回&nbsp;[-1, -1]。</p>
<p>进阶：</p>
<p>你可以设计并实现时间复杂度为&nbsp;O(log n)&nbsp;的算法解决此问题吗？</p>
<ul>
<li>示例 1：</li>
</ul>`,readingTime:{minutes:6.76,words:2027},title:"018-34. 在排序数组中查找元素的第一个和最后一个位置 Find First and Last Position of Element in Sorted Array",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-019-leetcode-36-valid-suduku.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-019-leetcode-36-valid-suduku.html-DNO74WbK.js"),__vite__mapDeps([107,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","leetcode"],excerpt:`
<h2>题目</h2>
<p>请你判断一个&nbsp;9 x 9 的数独是否有效。</p>
<p>只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p>
<ol>
<li>
<p>数字&nbsp;1-9&nbsp;在每一行只能出现一次。</p>
</li>
<li>
<p>数字&nbsp;1-9&nbsp;在每一列只能出现一次。</p>
</li>
<li>
<p>数字&nbsp;1-9&nbsp;在每一个以粗实线分隔的&nbsp;3x3&nbsp;宫内只能出现一次。（请参考示例图）</p>
</li>
</ol>
<h3>注意：</h3>
<p>一个有效的数独（部分已被填充）不一定是可解的。</p>`,readingTime:{minutes:7.07,words:2122},title:"019-36. 有效的数独 Valid Sudoku + 37. 解数独 sudoku solver",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color.html-TC0yFQDA.js"),__vite__mapDeps([108,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","binary-search","leetcode"],excerpt:`
<p>题目描述</p>
<p>给你一个数组 colors，里面有  1、2、 3 三种颜色。</p>
<p>我们需要在 colors 上进行一些查询操作 queries，其中每个待查项都由两个整数 i 和 c 组成。</p>
<p>现在请你帮忙设计一个算法，查找从索引 i 到具有目标颜色 c 的元素之间的最短距离。</p>
<p>如果不存在解决方案，请返回 -1。</p>
<p>示例 1：</p>
<p>输入：colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]<br>
输出：[3,0,3]<br>
解释：<br>
距离索引 1 最近的颜色 3 位于索引 4（距离为 3）。<br>
距离索引 2 最近的颜色 2 就是它自己（距离为 0）。<br>
距离索引 6 最近的颜色 1 位于索引 3（距离为 3）。<br>
示例 2：</p>`,readingTime:{minutes:1.32,words:397},title:"1882-1182. 与目标颜色间的最短距离",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-39-combination-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-39-combination-sum.html-Bl0mv4Bn.js"),__vite__mapDeps([109,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<h2>题目</h2>
<p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p>
<p>你可以按 任何顺序 返回答案。</p>
<h3>示例</h3>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：n = 4, k = 2</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>[</span></span>
<span class="line"><span>  [2,4],</span></span>
<span class="line"><span>  [3,4],</span></span>
<span class="line"><span>  [2,3],</span></span>
<span class="line"><span>  [1,2],</span></span>
<span class="line"><span>  [1,3],</span></span>
<span class="line"><span>  [1,4],</span></span>
<span class="line"><span>]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:13.25,words:3974},title:"020-39. 组合总和 Combination Sum + 40. 组合总和 II Combination Sum II + 77. 组合 combinations + 216. Combination Sum III + 377. 组合总和 Ⅳ",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock.html-CVVCwaCj.js"),__vite__mapDeps([110,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:3.36,words:1008},title:"40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii.html-CZfGdGtQ.js"),__vite__mapDeps([111,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:3.58,words:1073},title:"41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii.html-R-bkIbiX.js"),__vite__mapDeps([112,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:4.17,words:1252},title:"42-best-time-to-buy-and-sell-stock-iii 力扣 123. 买卖股票的最佳时机 III",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv.html-DPUvJeL9.js"),__vite__mapDeps([113,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:3.63,words:1090},title:"43-best-time-to-buy-and-sell-stock-iv 力扣 188. 买卖股票的最佳时机 IV",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown.html-D0R9WCv5.js"),__vite__mapDeps([114,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:3.76,words:1128},title:"44-best-time-to-buy-and-sell-stock-with-cooldown 力扣 309. 买卖股票的最佳时机包含冷冻期",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee.html-BBaGLc_R.js"),__vite__mapDeps([115,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtrack","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock" target="_blank" rel="noopener noreferrer">40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii" target="_blank" rel="noopener noreferrer">41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II</a></p>`,readingTime:{minutes:3.67,words:1100},title:"45-best-time-to-buy-and-sell-stock-with-cooldown 力扣 714. 买卖股票的最佳时机包含手续费",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html-_mbxtO8v.js"),__vite__mapDeps([116,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-46-prefix-sum-01-intro" target="_blank" rel="noopener noreferrer">46-Prefix Sum 力扣前缀和介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum" target="_blank" rel="noopener noreferrer">47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组</a></p>`,readingTime:{minutes:3.4,words:1019},title:"46-Prefix Sum 力扣前缀和介绍",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum.html-DfbtPW9V.js"),__vite__mapDeps([117,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>
<p>找出该数组中满足其总和大于等于 target 的长度最小的 子数组</p>
<p>[numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>`,readingTime:{minutes:4.41,words:1323},title:"47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724.html-ClWuyLiU.js"),__vite__mapDeps([118,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>724. 寻找数组的中心下标</h1>
<p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p>
<p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>`,readingTime:{minutes:3.05,words:914},title:"47-Prefix Sum 724. 寻找数组的中心下标 + 1991. 找到数组的中间位置",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self.html-CptE_U8a.js"),__vite__mapDeps([119,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。</p>
<p>题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。</p>`,readingTime:{minutes:3.68,words:1103},title:"48-product-of-array-except-self 力扣 238. 除自身以外的数组的乘积",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable.html-oKi3wbve.js"),__vite__mapDeps([120,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给定一个整数数组  nums，处理以下类型的多个查询:</p>
<p>计算索引 left 和 right （包含 left 和 right）之间的 nums 元素的 和 ，其中 left &lt;= right</p>`,readingTime:{minutes:1.3,words:389},title:"49-303. range-sum-query-immutable  力扣 303. 区域和检索 - 数组不可变",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable.html-CogF1-L2.js"),__vite__mapDeps([121,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给你一个数组 nums ，请你完成两类查询。</p>
<p>其中一类查询要求 更新 数组 nums 下标对应的值</p>
<p>另一类查询要求返回数组 nums 中索引 left 和索引 right 之间（ 包含 ）的nums元素的 和 ，其中 left &lt;= right</p>`,readingTime:{minutes:4.62,words:1387},title:"50-307. range-sum-query-mutable  力扣 307. 区域和检索 - 数组可变",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array.html-KLAKvP1Y.js"),__vite__mapDeps([122,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>chat</h1>
<h2>详细介绍一下树状数组</h2>
<p>树状数组（Binary Indexed Tree，简称 BIT）是一种用于高效处理动态数据集的数值结构，特别适用于需要频繁进行前缀和查询和单点更新的场景。</p>`,readingTime:{minutes:12.93,words:3878},title:"50-树状数组 Binary Indexed Tree，简称 BIT FenwickTree",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval.html-B9YtQl53.js"),__vite__mapDeps([123,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。</p>
<p>我们认为当员工一天中的工作小时数大于 8 小时的时候，那么这一天就是「劳累的一天」。</p>`,readingTime:{minutes:4.95,words:1485},title:"51-1124. longest-well-performing-interval  力扣 1124. 表现良好的最长时间段  前缀和+HashMap",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum.html-DnNF-2iJ.js"),__vite__mapDeps([124,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给定一个非负整数数组 nums 和一个整数 k ，你需要将这个数组分成 k 个非空的连续子数组。</p>
<p>设计一个算法使得这 k 个子数组各自和的最大值最小。</p>`,readingTime:{minutes:1.52,words:456},title:"52-410. split-array-largest-sum  力扣 410. 分割数组的最大值",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum.html-CYboqh9U.js"),__vite__mapDeps([125,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给你一个整数数组 nums 和一个整数 k ，如果 nums 有一个 好的子数组 返回 true ，否则返回 false：</p>
<p>一个 好的子数组 是：</p>
`,readingTime:{minutes:3.29,words:987},title:"53-523. continuous-subarray-sum  力扣 523. 连续的子数组和 同余定理  前缀和+HashMap",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k.html-Ky3LTDCs.js"),__vite__mapDeps([126,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>说明</h1>
<p>这一题实际上非常重要，很多题目都是这一题的变形或者转换。</p>
<h1>题目</h1>
<p>给定一个数组 <code>nums</code> 和一个目标值 <code>k</code>，找出和为 <code>k</code> 的最长子数组的长度。如果不存在这样的子数组，返回 0。</p>`,readingTime:{minutes:4.78,words:1434},title:"54-325. max-size-subarray-sum-equals-k  力扣 325：和等于 k 的最长子数组长度",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array.html-BOqj2YzX.js"),__vite__mapDeps([127,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p>
<p>示例 1:</p>
<p>输入: nums = [0,1]<br>
输出: 2<br>
说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。<br>
示例 2:</p>`,readingTime:{minutes:2.28,words:685},title:"53-525. continuous-subarray-sum  力扣 525. 连续的子数组和 同余定理  前缀和+HashMap",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k.html-FC1Mv3qW.js"),__vite__mapDeps([128,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k 的子数组的个数 。</p>
<p>子数组是数组中元素的连续非空序列。</p>
<p>示例 1：</p>`,readingTime:{minutes:3.22,words:965},title:"56-560. subarray-sum-equals-k  力扣 560. 和为 k 的子数组  前缀和+HashMap",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts.html-Vc70GTkp.js"),__vite__mapDeps([129,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>题目</h1>
<p>题目描述<br>
给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 'a'，'e'，'i'，'o'，'u' ，在子字符串中都恰好出现了偶数次。</p>`,readingTime:{minutes:4.21,words:1264},title:"57-1371. find-the-longest-substring-containing-vowels-in-even-counts  力扣 1371. 每个元音包含偶数次的最长子字符串",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber.html-DjqT8klN.js"),__vite__mapDeps([130,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","dp","dynamic-programming","leetcode"],excerpt:`
<p>你是一个专业的小偷，计划偷窃沿街的房屋。</p>
<p>每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>
<p>示例 1：</p>
<p>输入：[1,2,3,1]<br>
输出：4</p>
<p>解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>
偷窃到的最高金额 = 1 + 3 = 4 。<br>
示例 2：</p>
`,readingTime:{minutes:2.6,words:781},title:"61-198. house-robber  力扣 198. 打家劫舍  dynamic-programming",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii.html-BcU0GB4j.js"),__vite__mapDeps([131,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","dp","dynamic-programming","leetcode"],excerpt:`
<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p>
<p>示例 1：</p>
<p>输入：nums = [2,3,2]<br>
输出：3<br>
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。<br>
示例 2：</p>`,readingTime:{minutes:3.45,words:1035},title:"62-213. house-robber-ii  力扣 213. 打家劫舍 II  dynamic-programming",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii.html-Dntxq_3d.js"),__vite__mapDeps([132,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","dp","dynamic-programming","leetcode"],excerpt:`
<p>小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 root 。</p>
<p>除了 root 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。</p>
<p>如果 两个直接相连的房子在同一天晚上被打劫 ，房屋将自动报警。</p>
<p>给定二叉树的 root 。</p>
<p>返回 在不触动警报的情况下 ，小偷能够盗取的最高金额 。</p>
<p>示例 1:</p>
<figure><img src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" alt="demo1" tabindex="0" loading="lazy"><figcaption>demo1</figcaption></figure>`,readingTime:{minutes:1.51,words:453},title:"62-337. house-robber-iii  力扣 337. 打家劫舍 III  dynamic-programming",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-70-greedy-overview.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-70-greedy-overview.html-D-w0rMcJ.js"),__vite__mapDeps([133,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<h2>详细介绍一下 贪心算法</h2>
<p>贪心算法（Greedy Algorithm）是一种在每一步选择当前状态下局部最优解的算法策略，希望通过一系列局部最优选择得到全局最优解。</p>
<p>贪心算法通常比其他方法（如动态规划）简单、高效，但它并不总是适用，也无法保证在所有情况下找到最优解。</p>
<p>因此，使用贪心算法时需要先确认问题是否满足贪心选择的条件。</p>
<h3>贪心算法的特点</h3>
<ol>
<li>
<p>贪心选择性质：</p>
<ul>
<li>在解决问题时，可以通过每一步的局部最优选择来构成最终的全局最优解。</li>
<li>这一性质意味着每一步的选择不会影响后续选择，从而使得只需关注当前状态下的最优决策，而不需要回溯或全面搜索。</li>
</ul>
</li>
<li>
<p>最优子结构：</p>
<ul>
<li>问题的最优解包含子问题的最优解，即可以通过递归或逐步的方式构建全局解。</li>
<li>最优子结构性质是动态规划和贪心算法的共同特点，但贪心算法是基于“局部最优”，而动态规划则基于“全局最优”。</li>
</ul>
</li>
<li>
<p>无后效性：</p>
<ul>
<li>每一个选择只依赖当前状态，不受后续状态的影响。选完一次后，无需再回头修改。</li>
</ul>
</li>
</ol>`,readingTime:{minutes:14.83,words:4449},title:"70-greedy 贪心算法",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight.html-BH3mZ21P.js"),__vite__mapDeps([134,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<p>给定一个二维整数数组 items ，其中 items[i] = [pricei, weighti] 表示第 i 个物品的价格和重量。</p>
<p>还给定一个 正 整数容量 capacity 。</p>
<p>每个物品可以分成两个部分，比率为 part1 和 part2 ，其中 part1 + part2 == 1 。</p>
<p>第一个物品的重量是 weighti * part1 ，价格是 pricei * part1 。</p>
<p>同样，第二个物品的重量是 weighti * part2 ，价格是 pricei * part2 。</p>
<p>使用给定的物品，返回填满容量为 capacity 的背包所需的 最大总价格 。</p>`,readingTime:{minutes:5.93,words:1780},title:"72-greedy 2548. 填满背包的最大价格 分数背包",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty.html-Cm2byR93.js"),__vite__mapDeps([135,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<p>给定一个大小为 n 的整数数组 nums，其中包含从 0 到 n - 1 (包含边界) 的 每个 元素。</p>
<p>从 1 到 n - 1 的每一个元素都代表一项目，元素 0 代表一个空白区域。</p>
<p>在一个操作中，您可以将 任何 项目移动到空白区域。如果所有项目的编号都是 升序 的，并且空格在数组的开头或结尾，则认为 nums 已排序。</p>
<p>例如，如果 n = 4，则 nums 按以下条件排序:</p>
<p>nums = [0,1,2,3] 或<br>
nums = [1,2,3,0]</p>
<p>...否则被认为是无序的。</p>
<p>返回排序 nums 所需的最小操作数。</p>`,readingTime:{minutes:1.38,words:415},title:"73-greedy 2459. 通过移动项目到空白区域来排序数组",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-3195_dfs.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-73-3195_dfs.html-BbTQ7Ljm.js"),__vite__mapDeps([136,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<p>给你一个二维 二进制 数组 grid。请你找出一个边在水平方向和竖直方向上、面积 最小 的矩形，并且满足 grid 中所有的 1 都在矩形的内部。</p>
<p>返回这个矩形可能的 最小 面积。</p>
<p>示例 1：</p>
<p>输入： grid = [[0,1,0],[1,0,1]]</p>
<p>输出： 6</p>
<p>解释：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0  1   0</span></span>
<span class="line"><span>1  0   1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:1.18,words:353},title:"73-3195. 包含所有 1 的最小矩形面积 I",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-80-recursive-overview.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-80-recursive-overview.html-DVURYHyM.js"),__vite__mapDeps([137,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<h2>是什么？</h2>
<p>递归算法是一种在计算机科学中非常常见的解决问题的方法，它通过函数调用自身来解决问题。</p>
<p>递归通常将复杂的问题分解成更小的子问题，通过逐步缩小问题规模直到满足某种条件（基准情况或边界条件）停止递归调用，从而得到解答。</p>
<h3>递归的基本组成部分</h3>
<p>一个典型的递归算法包含两个关键部分：</p>
<ol>
<li>
<p><strong>基准条件（Base Case）</strong>：基准条件是递归算法停止递归的条件。它通常用于处理最简单的情况，不需要进一步分解。例如，计算阶乘时，<code>0! = 1</code> 就是基准条件。</p>
</li>
<li>
<p><strong>递归条件（Recursive Case）</strong>：递归条件定义了如何将问题分解为更小的子问题，并递归地调用函数自身来处理这些子问题。例如，计算阶乘时，<code>n! = n * (n - 1)!</code> 是递归条件。</p>
</li>
</ol>`,readingTime:{minutes:3.24,words:973},title:"80-recursive 递归",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo.html-4kjZdSC9.js"),__vite__mapDeps([138,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","greedy","leetcode"],excerpt:`
<h2>题目</h2>
<p>汉诺塔（Tower of Hanoi）是一个经典的递归问题。问题描述是，有三个柱子和若干个盘子，初始状态下所有盘子按大小从小到大叠在第一个柱子上。目标是将所有盘子从第一个柱子移动到第三个柱子，但每次只能移动一个盘子，且大盘子不能放在小盘子上面。</p>
<h3>解题思路</h3>
<ol>
<li>
<p><strong>分解问题</strong>：假设有 ( n ) 个盘子在柱子 A 上，要将它们移动到柱子 C 上，可以分解为两个步骤：</p>
<ul>
<li><strong>步骤1</strong>：将前 ( n-1 ) 个盘子从 A 移动到柱子 B，借助 C。</li>
<li><strong>步骤2</strong>：将第 ( n ) 个盘子从 A 移动到柱子 C。</li>
<li><strong>步骤3</strong>：将 ( n-1 ) 个盘子从 B 移动到 C，借助 A。</li>
</ul>
</li>
<li>
<p><strong>递归实现</strong>：将步骤 1 和步骤 3 递归调用，直到只剩下一个盘子为止。当只有一个盘子时，直接将它从起始柱子移动到目标柱子。</p>
</li>
<li>
<p><strong>基准条件</strong>：如果只有一个盘子，则直接从 A 移动到 C，不再进行递归。</p>
</li>
</ol>`,readingTime:{minutes:2.64,words:791},title:"81-recursive 递归 汉诺塔（Tower of Hanoi）",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-098-space-complex-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-098-space-complex-intro.html-_AXuGFaE.js"),__vite__mapDeps([139,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","tips","leetcode"],excerpt:`
<p>好的，空间复杂度（Space Complexity）是算法分析中与时间复杂度同等重要的概念，它衡量的是算法在执行过程中所需额外存储空间（除输入数据本身占据的空间外）随输入数据规模（通常用 <code>n</code> 表示）增长的幅度。理解空间复杂度对于评估算法的内存消耗、优化资源利用以及设计高效系统至关重要。</p>
<hr>
<h2>1. 核心概念：什么是空间复杂度？</h2>
<ul>
<li>定义： 空间复杂度衡量算法在运行期间临时占用存储空间大小的变化趋势。它关注的是算法为了完成计算任务，除了存储原始输入数据之外，还需要申请多少额外的内存空间（例如，变量、数据结构、函数调用栈等）。</li>
<li>目的：
<ul>
<li>评估内存消耗： 了解算法需要多少额外内存，尤其在处理大规模数据或内存受限环境（如嵌入式系统、移动设备）时至关重要。</li>
<li>比较算法优劣： 在解决同一问题时，不同算法可能有不同的内存需求。空间复杂度提供了一个理论框架来比较它们，帮助我们选择内存效率更高的算法。</li>
<li>预测资源需求： 预估当输入规模 <code>n</code> 增大时（例如从 1GB 数据到 1TB 数据），算法所需内存会如何增长。</li>
<li>识别内存瓶颈： 找出算法中消耗内存最多的部分，指导优化方向。</li>
</ul>
</li>
<li>核心思想： 忽略常数因子和低阶项，关注最高阶项。 与时间复杂度一样，当 <code>n</code> 非常大时，最高阶项对空间需求增长的影响起主导作用。</li>
<li>表示法： 大 O 表示法 (Big O Notation)。空间复杂度通常表示为 <code>S(n) = O(f(n))</code>，其中 <code>f(n)</code> 是一个描述空间增长率的函数（如 <code>1</code>, <code>n</code>, <code>n²</code>, <code>log n</code>）。<code>O(f(n))</code> 表示算法所需的额外空间增长率不会超过 <code>f(n)</code> 的增长率（乘以某个常数因子）。</li>
</ul>`,readingTime:{minutes:14.4,words:4320},title:"力扣刷题之空间复杂度介绍 Space Complexity",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-fast-table.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-098-time-complex-fast-table.html-DGdMcGlD.js"),__vite__mapDeps([140,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","tips","leetcode"],excerpt:`<h2>常见算法的时间复杂度</h2>
<h2>一、常见算法时间复杂度速查表</h2>
<table>
<thead>
<tr>
<th style="text-align:left">算法类别</th>
<th style="text-align:left">具体算法</th>
<th style="text-align:left">最佳情况</th>
<th style="text-align:left">平均情况</th>
<th style="text-align:left">最坏情况</th>
<th style="text-align:left">空间复杂度 (通常)</th>
<th style="text-align:left">关键特点/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">排序算法</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">冒泡排序 (Bubble Sort)</td>
<td style="text-align:left">O(n) (优化后)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">简单，效率低，原地排序</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">选择排序 (Selection Sort)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">简单，效率低，交换次数少，原地排序</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入排序 (Insertion Sort)</td>
<td style="text-align:left">O(n) (已有序)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">小规模或基本有序数据高效，原地排序</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">希尔排序 (Shell Sort)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">取决于间隔序列</td>
<td style="text-align:left">O(n²)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">插入排序改进版，不稳定</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">归并排序 (Merge Sort)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">稳定，高效，分治典范，需额外空间</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">快速排序 (Quick Sort)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n²) (坏划分)</td>
<td style="text-align:left">O(log n) (递归栈)</td>
<td style="text-align:left">通常最快，分治，原地排序，最坏情况依赖划分</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">堆排序 (Heap Sort)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(n log n)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">原地排序，不稳定</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">计数排序 (Counting Sort)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">非比较排序，k是数据范围，范围小高效</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">桶排序 (Bucket Sort)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">O(n²) (坏分布)</td>
<td style="text-align:left">O(n + k)</td>
<td style="text-align:left">非比较排序，数据分布均匀高效</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">基数排序 (Radix Sort)</td>
<td style="text-align:left">O(d*(n + b))</td>
<td style="text-align:left">O(d*(n + b))</td>
<td style="text-align:left">O(d*(n + b))</td>
<td style="text-align:left">O(n + b)</td>
<td style="text-align:left">非比较排序，d是位数，b是基数(桶数)，稳定</td>
</tr>
<tr>
<td style="text-align:left">搜索算法</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">线性搜索 (Linear Search)</td>
<td style="text-align:left">O(1) (第一个)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">无序数组</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">二分查找 (Binary Search)</td>
<td style="text-align:left">O(1) (中间)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(1) (迭代)</td>
<td style="text-align:left">必须有序数组，分治思想</td>
</tr>
<tr>
<td style="text-align:left">数据结构操作</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">数组</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">访问 (by index)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">-</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入/删除 (末尾)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">动态数组扩容有摊销成本</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入/删除 (中间/开头)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">需要移动元素</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">搜索 (无序)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">搜索 (有序)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">二分查找</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">链表 (单/双)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">访问 (by index)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">需要遍历</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入/删除 (已知位置)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">前提是已获得要操作节点的引用</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入/删除 (头/尾)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">通常维护头尾指针</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">搜索</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">需要遍历</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">哈希表 (HashMap/Dict)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入 (Insert)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(n) (全冲突)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">理想情况O(1)，冲突处理影响效率</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">查找 (Lookup)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(n) (全冲突)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">理想情况O(1)，冲突处理影响效率</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">删除 (Delete)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(n) (全冲突)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">理想情况O(1)，冲突处理影响效率</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">平衡二叉搜索树 (AVL, RB)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入 (Insert)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n) (递归栈)</td>
<td style="text-align:left">自平衡保证O(log n)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">查找 (Search)</td>
<td style="text-align:left">O(1) (根)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n) (递归栈)</td>
<td style="text-align:left">自平衡保证O(log n)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">删除 (Delete)</td>
<td style="text-align:left">O(1) (叶子)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n) (递归栈)</td>
<td style="text-align:left">自平衡保证O(log n)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">二叉堆 (优先队列)</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">插入 (Insert) / 入队 (Enqueue)</td>
<td style="text-align:left">O(1) (摊销)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">堆化 (Heapify Up)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">取最小/最大 (Find Min/Max)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">查看根节点</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">删除最小/最大 (Extract)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">O(log n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">堆化 (Heapify Down)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">构建堆 (Heap Build)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">O(n)</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Floyd算法，自底向上堆化</td>
</tr>
<tr>
<td style="text-align:left">图算法</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">广度优先搜索 (BFS)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V)</td>
<td style="text-align:left">邻接表或邻接矩阵（需转换）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">深度优先搜索 (DFS)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V + E)</td>
<td style="text-align:left">O(V) (递归栈)</td>
<td style="text-align:left">邻接表或邻接矩阵（需转换）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Dijkstra (无负权)</td>
<td style="text-align:left">O(V log V + E)</td>
<td style="text-align:left">O(V log V + E)</td>
<td style="text-align:left">O(V log V + E)</td>
<td style="text-align:left">O(V)</td>
<td style="text-align:left">优先队列 (堆) 优化后</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Bellman-Ford (可有负权)</td>
<td style="text-align:left">O(V*E)</td>
<td style="text-align:left">O(V*E)</td>
<td style="text-align:left">O(V*E)</td>
<td style="text-align:left">O(V)</td>
<td style="text-align:left">检测负权环</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Floyd-Warshall (APSP)</td>
<td style="text-align:left">O(V³)</td>
<td style="text-align:left">O(V³)</td>
<td style="text-align:left">O(V³)</td>
<td style="text-align:left">O(V²)</td>
<td style="text-align:left">所有节点对最短路径，动态规划</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Prim (MST - 邻接矩阵)</td>
<td style="text-align:left">O(V²)</td>
<td style="text-align:left">O(V²)</td>
<td style="text-align:left">O(V²)</td>
<td style="text-align:left">O(V)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Prim (MST - 邻接表+堆)</td>
<td style="text-align:left">O(E log V)</td>
<td style="text-align:left">O(E log V)</td>
<td style="text-align:left">O(E log V)</td>
<td style="text-align:left">O(V)</td>
<td style="text-align:left">优先队列 (堆) 优化后</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Kruskal (MST)</td>
<td style="text-align:left">O(E log E)</td>
<td style="text-align:left">O(E log E)</td>
<td style="text-align:left">O(E log E)</td>
<td style="text-align:left">O(E+V)</td>
<td style="text-align:left">并查集优化后，主要成本在排序边(E log E)</td>
</tr>
<tr>
<td style="text-align:left">字符串匹配</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">朴素算法 (Brute Force)</td>
<td style="text-align:left">O(n) (首字符)</td>
<td style="text-align:left">O((n-m+1)*m)</td>
<td style="text-align:left">O(n*m)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">n=文本长， m=模式长</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">KMP (Knuth-Morris-Pratt)</td>
<td style="text-align:left">O(n + m)</td>
<td style="text-align:left">O(n + m)</td>
<td style="text-align:left">O(n + m)</td>
<td style="text-align:left">O(m)</td>
<td style="text-align:left">预处理O(m)，匹配O(n)</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">Rabin-Karp</td>
<td style="text-align:left">O(n + m)</td>
<td style="text-align:left">O(n + m)</td>
<td style="text-align:left">O(n*m) (坏哈希)</td>
<td style="text-align:left">O(1)</td>
<td style="text-align:left">基于哈希，平均好，最坏差(哈希冲突)</td>
</tr>
</tbody>
</table>`,readingTime:{minutes:8.71,words:2614},title:"力扣刷题之时间复杂度常见算法速查表+推断技巧",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-098-time-complex-intro.html-CHwZ9rdm.js"),__vite__mapDeps([141,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","tips","leetcode"],excerpt:`<h2>1. 核心概念：什么是时间复杂度？</h2>
<ul>
<li>定义： 时间复杂度衡量的是一个算法执行所需的时间如何随输入数据规模（通常用 <code>n</code> 表示）的增长而增长。它不是计算算法运行的具体秒数（这取决于硬件、编程语言、编译器优化等），而是描述运行时间随输入规模 <code>n</code> 变化的趋势。</li>
<li>目的：
<ul>
<li>比较算法优劣： 在解决同一问题时，不同算法可能有不同的时间效率。时间复杂度提供了一个理论框架来比较它们，帮助我们选择更高效的算法，尤其是在处理大规模数据时。</li>
<li>预测性能： 了解算法的时间复杂度，可以帮助我们预估当输入规模 <code>n</code> 增大时（例如从 1000 条数据到 100 万条数据），算法执行时间会如何变化。这对于系统设计和性能优化至关重要。</li>
<li>分析算法瓶颈： 识别算法中耗时最多的部分，指导优化方向。</li>
</ul>
</li>
<li>核心思想： 忽略常数因子和低阶项，关注最高阶项。 因为当 <code>n</code> 变得非常大时，最高阶项对运行时间增长的影响起主导作用。</li>
</ul>`,readingTime:{minutes:9.29,words:2787},title:"力扣刷题之时间复杂度介绍 Time Complexity",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-099-tips-duishuqi-01-intro.html-DY9thDMN.js"),__vite__mapDeps([142,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","tips","leetcode"],excerpt:`<h2>什么是对数器？</h2>
<p>对数器，本质上是一种用于验证算法正确性的测试工具和调试方法。</p>
<p>它的核心思想是：</p>
<ol>
<li>有一个你想测试的目标算法 <code>A</code>：这个算法通常是你新设计的、优化的、或者相对复杂、你对其正确性没有十足把握的算法（比如一个高效的排序算法、一个巧妙的动态规划解法）。</li>
<li>有一个绝对正确（但可能低效、简单、暴力）的算法 <code>B</code>：这个算法是作为“标杆”或“正确答案生成器”存在的。它的正确性很容易被验证，或者本身就是公认正确的（比如使用系统库函数 <code>sort()</code> 进行排序，或者一个显而易见的暴力解法）。</li>
<li>生成大量随机测试数据：编写一个函数，能够产生各种可能情况下的随机输入数据（包括边界条件、极端情况）。</li>
<li>用算法 A 和算法 B 分别处理同一份随机输入数据。</li>
<li>比较两个算法的输出结果：如果对于大量的随机输入，算法 A 和算法 B 的输出结果都完全一致，那么我们就可以在很高的置信度下认为算法 A 是正确的。</li>
</ol>`,readingTime:{minutes:7.74,words:2323},title:"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性",type:"article"}}],["/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise.html-Do7WWdJ-.js"),__vite__mapDeps([143,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","tips","leetcode"],excerpt:`<h3>⚙️ 一、基础理论与分析技巧</h3>
<ol>
<li>
<p>复杂度分析优先</p>
<ul>
<li>实现算法前先分析时间/空间复杂度，避免无效优化。掌握常见复杂度类型（如 <code>O(1)</code>、<code>O(logN)</code>、<code>O(NlogN)</code>）及其适用场景，例如二分法必须依赖有序性（<code>O(logN)</code>），而哈希表适合快速查找（<code>O(1)</code>）。</li>
<li>优化时对比暴力解法（如冒泡排序 <code>O(n²)</code>）与高效解法（快速排序 <code>O(NlogN)</code>），理解优化本质。</li>
</ul>
</li>
<li>
<p>算法思想分类应用</p>
<ul>
<li>分治：将问题拆解（如归并排序）。</li>
<li>动态规划（DP）：解决重叠子问题（如斐波那契数列、编辑距离），需明确状态定义和转移方程。</li>
<li>贪心算法：局部最优解（如旅行商问题近似解），但需验证全局最优性。</li>
<li>回溯：穷举所有可能（如数独求解），通过剪枝优化效率。</li>
</ul>
</li>
</ol>`,readingTime:{minutes:3.69,words:1108},title:"力扣刷题技巧之结构化练习",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-01-Manacher-Algorithm.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-01-Manacher-Algorithm.html-e2O_TLLg.js"),__vite__mapDeps([144,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","leetcode","sf"],excerpt:`
<p>马拉车算法 Manacher‘s Algorithm 是用来查找一个字符串的最长回文子串的线性方法，由一个叫Manacher的人在1975年发明的，这个方法的最大贡献是在于将时间复杂度提升到了线性。</p>
<h1>解决奇偶的问题</h1>
<p>首先我们解决下奇数和偶数的问题，在每个字符间插入"#"，并且为了使得扩展的过程中，到边界后自动结束，在两端分别插入 "^" 和 "$"，两个不可能在字符串中出现的字符，这样中心扩展的时候，判断两端字符是否相等的时候，如果到了边界就一定会不相等，从而出了循环。</p>
<p>经过处理，字符串的长度永远都是奇数了。</p>
<figure><img src="https://user-images.githubusercontent.com/18375710/84165625-82902800-aaa6-11ea-863f-7b502d1c6016.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,readingTime:{minutes:5.34,words:1603},title:"leecode 详解 03-Manacher Algorithm 马拉车算法",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-039-combine-sum.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-11-leetcode-039-combine-sum.html-Ca1h2Myz.js"),__vite__mapDeps([145,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtracking","leetcode","sf"],excerpt:`
<h2>一个不会解的问题</h2>
<p><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/combination-sum/</a></p>
<p>给定一个无重复元素的数组&nbsp;candidates&nbsp;和一个目标数&nbsp;target&nbsp;，找出&nbsp;candidates&nbsp;中所有可以使数字和为&nbsp;target&nbsp;的组合。</p>
<p>candidates&nbsp;中的数字可以无限制重复被选取。</p>`,readingTime:{minutes:6.72,words:2017},title:"leecode 39 Combination Sum backtracking 回溯算法 + 剪枝",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-126-word-ladder-ii.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-11-leetcode-126-word-ladder-ii.html-Hvr0Z5Ks.js"),__vite__mapDeps([146,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","backtracking","leetcode","sf"],excerpt:`
<blockquote>
<p><a href="https://leetcode.com/problems/word-ladder/description/" target="_blank" rel="noopener noreferrer">word-ladder</a></p>
</blockquote>
<p>A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk such that:</p>`,readingTime:{minutes:29.67,words:8902},title:"leecode 126 127-Word Ladder II-backtracking 回溯算法 + 剪枝 BFS DFS",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-13-bst-nums.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-13-bst-nums.html-D-h0NPcz.js"),__vite__mapDeps([147,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search"],excerpt:`
<p>给定一个整数 n，求以&nbsp;1 ...&nbsp;n&nbsp;为节点组成的二叉搜索树有多少种？</p>
<p>示例:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: 3</span></span>
<span class="line"><span>输出: 5</span></span>
<span class="line"><span>解释:</span></span>
<span class="line"><span>给定 n = 3, 一共有 5 种不同结构的二叉搜索树:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   1         3     3      2      1</span></span>
<span class="line"><span>    \\       /     /      / \\      \\</span></span>
<span class="line"><span>     3     2     1      1   3      2</span></span>
<span class="line"><span>    /     /       \\                 \\</span></span>
<span class="line"><span>   2     1         2                 3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.56,words:1968},title:"面试算法力扣96-二叉搜索树一共有多少种？",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-14-bst-best-solve.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-14-bst-best-solve.html-B51n6sGm.js"),__vite__mapDeps([148,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search"],excerpt:`
<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>
<p>本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。</p>
<p>示例:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>给定的有序链表： [-10, -3, 0, 5, 9],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      0</span></span>
<span class="line"><span>     / \\</span></span>
<span class="line"><span>   -3   9</span></span>
<span class="line"><span>   /   /</span></span>
<span class="line"><span> -10  5</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.14,words:1241},title:"面试算法：有序链表转换为高度平衡的二叉搜索树",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-14-bst-solves.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-14-bst-solves.html-B7eAT5NJ.js"),__vite__mapDeps([149,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search"],excerpt:`
<p>给定一个整数 n，求以&nbsp;1 ...&nbsp;n&nbsp;为节点组成的二叉搜索树有多少种？</p>
<p>输出所有的解法结果。</p>
<p>示例:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: n = 3</span></span>
<span class="line"><span>Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解释:</span></span>
<span class="line"><span>给定 n = 3, 一共有 5 种不同结构的二叉搜索树:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   1         3     3      2      1</span></span>
<span class="line"><span>    \\       /     /      / \\      \\</span></span>
<span class="line"><span>     3     2     1      1   3      2</span></span>
<span class="line"><span>    /     /       \\                 \\</span></span>
<span class="line"><span>   2     1         2                 3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.22,words:3067},title:"面试算法力扣95-二叉搜索树的所有解法结果？",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-15-bst-valid.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-15-bst-valid.html-BcrysSm0.js"),__vite__mapDeps([150,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search"],excerpt:`
<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>假设一个二叉搜索树具有如下特征：</p>
<ul>
<li>
<p>节点的左子树只包含小于当前节点的数。</p>
</li>
<li>
<p>节点的右子树只包含大于当前节点的数。</p>
</li>
<li>
<p>所有左子树和右子树自身必须也是二叉搜索树。</p>
</li>
</ul>
<p>示例&nbsp;1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入:</span></span>
<span class="line"><span>    2</span></span>
<span class="line"><span>   / \\</span></span>
<span class="line"><span>  1   3</span></span>
<span class="line"><span>输出: true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.64,words:793},title:"面试算法力扣98-验证二叉搜索树",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel-pic.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-16-binary-tree-travel-pic.html-DWs1meZu.js"),__vite__mapDeps([151,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","block-chain","leetcode","sh"],excerpt:`
<p>本文用于整理二叉树的 3 种常见遍历方式：前序遍历、中序遍历、后序遍历。</p>
<p>本文主要详细讲解非递归的方式，并结合图进行详细讲解。</p>
<p>希望每一位小伙伴可以真正的理解二叉树的遍历流程，让我们开始吧！</p>
<h1>准备工作</h1>
<p>本文主要是为了重新梳理二叉树的非递归遍历，所以基本的遍历可以参考下面的文章：</p>
<p><a href="https://houbb.github.io/2020/01/23/algorithm-16-binary-tree-travel" target="_blank" rel="noopener noreferrer">面试算法：二叉树的前序/中序/后序/层序遍历方式汇总</a></p>`,readingTime:{minutes:11.95,words:3585},title:"面试算法：二叉树的前序/中序/后序非递归遍历图解",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-16-binary-tree-travel.html-COsktQGa.js"),__vite__mapDeps([152,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","block-chain","leetcode","sh"],excerpt:`
<p>本文用于整理二叉树的 4 种遍历方式：前序遍历、中序遍历、后序遍历、层序遍历。</p>
<p>并且使用递归和非递归两种方式。</p>
<h1>统一节点定义</h1>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TreeNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TreeNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val; }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">TreeNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">TreeNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">left</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> left;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">right</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> right;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.24,words:1571},title:"面试算法：二叉树的前序/中序/后序/层序遍历方式汇总 preorder/Inorder/postorder/levelorder",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-17-construct-binray-tree.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-17-construct-binray-tree.html-CYNepUjC.js"),__vite__mapDeps([153,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","block-chain","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>
<p>注意:</p>
<p>你可以假设树中没有重复的元素。</p>
<p>例如，给出</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>前序遍历 preorder =&nbsp;[3,9,20,15,7]</span></span>
<span class="line"><span>中序遍历 inorder = [9,3,15,20,7]</span></span>
<span class="line"><span>返回如下的二叉树：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    3</span></span>
<span class="line"><span>   / \\</span></span>
<span class="line"><span>  9  20</span></span>
<span class="line"><span>    /  \\</span></span>
<span class="line"><span>   15   7</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.66,words:1997},title:"面试算法：如何根据前序与中序遍历序列构造二叉树？",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-18-binary-tree-path-sum.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-18-binary-tree-path-sum.html-C-YgoqNy.js"),__vite__mapDeps([154,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明:&nbsp;叶子节点是指没有子节点的节点。</p>
<p>示例:</p>
<p>输入:</p>
<p>1<br>
/   <br>
2     3<br>
<br>
5</p>
<p>输出: ["1-&gt;2-&gt;5", "1-&gt;3"]</p>
<p>解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</p>
<h2>思路</h2>
<p>最直观的方法是使用深度优先搜索。</p>
<p>在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。</p>`,readingTime:{minutes:14.89,words:4466},title:"面试算法：二叉树路径之和问题汇总",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list.html-DdUzmEQL.js"),__vite__mapDeps([155,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p>
<ol>
<li>
<p>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。</p>
</li>
<li>
<p>展开后的单链表应该与二叉树 先序遍历 顺序相同。</p>
</li>
</ol>
<p>示例 1：</p>
<figure><img src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg" alt="e1" tabindex="0" loading="lazy"><figcaption>e1</figcaption></figure>`,readingTime:{minutes:4.03,words:1209},title:"面试算法：二叉树展开为链表",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-20-binary-tree-next-pointer.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-20-binary-tree-next-pointer.html-JmJPz20g.js"),__vite__mapDeps([156,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。</p>
<p>二叉树定义如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Node {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">left;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">right;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  Node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">next;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:7.47,words:2242},title:"面试算法：填充每个节点的下一个右侧节点指针汇总",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-21-dp-minest-path.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-21-dp-minest-path.html-B5ZFCKkA.js"),__vite__mapDeps([157,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<p>给定一个三角形 triangle ，找出自顶向下的最小路径和。</p>
<p>每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。</p>
<ul>
<li>示例 1：</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]</span></span>
<span class="line"><span>输出：11</span></span>
<span class="line"><span>解释：如下面简图所示：</span></span>
<span class="line"><span>   2</span></span>
<span class="line"><span>  3 4</span></span>
<span class="line"><span> 6 5 7</span></span>
<span class="line"><span>4 1 8 3</span></span>
<span class="line"><span>自顶向下的最小路径和为&nbsp;11（即，2&nbsp;+&nbsp;3&nbsp;+&nbsp;5&nbsp;+&nbsp;1&nbsp;= 11）。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.15,words:1845},title:"面试算法：动态规划解三角形最短路径详解",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-22-gas-station.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-22-gas-station.html-Ddwf3DpI.js"),__vite__mapDeps([158,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<p>在一条环路上有&nbsp;N&nbsp;个加油站，其中第&nbsp;i&nbsp;个加油站有汽油&nbsp;gas[i]&nbsp;升。</p>
<p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1&nbsp;个加油站需要消耗汽油&nbsp;cost[i]&nbsp;升。你从其中的一个加油站出发，开始时油箱为空。</p>
<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>
<p>说明:</p>
<ul>
<li>
<p>如果题目有解，该答案即为唯一答案。</p>
</li>
<li>
<p>输入数组均为非空数组，且长度相同。</p>
</li>
<li>
<p>输入数组中的元素均为非负数。</p>
</li>
</ul>`,readingTime:{minutes:3.36,words:1007},title:"面试算法：加油站难题，加油的学问还真不少",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-23-single-number.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-23-single-number.html-PJ9DQSbK.js"),__vite__mapDeps([159,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。</p>
<p>找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。</p>
<p>你可以不使用额外空间来实现吗？</p>
<ul>
<li>示例 1:</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: [2,2,1]</span></span>
<span class="line"><span>输出: 1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.73,words:2618},title:"面试算法：只出现一次的数字详解汇总",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-24-number-of-digit-one.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-24-number-of-digit-one.html-C9pgpmM8.js"),__vite__mapDeps([160,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<p>给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。</p>
<ul>
<li>示例 1：</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：n = 13</span></span>
<span class="line"><span>输出：6</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.73,words:820},title:"面试算法：数字 1 的个数",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-25-major-element.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-25-major-element.html-DpeH3aLq.js"),__vite__mapDeps([161,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于&nbsp;⌊ n/2 ⌋&nbsp;的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<ul>
<li>示例&nbsp;1：</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：[3,2,3]</span></span>
<span class="line"><span>输出：3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.67,words:1701},title:"面试算法：如何找到数组中出现次数最多的元素？",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-26-topk-freq.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-26-topk-freq.html-7igkVgx0.js"),__vite__mapDeps([162,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Data-Struct"],tag:["data-struct","binary-tree","leetcode","sh"],excerpt:`
<h2>题目</h2>
<p>给定一个非空的整数数组，返回其中出现频率前&nbsp;k&nbsp;高的元素。</p>
<ul>
<li>示例 1:</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [1,1,1,2,2,3], k = 2</span></span>
<span class="line"><span>输出: [1,2]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:7.42,words:2226},title:"面试算法：前 K 个高频元素详解汇总",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-27-leetcode-115-distinct-sequences.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-27-leetcode-115-distinct-sequences.html-DVZVCJ5F.js"),__vite__mapDeps([163,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>Given two strings s and t, return the number of distinct subsequences of s which equals t.</p>
<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>
<h2>例子</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: s = "rabbbit", t = "rabbit"</span></span>
<span class="line"><span>Output: 3</span></span>
<span class="line"><span>Explanation:</span></span>
<span class="line"><span>As shown below, there are 3 ways you can generate "rabbit" from s.</span></span>
<span class="line"><span>rabbbit</span></span>
<span class="line"><span>rabbbit</span></span>
<span class="line"><span>rabbbit</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:4.32,words:1297},title:"leetcode 115 Distinct Subsequences 动态规划",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii.html-zUXZJRdn.js"),__vite__mapDeps([164,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>You are given an array prices where prices[i] is the price of a given stock on the ith day.</p>
<p>Find the maximum profit you can achieve.</p>
<p>You may complete at most two transactions.</p>
<p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>`,readingTime:{minutes:9.48,words:2843},title:"leetcode 123 Best Time to Buy and Sell Stock III 动态规划",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning.html-DdHMqFz-.js"),__vite__mapDeps([165,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","backtrack","sh"],excerpt:`
<h2>描述</h2>
<p>Given a string s, partition s such that every  substring of the partition is a  palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: s = "aab"</span></span>
<span class="line"><span>Output: [["a","a","b"],["aa","b"]]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.92,words:2676},title:"leetcode 131 Palindrome Partitioning 动态规划/回溯  DP/backtrack",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-29-leetcode-135-candy.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-29-leetcode-135-candy.html-C5VQj4wv.js"),__vite__mapDeps([166,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<ol>
<li>
<p>Each child must have at least one candy.</p>
</li>
<li>
<p>Children with a higher rating get more candies than their neighbors.</p>
</li>
</ol>`,readingTime:{minutes:6.88,words:2063},title:"leetcode 135 Candy 递归+MEM",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-30-leetcode-139-word-break.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-30-leetcode-139-word-break.html-B61F8au2.js"),__vite__mapDeps([167,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","backtrack","sh"],excerpt:`
<p>Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p>
<h2>Ex</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: s = "leetcode", wordDict = ["leet","code"]</span></span>
<span class="line"><span>Output: true</span></span>
<span class="line"><span>Explanation: Return true because "leetcode" can be segmented as "leet code".</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:9.64,words:2892},title:"leetcode 139 word break 回溯 backtrack",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-31-leetcode-141-linked-list-cycle.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-31-leetcode-141-linked-list-cycle.html-ACb7Kdyb.js"),__vite__mapDeps([168,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","list","sh"],excerpt:`
<h2>描述</h2>
<p>Given head, the head of a linked list, determine if the linked list has a cycle in it.</p>
<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.</p>
<p>Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.</p>`,readingTime:{minutes:3.56,words:1069},title:"leetcode 141+142 Linked List Cycle 循环链表 快慢指针",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-32-leetcode-032-valid-parentheses.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-32-leetcode-032-valid-parentheses.html-Cu-GKyK5.js"),__vite__mapDeps([169,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","stack","sh"],excerpt:`
<p>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<p>Open brackets must be closed by the same type of brackets.</p>
<p>Open brackets must be closed in the correct order.</p>
<p>Every close bracket has a corresponding open bracket of the same type.</p>`,readingTime:{minutes:7.94,words:2381},title:"leetcode 20+32 Longest Valid Parentheses 动态规划/DP",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-33-leetcode-042-trapping-rain-water.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-33-leetcode-042-trapping-rain-water.html-KiZXmamm.js"),__vite__mapDeps([170,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","sh"],excerpt:`
<p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.</p>
<h2>Ex</h2>
<p>Example 1:</p>
<figure><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt="EX1" tabindex="0" loading="lazy"><figcaption>EX1</figcaption></figure>`,readingTime:{minutes:4.38,words:1314},title:"leetcode 42 Trapping Rain Water 双指针",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-34-leetcode-permutation.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-34-leetcode-permutation.html-TNaBtaYj.js"),__vite__mapDeps([171,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","backtrack","sh"],excerpt:`
<h2>题目</h2>
<p>整数数组的排列是将其成员排列成序列或线性顺序。</p>
<p>例如arr = [1,2,3]，下面是arr的所有排列：[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]。</p>
<p>整数数组的下一个排列是其整数的下一个字典顺序更大的排列。</p>
<p>更正式地说，如果数组的所有排列都根据其字典顺序在一个容器中排序，则该数组的下一个排列是排序容器中它后面的排列。</p>
<p>如果这样的排列是不可能的，则数组必须重新排列为尽可能低的顺序（即按升序排序）。</p>
<p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2]。</p>`,readingTime:{minutes:9.99,words:2998},title:"leetcode 31+46+60 下一个排列 Next Permutation/Permutations/Permutation Sequence  backtrack",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-36-leetcode-edit-distance.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-36-leetcode-edit-distance.html-DEy0-4iy.js"),__vite__mapDeps([172,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","backtrack","sh"],excerpt:`
<p>Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.</p>
<p>You have the following three operations permitted on a word:</p>
<ul>
<li>
<p>Insert a character</p>
</li>
<li>
<p>Delete a character</p>
</li>
<li>
<p>Replace a character</p>
</li>
</ul>`,readingTime:{minutes:5.72,words:1715},title:"leetcode 72 Edit Distance 编辑距离 DP",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-37-leetcode-minimum-window-substring.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-37-leetcode-minimum-window-substring.html-BZbTd-tn.js"),__vite__mapDeps([173,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","backtrack","sh"],excerpt:`
<p>Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.</p>
<p>If there is no such substring, return the empty string "".</p>
<p>The testcases will be generated such that the answer is unique.</p>`,readingTime:{minutes:6.57,words:1971},title:"leetcode 76 Minimum Window Substring",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram.html-6o8o1_ud.js"),__vite__mapDeps([174,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","stack","sh"],excerpt:`
<p>Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</p>
<h2>EX</h2>
<p>Example 1:</p>
<figure><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" alt="histogram" tabindex="0" loading="lazy"><figcaption>histogram</figcaption></figure>`,readingTime:{minutes:5.32,words:1596},title:"leetcode 84 Largest Rectangle in Histogram",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-39-leetcode-maximal-rectangle.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-39-leetcode-maximal-rectangle.html-DpOVtM1K.js"),__vite__mapDeps([175,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","stack","sh"],excerpt:`
<p>Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.</p>
<h2>Ex</h2>
<p>Example 1:</p>
<figure><img src="https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg" alt="ex1" tabindex="0" loading="lazy"><figcaption>ex1</figcaption></figure>`,readingTime:{minutes:4.17,words:1252},title:"leetcode 85 maximal rectangle",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-40-leetcode-scramble-string.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-40-leetcode-scramble-string.html-DhJnQnZI.js"),__vite__mapDeps([176,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>We can scramble a string s to get a string t using the following algorithm:</p>
<p>If the length of the string is 1, stop.</p>
<p>If the length of the string is &gt; 1, do the following:</p>
<p>Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.</p>`,readingTime:{minutes:4.47,words:1342},title:"leetcode 87 Scramble String",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-41-leetcode-lru-cache.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-41-leetcode-lru-cache.html-CRGyjufi.js"),__vite__mapDeps([177,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","sh"],excerpt:`
<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p>
<p>Implement the LRUCache class:</p>
<p>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.</p>
<p>int get(int key) Return the value of the key if the key exists, otherwise return -1.</p>`,readingTime:{minutes:4.69,words:1406},title:"leetcode 41 LRU CACHE",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-42-leetcode-reverse-polish-notation.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-42-leetcode-reverse-polish-notation.html-BYbttA_p.js"),__vite__mapDeps([178,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","sh"],excerpt:`
<p>我们日常的运算表达式通常是如下形式，这种成为中缀表达式，也就是运算符在运算数的中间。</p>
<p>这种表达式人类很容易识别，并根据其进行计算，但计算机识别这种表达式非常困难。</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>a + b * (c - d) + e/f</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:5.6,words:1680},title:"leetcode 42 150-Evaluate Reverse Polish Notation 逆波兰表达式",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-43-leetcode-maximum-product-subarray.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-43-leetcode-maximum-product-subarray.html-YD084d8e.js"),__vite__mapDeps([179,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>Given an integer array nums, find a subarray that has the largest product, and return the product.</p>
<p>The test cases are generated so that the answer will fit in a 32-bit integer.</p>
<h2>EX</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: nums = [2,3,-2,4]</span></span>
<span class="line"><span>Output: 6</span></span>
<span class="line"><span>Explanation: [2,3] has the largest product 6.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:1.97,words:592},title:"leetcode 43 152. Maximum Product Subarray 动态规划",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-44-leetcode-largest-number.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-44-leetcode-largest-number.html-XNn_O7mk.js"),__vite__mapDeps([180,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","math","sh"],excerpt:`
<p>Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.</p>
<p>Since the result may be very large, so you need to return a string instead of an integer.</p>
<h2>EX</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: nums = [10,2]</span></span>
<span class="line"><span>Output: "210"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:1.89,words:568},title:"leetcode 44 179. Largest Number",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-45-leetcode-house-robber.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-45-leetcode-house-robber.html-DfKIqwvu.js"),__vite__mapDeps([181,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>你是一名职业强盗，计划沿街抢劫房屋。</p>
<p>每个房子都藏有一定数量的钱，阻止你抢劫每个房子的唯一限制是相邻的房子有连接的安全系统，如果两个相邻的房子在同一晚被闯入，它会自动联系警察。</p>
<p>给定一个整数数组 nums，代表每个房子的金额，返回今晚在不报警的情况下可以抢劫的最大金额。</p>
<h2>EX</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: nums = [1,2,3,1]</span></span>
<span class="line"><span>Output: 4</span></span>
<span class="line"><span>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span></span>
<span class="line"><span>Total amount you can rob = 1 + 3 = 4.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:5.04,words:1513},title:"leetcode 45 198. House Robber DP/动态规划",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-46-leetcode-count-primes.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-46-leetcode-count-primes.html-C_XE6GYU.js"),__vite__mapDeps([182,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dp","sh"],excerpt:`
<p>给定一个整数 n，返回严格小于 n 的素数的个数。</p>
<h2>Ex</h2>
<p>Example 1:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Input: n = 10</span></span>
<span class="line"><span>Output: 4</span></span>
<span class="line"><span>Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:12.5,words:3749},title:"leetcode 46 204. Count Primes count-primes 素数的判断算法 Sieve of Eratosthenes",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-47-leetcode-course-schedule.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-47-leetcode-course-schedule.html-BWu3ye0a.js"),__vite__mapDeps([183,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","dfs","bfs","sh"],excerpt:`
<p>你这个学期必须选修 numCourses 门课程，记为&nbsp;0&nbsp;到&nbsp;numCourses - 1 。</p>
<p>在选修某些课程之前需要一些先修课程。 先修课程按数组&nbsp;prerequisites 给出，其中&nbsp;prerequisites[i] = [ai, bi] ，表示如果要学习课程&nbsp;ai 则 必须 先学习课程&nbsp; bi 。</p>
<p>例如，先修课程对&nbsp;[0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。</p>
<p>请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。</p>`,readingTime:{minutes:13.2,words:3959},title:"leetcode 47 207. Course Schedule 课程表 DFS/BFS",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-48-leetcode-trie-tree.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-48-leetcode-trie-tree.html-DNEFSpKO.js"),__vite__mapDeps([184,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","tree","data-struct","sh"],excerpt:`
<blockquote>
<p><a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener noreferrer">208. Implement Trie (Prefix Tree)</a></p>
</blockquote>
<p>Trie（发音类似 "try"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>
<p>请你实现 Trie 类：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Trie() 初始化前缀树对象。</span></span>
<span class="line"><span>void insert(String word) 向前缀树中插入字符串 word 。</span></span>
<span class="line"><span>boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。</span></span>
<span class="line"><span>boolean startsWith(String prefix) 如果之前已经插入的字符串&nbsp;word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:12.03,words:3610},title:"leetcode 48 - Trie (Prefix Tree) 实现 Trie 前缀树",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum.html-7qw-b4d-.js"),__vite__mapDeps([185,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","tree","sh"],excerpt:`
<p>给定一个含有&nbsp;n&nbsp;个正整数的数组和一个正整数 target 。</p>
<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组&nbsp;[numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：target = 7, nums = [2,3,1,2,4,3]</span></span>
<span class="line"><span>输出：2</span></span>
<span class="line"><span>解释：子数组&nbsp;[4,3]&nbsp;是该条件下的长度最小的子数组。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.88,words:864},title:"leetcode 49 209. Minimum Size Subarray Sum 双指针 binary-search 二分法查找",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-50-leecode-shortest-palindrome.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-50-leecode-shortest-palindrome.html-C3u-qk0o.js"),__vite__mapDeps([186,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","sh"],excerpt:`
<p>给定一个字符串 s，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：s = "aacecaaa"</span></span>
<span class="line"><span>输出："aaacecaaa"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:8.48,words:2544},title:"leetcode 50 - 214. 最短回文串 shortest-palindrome",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-217-duplicate-nums.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-51-leecode-217-duplicate-nums.html-D7WPRzAg.js"),__vite__mapDeps([187,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,1]<br>
输出：true<br>
示例 2：</p>
<p>输入：nums = [1,2,3,4]<br>
输出：false<br>
示例 3：</p>
<p>输入：nums = [1,1,1,3,3,4,3,2,4,2]<br>
输出：true</p>
<p>提示：</p>
<p>1 &lt;= nums.length &lt;= 10^5<br>
-10^9 &lt;= nums[i] &lt;= 10^9</p>`,readingTime:{minutes:14.6,words:4379},title:"leetcode 51 - 217. Contains Duplicate 存在重复元素 哈希？位运算？插入排序？",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-218-skyline.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-51-leecode-218-skyline.html-B3dSzp7Z.js"),__vite__mapDeps([188,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>城市的 天际线 是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。</p>
<p>给你所有建筑物的位置和高度，请返回 由这些建筑物形成的 天际线 。</p>
<p>每个建筑物的几何信息由数组 buildings 表示，其中三元组 buildings[i] = [lefti, righti, heighti] 表示：</p>
<p>lefti 是第 i 座建筑物左边缘的 x 坐标。<br>
righti 是第 i 座建筑物右边缘的 x 坐标。<br>
heighti 是第 i 座建筑物的高度。<br>
你可以假设所有的建筑都是完美的长方形，在高度为 0 的绝对平坦的表面上。</p>
<p>天际线 应该表示为由 “关键点” 组成的列表，格式 [[x1,y1],[x2,y2],...] ，并按 x 坐标 进行 排序 。</p>`,readingTime:{minutes:5.85,words:1756},title:"leetcode 51 - 218. 天际线问题",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii.html-ByJNva2f.js"),__vite__mapDeps([189,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &lt;= k 。如果存在，返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,1], k = 3<br>
输出：true<br>
示例 2：</p>
<p>输入：nums = [1,0,1,1], k = 1<br>
输出：true<br>
示例 3：</p>
<p>输入：nums = [1,2,3,1,2,3], k = 2<br>
输出：false</p>`,readingTime:{minutes:2.22,words:665},title:"leetcode 219 Contains Duplicate II",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii.html-CsRf5mtn.js"),__vite__mapDeps([190,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>给你一个整数数组 nums 和两个整数 indexDiff 和 valueDiff 。</p>
<p>找出满足下述条件的下标对 (i, j)：</p>
<p>i != j,</p>
<p>abs(i - j) &lt;= indexDiff</p>
<p>abs(nums[i] - nums[j]) &lt;= valueDiff</p>
<p>如果存在，返回 true ；否则，返回 false 。</p>
<h2>示例 1：</h2>
<p>输入：nums = [1,2,3,1], indexDiff = 3, valueDiff = 0<br>
输出：true<br>
解释：可以找出 (i, j) = (0, 3) 。<br>
满足下述 3 个条件：<br>
i != j --&gt; 0 != 3<br>
abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3<br>
abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0</p>`,readingTime:{minutes:10.18,words:3055},title:"leetcode 220 Contains Duplicate III",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-min-room.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-253-min-room.html-D2qSyPol.js"),__vite__mapDeps([191,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>[LeetCode] 253. Meeting Rooms II<br>
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.</p>
<p>Example 1:<br>
Input: intervals = [[0,30],[5,10],[15,20]]<br>
Output: 2</p>
<p>Example 2:<br>
Input: intervals = [[7,10],[2,4]]<br>
Output: 1</p>`,readingTime:{minutes:4.68,words:1404},title:"leetcode 253 [LeetCode] 253. Meeting Rooms II",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-move.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-253-move.html-mOm8MEhr.js"),__vite__mapDeps([192,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>井字棋 是由两个玩家 A 和 B 在 3 x 3 的棋盘上进行的游戏。井字棋游戏的规则如下：</p>
<p>玩家轮流将棋子放在空方格 (' ') 上。<br>
第一个玩家 A 总是用 'X' 作为棋子，而第二个玩家 B 总是用 'O' 作为棋子。<br>
'X' 和 'O' 只能放在空方格中，而不能放在已经被占用的方格上。<br>
只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。<br>
如果所有方块都放满棋子（不为空），游戏也会结束。<br>
游戏结束后，棋子无法再进行任何移动。</p>
<p>给你一个数组 moves，其中 moves[i] = [rowi, coli] 表示第 i 次移动在 grid[rowi][coli]。</p>`,readingTime:{minutes:1.88,words:565},title:"leetcode 1275. 找出井字棋的获胜者",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time%20copy%202.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-681-closest-next-time copy 2.html-DOuvbw4N.js"),__vite__mapDeps([193,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<h2>681. 最近时刻</h2>
<p>给定一个"HH:MM"格式的时间，重复使用这些数字，返回下一个最近的时间。每个数字可以被重复使用任意次。</p>
<p>保证输入的时间都是有效的。例如，"01:34"，"12:09" 都是有效的，而"1:34"，"12:9"都不是有效的时间。</p>
<p>例1：</p>
<p>输入: "19:34"</p>
<p>输出: "19:39"</p>
<p>解释:</p>
<p>从1，9，3，4中选出的下一个最近的时间是19:39，它是五分钟后。</p>
<p>答案不是19:33，因为它是23小时59分钟后。</p>
<p>例 2:</p>
<p>输入: "23:59"</p>`,readingTime:{minutes:4.06,words:1219},title:"leetcode 681 最近时刻 next-closest-time [Medium]",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-681-closest-next-time.html-BkzSBEQ3.js"),__vite__mapDeps([194,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<h2>681. 最近时刻</h2>
<p>给定一个"HH:MM"格式的时间，重复使用这些数字，返回下一个最近的时间。每个数字可以被重复使用任意次。</p>
<p>保证输入的时间都是有效的。例如，"01:34"，"12:09" 都是有效的，而"1:34"，"12:9"都不是有效的时间。</p>
<p>例1：</p>
<p>输入: "19:34"</p>
<p>输出: "19:39"</p>
<p>解释:</p>
<p>从1，9，3，4中选出的下一个最近的时间是19:39，它是五分钟后。</p>
<p>答案不是19:33，因为它是23小时59分钟后。</p>
<p>例 2:</p>
<p>输入: "23:59"</p>`,readingTime:{minutes:4.06,words:1219},title:"leetcode 681 最近时刻 next-closest-time [Medium]",type:"article"}}],["/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-716-max-stack.html",{loader:()=>h(()=>import("./2020-06-08-algorithm-52-leecode-716-max-stack.html-Cz9Zi8rn.js"),__vite__mapDeps([195,1])),meta:{date:15797376e5,localizedDate:"2020年1月23日",category:["Algorithm"],tag:["algorithm","leetcode","hash","bit","sort","sh"],excerpt:`
<p>设计一个最大栈数据结构，既支持栈操作，又支持查找栈中最大元素。</p>
<p>实现 MaxStack 类：</p>
<p>MaxStack() 初始化栈对象<br>
void push(int x) 将元素 x 压入栈中。<br>
int pop() 移除栈顶元素并返回这个元素。<br>
int top() 返回栈顶元素，无需移除。<br>
int peekMax() 检索并返回栈中最大元素，无需移除。<br>
int popMax() 检索并返回栈中最大元素，并将其移除。如果有多个最大元素，只要移除 最靠近栈顶 的那个。<br>
示例：</p>
<p>输入<br>
["MaxStack", "push", "push", "push", "top", "popMax", "top", "peekMax", "pop", "top"]<br>
[[], [5], [1], [5], [], [], [], [], [], []]</p>`,readingTime:{minutes:2.5,words:749},title:"leetcode 716 最大栈",type:"article"}}],["/posts/leetcode/index/2020-06-06-algorithm-000-index-01-overview.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-index-01-overview.html-DniD0w0W.js"),__vite__mapDeps([196,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Index"],tag:["index"],excerpt:`
<h2>查找</h2>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what" target="_blank" rel="noopener noreferrer">二分查找法？binary-search-01-基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704" target="_blank" rel="noopener noreferrer">二分查找法？binary-search-02-leetcode 704 二分查找目标值是否存在</a></p>`,readingTime:{minutes:3.86,words:1159},title:"从零开始的数据结构与算法-00-概览 算法专题汇总",type:"article"}}],["/posts/leetcode/index/2020-06-06-algorithm-000-index-02-how-to-learn.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-index-02-how-to-learn.html-CLCe_Hry.js"),__vite__mapDeps([197,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Index"],tag:["index"],excerpt:`
<table>
<thead>
<tr>
<th>常见刷题思维</th>
<th>高效刷题思维</th>
</tr>
</thead>
<tbody>
<tr>
<td>追求刷题数量</td>
<td>追求“知识模型”的构建</td>
</tr>
<tr>
<td>题型记不住、技巧忘了</td>
<td>把题归类、构建知识图谱</td>
</tr>
<tr>
<td>做过就忘、感觉无序</td>
<td>有计划、有归档、有复盘</td>
</tr>
</tbody>
</table>
<h1>二、对知识系统的分类</h1>
<p><strong>推荐专题划分顺序：</strong></p>
`,readingTime:{minutes:12.78,words:3835},title:"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？",type:"article"}}],["/posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-index-03-topics.html-D7hGQWPk.js"),__vite__mapDeps([198,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Index"],tag:["index"],excerpt:`
<h1>系统分类</h1>
<p><strong>我们要构建一个更完整的「LeetCode 数据结构与算法知识图谱」：</strong></p>
<ul>
<li>✅ 覆盖 <strong>所有经典算法思想</strong>（排序、分治、扫描线、位运算等）</li>
<li>✅ 明确哪些算法和哪些数据结构强相关（比如：树 + DFS、堆 + 贪心）</li>
<li>✅ 按照<strong>学习难度</strong> &amp; <strong>适配阶段</strong>循序渐进</li>
<li>✅ 易于整理成 <strong>笔记 / Notion / 题单</strong></li>
</ul>`,readingTime:{minutes:15.27,words:4582},title:"从零开始的数据结构与算法-02-leetcode 算法系统分类",type:"article"}}],["/posts/leetcode/index/2025-08-22-how-to-cross-leetcodes.html",{loader:()=>h(()=>import("./2025-08-22-how-to-cross-leetcodes.html-CDSdNfix.js"),__vite__mapDeps([199,1])),meta:{date:17558208e5,localizedDate:"2025年8月22日",category:["Althgorim"],tag:["althgorim"],excerpt:`
<figure><img src="https://pic.leetcode.cn/1720231746-FwkEem-心流.jpg" alt="科学刷题 灵茶山艾府" tabindex="0" loading="lazy"><figcaption>科学刷题 灵茶山艾府</figcaption></figure>
<blockquote>
<p>合理运用心流通道，科学刷题，快乐刷题！</p>
</blockquote>
<h2>前言</h2>
<p>怎么刷算法题？按照什么顺序刷题？如何科学地提高算法能力？</p>
<p>如果你刚开始刷题，还不熟悉<strong>基本编程语法</strong>和<strong>常用库函数</strong>，推荐先刷力扣官方的<strong>入门题单</strong>：</p>`,readingTime:{minutes:5.55,words:1666},title:"分享｜如何科学刷题？ by 灵茶山艾府",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-01-LC1768-merge-strings-alternately.html",{loader:()=>h(()=>import("./2025-08-31-array-string-01-LC1768-merge-strings-alternately.html-Jg667yn1.js"),__vite__mapDeps([200,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。</p>
<p>如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p>
<p>返回 合并后的字符串 。</p>
<p>示例 1：</p>
<p>输入：word1 = "abc", word2 = "pqr"<br>
输出："apbqcr"<br>
解释：字符串合并情况如下所示：<br>
word1：  a   b   c<br>
word2：    p   q   r<br>
合并后：  a p b q c r<br>
示例 2：</p>
<p>输入：word1 = "ab", word2 = "pqrs"<br>
输出："apbqrs"<br>
解释：注意，word2 比 word1 长，"rs" 需要追加到合并后字符串的末尾。<br>
word1：  a   b<br>
word2：    p   q   r   s<br>
合并后：  a p b q   r   s<br>
示例 3：</p>`,readingTime:{minutes:1.33,words:400},title:"LC1768. 交替合并字符串 merge-strings-alternately",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings.html",{loader:()=>h(()=>import("./2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings.html-Dfb6DH3S.js"),__vite__mapDeps([201,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>对于字符串 s 和 t，只有在 s = t + t + t + ... + t + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。</p>
<p>给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。</p>
<p>示例 1：</p>
<p>输入：str1 = "ABCABC", str2 = "ABC"<br>
输出："ABC"<br>
示例 2：</p>
<p>输入：str1 = "ABABAB", str2 = "ABAB"<br>
输出："AB"<br>
示例 3：</p>
<p>输入：str1 = "LEET", str2 = "CODE"<br>
输出：""</p>`,readingTime:{minutes:2.26,words:677},title:"LC1071. 字符串的最大公因子 greatest-common-divisor-of-strings",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies.html",{loader:()=>h(()=>import("./2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies.html-CzHsEGps.js"),__vite__mapDeps([202,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>有 n 个有糖果的孩子。给你一个数组 candies，其中 candies[i] 代表第 i 个孩子拥有的糖果数目，和一个整数 extraCandies 表示你所有的额外糖果的数量。</p>
<p>返回一个长度为 n 的布尔数组 result，如果把所有的 extraCandies 给第 i 个孩子之后，他会拥有所有孩子中 最多 的糖果，那么 result[i] 为 true，否则为 false。</p>
<p>注意，允许有多个孩子同时拥有 最多 的糖果数目。</p>
<p>示例 1：</p>
<p>输入：candies = [2,3,5,1,3], extraCandies = 3<br>
输出：[true,true,true,false,true]<br>
解释：如果你把额外的糖果全部给：<br>
孩子 1，将有 2 + 3 = 5 个糖果，是孩子中最多的。<br>
孩子 2，将有 3 + 3 = 6 个糖果，是孩子中最多的。<br>
孩子 3，将有 5 + 3 = 8 个糖果，是孩子中最多的。<br>
孩子 4，将有 1 + 3 = 4 个糖果，不是孩子中最多的。<br>
孩子 5，将有 3 + 3 = 6 个糖果，是孩子中最多的。<br>
示例 2：</p>`,readingTime:{minutes:1.78,words:533},title:"LC1431. 拥有最多糖果的孩子 kids-with-the-greatest-number-of-candies",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-04-LC605-can-place-flowers.html",{loader:()=>h(()=>import("./2025-08-31-array-string-04-LC605-can-place-flowers.html-BqTli8BO.js"),__vite__mapDeps([203,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。</p>
<p>可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p>
<p>给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。</p>
<p>另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。</p>
<p>示例 1：</p>
<p>输入：flowerbed = [1,0,0,0,1], n = 1<br>
输出：true<br>
示例 2：</p>
<p>输入：flowerbed = [1,0,0,0,1], n = 2<br>
输出：false</p>`,readingTime:{minutes:1.91,words:573},title:"LC605. 种花问题 can-place-flowers",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string.html",{loader:()=>h(()=>import("./2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string.html-CvXCVt44.js"),__vite__mapDeps([204,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。</p>
<p>元音字母包括 'a'、'e'、'i'、'o'、'u'，且可能以大小写两种形式出现不止一次。</p>
<p>示例 1：</p>
<p>输入：s = "IceCreAm"</p>
<p>输出："AceCreIm"</p>
<p>解释：</p>
<p>s 中的元音是 ['I', 'e', 'e', 'A']。反转这些元音，s 变为 "AceCreIm".</p>
<p>示例 2：</p>
<p>输入：s = "leetcode"</p>
<p>输出："leotcede"</p>
<p>提示：</p>
<p>1 &lt;= s.length &lt;= 3 * 10^5<br>
s 由 可打印的 ASCII 字符组成</p>`,readingTime:{minutes:2.38,words:713},title:"LC345. 反转字符串中的元音字母  reverse-vowels-of-a-string",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-06-LC151-reverse-words-in-a-string.html",{loader:()=>h(()=>import("./2025-08-31-array-string-06-LC151-reverse-words-in-a-string.html-BQvXwLMV.js"),__vite__mapDeps([205,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>给你一个字符串 s ，请你反转字符串中 单词 的顺序。</p>
<p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p>
<p>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。</p>
<p>注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>
<p>示例 1：</p>
<p>输入：s = "the sky is blue"<br>
输出："blue is sky the"<br>
示例 2：</p>
<p>输入：s = "  hello world  "<br>
输出："world hello"<br>
解释：反转后的字符串中不能存在前导空格和尾随空格。<br>
示例 3：</p>`,readingTime:{minutes:3.79,words:1136},title:"LC151. 反转字符串中的单词 reverse-words-in-a-string",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-08-LC334-increasing-triplet-subsequence.html",{loader:()=>h(()=>import("./2025-08-31-array-string-08-LC334-increasing-triplet-subsequence.html-24wnRtzU.js"),__vite__mapDeps([206,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string"],excerpt:`
<p>给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。</p>
<p>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,4,5]<br>
输出：true<br>
解释：任何 i &lt; j &lt; k 的三元组都满足题意<br>
示例 2：</p>
<p>输入：nums = [5,4,3,2,1]<br>
输出：false<br>
解释：不存在满足题意的三元组<br>
示例 3：</p>`,readingTime:{minutes:3.15,words:946},title:"LC334. 递增的三元子序列 increasing-triplet-subsequence",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-array-string-09-LC443-string-compression.html",{loader:()=>h(()=>import("./2025-08-31-array-string-09-LC443-string-compression.html-ChAudC_M.js"),__vite__mapDeps([207,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","string","two-pointer"],excerpt:`
<p>给你一个字符数组 chars ，请使用下述算法压缩：</p>
<p>从一个空字符串 s 开始。对于 chars 中的每组 连续重复字符 ：</p>
<p>如果这一组长度为 1 ，则将字符追加到 s 中。<br>
否则，需要向 s 追加字符，后跟这一组的长度。<br>
压缩后得到的字符串 s 不应该直接返回 ，需要转储到字符数组 chars 中。需要注意的是，如果组长度为 10 或 10 以上，则在 chars 数组中会被拆分为多个字符。</p>
<p>请在 修改完输入数组后 ，返回该数组的新长度。</p>
<p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p>
<p>注意：数组中超出返回长度的字符无关紧要，应予忽略。</p>`,readingTime:{minutes:3.91,words:1173},title:"LC443. 压缩字符串 string-compression",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-two-pointer-01-LC283-move-zeros.html",{loader:()=>h(()=>import("./2025-08-31-two-pointer-01-LC283-move-zeros.html-Btb8k8HL.js"),__vite__mapDeps([208,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","two-pointer"],excerpt:`
<p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p>
<p>示例 1:</p>
<p>输入: nums = [0,1,0,3,12]<br>
输出: [1,3,12,0,0]<br>
示例 2:</p>
<p>输入: nums = [0]<br>
输出: [0]</p>
<p>提示:</p>
<p>1 &lt;= nums.length &lt;= 10^4<br>
-2^31 &lt;= nums[i] &lt;= 2^31 - 1</p>
<p>进阶：你能尽量减少完成的操作次数吗？</p>`,readingTime:{minutes:2,words:599},title:"LC283. 移动零 move-zeros",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-two-pointer-02-LC392-is-subsequence.html",{loader:()=>h(()=>import("./2025-08-31-two-pointer-02-LC392-is-subsequence.html-H2JXek8N.js"),__vite__mapDeps([209,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","two-pointer"],excerpt:`
<p>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p>
<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。</p>
<p>（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。</p>
<p>进阶：</p>
<p>如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k &gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p>
<p>示例 1：</p>
<p>输入：s = "abc", t = "ahbgdc"<br>
输出：true<br>
示例 2：</p>`,readingTime:{minutes:1.21,words:363},title:"LC392. 判断子序列 is-subsequence",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-two-pointer-03-LC11-container-with-most-water.html",{loader:()=>h(()=>import("./2025-08-31-two-pointer-03-LC11-container-with-most-water.html-C1wK1pi_.js"),__vite__mapDeps([210,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","two-pointer"],excerpt:`
<p>给定一个长度为 n 的整数数组 height。</p>
<p>有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p>
<p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p>说明：你不能倾斜容器。</p>
<p>示例 1：</p>
<figure><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure>`,readingTime:{minutes:1.82,words:546},title:"LC11. 盛最多水的容器 container-with-most-water",type:"article"}}],["/posts/leetcode/leetcode-75/2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs.html",{loader:()=>h(()=>import("./2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs.html-CTWZUZeG.js"),__vite__mapDeps([211,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","two-pointer"],excerpt:`
<p>给你一个整数数组 nums 和一个整数 k 。</p>
<p>每一步操作中，你需要从数组中选出和为 k 的两个整数，并将它们移出数组。</p>
<p>返回你可以对数组执行的最大操作数。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,4], k = 5<br>
输出：2<br>
解释：开始时 nums = [1,2,3,4]：</p>
<ul>
<li>移出 1 和 4 ，之后 nums = [2,3]</li>
<li>移出 2 和 3 ，之后 nums = []<br>
不再有和为 5 的数对，因此最多执行 2 次操作。<br>
示例 2：</li>
</ul>`,readingTime:{minutes:4.8,words:1440},title:"LC1679. K 和数对的最大数目 max-number-of-k-sum-pairs",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i.html",{loader:()=>h(()=>import("./2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i.html-BV9KfQMJ.js"),__vite__mapDeps([212,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你一个由 n 个元素组成的整数数组 nums 和一个整数 k 。</p>
<p>请你找出平均数最大且 长度为 k 的连续子数组，并输出该最大平均数。</p>
<p>任何误差小于 10-5 的答案都将被视为正确答案。</p>
<p>示例 1：</p>
<p>输入：nums = [1,12,-5,-6,50,3], k = 4<br>
输出：12.75<br>
解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75<br>
示例 2：</p>
<p>输入：nums = [5], k = 1<br>
输出：5.00000</p>
<p>提示：</p>
<p>n == nums.length<br>
1 &lt;= k &lt;= n &lt;= 105<br>
-104 &lt;= nums[i] &lt;= 104</p>`,readingTime:{minutes:2.23,words:669},title:"LC643. 子数组最大平均数 I maximum-average-subarray-i",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length.html",{loader:()=>h(()=>import("./2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length.html-BcJ8OW5b.js"),__vite__mapDeps([213,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你字符串 s 和整数 k 。</p>
<p>请返回字符串 s 中长度为 k 的单个子字符串中可能包含的最大元音字母数。</p>
<p>英文中的 元音字母 为（a, e, i, o, u）。</p>
<p>示例 1：</p>
<p>输入：s = "abciiidef", k = 3<br>
输出：3<br>
解释：子字符串 "iii" 包含 3 个元音字母。<br>
示例 2：</p>
<p>输入：s = "aeiou", k = 2<br>
输出：2<br>
解释：任意长度为 2 的子字符串都包含 2 个元音字母。<br>
示例 3：</p>
<p>输入：s = "leetcode", k = 3<br>
输出：2<br>
解释："lee"、"eet" 和 "ode" 都包含 2 个元音字母。<br>
示例 4：</p>`,readingTime:{minutes:2.58,words:775},title:"LC1456. 定长子串中元音的最大数目 maximum-number-of-vowels-in-a-substring-of-given-length",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii.html",{loader:()=>h(()=>import("./2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii.html-gW-MqzGH.js"),__vite__mapDeps([214,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给定一个二进制数组 nums 和一个整数 k，假设最多可以翻转 k 个 0 ，则返回执行操作后 数组中连续 1 的最大个数 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,1,1,0,0,0,1,1,1,1,0], K = 2<br>
输出：6<br>
解释：[1,1,1,0,0,1,1,1,1,1,1]<br>
粗体数字从 0 翻转到 1，最长的子数组长度为 6。<br>
示例 2：</p>
<p>输入：nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3<br>
输出：10<br>
解释：[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]<br>
粗体数字从 0 翻转到 1，最长的子数组长度为 10。</p>`,readingTime:{minutes:2.62,words:787},title:"LC1004. 最大连续1的个数 III max-consecutive-ones-iii",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element.html",{loader:()=>h(()=>import("./2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element.html-BY9qKuZy.js"),__vite__mapDeps([215,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你一个二进制数组 nums ，你需要从中删掉一个元素。</p>
<p>请你在删掉元素的结果数组中，返回最长的且只包含 1 的非空子数组的长度。</p>
<p>如果不存在这样的子数组，请返回 0 。</p>
<p>提示 1：</p>
<p>输入：nums = [1,1,0,1]<br>
输出：3<br>
解释：删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。<br>
示例 2：</p>
<p>输入：nums = [0,1,1,1,0,1,1,0,1]<br>
输出：5<br>
解释：删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。<br>
示例 3：</p>`,readingTime:{minutes:2.8,words:840},title:"LC1493. 删掉一个元素以后全为 1 的最长子数组 longest-subarray-of-1s-after-deleting-one-element",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays.html",{loader:()=>h(()=>import("./2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays.html-B7YdQ4bk.js"),__vite__mapDeps([216,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你两个下标从 0 开始的整数数组 nums1 和 nums2 ，请你返回一个长度为 2 的列表 answer ，其中：</p>
<p>answer[0] 是 nums1 中所有 不 存在于 nums2 中的 不同 整数组成的列表。<br>
answer[1] 是 nums2 中所有 不 存在于 nums1 中的 不同 整数组成的列表。<br>
注意：列表中的整数可以按 任意 顺序返回。</p>
<p>示例 1：</p>
<p>输入：nums1 = [1,2,3], nums2 = [2,4,6]<br>
输出：[[1,3],[4,6]]<br>
解释：<br>
对于 nums1 ，nums1[1] = 2 出现在 nums2 中下标 0 处，然而 nums1[0] = 1 和 nums1[2] = 3 没有出现在 nums2 中。因此，answer[0] = [1,3]。<br>
对于 nums2 ，nums2[0] = 2 出现在 nums1 中下标 1 处，然而 nums2[1] = 4 和 nums2[2] = 6 没有出现在 nums2 中。因此，answer[1] = [4,6]。<br>
示例 2：</p>`,readingTime:{minutes:1.86,words:557},title:"LC2215. 找出两数组的不同 find-the-difference-of-two-arrays",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-hash-02-LC1207-unique-number-of-occurrences.html",{loader:()=>h(()=>import("./2025-09-09-hash-02-LC1207-unique-number-of-occurrences.html-CKWUL0VK.js"),__vite__mapDeps([217,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你一个整数数组 arr，如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</p>
<p>示例 1：</p>
<p>输入：arr = [1,2,2,1,1,3]<br>
输出：true<br>
解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</p>
<p>示例 2：</p>
<p>输入：arr = [1,2]<br>
输出：false<br>
示例 3：</p>
<p>输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]<br>
输出：true</p>
<p>提示：</p>
<p>1 &lt;= arr.length &lt;= 1000<br>
-1000 &lt;= arr[i] &lt;= 1000</p>`,readingTime:{minutes:1.27,words:380},title:"LC1207. 独一无二的出现次数 unique-number-of-occurrences",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close.html",{loader:()=>h(()=>import("./2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close.html-lMTbu4CT.js"),__vite__mapDeps([218,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 接近 ：</p>
<p>操作 1：交换任意两个 现有 字符。<br>
例如，abcde -&gt; aecdb<br>
操作 2：将一个 现有 字符的每次出现转换为另一个 现有 字符，并对另一个字符执行相同的操作。<br>
例如，aacabb -&gt; bbcbaa（所有 a 转化为 b ，而所有的 b 转换为 a ）<br>
你可以根据需要对任意一个字符串多次使用这两种操作。</p>
<p>给你两个字符串，word1 和 word2 。</p>
<p>如果 word1 和 word2 接近 ，就返回 true ；否则，返回 false 。</p>`,readingTime:{minutes:2.75,words:825},title:"LC1657. 确定两个字符串是否接近 determine-if-two-strings-are-close",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-hash-04-LC2352-equal-row-and-column-pairs.html",{loader:()=>h(()=>import("./2025-09-09-hash-04-LC2352-equal-row-and-column-pairs.html-DbRx6pb0.js"),__vite__mapDeps([219,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你一个下标从 0 开始、大小为 n x n 的整数矩阵 grid ，返回满足 Ri 行和 Cj 列相等的行列对 (Ri, Cj) 的数目。</p>
<p>如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。</p>
<p>示例 1：</p>
<p>输入：grid = [[3,2,1],[1,7,6],[2,7,7]]<br>
输出：1<br>
解释：存在一对相等行列对：</p>
<ul>
<li>(第 2 行，第 1 列)：[2,7,7]</li>
</ul>
<figure><img src="https://assets.leetcode.com/uploads/2022/06/01/ex1.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure>`,readingTime:{minutes:2.13,words:640},title:"LC2352. 相等行列对 equal-row-and-column-pairs",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude.html",{loader:()=>h(()=>import("./2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude.html-CxVzeJUy.js"),__vite__mapDeps([220,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>有一个自行车手打算进行一场公路骑行，这条路线总共由 n + 1 个不同海拔的点组成。自行车手从海拔为 0 的点 0 开始骑行。</p>
<p>给你一个长度为 n 的整数数组 gain ，其中 gain[i] 是点 i 和点 i + 1 的 净海拔高度差（0 &lt;= i &lt; n）。请你返回 最高点的海拔 。</p>
<p>示例 1：</p>
<p>输入：gain = [-5,1,5,0,-7]<br>
输出：1<br>
解释：海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。<br>
示例 2：</p>
<p>输入：gain = [-4,-3,-2,-1,4,3,2]<br>
输出：0<br>
解释：海拔高度依次为 [0,-4,-7,-9,-10,-6,-3,-1] 。最高海拔为 0 。</p>`,readingTime:{minutes:1.05,words:314},title:"LC1732. 找到最高海拔 find-the-highest-altitude",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-09-prefixsum-02-LC724-find-pivot-index.html",{loader:()=>h(()=>import("./2025-09-09-prefixsum-02-LC724-find-pivot-index.html-C282Xo2Z.js"),__vite__mapDeps([221,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","sliding-window"],excerpt:`
<p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p>
<p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>
<p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>
<p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p>
<p>示例 1：</p>
<p>输入：nums = [1, 7, 3, 6, 5, 6]<br>
输出：3<br>
解释：<br>
中心下标是 3 。<br>
左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，<br>
右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。<br>
示例 2：</p>`,readingTime:{minutes:2.53,words:759},title:"LC724. 寻找数组的中心下标 find-pivot-index",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-18-stack-01-LC2390-removing-stars-from-a-string.html",{loader:()=>h(()=>import("./2025-09-18-stack-01-LC2390-removing-stars-from-a-string.html-BXDZoB6k.js"),__vite__mapDeps([222,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","stack"],excerpt:`
<p>给你一个包含若干星号 * 的字符串 s 。</p>
<p>在一步操作中，你可以：</p>
<p>选中 s 中的一个星号。<br>
移除星号 左侧 最近的那个 非星号 字符，并移除该星号自身。<br>
返回移除 所有 星号之后的字符串。</p>
<p>注意：</p>
<p>生成的输入保证总是可以执行题面中描述的操作。<br>
可以证明结果字符串是唯一的。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：s = "leet**cod*e"</span></span>
<span class="line"><span>输出："lecoe"</span></span>
<span class="line"><span>解释：从左到右执行移除操作：</span></span>
<span class="line"><span>- 距离第 1 个星号最近的字符是 "leet**cod*e" 中的 't' ，s 变为 "lee*cod*e" 。</span></span>
<span class="line"><span>- 距离第 2 个星号最近的字符是 "lee*cod*e" 中的 'e' ，s 变为 "lecod*e" 。</span></span>
<span class="line"><span>- 距离第 3 个星号最近的字符是 "lecod*e" 中的 'd' ，s 变为 "lecoe" 。</span></span>
<span class="line"><span>不存在其他星号，返回 "lecoe" 。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.16,words:649},title:"LC2390. 从字符串中移除星号 removing-stars-from-a-string",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-18-stack-02-LC735-asteroid-collision.html",{loader:()=>h(()=>import("./2025-09-18-stack-02-LC735-asteroid-collision.html-B5q43JnW.js"),__vite__mapDeps([223,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","stack"],excerpt:`
<p>给定一个整数数组 asteroids，表示在同一行的小行星。</p>
<p>数组中小行星的索引表示它们在空间中的相对位置。</p>
<p>对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。</p>
<p>找出碰撞后剩下的所有小行星。</p>
<p>碰撞规则：两个小行星相互碰撞，较小的小行星会爆炸。如果两颗小行星大小相同，则两颗小行星都会爆炸。两颗移动方向相同的小行星，永远不会发生碰撞。</p>
<p>示例 1：</p>
<p>输入：asteroids = [5,10,-5]<br>
输出：[5,10]<br>
解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</p>`,readingTime:{minutes:2.47,words:740},title:"LC735. 小行星碰撞 asteroid-collision",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string%20copy.html",{loader:()=>h(()=>import("./2025-09-18-stack-03-LC394-decode-string copy.html-DY4IGZOp.js"),__vite__mapDeps([224,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","stack"],excerpt:`
<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>
<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>
<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>
<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>
<p>测试用例保证输出的长度不会超过 105。</p>
<p>示例 1：</p>
<p>输入：s = "3[a]2[bc]"<br>
输出："aaabcbc"</p>`,readingTime:{minutes:2.74,words:823},title:"LC394. 字符串解码 decode-string",type:"article"}}],["/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string.html",{loader:()=>h(()=>import("./2025-09-18-stack-03-LC394-decode-string.html-5k253iws.js"),__vite__mapDeps([225,1])),meta:{date:17565984e5,localizedDate:"2025年8月31日",category:["Leetcode-75"],tag:["leetcode","Leetcode-75","stack"],excerpt:`
<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>
<p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>
<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>
<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p>
<p>测试用例保证输出的长度不会超过 105。</p>
<p>示例 1：</p>
<p>输入：s = "3[a]2[bc]"<br>
输出："aaabcbc"</p>`,readingTime:{minutes:2.74,words:823},title:"LC394. 字符串解码 decode-string",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-00-overview-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-00-overview-sort.html-BkQMPzPA.js"),__vite__mapDeps([226,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","index"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:9.3,words:2789},title:"Sort-00-十大排序算法汇总",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-01-bubble-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-01-bubble-sort.html-CHBWFGdQ.js"),__vite__mapDeps([227,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:6.68,words:2003},title:"sort-01-bubble sort 冒泡排序算法详解",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-02-quick-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-02-quick-sort.html-CNaoD1vl.js"),__vite__mapDeps([228,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:9.17,words:2752},title:"sort-02-QuickSort 快速排序到底快在哪里？",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-03-select-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-03-select-sort.html-CCKc0Fei.js"),__vite__mapDeps([229,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.02,words:1205},title:"sort-03-SelectSort 选择排序算法详解",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-04-heap-sort.html-mRZ61q4v.js"),__vite__mapDeps([230,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:7.59,words:2277},title:"sort-04-heap sort 堆排序算法详解",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-05-insert-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-05-insert-sort.html-BWim7NEA.js"),__vite__mapDeps([231,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.23,words:1268},title:"sort-05-insert sort 插入排序算法详解",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-06-shell-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-06-shell-sort.html-DZk0zdvZ.js"),__vite__mapDeps([232,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort","exchange-sorts"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:6.1,words:1831},title:"sort-06-shell sort 希尔排序算法详解",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-07-merge-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-07-merge-sort.html-YUZBFfoQ.js"),__vite__mapDeps([233,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:7.7,words:2311},title:"sort-07-merge sort 归并排序",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-08-counting-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-08-counting-sort.html-B-w3lnaQ.js"),__vite__mapDeps([234,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:7.24,words:2171},title:"sort-08-counting sort 计数排序",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-09-bucket-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-09-bucket-sort.html-64pe1i1Q.js"),__vite__mapDeps([235,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.64,words:1093},title:"sort-09-bucket sort 桶排序",type:"article"}}],["/posts/leetcode/sorts/2016-07-14-sort-10-bigfile-sort.html",{loader:()=>h(()=>import("./2016-07-14-sort-10-bigfile-sort.html-CXlPpg_0.js"),__vite__mapDeps([236,1])),meta:{date:14684544e5,localizedDate:"2016年7月14日",category:["Algorithm"],tag:["sort"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:6.86,words:2057},title:"sort-10-bigfile sort 大文件外部排序",type:"article"}}],["/posts/leetcode/sorts/2018-07-26-timesort.html",{loader:()=>h(()=>import("./2018-07-26-timesort.html-DuVesZNv.js"),__vite__mapDeps([237,1])),meta:{date:15325632e5,localizedDate:"2018年7月26日",category:["Algorithm"],tag:["algorithm","sort"],excerpt:`
<p>Timsort: A very fast , <code>O(n log n)</code>, stable sorting algorithm built for the real world — not constructed in academia.</p>
<h2>算法简介</h2>
<p>Timsort 是一种对真实数据有效的排序算法，而不是在学术实验室中创建的。</p>
<p>Tim Peters在2001年为Python编程语言创建了Timsort。Timsort首先分析它要排序的列表，然后根据列表的分析选择一种方法。</p>
<p>自从该算法被发明以来，它在Python、Java、Android平台和GNU Octave中被用作默认的排序算法。</p>`,readingTime:{minutes:6.36,words:1909},title:"Time Sort",type:"article"}}],["/posts/leetcode/topinterview-150/2025-08-22-dp-01-LC70-climbing-stairs.html",{loader:()=>h(()=>import("./2025-08-22-dp-01-LC70-climbing-stairs.html-CY1-S4Au.js"),__vite__mapDeps([238,1])),meta:{date:17558208e5,localizedDate:"2025年8月22日",category:["TopInterview150"],tag:["leetcode","dp","topInterview150"],excerpt:`
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。</p>
<p>你有多少种不同的方法可以爬到楼顶呢？</p>
<p>示例 1：</p>
<p>输入：n = 2<br>
输出：2<br>
解释：有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
<p>示例 2：</p>
<p>输入：n = 3<br>
输出：3<br>
解释：有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>`,readingTime:{minutes:1.56,words:469},title:"LC70. 爬楼梯 climbing-stairs",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro.html-Y8bbs2ND.js"),__vite__mapDeps([239,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.6,words:1081},title:"算法篇专题之回溯 Backtracking 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs.html-CKsesmx0.js"),__vite__mapDeps([240,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.85,words:856},title:"算法篇专题之回溯 Backtracking 与递归和 DFS 的关系？",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations.html-CIOiW_ME.js"),__vite__mapDeps([241,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.35,words:1004},title:"算法篇专题之回溯 Backtracking 02-LC46. 全排列 permutations",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations.html-DyVg0mtd.js"),__vite__mapDeps([242,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.77,words:531},title:"算法篇专题之回溯 Backtracking 02-LC77. 组合 combinations",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets.html-DrLv-Lup.js"),__vite__mapDeps([243,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.63,words:490},title:"算法篇专题之回溯 Backtracking 02-LC78 子集 subsets",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number.html-DwZ8g8Zq.js"),__vite__mapDeps([244,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.06,words:619},title:"算法篇专题之回溯 Backtracking 02-LC17 电话号码的字母组合 letter-combinations-of-a-phone-number",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum.html-Cp1kJZ4C.js"),__vite__mapDeps([245,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.71,words:814},title:"算法篇专题之回溯 Backtracking 02-LC39 组合总和 combination-sum",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses.html-DndITfiq.js"),__vite__mapDeps([246,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下括号生成</p>
<h1>22. 括号生成 generate-parentheses</h1>
<p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>
<p>示例 1：</p>
<p>输入：n = 3<br>
输出：["((()))","(()())","(())()","()(())","()()()"]<br>
示例 2：</p>
<p>输入：n = 1<br>
输出：["()"]</p>
<p>提示：</p>
<p>1 &lt;= n &lt;= 8</p>
<h1>v1-回溯</h1>`,readingTime:{minutes:2.61,words:782},title:"算法篇专题之回溯 Backtracking 02-LC22 22. 括号生成 generate-parentheses",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search.html-DcR3Qepg.js"),__vite__mapDeps([247,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.7,words:1411},title:"算法篇专题之回溯 Backtracking 02-LC79 单词搜索 word-search",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning.html-Bi5IcK9j.js"),__vite__mapDeps([248,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.97,words:591},title:"算法篇专题之回溯 Backtracking 02-LC131 分割回文串 palindrome-partitioning",type:"article"}}],["/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens.html-Dv5bEOtQ.js"),__vite__mapDeps([249,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","backtracking","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.24,words:1573},title:"算法篇专题之回溯 Backtracking 02-LC51. N 皇后 n-queens",type:"article"}}],["/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro.html-P7Vy7BLu.js"),__vite__mapDeps([250,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","enumration","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.29,words:1286},title:"leetcode 基础篇专题之枚举 enumration 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html-9Qw4A5mx.js"),__vite__mapDeps([251,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","simulation","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.08,words:1225},title:"leetcode 基础篇专题之模拟 simulation 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-000-index.html-C6-aDgxW.js"),__vite__mapDeps([252,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","sf"],excerpt:`
<p>一般而言，二者是相辅相成的。</p>
<p>所以需要结合起来学习。</p>
<h2>创作目的</h2>
<p>知行合一。</p>
<p>系统的学习+练习一下数据结构+算法。</p>
<p>修炼一下内力。</p>
<h1>数据结构专题</h1>
<p>大概分为几个类别：</p>
<ol>
<li>
<p>理论知识</p>
</li>
<li>
<p>源码学习</p>
</li>
<li>
<p>数据结构实现</p>
</li>
<li>
<p>题目练习</p>
</li>
<li>
<p>项目应用</p>
</li>
</ol>
<h2>理论</h2>
<p>其中 1/2 非常偏理论，会导致很枯燥。</p>`,readingTime:{minutes:2.73,words:819},title:"leetcode data-struct-000-力扣数据结构练习篇概览",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview.html-CsylxHJ-.js"),__vite__mapDeps([253,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:9.92,words:2977},title:"leetcode 数组专题 力扣数据结构之数组-00-概览",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray.html-vOeOhnWN.js"),__vite__mapDeps([254,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-00-overview" target="_blank" rel="noopener noreferrer">力扣数据结构之数组-00-概览</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray" target="_blank" rel="noopener noreferrer">力扣.53 最大子数组和 maximum-subarray</a></p>`,readingTime:{minutes:6.04,words:1811},title:"leetcode 数组专题 01-力扣.53 最大子数组和 leetcode maximum-subarray",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence.html-HpY6RrGH.js"),__vite__mapDeps([255,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sf"],excerpt:`
<p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>
<p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>
<p>示例 1：</p>
<p>输入：nums = [100,4,200,1,3,2]<br>
输出：4<br>
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。<br>
示例 2：</p>
<p>输入：nums = [0,3,7,2,5,8,4,6,0,1]<br>
输出：9</p>
<p>提示：</p>
<p>0 &lt;= nums.length &lt;= 10^5</p>
<p>-10^9 &lt;= nums[i] &lt;= 10^9</p>`,readingTime:{minutes:2.64,words:793},title:"leetcode 数组专题 01-力扣.128 最长连续序列 leetcode longest-consecutive-sequence",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum.html-DTo_nN9-.js"),__vite__mapDeps([256,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p>
<p>你可以按任意顺序返回答案。</p>
<p>示例 1：</p>
<p>输入：nums = [2,7,11,15], target = 9<br>
输出：[0,1]<br>
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p>
<p>示例 2：</p>
<p>输入：nums = [3,2,4], target = 6<br>
输出：[1,2]<br>
示例 3：</p>`,readingTime:{minutes:6.68,words:2004},title:"leetcode 数组专题 01-leetcode.1 two-sum 力扣.1 两数之和 N 种解法",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii.html-DXVFDwnR.js"),__vite__mapDeps([257,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","two-pointer","sf"],excerpt:`
<p>给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列，请你从数组中找出满足相加之和等于目标数 target 的两个数。</p>
<p>如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1 &lt;= index1 &lt; index2 &lt;= numbers.length 。</p>
<p>以长度为 2 的整数数组 [index1, index2] 的形式返回这两个整数的下标 index1 和 index2。</p>
<p>你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。</p>`,readingTime:{minutes:5.55,words:1666},title:"leetcode 数组专题 01-leetcode.167 two-sum-ii 力扣.167 两数之和II",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii.html-CW2d_pUT.js"),__vite__mapDeps([258,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","two-pointer","sf"],excerpt:`
<p>题目描述<br>
设计一个接收整数流的数据结构，该数据结构支持检查是否存在两数之和等于特定值。</p>
<p>实现 TwoSum 类：</p>
<p>TwoSum() 使用空数组初始化 TwoSum 对象</p>
<p>void add(int number) 向数据结构添加一个数 number</p>
<p>boolean find(int value) 寻找数据结构中是否存在一对整数，使得两数之和与给定的值相等。如果存在，返回 true ；否则，返回 false 。</p>
<p>示例：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>["TwoSum", "add", "add", "add", "find", "find"]</span></span>
<span class="line"><span>[[], [1], [3], [5], [4], [7]]</span></span>
<span class="line"><span>输出：</span></span>
<span class="line"><span>[null, null, null, null, true, false]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.74,words:821},title:"leetcode 数组专题 01-leetcode.170 two-sum III 力扣 170. 两数之和 III - 数据结构设计",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv.html-5PuvJqNV.js"),__vite__mapDeps([259,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","two-pointer","tree","binary-tree","sf"],excerpt:`
<p>给定一个二叉搜索树 root 和一个目标结果 k，如果二叉搜索树中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        5</span></span>
<span class="line"><span>       / \\</span></span>
<span class="line"><span>      3   6</span></span>
<span class="line"><span>     / \\    \\</span></span>
<span class="line"><span>    2   4    7</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:7.67,words:2302},title:"leetcode 数组专题 01-leetcode.653 two-sum IV 力扣 653. 两数之和 IV 二叉树/binary-tree",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum.html-B_ZxE7ky.js"),__vite__mapDeps([260,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。</p>
<p>请你返回所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<p>示例 1：</p>
<p>输入：nums = [-1,0,1,2,-1,-4]<br>
输出：[[-1,-1,2],[-1,0,1]]</p>
<p>解释：<br>
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。<br>
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。<br>
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。<br>
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</p>`,readingTime:{minutes:4.97,words:1491},title:"leetcode 数组专题 04-leetcode.15 three-sum 力扣.15 三数之和",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest.html-CjHL7Afm.js"),__vite__mapDeps([261,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。</p>
<p>返回这三个数的和。</p>
<p>假定每组输入只存在恰好一个解。</p>
<p>示例 1：</p>
<p>输入：nums = [-1,2,1,-4], target = 1<br>
输出：2<br>
解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2)。<br>
示例 2：</p>
<p>输入：nums = [0,0,0], target = 1<br>
输出：0<br>
解释：与 target 最接近的和是 0（0 + 0 + 0 = 0）。</p>`,readingTime:{minutes:3.14,words:941},title:"leetcode 数组专题 04-leetcode.16 three-sum-closest 力扣.16 最接近的三数之和",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller.html-BbYCblvo.js"),__vite__mapDeps([262,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>题目描述</p>
<p>给定一个长度为 n 的整数数组和一个目标值 target ，寻找能够使条件 nums[i] + nums[j] + nums[k] &lt; target 成立的三元组  i, j, k 个数（0 &lt;= i &lt; j &lt; k &lt; n）。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入: nums = [-2,0,1,3], target = 2</span></span>
<span class="line"><span>输出: 2 </span></span>
<span class="line"><span>解释: 因为一共有两个三元组满足累加和小于 2:</span></span>
<span class="line"><span>     [-2,0,1]</span></span>
<span class="line"><span>     [-2,0,3]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:3.74,words:1123},title:"leetcode 数组专题 04-leetcode.259 three-sum-smaller 力扣.259 较小的三数之和",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num.html-C7MxcJaK.js"),__vite__mapDeps([263,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。</p>
<p>请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<p>0 &lt;= a, b, c, d &lt; n</p>
<p>a、b、c 和 d 互不相同</p>
<p>nums[a] + nums[b] + nums[c] + nums[d] == target</p>
<p>你可以按 任意顺序 返回答案 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,0,-1,0,-2,2], target = 0<br>
输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p>`,readingTime:{minutes:3.97,words:1190},title:"leetcode 数组专题 05-leetcode.018 four-sum 力扣.018 四数之和",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii.html-D3tlv7ck.js"),__vite__mapDeps([264,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","binary-search","sf"],excerpt:`
<p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p>
<p>0 &lt;= i, j, k, l &lt; n</p>
<p>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</p>
<p>示例 1：</p>
<p>输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</p>
<p>输出：2</p>
<p>解释：<br>
两个元组如下：</p>
<ol>
<li>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</li>
<li>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</li>
</ol>`,readingTime:{minutes:9.83,words:2950},title:"leetcode 数组专题 05-leetcode.454 four-sum-ii 力扣.454 四数相加之和 II",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html-mVGUXLhe.js"),__vite__mapDeps([265,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<h2>什么是扫描线算法？</h2>
<p>扫描线算法（<strong>Sweep Line Algorithm</strong>）是一种常用于解决几何问题（尤其是涉及区间、时间线或事件的重叠问题）的算法。</p>
<p>它的基本思想是“<strong>模拟一条扫描线从一个方向扫过所有事件</strong>”，在扫描过程中维护一个数据结构来追踪当前的状态（例如活动区间的数量、最小值、最大值等）。</p>
<h3>扫描线算法的基本步骤</h3>
<ol>
<li>
<p><strong>事件表示</strong>：每个问题中的区间（例如会议时间）或事件，都可以转化为若干个关键事件（例如开始时间和结束时间）。</p>
</li>
<li>
<p><strong>事件排序</strong>：将所有事件按照时间排序（如果时间相同，则根据事件的类型来排序，例如结束事件优先于开始事件）。</p>
</li>
<li>
<p><strong>扫描过程</strong>：从最早的事件开始，按照排序顺序逐一处理每个事件，并在处理每个事件时更新状态（例如活动会议的数量、最大活动时间等）。</p>
</li>
<li>
<p><strong>数据维护</strong>：根据事件类型，更新当前的活动状态。例如，遇到一个开始事件时，我们增加一个计数，遇到结束事件时，减少计数，或者更新其他需要维护的值。</p>
</li>
<li>
<p><strong>输出结果</strong>：在扫描过程中，根据需求输出解答。</p>
</li>
</ol>`,readingTime:{minutes:9.52,words:2856},title:"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query.html-C8nKXdiy.js"),__vite__mapDeps([266,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给你一个二维整数数组 intervals ，其中 intervals[i] = [lefti, righti] 表示第 i 个区间开始于 lefti 、结束于 righti（包含两侧取值，闭区间）。</p>
<p>区间的 长度 定义为区间中包含的整数数目，更正式地表达是 righti - lefti + 1 。</p>
<p>再给你一个整数数组 queries 。第 j 个查询的答案是满足 lefti &lt;= queries[j] &lt;= righti 的 长度最小区间 i 的长度 。如果不存在这样的区间，那么答案是 -1 。</p>
<p>以数组形式返回对应查询的所有答案。</p>`,readingTime:{minutes:15.04,words:4511},title:"leetcode 扫描线专题 06-leetcode.1851 minimum-interval-to-include-each-query 力扣.1851 包含每个查询的最小区间",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline.html-DSJBbaUX.js"),__vite__mapDeps([267,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>城市的 天际线 是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。给你所有建筑物的位置和高度，请返回 由这些建筑物形成的 天际线 。</p>
<p>每个建筑物的几何信息由数组 buildings 表示，其中三元组 buildings[i] = [lefti, righti, heighti] 表示：</p>
<p>lefti 是第 i 座建筑物左边缘的 x 坐标。</p>
<p>righti 是第 i 座建筑物右边缘的 x 坐标。</p>
<p>heighti 是第 i 座建筑物的高度。</p>
<p>你可以假设所有的建筑都是完美的长方形，在高度为 0 的绝对平坦的表面上。</p>
`,readingTime:{minutes:26.12,words:7836},title:"leetcode 数组专题 06-leetcode.218 the-skyline-problem 力扣.218 天际线问题 扫描线",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area.html-DSkOUHR9.js"),__vite__mapDeps([268,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给你 二维 平面上两个 由直线构成且边与坐标轴平行/垂直 的矩形，请你计算并返回两个矩形覆盖的总面积。</p>
<p>每个矩形由其 左下 顶点和 右上 顶点坐标表示：</p>
<p>第一个矩形由其左下顶点 (ax1, ay1) 和右上顶点 (ax2, ay2) 定义。<br>
第二个矩形由其左下顶点 (bx1, by1) 和右上顶点 (bx2, by2) 定义。</p>
<p>示例 1：</p>
<p>Rectangle Area<br>
输入：ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2<br>
输出：45<br>
示例 2：</p>`,readingTime:{minutes:5.29,words:1586},title:"leetcode 扫描线专题 06-leetcode.223 rectangle-area 力扣.223 矩形面积",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room.html-CcQ1d04I.js"),__vite__mapDeps([269,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给定一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，请你判断一个人是否能够参加这里面的全部会议。</p>
<p>示例 1：</p>
<p>输入：intervals = [[0,30],[5,10],[15,20]]<br>
输出：false<br>
示例 2：</p>
<p>输入：intervals = [[7,10],[2,4]]<br>
输出：true</p>
<p>提示：</p>
<p>0 &lt;= intervals.length &lt;= 10^4</p>
<p>intervals[i].length == 2</p>`,readingTime:{minutes:12.81,words:3843},title:"leetcode 扫描线专题 06-leetcode.252 meeting room 力扣.252 会议室",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii.html-BR51SiwS.js"),__vite__mapDeps([270,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给你一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，返回 所需会议室的最小数量 。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：intervals = [[0,30],[5,10],[15,20]]</span></span>
<span class="line"><span>输出：2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:13.06,words:3919},title:"leetcode 扫描线专题 06-leetcode.253 meeting room ii 力扣.253 会议室 II",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles.html-BztZCQFg.js"),__vite__mapDeps([271,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>在二维平面上存在 n 个矩形。给你两个下标从 0 开始的二维整数数组 bottomLeft 和 topRight，两个数组的大小都是 n x 2 ，其中 bottomLeft[i] 和 topRight[i] 分别代表第 i 个矩形的 左下角 和 右上角 坐标。</p>
<p>我们定义 向右 的方向为 x 轴正半轴（x 坐标增加），向左 的方向为 x 轴负半轴（x 坐标减少）。同样地，定义 向上 的方向为 y 轴正半轴（y 坐标增加），向下 的方向为 y 轴负半轴（y 坐标减少）。</p>
<p>你可以选择一个区域，该区域由两个矩形的 交集 形成。你需要找出能够放入该区域 内 的 最大 正方形面积，并选择最优解。</p>`,readingTime:{minutes:11.51,words:3453},title:"leetcode 扫描线专题 06-leetcode.3047 find-the-largest-area-of-square-inside-two-rectangles 力扣.3047 求交集区域的最大正方形面积",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak.html-COUk4JWG.js"),__vite__mapDeps([272,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro" target="_blank" rel="noopener noreferrer">leetcode 数组专题 06-扫描线算法（Sweep Line Algorithm）</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline" target="_blank" rel="noopener noreferrer">leetcode 数组专题 06-leetcode.218 the-skyline-problem 力扣.218 天际线问题 扫描线</a></p>`,readingTime:{minutes:23.92,words:7177},title:"leetcode 数组专题 06-leetcode.391 perfect-rectangle 力扣.391 完美矩形 扫描线",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle.html-CPGddiS0.js"),__vite__mapDeps([273,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给你一个数组 rectangles ，其中 rectangles[i] = [xi, yi, ai, bi] 表示一个坐标轴平行的矩形。这个矩形的左下顶点是 (xi, yi) ，右上顶点是 (ai, bi) 。</p>
<p>如果所有矩形一起精确覆盖了某个矩形区域，则返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span>解释：5 个矩形一起可以精确地覆盖一个矩形区域。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:6.92,words:2076},title:"leetcode 扫描线专题 06-leetcode.391 perfect-rectangle 力扣.391 完美矩形",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap.html-Btn4oaqa.js"),__vite__mapDeps([274,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。</p>
<p>矩形的上下边平行于 x 轴，左右边平行于 y 轴。</p>
<p>如果相交的面积为 正 ，则称两矩形重叠。</p>
<p>需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>
<p>给出两个矩形 rec1 和 rec2。如果它们重叠，返回 true；否则，返回 false 。</p>
<p>示例 1：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]</span></span>
<span class="line"><span>输出：true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:9.5,words:2849},title:"leetcode 扫描线专题 06-leetcode.836 rectangle-overlap 力扣.836 矩形重叠",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii.html-fAsxKEbI.js"),__vite__mapDeps([275,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sweep-line","sf"],excerpt:`
<p>给你一个轴对齐的二维数组 rectangles 。 对于 rectangle[i] = [x1, y1, x2, y2]，其中（x1，y1）是矩形 i 左下角的坐标， (xi1, yi1) 是该矩形 左下角 的坐标， (xi2, yi2) 是该矩形 右上角 的坐标。</p>
<p>计算平面中所有 rectangles 所覆盖的 总面积 。任何被两个或多个矩形覆盖的区域应只计算 一次 。</p>
<p>返回 总面积 。因为答案可能太大，返回 109 + 7 的 模 。</p>
<figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png" alt="area" tabindex="0" loading="lazy"><figcaption>area</figcaption></figure>`,readingTime:{minutes:10.63,words:3189},title:"leetcode 扫描线专题 06-leetcode.850 rectangle-area 力扣.850 矩形面积 II",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate.html-CJZs9tAE.js"),__vite__mapDeps([276,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sort","sf"],excerpt:`
<p>给你一个整数数组 nums 。</p>
<p>如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,1]</p>
<p>输出：true</p>
<p>解释：</p>
<p>元素 1 在下标 0 和 3 出现。</p>
<p>示例 2：</p>
<p>输入：nums = [1,2,3,4]</p>
<p>输出：false</p>
<p>解释：</p>
<p>所有元素都不同。</p>
<p>示例 3：</p>
<p>输入：nums = [1,1,1,3,3,4,3,2,4,2]</p>`,readingTime:{minutes:1.91,words:574},title:"leetcode 002-leetcode.217 contains-duplicate 力扣.217 存在重复的元素",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii.html-OvQJ5ayr.js"),__vite__mapDeps([277,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sort","sf"],excerpt:`
<p>给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &lt;= k 。</p>
<p>如果存在，返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,1], k = 3<br>
输出：true</p>
<p>示例 2：</p>
<p>输入：nums = [1,0,1,1], k = 1<br>
输出：true</p>
<p>示例 3：</p>
<p>输入：nums = [1,2,3,1,2,3], k = 2<br>
输出：false</p>`,readingTime:{minutes:1.86,words:558},title:"leetcode 002-leetcode.219 contains-duplicate-ii 力扣.219 存在重复的元素 II",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii.html-CLoK_dvl.js"),__vite__mapDeps([278,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","sort","sf"],excerpt:`
<p>给你一个整数数组 nums 和两个整数 indexDiff 和 valueDiff 。</p>
<p>找出满足下述条件的下标对 (i, j)：</p>
<p>i != j,<br>
abs(i - j) &lt;= indexDiff<br>
abs(nums[i] - nums[j]) &lt;= valueDiff</p>
<p>如果存在，返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<p>输入：nums = [1,2,3,1], indexDiff = 3, valueDiff = 0<br>
输出：true<br>
解释：可以找出 (i, j) = (0, 3) 。<br>
满足下述 3 个条件：<br>
i != j --&gt; 0 != 3<br>
abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3<br>
abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0</p>`,readingTime:{minutes:11.5,words:3449},title:"leetcode 002-leetcode.220 contains-duplicate-iii 力扣.220 存在重复的元素 III",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html-Beahqm41.js"),__vite__mapDeps([279,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>数组</h1>
<p>在力扣（LeetCode）中，“<strong>普通数组</strong>”是最基础也是最常见的数据结构之一。虽然“普通数组”这个说法听起来很简单，但它在算法题中扮演着非常重要的角色，很多高级技巧（如前缀和、差分、滑动窗口等）也是在数组的基础上发展出来的。</p>`,readingTime:{minutes:2.73,words:818},title:"力扣 数组 array -01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189.html-CxXSY5QL.js"),__vite__mapDeps([280,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC189 轮转数组</h1>
<p>给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p>
<p>示例 1:</p>
<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>
输出: [5,6,7,1,2,3,4]<br>
解释:<br>
向右轮转 1 步: [7,1,2,3,4,5,6]<br>
向右轮转 2 步: [6,7,1,2,3,4,5]<br>
向右轮转 3 步: [5,6,7,1,2,3,4]</p>`,readingTime:{minutes:4.58,words:1373},title:"力扣 数组 array-02-LC189 轮转数组 rotate-array",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238.html-CrsuESqC.js"),__vite__mapDeps([281,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","top100","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC238. 除自身以外数组的乘积</h1>
<p>给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。</p>`,readingTime:{minutes:3.08,words:925},title:"力扣 数组 array-02-LC238 除自身以外数组的乘积  product-of-array-except-self",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41.html-D-XBILb1.js"),__vite__mapDeps([282,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","top100","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC41 缺失的第一个正数</h1>
<p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。</p>
<p>请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。</p>`,readingTime:{minutes:3.95,words:1184},title:"力扣 数组 array-02-LC41 缺失的第一个正数 first-missing-positive",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53.html-BgQ5TjEl.js"),__vite__mapDeps([283,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>53. 最大子数组和</h1>
<p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>子数组是数组中的一个连续部分。</p>`,readingTime:{minutes:5.24,words:1572},title:"力扣 数组 array-02-53. 最大子数组和 maximum-subarray",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56.html-C-cOFEQS.js"),__vite__mapDeps([284,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","array","greedy","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>56. 合并区间</h1>
<p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。</p>
<p>请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p>`,readingTime:{minutes:5.49,words:1648},title:"力扣 数组 array-02-LC56. 合并区间",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro.html-z6pcJfYH.js"),__vite__mapDeps([285,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","difference-array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>差分数组</h1>
<h2>一、什么是差分数组？</h2>
<p>差分数组是一种 <strong>通过修改端点来影响一个区间的值</strong> 的技巧，适用于这种场景：</p>
<blockquote>
<p>「对一个数组 <code>nums</code> 的某个区间 <code>[l, r]</code>，整体加上一个值 <code>+k</code>，并且这样的操作会执行很多次，但我们不关心中间过程，只关心最终数组。」</p>
</blockquote>`,readingTime:{minutes:2.92,words:876},title:"什么是差分数组（Difference Array）",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854.html-BVXj8YsM.js"),__vite__mapDeps([286,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","difference-array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>1854. 人口最多的年份</h1>
<p>给你一个二维整数数组 logs ，其中每个 logs[i] = [birthi, deathi] 表示第 i 个人的出生和死亡年份。</p>
<p>年份 x 的 人口 定义为这一年期间活着的人的数目。</p>`,readingTime:{minutes:2.6,words:781},title:"58-差分数组（Difference Array） 1854. 人口最多的年份 maximum-population-year",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370.html-C_vivSLS.js"),__vite__mapDeps([287,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","difference-array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>力扣 370. 区间加法</h1>
<p>给你一个长度为 <code>length</code> 的数组 <code>arr</code>，初始时全为 0。</p>
<p>还有一个二维数组 <code>updates</code>，其中 <code>updates[i] = [startIdx, endIdx, inc]</code>，表示将 <code>inc</code> 加到 <code>arr</code> 中从索引 <code>startIdx</code> 到 <code>endIdx</code>（包含两端）之间的每个元素上。</p>`,readingTime:{minutes:2.86,words:859},title:"58-差分数组（Difference Array） 力扣 370. 区间加法",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109.html-CIGwsWCV.js"),__vite__mapDeps([288,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","difference-array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>力扣 1109. 航班预订统计</h1>
<p>这里有 n 个航班，它们分别从 1 到 n 进行编号。</p>
<p>有一份航班预订表 bookings ，表中第 i 条预订记录 <code>bookings[i] = [firsti, lasti, seatsi]</code> 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的 每个航班 上预订了 seatsi 个座位。</p>`,readingTime:{minutes:2.47,words:741},title:"58-差分数组（Difference Array） 力扣 1109. 航班预订统计 corporate-flight-bookings",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094.html-Cfr-Bmkz.js"),__vite__mapDeps([289,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","difference-array","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>1094. 拼车 car-pooling</h1>
<p>车上最初有 capacity 个空座位。车 只能 向一个方向行驶（也就是说，不允许掉头或改变方向）</p>
<p>给定整数 capacity 和一个数组 trips ,  <code>trip[i] = [numPassengersi, fromi, toi]</code> 表示第 i 次旅行有 numPassengersi 乘客，接他们和放他们的位置分别是 fromi 和 toi 。</p>`,readingTime:{minutes:2.41,words:724},title:"58-差分数组（Difference Array） 力扣 1094. 拼车 car-pooling",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html-y4bHrLU6.js"),__vite__mapDeps([290,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>详细介绍一下力扣矩阵</h1>
<p>“力扣矩阵”这个说法可能是你指代 LeetCode（力扣）中与 <strong>矩阵相关的算法题</strong>，这种类型的题目在刷题中很常见，主要考察二维数组的遍历、状态转移、路径搜索、动态规划等技巧。</p>`,readingTime:{minutes:3.74,words:1122},title:"力扣矩阵 matrix -01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240.html-D55tkDai.js"),__vite__mapDeps([291,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>240. 搜索二维矩阵 II</h1>
<p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。</p>
<p>该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。</p>`,readingTime:{minutes:3.65,words:1095},title:"力扣矩阵 matrix -01-LC240. 搜索二维矩阵 II search-a-2d-matrix-ii",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48.html-B1RD-TV2.js"),__vite__mapDeps([292,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>48. 旋转图像</h1>
<p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p>
<p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p>`,readingTime:{minutes:3.32,words:997},title:"力扣矩阵 matrix -01-LC48. 旋转图像 rotate-image",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54.html-CI0WQ1o6.js"),__vite__mapDeps([293,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC54 螺旋矩阵</h1>
<p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p>
<p>示例 1：</p>
<figure><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="s1" tabindex="0" loading="lazy"><figcaption>s1</figcaption></figure>`,readingTime:{minutes:1.67,words:501},title:"力扣矩阵 matrix -01-LC54 螺旋矩阵 spiral-matrix",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73.html-Cxmddpqf.js"),__vite__mapDeps([294,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC73. 矩阵置零</h1>
<p>给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。</p>
<p>示例 1：</p>
<figure><img src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg" alt="d1" tabindex="0" loading="lazy"><figcaption>d1</figcaption></figure>`,readingTime:{minutes:2.83,words:849},title:"力扣矩阵 matrix -01-LC73. 矩阵置零 set-matrix-zeroes",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74.html-6DWQBNGQ.js"),__vite__mapDeps([295,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","matrix","binary-search","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>74. 搜索二维矩阵</h1>
<p>给你一个满足下述两条属性的 m x n 整数矩阵：</p>
<p>每行中的整数从左到右按非严格递增顺序排列。<br>
每行的第一个整数大于前一行的最后一个整数。<br>
给你一个整数 target ，如果 target 在矩阵中，返回 true ；否则，返回 false 。</p>`,readingTime:{minutes:4.66,words:1399},title:"力扣矩阵 matrix -01-LC74. 搜索二维矩阵 search-a-2d-matrix",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html-vFa60hDp.js"),__vite__mapDeps([296,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","prefix-sum-matrix","matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>二维前缀和</h1>
<h2>是什么？</h2>
<p>二维前缀和（<code>prefixSum[i][j]</code>）是指：从原矩阵的左上角 <code>(0, 0)</code> 到位置 <code>(i - 1, j - 1)</code> 的<strong>矩形区域内所有元素的总和</strong>。</p>`,readingTime:{minutes:3.27,words:981},title:"二维前缀和 Prefix Sum Matrix-01-基本概念",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314.html-CmqIoQll.js"),__vite__mapDeps([297,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","prefix-sum-matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>1314. 矩阵区域和</h1>
<p>给你一个 m x n 的矩阵 mat 和一个整数 k ，请你返回一个矩阵 answer ，其中每个 answer[i][j] 是所有满足下述条件的元素 mat[r][c] 的和：</p>`,readingTime:{minutes:4.39,words:1317},title:"Prefix Sum 二维前缀和 LC1314 矩阵区域和 matrix-block-sum",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304.html-foa7Ajxq.js"),__vite__mapDeps([298,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","prefix-sum-matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>LC 304 二维区域和检索 - 矩阵不可变</h1>
<p>🔗 题目链接（中文版）：<a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/range-sum-query-2d-immutable/</a></p>`,readingTime:{minutes:3.54,words:1062},title:"Prefix Sum 二维区域和检索 - LC304 矩阵不可变",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732.html-Dj3w5IYE.js"),__vite__mapDeps([299,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","prefix-sum-matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>1732. 找到最高海拔</h1>
<p>有一个自行车手打算进行一场公路骑行，这条路线总共由 n + 1 个不同海拔的点组成。自行车手从海拔为 0 的点 0 开始骑行。</p>
<p>给你一个长度为 n 的整数数组 gain ，其中 gain[i] 是点 i 和点 i + 1 的 净海拔高度差（0 &lt;= i &lt; n）。请你返回 最高点的海拔 。</p>`,readingTime:{minutes:1.66,words:498},title:"Prefix Sum 二维前缀和 1732. 找到最高海拔 find-the-highest-altitude",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277.html-DJ5v4hT1.js"),__vite__mapDeps([300,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","prefix-sum","prefix-sum-matrix","leetcode"],excerpt:`
<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>
<blockquote>
<p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p>
</blockquote>
<h1>1277. 统计全为 1 的正方形子矩阵</h1>
<p>给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。</p>
<p>示例 1：</p>`,readingTime:{minutes:6.97,words:2090},title:"Prefix Sum 二维前缀和 1277. 统计全为 1 的正方形子矩阵 count-square-submatrices-with-all-ones",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro.html-StKgLgu-.js"),__vite__mapDeps([301,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.56,words:1367},title:"leetcode 数组专题之数组遍历-01-遍历介绍",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089.html-pJWLaCLd.js"),__vite__mapDeps([302,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.64,words:1691},title:"leetcode 数组专题之数组遍历-01-遍历 T1089 复写零",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11.html-BWqkwjxj.js"),__vite__mapDeps([303,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.15,words:945},title:"leetcode 数组专题之数组遍历-01-遍历 11. 盛最多水的容器",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15.html-CQjnxknK.js"),__vite__mapDeps([304,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.22,words:1566},title:"leetcode 数组专题之数组遍历-01-遍历 15-三数之和",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26.html-E3S2iIKr.js"),__vite__mapDeps([305,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.91,words:1172},title:"leetcode 数组专题之数组遍历-01-遍历 T26 删除有序数组中的重复项",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27.html-BuGXMIwf.js"),__vite__mapDeps([306,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.95,words:1786},title:"leetcode 数组专题之数组遍历-01-遍历 T27 移除元素",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283.html-21rjR9UT.js"),__vite__mapDeps([307,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.93,words:580},title:"leetcode 数组专题之数组遍历-01-遍历 T283 移动零",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31.html-B6aMG7QH.js"),__vite__mapDeps([308,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:6.4,words:1920},title:"leetcode 数组专题之数组遍历-01-遍历 T31 下一个排列 next-permutation",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42.html-B4_5fmPD.js"),__vite__mapDeps([309,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","two-pointer","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.71,words:1413},title:"leetcode 数组专题之数组遍历-01-遍历 42. 接雨水",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html-DtHk3Bs_.js"),__vite__mapDeps([310,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.94,words:1782},title:"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3.html-nc5tBiw9.js"),__vite__mapDeps([311,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sliding-window","prefix-sum","top100","two-pointer","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:7.43,words:2228},title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T3. 无重复字符的最长子串",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438.html-C87s_80Y.js"),__vite__mapDeps([312,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sliding-window","prefix-sum","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.01,words:1202},title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 438. 找到字符串中所有字母异位词",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643.html-CzJog5qV.js"),__vite__mapDeps([313,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sliding-window","prefix-sum","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.83,words:1148},title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T643. 子数组最大平均数 I",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76.html-n2Q6yh5B.js"),__vite__mapDeps([314,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","traverse","sliding-window","prefix-sum","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:9.11,words:2732},title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T76 最小覆盖子串",type:"article"}}],["/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html-DX4QqjIt.js"),__vite__mapDeps([315,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","array","matrix","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.91,words:1174},title:"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro.html-CepkeLii.js"),__vite__mapDeps([316,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","bfs","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.98,words:1193},title:"算法篇专题之广度优先遍历 BFS Breadth-First Search 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro.html-DJhmlDuH.js"),__vite__mapDeps([317,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bfs","sf"],excerpt:`
<h2>BFS 是什么</h2>
<h3>广度优先搜索 (BFS) 介绍</h3>
<p><strong>广度优先搜索（BFS，Breadth-First Search）</strong> 是一种图形或树的遍历算法，它按照层次从上到下、从左到右逐层访问节点。</p>
<p>BFS 是一种典型的 <strong>广度优先</strong> 遍历方法，通常用于找最短路径、图的连通性分析、求解迷宫等问题。</p>
<h4>BFS 的工作原理：</h4>
<ol>
<li>
<p><strong>从起始节点开始</strong>，将其加入队列。</p>
</li>
<li>
<p><strong>重复以下过程</strong>，直到队列为空：</p>
<ul>
<li>从队列中取出一个节点，并访问该节点。</li>
<li>将该节点的所有未被访问的邻居节点加入队列。</li>
</ul>
</li>
<li>
<p><strong>遍历过程是层次性的</strong>，即每次扩展都会访问当前节点的所有直接邻居，然后是其邻居的邻居，依此类推。</p>
</li>
</ol>`,readingTime:{minutes:3.95,words:1185},title:"leetcode 005 广度优先搜索（BFS，Breadth-First Search）",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html-Cv88Iq_A.js"),__vite__mapDeps([318,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","leetcode","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:8.57,words:2570},title:"java 位运算介绍 bit operator base intro",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert.html-B3eDSsVZ.js"),__vite__mapDeps([319,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","leetcode","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:2.54,words:762},title:"java 位运算转换 bit operator convert",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro.html-CpZwbHO_.js"),__vite__mapDeps([320,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","leetcode","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:5.08,words:1524},title:"leetcode bit operator 位运算入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number.html-BxC3M_dZ.js"),__vite__mapDeps([321,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:2.52,words:757},title:"leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 位运算",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html-8j3OdCMS.js"),__vite__mapDeps([322,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:7.66,words:2298},title:"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii.html-BiED2uJx.js"),__vite__mapDeps([323,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:3.5,words:1051},title:"leetcode 002-leetcode.260 single-number-iii 力扣.260 只出现一次的数字III",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number.html-35ypFtZo.js"),__vite__mapDeps([324,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:4.41,words:1322},title:"leetcode 002-leetcode.287 find-the-duplicate-number 力扣.287 寻找重复数",type:"article"}}],["/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array.html-WypzzsCx.js"),__vite__mapDeps([325,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","bit-operator","sf"],excerpt:`
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p>`,readingTime:{minutes:3.47,words:1040},title:"leetcode 002-leetcode.442 find-all-duplicates-in-an-array 力扣.442 数组中重复的数据",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro.html-D4BHZ4ca.js"),__vite__mapDeps([326,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","fenwick-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.8,words:1739},title:"进阶数据结构篇专题之单调栈 Monotonic Stack",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro.html-t1hEnuAW.js"),__vite__mapDeps([327,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","queue","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.09,words:1228},title:"算法篇专题之队列 queue 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro.html-ePJh7VaK.js"),__vite__mapDeps([328,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","segment-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.62,words:1386},title:"进阶数据结构篇专题之线段树 segment-tree 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro.html-RviLjcTL.js"),__vite__mapDeps([329,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","suffix-array","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.92,words:1177},title:"进阶数据结构篇专题之后缀数组 suffix-array 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro.html-BOCosc7m.js"),__vite__mapDeps([330,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","union-find-set","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.78,words:1133},title:"进阶数据结构篇专题之前缀树（Trie，又称字典树）01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro.html-CA_4Nm2l.js"),__vite__mapDeps([331,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","union-find-set","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.41,words:1323},title:"进阶数据结构篇专题之 并查集（Union-Find Set / Disjoint Set Union, DSU） 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro.html-D0vdv8l7.js"),__vite__mapDeps([332,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","counting","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.11,words:1233},title:"技巧篇专题之计数 Counting 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/dfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro.html-CM93OYtm.js"),__vite__mapDeps([333,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dfs","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.66,words:1399},title:"算法篇专题之深度优先遍历 DFS Depth-First Search 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/divide-and-conquer/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro.html-DZ2YyAs8.js"),__vite__mapDeps([334,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","divide-and-conquer","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.63,words:1390},title:"算法篇专题之分治 divide-and-conquer 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro.html-Di5EVXno.js"),__vite__mapDeps([335,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.81,words:1743},title:"算法篇专题之动态规划 dynamic-programming 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template.html-CJqRuW6m.js"),__vite__mapDeps([336,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>动态规划（Dynamic Programming，简称 DP） 的完整入门与进阶指南，适合零基础或有一定经验但想系统梳理的你。</p>
<p>DP（动态规划）类题目在力扣上占很大比例，但套路是比较固定的。</p>
<p>下面我给你一个通用结题模板，再拆成几个常见场景（1D、2D、背包型、区间型），让你看到解题思路和代码框架。</p>
<h1>🌟 动态规划解题通用流程</h1>
<ol>
<li>
<p>确定状态（State）</p>
<ul>
<li>dp[i] / dp[i][j] 表示什么？</li>
<li>这一步最关键，决定了后面转移公式。</li>
</ul>
</li>
<li>
<p>状态转移方程（Transition）</p>
<ul>
<li>dp[i] 由哪些子问题转移过来？</li>
<li>把问题拆小：如何从 dp[i-1]、dp[i-2] 推出 dp[i]？</li>
</ul>
</li>
<li>
<p>初始化（Initialization）</p>
<ul>
<li>dp[0] / dp[1] 的初始值？</li>
<li>特殊情况要先处理。</li>
</ul>
</li>
<li>
<p>计算顺序（Order）</p>
<ul>
<li>通常是从小到大递推，也可能需要倒序（如背包问题）。</li>
<li>是否要滚动数组优化空间？</li>
</ul>
</li>
<li>
<p>返回结果（Answer）</p>
<ul>
<li>一般是 dp[n-1] / dp[n][m]，有时需要在 dp 数组里取 max/min。</li>
</ul>
</li>
</ol>`,readingTime:{minutes:4.12,words:1236},title:"算法篇专题之动态规划 dynamic-programming 02-解题 5 步的模板",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs.html-D38dTIN0.js"),__vite__mapDeps([337,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下 LC70 爬楼梯。</p>
<h1>LC70 爬楼梯 climbing-stairs</h1>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。</p>
<p>你有多少种不同的方法可以爬到楼顶呢？</p>
<p>示例 1：</p>
<p>输入：n = 2<br>
输出：2<br>
解释：有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶<br>
示例 2：</li>
</ol>
<p>输入：n = 3<br>
输出：3<br>
解释：有三种方法可以爬到楼顶。</p>`,readingTime:{minutes:2.29,words:688},title:"算法篇专题之动态规划 dynamic-programming 11-LC70 爬楼梯 climbing-stairs",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle.html-CMDLNUE9.js"),__vite__mapDeps([338,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下LC118 杨辉三角。</p>
<h1>LC118 杨辉三角 pascals-triangle</h1>
<p>给定一个非负整数 numRows，生成「杨辉三角」的前 numRows 行。</p>
<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>
<figure><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure>`,readingTime:{minutes:1.81,words:544},title:"算法篇专题之动态规划 dynamic-programming 11-LC118 杨辉三角 pascals-triangle",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber.html-2oaTB1q1.js"),__vite__mapDeps([339,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下打家劫舍，看得出来，要成为一个有文化的盗贼。</p>
<h1>LC198. 打家劫舍 house-robber</h1>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。</p>
<p>每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>
<p>示例 1：</p>
<p>输入：[1,2,3,1]<br>
输出：4<br>
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>
偷窃到的最高金额 = 1 + 3 = 4 。<br>
示例 2：</p>`,readingTime:{minutes:3.06,words:917},title:"算法篇专题之动态规划 dynamic-programming 11-LC198. 打家劫舍 house-robber",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares.html-i9MFX43O.js"),__vite__mapDeps([340,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下完全平方数</p>
<h1>LC279. 完全平方数 perfect-squares</h1>
<p>给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。</p>
<p>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。</p>
<p>例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p>
<p>示例 1：</p>
<p>输入：n = 12<br>
输出：3<br>
解释：12 = 4 + 4 + 4<br>
示例 2：</p>
<p>输入：n = 13<br>
输出：2<br>
解释：13 = 4 + 9</p>`,readingTime:{minutes:4.35,words:1305},title:"算法篇专题之动态规划 dynamic-programming 11-LC279. 完全平方数 perfect-squares",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change.html-Dpk0B0EZ.js"),__vite__mapDeps([341,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下零钱兑换</p>
<h1>LC322. 零钱兑换 coin-change</h1>
<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p>
<p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p>
<p>你可以认为每种硬币的数量是无限的。</p>
<p>示例 1：</p>
<p>输入：coins = [1, 2, 5], amount = 11<br>
输出：3<br>
解释：11 = 5 + 5 + 1<br>
示例 2：</p>`,readingTime:{minutes:3.89,words:1166},title:"算法篇专题之动态规划 dynamic-programming 11-LC322. 零钱兑换 coin-change",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break.html-t482cWsM.js"),__vite__mapDeps([342,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下单词拆分</p>
<h1>LC139. 单词拆分 word-break</h1>
<p>给你一个字符串 s 和一个字符串列表 wordDict 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 s 则返回 true。</p>
<p>注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p>
<p>示例 1：</p>
<p>输入: s = "leetcode", wordDict = ["leet", "code"]<br>
输出: true<br>
解释: 返回 true 因为 "leetcode" 可以由 "leet" 和 "code" 拼接成。</p>`,readingTime:{minutes:3.53,words:1059},title:"算法篇专题之动态规划 dynamic-programming 11-LC139. 单词拆分 word-break",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence.html-Cj7HGbND.js"),__vite__mapDeps([343,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最长连续递增序列</p>
<h1>类似题目</h1>
<blockquote>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128" target="_blank" rel="noopener noreferrer">128. 最长连续序列</a></p>
</blockquote>
<h1>LC674. 最长连续递增序列 longest-continuous-increasing-subsequence</h1>`,readingTime:{minutes:3.28,words:984},title:"算法篇专题之动态规划 dynamic-programming 11-LC674. 最长连续递增序列 longest-continuous-increasing-subsequence",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence.html-8TC3t6y4.js"),__vite__mapDeps([344,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最长递增子序列</p>
<h1>LC300. 最长递增子序列 longest-increasing-subsequence</h1>
<p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>
<p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。</p>
<p>例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p>
<p>示例 1：</p>
<p>输入：nums = [10,9,2,5,3,7,101,18]<br>
输出：4<br>
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。<br>
示例 2：</p>`,readingTime:{minutes:3.38,words:1014},title:"算法篇专题之动态规划 dynamic-programming 11-LC300. 最长递增子序列 longest-increasing-subsequence",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray.html-DCIZunGa.js"),__vite__mapDeps([345,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下乘积最大子数组</p>
<h1>LC152. 乘积最大子数组 maximum-product-subarray</h1>
<p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续 子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>
<p>测试用例的答案是一个 32-位 整数。</p>
<p>示例 1:</p>
<p>输入: nums = [2,3,-2,4]<br>
输出: 6<br>
解释: 子数组 [2,3] 有最大乘积 6。<br>
示例 2:</p>
<p>输入: nums = [-2,0,-1]<br>
输出: 0<br>
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p>`,readingTime:{minutes:4.75,words:1426},title:"算法篇专题之动态规划 dynamic-programming 11-LC152. 乘积最大子数组 maximum-product-subarray",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum.html-ythy2FXV.js"),__vite__mapDeps([346,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下分割等和子集</p>
<h1>LC416. 分割等和子集  partition-equal-subset-sum</h1>
<p>给你一个 只包含正整数 的 非空 数组 nums 。</p>
<p>请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<p>示例 1：</p>
<p>输入：nums = [1,5,11,5]<br>
输出：true<br>
解释：数组可以分割成 [1, 5, 5] 和 [11] 。<br>
示例 2：</p>
<p>输入：nums = [1,2,3,5]<br>
输出：false<br>
解释：数组不能分割成两个元素和相等的子集。</p>`,readingTime:{minutes:4.68,words:1405},title:"算法篇专题之动态规划 dynamic-programming 11-LC416. 分割等和子集  partition-equal-subset-sum",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html-DFFa5lTL.js"),__vite__mapDeps([347,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下分割等和子集</p>
<h1>LC32. 最长有效括号 longest-valid-parentheses</h1>
<p>给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号 子串 的长度。</p>
<p>左右括号匹配，即每个左括号都有对应的右括号将其闭合的字符串是格式正确的，比如 "(()())"。</p>
<p>示例 1：</p>
<p>输入：s = "(()"<br>
输出：2<br>
解释：最长有效括号子串是 "()"</p>
<p>示例 2：</p>
<p>输入：s = ")()())"<br>
输出：4<br>
解释：最长有效括号子串是 "()()"</p>`,readingTime:{minutes:7.21,words:2164},title:"算法篇专题之动态规划 dynamic-programming 21-LC32. 最长有效括号 longest-valid-parentheses",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths.html-BzXZMDp3.js"),__vite__mapDeps([348,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下不同路径</p>
<h1>LC62 不同路径 unique-paths</h1>
<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>
<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>
<p>问总共有多少条不同的路径？</p>
<p>示例 1：</p>
<figure><img src="https://pic.leetcode.cn/1697422740-adxmsI-image.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure>`,readingTime:{minutes:3.66,words:1097},title:"算法篇专题之动态规划 dynamic-programming 22-LC62 不同路径 unique-paths",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence.html-DU8fO0_-.js"),__vite__mapDeps([349,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下不同路径</p>
<h1>LC1143. 最长公共子序列 longest-common-subsequence</h1>
<p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。</p>
<p>如果不存在 公共子序列 ，返回 0 。</p>
<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>
<p>例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。<br>
两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p>`,readingTime:{minutes:3.73,words:1120},title:"算法篇专题之动态规划 dynamic-programming 23-LC1143. 最长公共子序列 longest-common-subsequence",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum.html-DQP9fjuF.js"),__vite__mapDeps([350,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下不同路径</p>
<h1>LC64. 最小路径和 minimum-path-sum</h1>
<p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<p>说明：每次只能向下或者向右移动一步。</p>
<p>示例 1：</p>
<figure><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure>`,readingTime:{minutes:3.94,words:1181},title:"算法篇专题之动态规划 dynamic-programming 22-LC64. 最小路径和 minimum-path-sum",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring.html-CgmxecM2.js"),__vite__mapDeps([351,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最长回文子串</p>
<h1>LC5. 最长回文子串 longest-palindromic-substring</h1>
<p>给你一个字符串 s，找到 s 中最长的 回文 子串。</p>
<p>示例 1：</p>
<p>输入：s = "babad"<br>
输出："bab"<br>
解释："aba" 同样是符合题意的答案。<br>
示例 2：</p>
<p>输入：s = "cbbd"<br>
输出："bb"</p>
<p>提示：</p>
<p>1 &lt;= s.length &lt;= 1000<br>
s 仅由数字和英文字母组成</p>`,readingTime:{minutes:3.71,words:1112},title:"算法篇专题之动态规划 dynamic-programming 24-LC5. 最长回文子串 longest-palindromic-substring",type:"article"}}],["/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance.html-y12KxMdB.js"),__vite__mapDeps([352,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","dynamic-programming","dp","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下编辑距离</p>
<h1>LC72. 编辑距离 edit-distance</h1>
<p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<p>插入一个字符<br>
删除一个字符<br>
替换一个字符</p>
<p>示例 1：</p>
<p>输入：word1 = "horse", word2 = "ros"<br>
输出：3<br>
解释：<br>
horse -&gt; rorse (将 'h' 替换为 'r')<br>
rorse -&gt; rose (删除 'r')<br>
rose -&gt; ros (删除 'e')<br>
示例 2：</p>`,readingTime:{minutes:3.23,words:969},title:"算法篇专题之动态规划 dynamic-programming 26-LC72. 编辑距离 edit-distance",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro.html-0NnhRzML.js"),__vite__mapDeps([353,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.12,words:1236},title:"算法篇专题之图 graph 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step.html-DF0OkUVV.js"),__vite__mapDeps([354,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.48,words:1043},title:"算法篇专题之图 graph 02-一步步提升图的知识能力",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree.html-BDFU5dQV.js"),__vite__mapDeps([355,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.3,words:991},title:"算法篇专题之图 graph 02-01-LC208. 实现 Trie (前缀树) implement-trie-prefix-tree",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill.html-b3uJ2IxY.js"),__vite__mapDeps([356,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.94,words:1182},title:"算法篇专题之图 graph 02-01-LC733 图像渲染 flood-fill",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph.html-B9uV_XBW.js"),__vite__mapDeps([357,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.52,words:1055},title:"算法篇专题之图 graph 02-01-LC133 克隆图 clone-graph",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter.html-Cicv6tdk.js"),__vite__mapDeps([358,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.96,words:889},title:"算法篇专题之图 graph 02-01-LC463. 岛屿的周长 island-perimeter",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands.html-CLLqf2_w.js"),__vite__mapDeps([359,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.24,words:971},title:"算法篇专题之图 graph 02-01-LC200. 岛屿数量 number-of-islands",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island.html-bYTzeIs9.js"),__vite__mapDeps([360,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.43,words:730},title:"算法篇专题之图 graph 02-01-LC695. 岛屿的最大面积 max-area-of-island",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces.html-EnlXYKvq.js"),__vite__mapDeps([361,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.58,words:775},title:"算法篇专题之图 graph 02-01-LC547. 省份数量 number-of-provinces",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves.html-lBzMm-VD.js"),__vite__mapDeps([362,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.25,words:676},title:"算法篇专题之图 graph 02-01-LC1020. 飞地的数量 number-of-enclaves",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges.html-DiGnxJjE.js"),__vite__mapDeps([363,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.82,words:847},title:"算法篇专题之图 graph 02-01-LC994 994. 腐烂的橘子 rotting-oranges",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands.html-Cx2Se1a9.js"),__vite__mapDeps([364,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.17,words:652},title:"算法篇专题之图 graph 02-01-LC1254. 统计封闭岛屿的数目 number-of-closed-islands",type:"article"}}],["/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule.html-DnYZHR5y.js"),__vite__mapDeps([365,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","graph","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.89,words:1768},title:"算法篇专题之图 graph 02-01-LC207 课程表 course-schedule",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro.html-DHDoGWyX.js"),__vite__mapDeps([366,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.45,words:1334},title:"算法篇专题之贪心 Greedy 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock.html-gLm8ReTo.js"),__vite__mapDeps([367,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.54,words:763},title:"算法篇专题之贪心 Greedy 02-LC121. 买卖股票的最佳时机 best-time-to-buy-and-sell-stock",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels.html-B8EzsG3f.js"),__vite__mapDeps([368,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.4,words:1019},title:"算法篇专题之贪心 Greedy 之合并区间 02-LC763. 划分字母区间",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string.html-Dss4vmq7.js"),__vite__mapDeps([369,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.8,words:841},title:"算法篇专题之贪心 Greedy 之合并区间 02-LC2405. 子字符串的最优划分 optimal-partition-of-string",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game.html-C36k7-Z2.js"),__vite__mapDeps([370,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.3,words:1291},title:"算法篇专题之贪心 Greedy 05-LC55 跳跃游戏 jump-game",type:"article"}}],["/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii.html-C1QW5A-9.js"),__vite__mapDeps([371,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","greedy","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.4,words:1319},title:"算法篇专题之贪心 Greedy 之合并区间 06-LC45 跳跃游戏 II jump-game II",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro.html-BY_W0UWL.js"),__vite__mapDeps([372,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","hash","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.12,words:1236},title:"算法篇专题之哈希表 HashTable 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html-BCB42qkG.js"),__vite__mapDeps([373,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","ordered-set","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.49,words:1046},title:"算法篇专题之有序集合 ordered set s01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro.html-deizN2lI.js"),__vite__mapDeps([374,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","hashing","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.25,words:1274},title:"技巧篇专题之哈希 Hashing 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01.html-CPlLw41x.js"),__vite__mapDeps([375,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","hashing","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.62,words:785},title:"技巧篇专题之哈希 Hashing 02-TOP100 1. 两数之和",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128.html-DjBJ_8Rg.js"),__vite__mapDeps([376,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","hashing","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.7,words:810},title:"技巧篇专题之哈希 Hashing 02-TOP100 128. 最长连续序列",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49.html-BHQhBM55.js"),__vite__mapDeps([377,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","hashing","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.86,words:1457},title:"技巧篇专题之哈希 Hashing 02-TOP100 49. 字母异位词分组",type:"article"}}],["/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro.html-CTwqgsOR.js"),__vite__mapDeps([378,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","rolling-hash","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.8,words:1141},title:"技巧篇专题之滚动哈希 rolling-hash 01 入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro.html-DjZ-nrS5.js"),__vite__mapDeps([379,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","heap","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.41,words:1022},title:"算法篇专题之堆 heap s01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream.html-DkZB7CeX.js"),__vite__mapDeps([380,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","heap","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下LC295. 数据流的中位数 find-median-from-data-stream</p>
<h1>历史回顾</h1>
<blockquote>
<p><a href="https://houbb.github.io/2020/06/08/algorithm-004-leetcode-04-median-of-two-sorted-arrays" target="_blank" rel="noopener noreferrer">04-4.median of two sorted arrays 寻找两个正序数组的中位数</a></p>
</blockquote>`,readingTime:{minutes:4.26,words:1278},title:"算法篇专题之堆 heap 02-LC295. 数据流的中位数 find-median-from-data-stream",type:"article"}}],["/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array.html--TSojecm.js"),__vite__mapDeps([381,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","heap","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组中的第K个最大元素</p>
<h1>215. 数组中的第K个最大元素</h1>
<p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。</p>
<p>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<p>你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>
<p>示例 1:</p>
<p>输入: [3,2,1,5,6,4], k = 2<br>
输出: 5<br>
示例 2:</p>
<p>输入: [3,2,3,1,2,4,5,5,6], k = 4<br>
输出: 4</p>`,readingTime:{minutes:3.27,words:981},title:"算法篇专题之堆 heap 12-LC215. 数组中的第K个最大元素 kth-largest-element-in-an-array",type:"article"}}],["/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements.html-CdqAuaaU.js"),__vite__mapDeps([382,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","heap","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组中的前 K 个高频元素</p>
<h1>LC347. 前 K 个高频元素 top-k-frequent-elements</h1>
<p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。</p>
<p>你可以按 任意顺序 返回答案。</p>
<p>示例 1:</p>
<p>输入: nums = [1,1,1,2,2,3], k = 2<br>
输出: [1,2]<br>
示例 2:</p>
<p>输入: nums = [1], k = 1<br>
输出: [1]</p>
<p>提示：</p>`,readingTime:{minutes:2.99,words:898},title:"算法篇专题之堆 heap 12-LC347. 前 K 个高频元素 top-k-frequent-elements",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro.html-DWpjn_C7.js"),__vite__mapDeps([383,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.02,words:1206},title:"算法篇专题之链表 Linkedlist 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160.html-Ch8Vm0wc.js"),__vite__mapDeps([384,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:6.05,words:1815},title:"算法篇专题之链表 Linkedlist 02-LC160. 相交链表 intersection-of-two-linked-lists",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206.html-9-5ffSDZ.js"),__vite__mapDeps([385,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.43,words:730},title:"算法篇专题之链表 Linkedlist 02-LC206. 反转链表 reverse-linked-list",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234.html-CJyVZUPN.js"),__vite__mapDeps([386,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.32,words:995},title:"算法篇专题之链表 Linkedlist 02-LC234. 回文链表 palindrome-linked-list",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141.html-Eepruk6k.js"),__vite__mapDeps([387,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.14,words:641},title:"算法篇专题之链表 Linkedlist 02-LC141. 环形链表 linked-list-cycle",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142.html-b-TPFyNl.js"),__vite__mapDeps([388,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.5,words:750},title:"算法篇专题之链表 Linkedlist 02-LC142. 环形链表 II linked-list-cycle-ii",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21.html-pxsIXViC.js"),__vite__mapDeps([389,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.4,words:720},title:"算法篇专题之链表 Linkedlist 02-LC21. 合并两个有序链表 merge-two-sorted-lists",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2.html-Cmz-DdQ_.js"),__vite__mapDeps([390,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.31,words:994},title:"算法篇专题之链表 Linkedlist 02-LC2 两数相加",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19.html-DO5aQrVV.js"),__vite__mapDeps([391,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.97,words:891},title:"算法篇专题之链表 Linkedlist 02-LC19 删除链表的倒数第 N 个结点 remove-nth-node-from-end-of-list",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24.html-B_4F2_kU.js"),__vite__mapDeps([392,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.64,words:1093},title:"算法篇专题之链表 Linkedlist 02-LC24. 两两交换链表中的节点 swap-nodes-in-pairs",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25.html-BU_HPvut.js"),__vite__mapDeps([393,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.87,words:1762},title:"算法篇专题之链表 Linkedlist 02-LC25. K 个一组翻转链表 reverse-nodes-in-k-group",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138.html-DZHsYf-7.js"),__vite__mapDeps([394,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.59,words:1377},title:"算法篇专题之链表 Linkedlist 02-LC138 随机链表的复制 copy-list-with-random-pointer",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148.html-DZTTTdgc.js"),__vite__mapDeps([395,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:7.52,words:2257},title:"算法篇专题之链表 Linkedlist 02-LC148. 排序链表 sort-list",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23.html-CDEFk1nY.js"),__vite__mapDeps([396,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.94,words:1782},title:"算法篇专题之链表 Linkedlist 02-LC23. 合并 K 个升序链表 merge-k-sorted-lists",type:"article"}}],["/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146.html-CirYCsTi.js"),__vite__mapDeps([397,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","linkedlist","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.85,words:1455},title:"算法篇专题之链表 Linkedlist 02-LC146. LRU 缓存  lru-cache",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro.html-C1fKtgjd.js"),__vite__mapDeps([398,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>离线查询优化 是什么？</h2>
<p>在解决一些力扣（LeetCode）上的算法问题时，<strong>离线优化</strong>是一种非常重要的技巧，尤其适用于那些允许我们<strong>先全部获取查询</strong>（queries）并按某种顺序处理的场景。</p>
<p>这种方法的核心思想是：通过在处理前对查询进行排序或重组，结合其他数据结构或算法，使得整体复杂度得以显著降低。</p>
<h3>离线优化的核心思想</h3>
<ol>
<li><strong>获取所有数据（查询）</strong>：离线优化通常要求一次性拿到所有的输入数据（包括数组和查询），允许你预处理这些查询。</li>
<li><strong>排序或重组查询</strong>：通过排序或某种逻辑重组，把查询按照特定的顺序排列，使得查询处理可以高效完成。</li>
<li><strong>数据结构支持</strong>：离线优化通常结合一些动态数据结构（如树状数组、线段树、并查集等），实现高效查询或更新。</li>
<li><strong>延迟处理或分批执行</strong>：通过集中处理某些操作而非实时执行，降低单次处理的复杂度。</li>
</ol>`,readingTime:{minutes:6.59,words:1977},title:"leetcode offline-query-optimize 离线查询优化",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-.html-BLGl0Miq.js"),__vite__mapDeps([399,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<p>一个数组 a 的 差绝对值的最小值 定义为：0 &lt;= i &lt; j &lt; a.length 且 a[i] != a[j] 的 |a[i] - a[j]| 的 最小值。</p>
<p>如果 a 中所有元素都 相同 ，那么差绝对值的最小值为 -1 。</p>
<p>比方说，数组 [5,2,3,7,2] 差绝对值的最小值是 |2 - 3| = 1 。注意答案不为 0 ，因为 a[i] 和 a[j] 必须不相等。</p>
<p>给你一个整数数组 nums 和查询数组 queries ，其中 queries[i] = [li, ri] 。对于每个查询 i ，计算 子数组 nums[li...ri] 中 差绝对值的最小值 ，子数组 nums[li...ri] 包含 nums 数组（下标从 0 开始）中下标在 li 和 ri 之间的所有元素（包含 li 和 ri 在内）。</p>`,readingTime:{minutes:16.95,words:5085},title:"leetcode 离线查询优化-01-力扣.1906 查询绝对值差的最小值 7种解法 leetcode.1906 minimum-absolute-difference-queries",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro.html-PSGyWcal.js"),__vite__mapDeps([400,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下 莫队算法（Mo's Algorithm）</h2>
<h3>莫队算法（Mo's Algorithm）详解</h3>
<p><strong>莫队算法</strong>是一种高效的离线算法，专门用于解决<strong>区间查询问题</strong>。</p>
<p>通过对查询进行排序，结合滑动窗口的思想，可以显著降低算法复杂度。</p>
<hr>
<h3>基本思想</h3>
<p>莫队算法通过以下步骤高效处理查询：</p>
<ol>
<li><strong>重排查询顺序</strong>：按一定规则排序查询，减少移动范围时的重复计算。</li>
<li><strong>滑动窗口</strong>：维护一个动态区间，通过移动左右指针动态更新答案。</li>
<li><strong>分块优化</strong>：按数组大小分块，使指针移动范围局限于相邻块内，进一步减少移动次数。</li>
</ol>`,readingTime:{minutes:11.8,words:3540},title:"leetcode offline-query-optimize 离线查询优化-02-莫队算法（Mo's Algorithm）",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro.html-CI-JXgfS.js"),__vite__mapDeps([401,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下 并查集</h2>
<h3>并查集（Disjoint Set Union, DSU）详解</h3>
<p><strong>并查集</strong>是一种树型数据结构，用于处理<strong>动态连通性问题</strong>，例如：</p>
<ul>
<li>判断两个元素是否在同一集合中。</li>
<li>合并两个集合。</li>
</ul>
<p>并查集广泛应用于图的连通性、最小生成树（如 Kruskal 算法）、动态连通性问题等。</p>
<hr>
<h3>基本思想</h3>
<p>并查集将集合表示为<strong>一棵森林</strong>，其中每个集合是由一棵树表示：</p>`,readingTime:{minutes:4.51,words:1352},title:"leetcode offline-query-optimize 离线查询优化-03-并查集（Disjoint Set Union, DSU）",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro.html-DbJi6Wgf.js"),__vite__mapDeps([402,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下逆序查询</h2>
<p>逆序查，通常指的是在计算机科学中，对于一个给定的数组或序列，计算其中逆序对的数量。</p>
<p>逆序对是指在数组中任意两个元素，如果它们的索引顺序与值的顺序相反，即前面的元素值大于后面的元素值，那么这两个元素构成一个逆序对。</p>
<p>逆序对的概念在算法竞赛和数据结构中非常重要，尤其是在涉及到排序和优化问题时。</p>
<h3>逆序查的定义</h3>
<p>在一个序列中，如果存在两个不同的索引 (i) 和 (j)，满足 (i &lt; j) 且 (A[i] &gt; A[j])，那么这一对元素 ((A[i], A[j]))</p>
<h2>📊 如何通过逆序对数量判断数组的排序状态？</h2>`,readingTime:{minutes:6.47,words:1942},title:"leetcode offline-query-optimize 离线查询优化-04-逆序查询 reverse query",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro.html-Ckk5VJz8.js"),__vite__mapDeps([403,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下 线段树</h2>
<h3>什么是线段树？</h3>
<p>线段树是一种<strong>二叉树数据结构</strong>，用于快速处理数组的<strong>区间查询</strong>和<strong>区间更新</strong>操作。</p>
<p>它将一个数组分为多个区间，每个节点保存一个区间的信息，可以在 (O(\\log n)) 的时间内完成以下操作：</p>
<ol>
<li><strong>区间查询</strong>：如查询区间 <code>[l, r]</code> 的和、最大值、最小值等。</li>
<li><strong>区间更新</strong>：如将区间 <code>[l, r]</code> 的值增加、减少或直接赋值。</li>
</ol>`,readingTime:{minutes:5.84,words:1752},title:"leetcode offline-query-optimize 离线查询优化-05-线段树 segment tree",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html-Dx_VZlVQ.js"),__vite__mapDeps([404,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下 BIT 树状数组</h2>
<h3>什么是树状数组 (BIT)？</h3>
<p>树状数组（Binary Indexed Tree，简称 BIT）是一种高效的数据结构，主要用于处理<strong>前缀和</strong>相关的问题。</p>
<p>它支持以下操作：</p>
<ol>
<li><strong>前缀查询</strong>：查询数组从索引 <code>1</code> 到索引 <code>i</code> 的前缀和。</li>
<li><strong>单点更新</strong>：将数组的某个元素增加或减少一个值。</li>
</ol>
<p>树状数组的时间复杂度为 (O(\\log n))，适合动态维护数组的前缀和。</p>`,readingTime:{minutes:6.85,words:2056},title:"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组",type:"article"}}],["/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro.html-DCF2fZk5.js"),__vite__mapDeps([405,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","offline-query-optimize","sf"],excerpt:`
<h2>详细介绍一下 差分约束</h2>
<h3>什么是差分约束？</h3>
<p>差分约束是一种数学模型，用于解决线性不等式形式的问题。其一般形式为：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>xj - xi &lt;= c</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:2.85,words:856},title:"leetcode offline-query-optimize 离线查询优化-07-difference-constraints 差分约束",type:"article"}}],["/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro.html-B64dqaEr.js"),__vite__mapDeps([406,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","recursive","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.74,words:1422},title:"算法篇专题之递归 recursive 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro.html-CSroQxO4.js"),__vite__mapDeps([407,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p>编程里面估计最让人摸不着头脑的基本算法就是递归了。很多时候我们看明白一个复杂的递归都有点费时间，尤其对模型所描述的问题概念不清的时候，想要自己设计一个递归那么就更是有难度了。</p>
<p>很多不理解递归的人，总认为递归完全没必要，用循环就可以实现，其实这是一种很肤浅的理解。因为递归之所以在程序中能风靡并不是因为他的循环，大家都知道递归分两步，递和归，那么可以知道递归对于空间性能来说，简直就是造孽，这对于追求时空完美的人来说，简直无法接接受，如果递归仅仅是循环，估计现在我们就看不到递归了。</p>
<p>递归之所以现在还存在是因为递归可以产生无限循环体，也就是说有可能产生100层也可能10000层for循环。例如对于一个字符串进行全排列，字符串长度不定，那么如果你用循环来实现，你会发现你根本写不出来，这个时候就要调用递归，而且在递归模型里面还可以使用分支递归，例如for循环与递归嵌套，或者这节枚举几个递归步进表达式，每一个形成一个递归。</p>`,readingTime:{minutes:7.24,words:2172},title:"leetcode recursive 递归-01-递归基本概念介绍",type:"article"}}],["/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro.html-CLMiCcky.js"),__vite__mapDeps([408,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<h1>chat</h1>
<h1>基本介绍</h1>
<p><strong>递归复杂度计算</strong>中确实有一个非常常用的工具，叫做 <strong>Master Theorem（主定理）</strong>，可以用来<strong>分析形如分治递归</strong>的时间复杂度，非常适合处理像归并排序、快速排序、二分法、树型递归等场景。</p>
<hr>
<h2>一、Master Theorem（主定理）公式</h2>
<p>它适用于如下形式的递归关系：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>T(n) = a * T(n/b) + f(n)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>`,readingTime:{minutes:2.26,words:679},title:"leetcode recursive 递归-02-递归复杂度计算 Master Theorem（主定理）",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html-adUJfLKi.js"),__vite__mapDeps([409,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search","binary-search"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法。</p>
<h2>主要知识</h2>
<p>二分查找算法需要拆分下面几个部分：</p>
<ol>
<li>
<p>入门介绍</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<h1>入门介绍</h1>
<p>二分查找法（Binary Search）是算法中非常经典且高效的一种查找方法，适用于<strong>有序集合</strong>。</p>
<p>下面是对它的<strong>详细介绍、各种变体、实战技巧与常见坑点</strong>，适合用于 LeetCode 刷题和算法面试准备。</p>`,readingTime:{minutes:6.05,words:1815},title:"二分查找法？binary-search-01-基本概念介绍",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704.html-ByGGyVXg.js"),__vite__mapDeps([410,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>首先最最经典的场景，判断目标值是否存在。</p>
<h1>704 二分查找</h1>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果 target 存在返回下标，否则返回 -1。</p>
<p>你必须编写一个具有 O(log n) 时间复杂度的算法。</p>
<p>示例 1:</p>
<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>
输出: 4<br>
解释: 9 出现在 nums 中并且下标为 4<br>
示例 2:</p>`,readingTime:{minutes:2.91,words:873},title:"二分查找法？binary-search-02-leetcode 704 二分查找目标值是否存在",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034.html-CGvgWX3H.js"),__vite__mapDeps([411,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>首先最经典的场景，判断搜索插入位置。</p>
<h1>34 在排序数组中查找元素的第一个和最后一个位置</h1>
<p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>
<p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p>
<p>示例 1：</p>
<p>输入：nums = [5,7,7,8,8,10], target = 8<br>
输出：[3,4]<br>
示例 2：</p>`,readingTime:{minutes:2,words:599},title:"二分查找法？binary-search-02-leetcode 34 在排序数组中查找元素的第一个和最后一个位置 find-first-and-last-position-of-element-in-sorted-array",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035.html-BEnd-HLH.js"),__vite__mapDeps([412,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>首先最经典的场景，判断搜索插入位置。</p>
<h1>35. 搜索插入位置</h1>
<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。</p>
<p>如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<p>示例 1:</p>
<p>输入: nums = [1,3,5,6], target = 5<br>
输出: 2</p>
<p>示例 2:</p>
<p>输入: nums = [1,3,5,6], target = 2<br>
输出: 1</p>`,readingTime:{minutes:2.89,words:866},title:"二分查找法？binary-search-02-leetcode 35. 搜索插入位置",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034.html-496HJg_d.js"),__vite__mapDeps([413,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>首先二分查找法的简单变化，查找某个值的“左边界”或“右边界”。</p>
<h1>34. 在排序数组中查找元素的第一个和最后一个位置</h1>
<p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。</p>
<p>请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>
<p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p>
<p>示例 1：</p>
`,readingTime:{minutes:6.54,words:1961},title:"二分查找法？binary-search-02-leetcode 34. 在排序数组中查找元素的第一个和最后一个位置",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852.html-CdQFFhbH.js"),__vite__mapDeps([414,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>首先二分查找法的简单变化，查找某个值的“左边界”或“右边界”。</p>
<p>判断一个值是否是数组中第一个大于/小于目标的数</p>
<p>这个题目其实也很好的说明，数组并不需要是单调有序也可以使用二分法。</p>
<h1>852. 山脉数组的峰顶索引</h1>
<p>给定一个长度为 n 的整数 山脉 数组 arr ，其中的值递增到一个 峰值元素 然后递减。</p>
<p>返回峰值元素的下标。</p>
<p>你必须设计并实现时间复杂度为 O(log(n)) 的解决方案。</p>
`,readingTime:{minutes:6.46,words:1939},title:"二分查找法？binary-search-02-leetcode 852. 山脉数组的峰顶索引",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875.html-Cfkwy_kA.js"),__vite__mapDeps([415,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法在某个值的范围内，寻找<strong>最小/最大满足条件的值</strong>的场景。</p>
<h1>875. 爱吃香蕉的珂珂</h1>
<p>珂珂喜欢吃香蕉。这里有 n 堆香蕉，第 i 堆中有 piles[i] 根香蕉。</p>
<p>警卫已经离开了，将在 h 小时后回来。</p>
<p>珂珂可以决定她吃香蕉的速度 k （单位：根/小时）。</p>
<p>每个小时，她将会选择一堆香蕉，从中吃掉 k 根。如果这堆香蕉少于 k 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。</p>`,readingTime:{minutes:5.71,words:1712},title:"二分查找法？binary-search-02-leetcode 875. 爱吃香蕉的珂珂",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011.html-IMD9N3oK.js"),__vite__mapDeps([416,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法在某个值的范围内，寻找<strong>最小/最大满足条件的值</strong>的场景。</p>
<h1>1011. 在 D 天内送达包裹的能力</h1>
<p>传送带上的包裹必须在 days 天内从一个港口运送到另一个港口。</p>
<p>传送带上的第 i 个包裹的重量为 weights[i]。</p>
<p>每一天，我们都会按给出重量（weights）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p>
<p>返回能在 days 天内将传送带上的所有包裹送达的船的最低运载能力。</p>`,readingTime:{minutes:5.85,words:1756},title:"二分查找法？binary-search-02-leetcode 1011. 在 D 天内送达包裹的能力",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033.html-CMKpIrA4.js"),__vite__mapDeps([417,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法当数组不再严格递增，但仍保有一定规律，可以通过<strong>二分定位区间</strong></p>
<h1>33. 搜索旋转排序数组</h1>
<p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p>
<p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。</p>`,readingTime:{minutes:5.94,words:1781},title:"二分查找法？binary-search-02-leetcode 033. 搜索旋转排序数组 search-in-rotated-sorted-array",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153.html-CgkGwfZp.js"),__vite__mapDeps([418,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法当数组不再严格递增，但仍保有一定规律，可以通过<strong>二分定位区间</strong></p>
<h1>153. 寻找旋转排序数组中的最小值</h1>
<p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。</p>
<p>例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：<br>
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]<br>
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]<br>
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。</p>`,readingTime:{minutes:4.4,words:1321},title:"二分查找法？binary-search-02-leetcode 153. 寻找旋转排序数组中的最小值",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154.html-DMAxEMjk.js"),__vite__mapDeps([419,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法当数组不再严格递增，但仍保有一定规律，可以通过<strong>二分定位区间</strong></p>
<h1>154. 寻找旋转排序数组中的最小值 II</h1>
<p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：<br>
若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]<br>
若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]<br>
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。</p>`,readingTime:{minutes:3.72,words:1115},title:"二分查找法？binary-search-02-leetcode 154. 寻找旋转排序数组中的最小值 II",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4.html-D5m371Ow.js"),__vite__mapDeps([420,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的二分查找算法力扣实战。</p>
<p>我们来看一下二分法当数组不再严格递增，但仍保有一定规律，可以通过<strong>二分定位区间</strong></p>
<h1>T4 寻找两个正序数组的中位数 median-of-two-sorted-arrays</h1>
<p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</p>
<p>请你找出并返回这两个正序数组的 中位数 。</p>
<p>算法的时间复杂度应该为 O(log (m+n)) 。</p>
<p>示例 1：</p>
<p>输入：nums1 = [1,3], nums2 = [2]<br>
输出：2.00000<br>
解释：合并数组 = [1,2,3] ，中位数 2<br>
示例 2：</p>`,readingTime:{minutes:5.38,words:1614},title:"二分查找法？binary-search-02-leetcode T4 寻找两个正序数组的中位数 median-of-two-sorted-arrays",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit.html-Da7MxBHg.js"),__vite__mapDeps([421,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","binary-search","sf"],excerpt:`<figure><img src="https://p6-tt.byteimg.com/origin/pgc-image/e49f32c71346427b91ea575b9788a78a?from=pc" alt="思维导图" tabindex="0" loading="lazy"><figcaption>思维导图</figcaption></figure>
<h1>顺序查找</h1>
<p>如果让你在一堆书架上找到自己想要的书，你会怎么找呢？</p>
<p>实际上最简单最粗暴的方式就是一本一本的看过去。</p>
<p>这个用计算机实现就对应着顺序查找。</p>
<h2>概念</h2>
<p>顺序查找适合于存储结构为顺序存储或链接存储的线性表。</p>`,readingTime:{minutes:6.65,words:1996},title:"java 如何实现 binary search 二分查找法？",type:"article"}}],["/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html-CZH1LgU_.js"),__vite__mapDeps([422,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","search","array","data-struct","ternary-search"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组密切相关的三分查找算法。</p>
<h2>主要知识</h2>
<p>三分查找算法需要拆分下面几个部分：</p>
<ol>
<li>
<p>入门介绍</p>
</li>
<li>
<p>题目练习（按照算法思想分类）-- 实际有哪些应用场景？可以解决哪些实际的问题</p>
</li>
<li>
<p>和已有知识的关系，比如对比二分查找</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<h1>三分查找介绍</h1>
<h2>🔍 什么是三分查找（Ternary Search）？</h2>`,readingTime:{minutes:5.53,words:1658},title:"三分查找法 Ternary-search-01-基本概念介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html-CI_p_xFp.js"),__vite__mapDeps([423,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:5.28,words:1584},title:"leetcode sort 排序-00-整体概览介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro.html-D-wk2sHs.js"),__vite__mapDeps([424,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.59,words:1377},title:"leetcode sort 排序-01-bubbleSort 冒泡排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912.html-dyv-34Vy.js"),__vite__mapDeps([425,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","leetcode","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:14.04,words:4212},title:"leetcode sort 排序-02-冒泡排序力扣 912. 排序数组",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html-D9TPd_y1.js"),__vite__mapDeps([426,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.66,words:1097},title:"leetcode sort 排序-02-selectSort 选择排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html-BKlHuX-q.js"),__vite__mapDeps([427,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.81,words:1143},title:"leetcode sort 排序-03-insertSort 插入排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro.html-CTF8l7xo.js"),__vite__mapDeps([428,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.8,words:1141},title:"leetcode sort 排序-04-mergeSort 归并排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro.html-B7JdYQKC.js"),__vite__mapDeps([429,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.61,words:1384},title:"leetcode sort 排序-04-quickSort 快速排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html-BHbwOyw8.js"),__vite__mapDeps([430,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.77,words:1130},title:"leetcode sort 排序-06-shellSort 希尔排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro.html-DgRyAkGM.js"),__vite__mapDeps([431,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.09,words:1227},title:"leetcode sort 排序-07-heapSort 堆排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro.html-BlxNdtqP.js"),__vite__mapDeps([432,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:4.99,words:1498},title:"leetcode sort 排序-08-countingSort 计数排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75.html-C0VH7JPi.js"),__vite__mapDeps([433,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.69,words:1108},title:"leetcode sort 排序-08-countingSort 计数排序 T75 颜色分类",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242.html-Yeajo7sN.js"),__vite__mapDeps([434,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:5.01,words:1503},title:"leetcode sort 排序-08-countingSort 计数排序 242. 有效的字母异位词与 JIT 编译的预热机制",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299.html-CveANPLy.js"),__vite__mapDeps([435,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.25,words:976},title:"leetcode sort 排序-08-countingSort 计数排序 299. 猜数字游戏",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383.html-B1TuaFX6.js"),__vite__mapDeps([436,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:2.2,words:659},title:"leetcode sort 排序-08-countingSort 计数排序 383. 赎金信",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389.html-1VLBWVO9.js"),__vite__mapDeps([437,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:2.35,words:704},title:"leetcode sort 排序-08-countingSort 计数排序 389. 找不同",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085.html-B1BcS4u3.js"),__vite__mapDeps([438,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:2.92,words:875},title:"leetcode sort 排序-08-countingSort 计数排序 2085. 统计出现过一次的公共字符串",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro.html-CPSYUSx7.js"),__vite__mapDeps([439,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.98,words:1194},title:"leetcode sort 排序-09-bucketSort 桶排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451.html-BVABe7fi.js"),__vite__mapDeps([440,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:6.43,words:1929},title:"leetcode sort 排序-09-bucket sort 桶排序 451. 根据字符出现频率排序",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164.html-BTx4xhCa.js"),__vite__mapDeps([441,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:5.69,words:1706},title:"leetcode sort 排序-09-bucket sort 164. 最大间距",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro.html-DVH8YlVK.js"),__vite__mapDeps([442,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:3.61,words:1083},title:"leetcode sort 排序-10-radixSort 基数排序入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164.html-D4FDYZyd.js"),__vite__mapDeps([443,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","sort","sf"],excerpt:`
<p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p>
<p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p>`,readingTime:{minutes:9.11,words:2733},title:"leetcode sort 排序-10-radixSort 基数排序力扣 T164. 最大间距",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro.html-BzmC11mb.js"),__vite__mapDeps([444,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下栈。</p>
<h1>chat</h1>
<h2>详细介绍一下力扣数据结构之栈</h2>
<p>栈（Stack）是 LeetCode 中的高频数据结构之一，常用于括号匹配、表达式求值、单调栈、深度优先搜索等题型。</p>
<p>它具有**先进后出（LIFO）**的特点，操作简单、用途广泛。</p>
<hr>
<h2>🧱 一、栈的基本概念</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>操作方式</td>
<td>先进后出（LIFO）</td>
</tr>
<tr>
<td>主要操作</td>
<td><code>push</code>（压栈）、<code>pop</code>（弹栈）、<code>peek</code>（栈顶）、<code>isEmpty</code></td>
</tr>
<tr>
<td>常见实现</td>
<td>数组、链表、双端队列</td>
</tr>
</tbody>
</table>`,readingTime:{minutes:3.97,words:1192},title:"算法篇专题之栈 stack 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html-eKr-Kx6R.js"),__vite__mapDeps([445,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下有效的括号</p>
<h1>栈专题</h1>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html" target="_blank" rel="noopener noreferrer">LC20. 有效的括号 valid-parentheses</a></p>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html" target="_blank" rel="noopener noreferrer">LC32. 最长有效括号 longest-valid-parentheses</a></p>`,readingTime:{minutes:2.26,words:677},title:"算法篇专题之栈 stack 02-LC20. 有效的括号 valid-parentheses",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack.html-BjoEbuSj.js"),__vite__mapDeps([446,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最小栈</p>
<h1>栈专题</h1>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html" target="_blank" rel="noopener noreferrer">LC20. 有效的括号 valid-parentheses</a></p>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html" target="_blank" rel="noopener noreferrer">LC32. 最长有效括号 longest-valid-parentheses</a></p>`,readingTime:{minutes:4.36,words:1307},title:"算法篇专题之栈 stack 03-LC155. 最小栈 min-stack",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string.html-ODNwwoHO.js"),__vite__mapDeps([447,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最小栈</p>
<h1>栈专题</h1>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html" target="_blank" rel="noopener noreferrer">LC20. 有效的括号 valid-parentheses</a></p>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html" target="_blank" rel="noopener noreferrer">LC32. 最长有效括号 longest-valid-parentheses</a></p>`,readingTime:{minutes:5.43,words:1629},title:"算法篇专题之栈 stack 03-LC394. 字符串解码 decode-string",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures.html-B8TtVJiG.js"),__vite__mapDeps([448,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最小栈</p>
<h1>栈专题</h1>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html" target="_blank" rel="noopener noreferrer">LC20. 有效的括号 valid-parentheses</a></p>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html" target="_blank" rel="noopener noreferrer">LC32. 最长有效括号 longest-valid-parentheses</a></p>`,readingTime:{minutes:4.84,words:1452},title:"算法篇专题之栈 stack 03-LC739. 每日温度 daily-temperatures",type:"article"}}],["/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram.html-D6isoQA-.js"),__vite__mapDeps([449,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","stack","top100","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下最小栈</p>
<h1>栈专题</h1>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html" target="_blank" rel="noopener noreferrer">LC20. 有效的括号 valid-parentheses</a></p>
<p><a href="https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html" target="_blank" rel="noopener noreferrer">LC32. 最长有效括号 longest-valid-parentheses</a></p>`,readingTime:{minutes:6.24,words:1873},title:"算法篇专题之栈 stack 03-LC84. 柱状图中最大的矩形 largest-rectangle-in-histogram",type:"article"}}],["/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-01-BF.html",{loader:()=>h(()=>import("./2019-03-11-algorithm-string-match-01-BF.html-DVUkkkRE.js"),__vite__mapDeps([450,1])),meta:{date:15513984e5,localizedDate:"2019年3月1日",category:["Althgorim"],tag:["algorithm","sf"],excerpt:`
<p>假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？</p>
<h1>暴力匹配算法</h1>
<p>首先，先理清楚了暴力匹配算法的流程及内在的逻辑：</p>
<p>如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:2.34,words:701},title:"字符串匹配-01-BF 暴力匹配算法",type:"article"}}],["/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-02-KMP.html",{loader:()=>h(()=>import("./2019-03-11-algorithm-string-match-02-KMP.html-CPbWPdGJ.js"),__vite__mapDeps([451,1])),meta:{date:15513984e5,localizedDate:"2019年3月1日",category:["Althgorim"],tag:["algorithm","sf"],excerpt:`
<h2>定义</h2>
<p>Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法。</p>
<h2>算法流程</h2>
<p>下面先直接给出KMP的算法流程（如果感到一点点不适，没关系，坚持下，稍后会有具体步骤及解释，越往后看越会柳暗花明☺）：</p>
<p>假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. 换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值（next 数组的求解会在下文的3.3.3节中详细阐述），即移动的实际位数为：j - next[j]，且此值大于等于1。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,readingTime:{minutes:10.29,words:3088},title:"字符串匹配-KMP 算法",type:"article"}}],["/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html-kWVxrFtr.js"),__vite__mapDeps([452,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","string","sliding-window","substring","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.47,words:1341},title:"leetcode 数组专题之子串 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239.html-DCloWbOt.js"),__vite__mapDeps([453,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","string","sliding-window","substring","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.91,words:1774},title:"leetcode 数组专题之子串 LC239. 滑动窗口最大值",type:"article"}}],["/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560.html-BYUWUYRa.js"),__vite__mapDeps([454,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","string","sliding-window","substring","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.97,words:1190},title:"leetcode 数组专题之子串 LC560 和为 K 的子数组",type:"article"}}],["/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html-D9yChQgy.js"),__vite__mapDeps([455,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","string","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.66,words:1397},title:"leetcode 基础篇专题之字符串 string 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro.html-M3Vqxdb-.js"),__vite__mapDeps([456,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","string-matching","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.89,words:1468},title:"leetcode 基础篇专题之字符串匹配 string-matching 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro.html-BWHfIHLd.js"),__vite__mapDeps([457,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.47,words:1340},title:"算法篇专题之树 Tree 01-入门介绍",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102.html-B80qHaab.js"),__vite__mapDeps([458,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.26,words:678},title:"算法篇专题之树 Tree 02-LC102 二叉树的层序遍历 binary-tree-level-order-traversal",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104.html-DJW2v3rd.js"),__vite__mapDeps([459,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.86,words:559},title:"算法篇专题之树 Tree 02-LC104. 二叉树的最大深度  maximum-depth-of-binary-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226.html-MwBhThDm.js"),__vite__mapDeps([460,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.4,words:1319},title:"算法篇专题之树 Tree 02-LC226. 翻转二叉树 invert-binary-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94.html-B7yhToTV.js"),__vite__mapDeps([461,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:1.76,words:527},title:"算法篇专题之树 Tree 02-94. 二叉树的中序遍历 binary-tree-inorder-traversal",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101.html-C2XwduWK.js"),__vite__mapDeps([462,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.74,words:822},title:"算法篇专题之树 Tree 02-LC101. 对称二叉树 symmetric-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543.html-CBkY_mA_.js"),__vite__mapDeps([463,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.15,words:646},title:"算法篇专题之树 Tree 02-LC543. 二叉树的直径 diameter-of-binary-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108.html-fHAunw-J.js"),__vite__mapDeps([464,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.21,words:964},title:"算法篇专题之树 Tree 02-LC108. 将有序数组转换为二叉搜索树 convert-sorted-array-to-binary-search-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98.html-BKLl2Nr3.js"),__vite__mapDeps([465,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.58,words:1075},title:"算法篇专题之树 Tree 02-LC98. 验证二叉搜索树 validate-binary-search-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230.html-DilwCpCe.js"),__vite__mapDeps([466,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.34,words:1001},title:"算法篇专题之树 Tree 02-LC230. 二叉搜索树中第 K 小的元素 kth-smallest-element-in-a-bst",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199.html-DF0Ik3iq.js"),__vite__mapDeps([467,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:2.43,words:729},title:"算法篇专题之树 Tree 02-LC199. 二叉树的右视图 binary-tree-right-side-view",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114.html-BmjS6u0V.js"),__vite__mapDeps([468,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.18,words:1255},title:"算法篇专题之树 Tree 02-LC114. 二叉树展开为链表 flatten-binary-tree-to-linked-list",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105.html-DSW5qOcO.js"),__vite__mapDeps([469,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:5.31,words:1593},title:"算法篇专题之树 Tree 02-LC105. 从前序与中序遍历序列构造二叉树 construct-binary-tree-from-preorder-and-inorder-traversal",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437.html-BRU9YxqT.js"),__vite__mapDeps([470,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.91,words:1173},title:"算法篇专题之树 Tree 02-LC437. 路径总和 III path-sum-iii",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124.html-CXnueGW7.js"),__vite__mapDeps([471,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.26,words:1278},title:"算法篇专题之树 Tree 02-LC124. 二叉树中的最大路径和 binary-tree-maximum-path-sum",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html-D3lsx0Nj.js"),__vite__mapDeps([472,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:4.3,words:1291},title:"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree",type:"article"}}],["/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro.html",{loader:()=>h(()=>import("./2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro.html-HDu1nvUn.js"),__vite__mapDeps([473,1])),meta:{date:15915744e5,localizedDate:"2020年6月8日",category:["Algorithm"],tag:["algorithm","data-struct","topics","leetcode","fenwick-tree","sf"],excerpt:`
<p>大家好，我是老马。</p>
<p>今天我们一起来学习一下数组这种数据结构。</p>
<h2>主要知识</h2>
<p>数组需要拆分下面几个部分：</p>
<ol>
<li>
<p>理论介绍</p>
</li>
<li>
<p>源码分析</p>
</li>
<li>
<p>数据结构实现？</p>
</li>
<li>
<p>题目练习（按照算法思想分类）</p>
</li>
<li>
<p>梳理对应的 sdk 包</p>
</li>
<li>
<p>应用实战</p>
</li>
</ol>
<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>
<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>`,readingTime:{minutes:3.88,words:1165},title:"进阶数据结构篇专题之树状数组 fenwick-tree 01-入门介绍",type:"article"}}],["/404.html",{loader:()=>h(()=>import("./404.html-6Mp5rMQH.js"),__vite__mapDeps([474,1])),meta:{title:""}}],["/posts/algorithm/",{loader:()=>h(()=>import("./index.html-CFA8rZHF.js"),__vite__mapDeps([475,1])),meta:{title:"Algorithm"}}],["/posts/",{loader:()=>h(()=>import("./index.html-C21NMNd_.js"),__vite__mapDeps([476,1])),meta:{title:"Posts"}}],["/posts/data-struct/",{loader:()=>h(()=>import("./index.html-BLiJOWB2.js"),__vite__mapDeps([477,1])),meta:{title:"Data Struct"}}],["/posts/algorithm/compress/",{loader:()=>h(()=>import("./index.html-PSgFZhid.js"),__vite__mapDeps([478,1])),meta:{title:"Compress"}}],["/posts/algorithm/cropto/",{loader:()=>h(()=>import("./index.html-BKdKB8q_.js"),__vite__mapDeps([479,1])),meta:{title:"Cropto"}}],["/posts/algorithm/hash/",{loader:()=>h(()=>import("./index.html-DNGB9Lwl.js"),__vite__mapDeps([480,1])),meta:{title:"Hash"}}],["/posts/algorithm/load-balance/",{loader:()=>h(()=>import("./index.html-DExGYxhw.js"),__vite__mapDeps([481,1])),meta:{title:"Load Balance"}}],["/posts/algorithm/search/",{loader:()=>h(()=>import("./index.html-2gZNMKgw.js"),__vite__mapDeps([482,1])),meta:{title:"Search"}}],["/posts/leetcode/datastruct/",{loader:()=>h(()=>import("./index.html-vEbov-yH.js"),__vite__mapDeps([483,1])),meta:{title:"Datastruct"}}],["/posts/leetcode/",{loader:()=>h(()=>import("./index.html-C63dCdXz.js"),__vite__mapDeps([484,1])),meta:{title:"Leetcode"}}],["/posts/leetcode/history1/",{loader:()=>h(()=>import("./index.html-fK06ohYi.js"),__vite__mapDeps([485,1])),meta:{title:"History1"}}],["/posts/leetcode/history2/",{loader:()=>h(()=>import("./index.html-CD1xwG0f.js"),__vite__mapDeps([486,1])),meta:{title:"History2"}}],["/posts/leetcode/index/",{loader:()=>h(()=>import("./index.html-P_k3fYy9.js"),__vite__mapDeps([487,1])),meta:{title:"Index"}}],["/posts/leetcode/leetcode-75/",{loader:()=>h(()=>import("./index.html-CKwFws96.js"),__vite__mapDeps([488,1])),meta:{title:"Leetcode 75"}}],["/posts/leetcode/sorts/",{loader:()=>h(()=>import("./index.html-BveelRNI.js"),__vite__mapDeps([489,1])),meta:{title:"Sorts"}}],["/posts/leetcode/topinterview-150/",{loader:()=>h(()=>import("./index.html-Cq-XFvaT.js"),__vite__mapDeps([490,1])),meta:{title:"Topinterview 150"}}],["/posts/leetcode/topliked-100/backtracking/",{loader:()=>h(()=>import("./index.html-DDnXDiv2.js"),__vite__mapDeps([491,1])),meta:{title:"Backtracking"}}],["/posts/leetcode/topliked-100/",{loader:()=>h(()=>import("./index.html-0ZTHt8m1.js"),__vite__mapDeps([492,1])),meta:{title:"Topliked 100"}}],["/posts/leetcode/topliked-100/basic/",{loader:()=>h(()=>import("./index.html-DzK1YLbB.js"),__vite__mapDeps([493,1])),meta:{title:"Basic"}}],["/posts/leetcode/topliked-100/array/",{loader:()=>h(()=>import("./index.html-CJegDDUY.js"),__vite__mapDeps([494,1])),meta:{title:"Array"}}],["/posts/leetcode/topliked-100/bfs/",{loader:()=>h(()=>import("./index.html-BB8oy9il.js"),__vite__mapDeps([495,1])),meta:{title:"Bfs"}}],["/posts/leetcode/topliked-100/bit-operation/",{loader:()=>h(()=>import("./index.html-I46P9eNR.js"),__vite__mapDeps([496,1])),meta:{title:"Bit Operation"}}],["/posts/leetcode/topliked-100/data-struct/",{loader:()=>h(()=>import("./index.html-BZqiyqCO.js"),__vite__mapDeps([497,1])),meta:{title:"Data Struct"}}],["/posts/leetcode/topliked-100/dfs/",{loader:()=>h(()=>import("./index.html-BSxoeZWB.js"),__vite__mapDeps([498,1])),meta:{title:"Dfs"}}],["/posts/leetcode/topliked-100/divide-and-conquer/",{loader:()=>h(()=>import("./index.html-yQwvDz4N.js"),__vite__mapDeps([499,1])),meta:{title:"Divide and Conquer"}}],["/posts/leetcode/topliked-100/dp/",{loader:()=>h(()=>import("./index.html-DF3879w0.js"),__vite__mapDeps([500,1])),meta:{title:"Dp"}}],["/posts/leetcode/topliked-100/graph/",{loader:()=>h(()=>import("./index.html-SjUyu2F7.js"),__vite__mapDeps([501,1])),meta:{title:"Graph"}}],["/posts/leetcode/topliked-100/greedy/",{loader:()=>h(()=>import("./index.html-CyhOGouU.js"),__vite__mapDeps([502,1])),meta:{title:"Greedy"}}],["/posts/leetcode/topliked-100/hash/",{loader:()=>h(()=>import("./index.html-Hunixcml.js"),__vite__mapDeps([503,1])),meta:{title:"Hash"}}],["/posts/leetcode/topliked-100/heap/",{loader:()=>h(()=>import("./index.html--82XTVXd.js"),__vite__mapDeps([504,1])),meta:{title:"Heap"}}],["/posts/leetcode/topliked-100/list/",{loader:()=>h(()=>import("./index.html-pBhmQCY7.js"),__vite__mapDeps([505,1])),meta:{title:"List"}}],["/posts/leetcode/topliked-100/offline-query-opt/",{loader:()=>h(()=>import("./index.html-QebNf92B.js"),__vite__mapDeps([506,1])),meta:{title:"Offline Query Opt"}}],["/posts/leetcode/topliked-100/recursive/",{loader:()=>h(()=>import("./index.html-C-6BpAow.js"),__vite__mapDeps([507,1])),meta:{title:"Recursive"}}],["/posts/leetcode/topliked-100/search/",{loader:()=>h(()=>import("./index.html-Dg949YDg.js"),__vite__mapDeps([508,1])),meta:{title:"Search"}}],["/posts/leetcode/topliked-100/sort/",{loader:()=>h(()=>import("./index.html-D4MLvQez.js"),__vite__mapDeps([509,1])),meta:{title:"Sort"}}],["/posts/leetcode/topliked-100/stack/",{loader:()=>h(()=>import("./index.html-BhdK_prW.js"),__vite__mapDeps([510,1])),meta:{title:"Stack"}}],["/posts/leetcode/topliked-100/string/",{loader:()=>h(()=>import("./index.html-BbVxnbaw.js"),__vite__mapDeps([511,1])),meta:{title:"String"}}],["/posts/leetcode/topliked-100/tree/",{loader:()=>h(()=>import("./index.html-D73OjpCY.js"),__vite__mapDeps([512,1])),meta:{title:"Tree"}}],["/category/",{loader:()=>h(()=>import("./index.html-yJGoLmiT.js"),__vite__mapDeps([513,1])),meta:{title:"分类",index:!1}}],["/category/algorithm/",{loader:()=>h(()=>import("./index.html-9PurLXH9.js"),__vite__mapDeps([514,1])),meta:{title:"Algorithm 分类",index:!1}}],["/category/althgorim/",{loader:()=>h(()=>import("./index.html-xI-1ydTv.js"),__vite__mapDeps([515,1])),meta:{title:"Althgorim 分类",index:!1}}],["/category/data-struct/",{loader:()=>h(()=>import("./index.html-DryxXH1i.js"),__vite__mapDeps([516,1])),meta:{title:"Data Struct 分类",index:!1}}],["/category/data-struct/",{loader:()=>h(()=>import("./index.html-DryxXH1i.js"),__vite__mapDeps([516,1])),meta:{title:"Data-Struct 分类",index:!1}}],["/category/index/",{loader:()=>h(()=>import("./index.html-C0UrzVex.js"),__vite__mapDeps([517,1])),meta:{title:"Index 分类",index:!1}}],["/category/leetcode-75/",{loader:()=>h(()=>import("./index.html-CI6v_y8y.js"),__vite__mapDeps([518,1])),meta:{title:"Leetcode-75 分类",index:!1}}],["/category/topinterview150/",{loader:()=>h(()=>import("./index.html-BuAzvDH9.js"),__vite__mapDeps([519,1])),meta:{title:"TopInterview150 分类",index:!1}}],["/tag/",{loader:()=>h(()=>import("./index.html-uqetNRKp.js"),__vite__mapDeps([520,1])),meta:{title:"标签",index:!1}}],["/tag/algorithm/",{loader:()=>h(()=>import("./index.html-DAGgBcI4.js"),__vite__mapDeps([521,1])),meta:{title:"标签: algorithm",index:!1}}],["/tag/althgorim/",{loader:()=>h(()=>import("./index.html-DdTFe1T1.js"),__vite__mapDeps([522,1])),meta:{title:"标签: althgorim",index:!1}}],["/tag/sh/",{loader:()=>h(()=>import("./index.html-SBZlp96z.js"),__vite__mapDeps([523,1])),meta:{title:"标签: sh",index:!1}}],["/tag/distributed/",{loader:()=>h(()=>import("./index.html-D8fumbPY.js"),__vite__mapDeps([524,1])),meta:{title:"标签: distributed",index:!1}}],["/tag/paper/",{loader:()=>h(()=>import("./index.html-CrEcVHlF.js"),__vite__mapDeps([525,1])),meta:{title:"标签: paper",index:!1}}],["/tag/todo/",{loader:()=>h(()=>import("./index.html-vJkWgPL5.js"),__vite__mapDeps([526,1])),meta:{title:"标签: TODO",index:!1}}],["/tag/data-struct/",{loader:()=>h(()=>import("./index.html-TJyL8vi1.js"),__vite__mapDeps([527,1])),meta:{title:"标签: data struct",index:!1}}],["/tag/data-struct/",{loader:()=>h(()=>import("./index.html-TJyL8vi1.js"),__vite__mapDeps([527,1])),meta:{title:"标签: data-struct",index:!1}}],["/tag/compress/",{loader:()=>h(()=>import("./index.html-CBOJgn_w.js"),__vite__mapDeps([528,1])),meta:{title:"标签: compress",index:!1}}],["/tag/bitmap/",{loader:()=>h(()=>import("./index.html-Co4-uzmn.js"),__vite__mapDeps([529,1])),meta:{title:"标签: bitmap",index:!1}}],["/tag/croptograph/",{loader:()=>h(()=>import("./index.html-BwMl7ljG.js"),__vite__mapDeps([530,1])),meta:{title:"标签: croptograph",index:!1}}],["/tag/secret/",{loader:()=>h(()=>import("./index.html-DcasrmxA.js"),__vite__mapDeps([531,1])),meta:{title:"标签: secret",index:!1}}],["/tag/hash/",{loader:()=>h(()=>import("./index.html-DORiT0D5.js"),__vite__mapDeps([532,1])),meta:{title:"标签: hash",index:!1}}],["/tag/hashing/",{loader:()=>h(()=>import("./index.html-BVyE8Crl.js"),__vite__mapDeps([533,1])),meta:{title:"标签: hashing",index:!1}}],["/tag/tree/",{loader:()=>h(()=>import("./index.html-BcGpVgGv.js"),__vite__mapDeps([534,1])),meta:{title:"标签: tree",index:!1}}],["/tag/load-balance/",{loader:()=>h(()=>import("./index.html-DxDMLFLC.js"),__vite__mapDeps([535,1])),meta:{title:"标签: load-balance",index:!1}}],["/tag/search/",{loader:()=>h(()=>import("./index.html-BhoVGg4d.js"),__vite__mapDeps([536,1])),meta:{title:"标签: search",index:!1}}],["/tag/index/",{loader:()=>h(()=>import("./index.html-C-dUwJmX.js"),__vite__mapDeps([537,1])),meta:{title:"标签: index",index:!1}}],["/tag/java/",{loader:()=>h(()=>import("./index.html-RQEXpYVA.js"),__vite__mapDeps([538,1])),meta:{title:"标签: java",index:!1}}],["/tag/map/",{loader:()=>h(()=>import("./index.html-CQOcDMbZ.js"),__vite__mapDeps([539,1])),meta:{title:"标签: map",index:!1}}],["/tag/bit/",{loader:()=>h(()=>import("./index.html-DmdYWdzO.js"),__vite__mapDeps([540,1])),meta:{title:"标签: bit",index:!1}}],["/tag/overview/",{loader:()=>h(()=>import("./index.html-CBJKKKRu.js"),__vite__mapDeps([541,1])),meta:{title:"标签: overview",index:!1}}],["/tag/topics/",{loader:()=>h(()=>import("./index.html-DuTLIYFL.js"),__vite__mapDeps([542,1])),meta:{title:"标签: topics",index:!1}}],["/tag/source-code/",{loader:()=>h(()=>import("./index.html-BxZCxocb.js"),__vite__mapDeps([543,1])),meta:{title:"标签: source-code",index:!1}}],["/tag/jdk/",{loader:()=>h(()=>import("./index.html-D9xKSiBW.js"),__vite__mapDeps([544,1])),meta:{title:"标签: jdk",index:!1}}],["/tag/cache/",{loader:()=>h(()=>import("./index.html-IM-WjtCH.js"),__vite__mapDeps([545,1])),meta:{title:"标签: cache",index:!1}}],["/tag/list/",{loader:()=>h(()=>import("./index.html-eS5hXLju.js"),__vite__mapDeps([546,1])),meta:{title:"标签: list",index:!1}}],["/tag/dag/",{loader:()=>h(()=>import("./index.html-DB0jzabT.js"),__vite__mapDeps([547,1])),meta:{title:"标签: dag",index:!1}}],["/tag/schedule/",{loader:()=>h(()=>import("./index.html-CtHRsddq.js"),__vite__mapDeps([548,1])),meta:{title:"标签: schedule",index:!1}}],["/tag/graph/",{loader:()=>h(()=>import("./index.html-CTox470q.js"),__vite__mapDeps([549,1])),meta:{title:"标签: graph",index:!1}}],["/tag/sf/",{loader:()=>h(()=>import("./index.html-Ch_ODAKU.js"),__vite__mapDeps([550,1])),meta:{title:"标签: sf",index:!1}}],["/tag/mysql/",{loader:()=>h(()=>import("./index.html-Dthwzh_4.js"),__vite__mapDeps([551,1])),meta:{title:"标签: mysql",index:!1}}],["/tag/leetcode/",{loader:()=>h(()=>import("./index.html-CkGaQZRs.js"),__vite__mapDeps([552,1])),meta:{title:"标签: leetcode",index:!1}}],["/tag/dp/",{loader:()=>h(()=>import("./index.html-CkLBQ0IG.js"),__vite__mapDeps([553,1])),meta:{title:"标签: dp",index:!1}}],["/tag/algorithm/",{loader:()=>h(()=>import("./index.html-DAGgBcI4.js"),__vite__mapDeps([521,1])),meta:{title:"标签: Algorithm",index:!1}}],["/tag/backtrack/",{loader:()=>h(()=>import("./index.html-BMzpRi84.js"),__vite__mapDeps([554,1])),meta:{title:"标签: backtrack",index:!1}}],["/tag/binary-search/",{loader:()=>h(()=>import("./index.html-CfpQ6_Ic.js"),__vite__mapDeps([555,1])),meta:{title:"标签: binary-search",index:!1}}],["/tag/prefix-sum/",{loader:()=>h(()=>import("./index.html-CY83sEWe.js"),__vite__mapDeps([556,1])),meta:{title:"标签: prefix-sum",index:!1}}],["/tag/dynamic-programming/",{loader:()=>h(()=>import("./index.html-CR9dE8pk.js"),__vite__mapDeps([557,1])),meta:{title:"标签: dynamic-programming",index:!1}}],["/tag/greedy/",{loader:()=>h(()=>import("./index.html-DBz9GhQf.js"),__vite__mapDeps([558,1])),meta:{title:"标签: greedy",index:!1}}],["/tag/tips/",{loader:()=>h(()=>import("./index.html-TrUuWfsE.js"),__vite__mapDeps([559,1])),meta:{title:"标签: tips",index:!1}}],["/tag/backtracking/",{loader:()=>h(()=>import("./index.html-CjNcbDcD.js"),__vite__mapDeps([560,1])),meta:{title:"标签: backtracking",index:!1}}],["/tag/block-chain/",{loader:()=>h(()=>import("./index.html-Bg2QxUSp.js"),__vite__mapDeps([561,1])),meta:{title:"标签: block-chain",index:!1}}],["/tag/binary-tree/",{loader:()=>h(()=>import("./index.html-DGTSnKaw.js"),__vite__mapDeps([562,1])),meta:{title:"标签: binary-tree",index:!1}}],["/tag/stack/",{loader:()=>h(()=>import("./index.html-Bnc3yiTj.js"),__vite__mapDeps([563,1])),meta:{title:"标签: stack",index:!1}}],["/tag/math/",{loader:()=>h(()=>import("./index.html-0mmsdC8Z.js"),__vite__mapDeps([564,1])),meta:{title:"标签: math",index:!1}}],["/tag/dfs/",{loader:()=>h(()=>import("./index.html-DdWMn_Xp.js"),__vite__mapDeps([565,1])),meta:{title:"标签: dfs",index:!1}}],["/tag/bfs/",{loader:()=>h(()=>import("./index.html-But5yO4P.js"),__vite__mapDeps([566,1])),meta:{title:"标签: bfs",index:!1}}],["/tag/sort/",{loader:()=>h(()=>import("./index.html-CLZpJIw-.js"),__vite__mapDeps([567,1])),meta:{title:"标签: sort",index:!1}}],["/tag/leetcode-75/",{loader:()=>h(()=>import("./index.html-DEI2Kooh.js"),__vite__mapDeps([568,1])),meta:{title:"标签: Leetcode-75",index:!1}}],["/tag/string/",{loader:()=>h(()=>import("./index.html-r7h9pDYH.js"),__vite__mapDeps([569,1])),meta:{title:"标签: string",index:!1}}],["/tag/two-pointer/",{loader:()=>h(()=>import("./index.html-BRFxc150.js"),__vite__mapDeps([570,1])),meta:{title:"标签: two-pointer",index:!1}}],["/tag/sliding-window/",{loader:()=>h(()=>import("./index.html-BUY364wb.js"),__vite__mapDeps([571,1])),meta:{title:"标签: sliding-window",index:!1}}],["/tag/exchange-sorts/",{loader:()=>h(()=>import("./index.html-BFYcHkk5.js"),__vite__mapDeps([572,1])),meta:{title:"标签: exchange-sorts",index:!1}}],["/tag/topinterview150/",{loader:()=>h(()=>import("./index.html-C1R4tAzb.js"),__vite__mapDeps([573,1])),meta:{title:"标签: topInterview150",index:!1}}],["/tag/enumration/",{loader:()=>h(()=>import("./index.html-DzLgSV8M.js"),__vite__mapDeps([574,1])),meta:{title:"标签: enumration",index:!1}}],["/tag/simulation/",{loader:()=>h(()=>import("./index.html-CMFoQHWh.js"),__vite__mapDeps([575,1])),meta:{title:"标签: simulation",index:!1}}],["/tag/array/",{loader:()=>h(()=>import("./index.html-DYyr1zTd.js"),__vite__mapDeps([576,1])),meta:{title:"标签: array",index:!1}}],["/tag/sweep-line/",{loader:()=>h(()=>import("./index.html-_Ly7TuDV.js"),__vite__mapDeps([577,1])),meta:{title:"标签: sweep-line",index:!1}}],["/tag/top100/",{loader:()=>h(()=>import("./index.html-BZTZx94p.js"),__vite__mapDeps([578,1])),meta:{title:"标签: top100",index:!1}}],["/tag/difference-array/",{loader:()=>h(()=>import("./index.html-CeTSO6gx.js"),__vite__mapDeps([579,1])),meta:{title:"标签: difference-array",index:!1}}],["/tag/matrix/",{loader:()=>h(()=>import("./index.html-DoQ_hnfD.js"),__vite__mapDeps([580,1])),meta:{title:"标签: matrix",index:!1}}],["/tag/prefix-sum-matrix/",{loader:()=>h(()=>import("./index.html-TzVAO9hk.js"),__vite__mapDeps([581,1])),meta:{title:"标签: prefix-sum-matrix",index:!1}}],["/tag/traverse/",{loader:()=>h(()=>import("./index.html-tpCBPdQQ.js"),__vite__mapDeps([582,1])),meta:{title:"标签: traverse",index:!1}}],["/tag/bit-operator/",{loader:()=>h(()=>import("./index.html-DDsUhm8r.js"),__vite__mapDeps([583,1])),meta:{title:"标签: bit-operator",index:!1}}],["/tag/fenwick-tree/",{loader:()=>h(()=>import("./index.html-BpcsMvqk.js"),__vite__mapDeps([584,1])),meta:{title:"标签: fenwick-tree",index:!1}}],["/tag/queue/",{loader:()=>h(()=>import("./index.html-DkG7wG__.js"),__vite__mapDeps([585,1])),meta:{title:"标签: queue",index:!1}}],["/tag/segment-tree/",{loader:()=>h(()=>import("./index.html-Cnvf-CUC.js"),__vite__mapDeps([586,1])),meta:{title:"标签: segment-tree",index:!1}}],["/tag/suffix-array/",{loader:()=>h(()=>import("./index.html-BIBe0Rum.js"),__vite__mapDeps([587,1])),meta:{title:"标签: suffix-array",index:!1}}],["/tag/union-find-set/",{loader:()=>h(()=>import("./index.html-BA6A-cwa.js"),__vite__mapDeps([588,1])),meta:{title:"标签: union-find-set",index:!1}}],["/tag/counting/",{loader:()=>h(()=>import("./index.html-BSdexirO.js"),__vite__mapDeps([589,1])),meta:{title:"标签: counting",index:!1}}],["/tag/divide-and-conquer/",{loader:()=>h(()=>import("./index.html-DZCjoQvI.js"),__vite__mapDeps([590,1])),meta:{title:"标签: divide-and-conquer",index:!1}}],["/tag/ordered-set/",{loader:()=>h(()=>import("./index.html-CU9r4es4.js"),__vite__mapDeps([591,1])),meta:{title:"标签: ordered-set",index:!1}}],["/tag/rolling-hash/",{loader:()=>h(()=>import("./index.html-BrlcBwwD.js"),__vite__mapDeps([592,1])),meta:{title:"标签: rolling-hash",index:!1}}],["/tag/heap/",{loader:()=>h(()=>import("./index.html-jCgaVujb.js"),__vite__mapDeps([593,1])),meta:{title:"标签: heap",index:!1}}],["/tag/linkedlist/",{loader:()=>h(()=>import("./index.html-DhUbqCg-.js"),__vite__mapDeps([594,1])),meta:{title:"标签: linkedlist",index:!1}}],["/tag/offline-query-optimize/",{loader:()=>h(()=>import("./index.html-BLcRGAWt.js"),__vite__mapDeps([595,1])),meta:{title:"标签: offline-query-optimize",index:!1}}],["/tag/recursive/",{loader:()=>h(()=>import("./index.html-DReVOu-V.js"),__vite__mapDeps([596,1])),meta:{title:"标签: recursive",index:!1}}],["/tag/ternary-search/",{loader:()=>h(()=>import("./index.html-CatxwdiX.js"),__vite__mapDeps([597,1])),meta:{title:"标签: ternary-search",index:!1}}],["/tag/substring/",{loader:()=>h(()=>import("./index.html-B-UURI_i.js"),__vite__mapDeps([598,1])),meta:{title:"标签: substring",index:!1}}],["/tag/string-matching/",{loader:()=>h(()=>import("./index.html-w26DLykE.js"),__vite__mapDeps([599,1])),meta:{title:"标签: string-matching",index:!1}}],["/article/",{loader:()=>h(()=>import("./index.html-DJQ3b-3W.js"),__vite__mapDeps([600,1])),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>h(()=>import("./index.html-Cw8GzepL.js"),__vite__mapDeps([601,1])),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>h(()=>import("./index.html-DB3-zvVc.js"),__vite__mapDeps([602,1])),meta:{title:"时间轴",index:!1}}]]);/*!
  * vue-router v4.5.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const Rt=typeof document<"u";function Kc(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function Y2(e){return e.__esModule||e[Symbol.toStringTag]==="Module"||e.default&&Kc(e.default)}const ve=Object.assign;function or(e,l){const t={};for(const i in l){const n=l[i];t[i]=xl(n)?n.map(e):e(n)}return t}const bi=()=>{},xl=Array.isArray,Jc=/#/g,X2=/&/g,Z2=/\//g,eu=/=/g,lu=/\?/g,Qc=/\+/g,tu=/%5B/g,iu=/%5D/g,Yc=/%5E/g,nu=/%60/g,Xc=/%7B/g,ru=/%7C/g,Zc=/%7D/g,su=/%20/g;function ys(e){return encodeURI(""+e).replace(ru,"|").replace(tu,"[").replace(iu,"]")}function au(e){return ys(e).replace(Xc,"{").replace(Zc,"}").replace(Yc,"^")}function Or(e){return ys(e).replace(Qc,"%2B").replace(su,"+").replace(Jc,"%23").replace(X2,"%26").replace(nu,"`").replace(Xc,"{").replace(Zc,"}").replace(Yc,"^")}function ou(e){return Or(e).replace(eu,"%3D")}function cu(e){return ys(e).replace(Jc,"%23").replace(lu,"%3F")}function du(e){return e==null?"":cu(e).replace(Z2,"%2F")}function Di(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const hu=/\/$/,pu=e=>e.replace(hu,"");function cr(e,l,t="/"){let i,n={},r="",s="";const a=l.indexOf("#");let c=l.indexOf("?");return a<c&&a>=0&&(c=-1),c>-1&&(i=l.slice(0,c),r=l.slice(c+1,a>-1?a:l.length),n=e(r)),a>-1&&(i=i||l.slice(0,a),s=l.slice(a,l.length)),i=vu(i??l,t),{fullPath:i+(r&&"?")+r+s,path:i,query:n,hash:Di(s)}}function uu(e,l){const t=l.query?e(l.query):"";return l.path+(t&&"?")+t+(l.hash||"")}function Pa(e,l){return!l||!e.toLowerCase().startsWith(l.toLowerCase())?e:e.slice(l.length)||"/"}function gu(e,l,t){const i=l.matched.length-1,n=t.matched.length-1;return i>-1&&i===n&&Yt(l.matched[i],t.matched[n])&&ed(l.params,t.params)&&e(l.query)===e(t.query)&&l.hash===t.hash}function Yt(e,l){return(e.aliasOf||e)===(l.aliasOf||l)}function ed(e,l){if(Object.keys(e).length!==Object.keys(l).length)return!1;for(const t in e)if(!mu(e[t],l[t]))return!1;return!0}function mu(e,l){return xl(e)?ja(e,l):xl(l)?ja(l,e):e===l}function ja(e,l){return xl(l)?e.length===l.length&&e.every((t,i)=>t===l[i]):e.length===1&&e[0]===l}function vu(e,l){if(e.startsWith("/"))return e;if(!e)return l;const t=l.split("/"),i=e.split("/"),n=i[i.length-1];(n===".."||n===".")&&i.push("");let r=t.length-1,s,a;for(s=0;s<i.length;s++)if(a=i[s],a!==".")if(a==="..")r>1&&r--;else break;return t.slice(0,r).join("/")+"/"+i.slice(s).join("/")}const zl={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var Fi;(function(e){e.pop="pop",e.push="push"})(Fi||(Fi={}));var yi;(function(e){e.back="back",e.forward="forward",e.unknown=""})(yi||(yi={}));function ku(e){if(!e)if(Rt){const l=document.querySelector("base");e=l&&l.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),pu(e)}const fu=/^[^#]+#/;function bu(e,l){return e.replace(fu,"#")+l}function yu(e,l){const t=document.documentElement.getBoundingClientRect(),i=e.getBoundingClientRect();return{behavior:l.behavior,left:i.left-t.left-(l.left||0),top:i.top-t.top-(l.top||0)}}const Vn=()=>({left:window.scrollX,top:window.scrollY});function _u(e){let l;if("el"in e){const t=e.el,i=typeof t=="string"&&t.startsWith("#"),n=typeof t=="string"?i?document.getElementById(t.slice(1)):document.querySelector(t):t;if(!n)return;l=yu(n,e)}else l=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(l):window.scrollTo(l.left!=null?l.left:window.scrollX,l.top!=null?l.top:window.scrollY)}function Ra(e,l){return(history.state?history.state.position-l:-1)+e}const Pr=new Map;function xu(e,l){Pr.set(e,l)}function Lu(e){const l=Pr.get(e);return Pr.delete(e),l}let Au=()=>location.protocol+"//"+location.host;function ld(e,l){const{pathname:t,search:i,hash:n}=l,r=e.indexOf("#");if(r>-1){let a=n.includes(e.slice(r))?e.slice(r).length:1,c=n.slice(a);return c[0]!=="/"&&(c="/"+c),Pa(c,"")}return Pa(t,e)+i+n}function Eu(e,l,t,i){let n=[],r=[],s=null;const a=({state:g})=>{const m=ld(e,location),k=t.value,y=l.value;let x=0;if(g){if(t.value=m,l.value=g,s&&s===k){s=null;return}x=y?g.position-y.position:0}else i(m);n.forEach(E=>{E(t.value,k,{delta:x,type:Fi.pop,direction:x?x>0?yi.forward:yi.back:yi.unknown})})};function c(){s=t.value}function d(g){n.push(g);const m=()=>{const k=n.indexOf(g);k>-1&&n.splice(k,1)};return r.push(m),m}function p(){const{history:g}=window;g.state&&g.replaceState(ve({},g.state,{scroll:Vn()}),"")}function u(){for(const g of r)g();r=[],window.removeEventListener("popstate",a),window.removeEventListener("beforeunload",p)}return window.addEventListener("popstate",a),window.addEventListener("beforeunload",p,{passive:!0}),{pauseListeners:c,listen:d,destroy:u}}function Va(e,l,t,i=!1,n=!1){return{back:e,current:l,forward:t,replaced:i,position:window.history.length,scroll:n?Vn():null}}function wu(e){const{history:l,location:t}=window,i={value:ld(e,t)},n={value:l.state};n.value||r(i.value,{back:null,current:i.value,forward:null,position:l.length-1,replaced:!0,scroll:null},!0);function r(c,d,p){const u=e.indexOf("#"),g=u>-1?(t.host&&document.querySelector("base")?e:e.slice(u))+c:Au()+e+c;try{l[p?"replaceState":"pushState"](d,"",g),n.value=d}catch(m){console.error(m),t[p?"replace":"assign"](g)}}function s(c,d){const p=ve({},l.state,Va(n.value.back,c,n.value.forward,!0),d,{position:n.value.position});r(c,p,!0),i.value=c}function a(c,d){const p=ve({},n.value,l.state,{forward:c,scroll:Vn()});r(p.current,p,!0);const u=ve({},Va(i.value,c,null),{position:p.position+1},d);r(c,u,!1),i.value=c}return{location:i,state:n,push:a,replace:s}}function Tu(e){e=ku(e);const l=wu(e),t=Eu(e,l.state,l.location,l.replace);function i(r,s=!0){s||t.pauseListeners(),history.go(r)}const n=ve({location:"",base:e,go:i,createHref:bu.bind(null,e)},l,t);return Object.defineProperty(n,"location",{enumerable:!0,get:()=>l.location.value}),Object.defineProperty(n,"state",{enumerable:!0,get:()=>l.state.value}),n}function Cu(e){return typeof e=="string"||e&&typeof e=="object"}function td(e){return typeof e=="string"||typeof e=="symbol"}const id=Symbol("");var Ba;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(Ba||(Ba={}));function Xt(e,l){return ve(new Error,{type:e,[id]:!0},l)}function Vl(e,l){return e instanceof Error&&id in e&&(l==null||!!(e.type&l))}const za="[^/]+?",Du={sensitive:!1,strict:!1,start:!0,end:!0},Fu=/[.+*?^${}()[\]/\\]/g;function Su(e,l){const t=ve({},Du,l),i=[];let n=t.start?"^":"";const r=[];for(const d of e){const p=d.length?[]:[90];t.strict&&!d.length&&(n+="/");for(let u=0;u<d.length;u++){const g=d[u];let m=40+(t.sensitive?.25:0);if(g.type===0)u||(n+="/"),n+=g.value.replace(Fu,"\\$&"),m+=40;else if(g.type===1){const{value:k,repeatable:y,optional:x,regexp:E}=g;r.push({name:k,repeatable:y,optional:x});const _=E||za;if(_!==za){m+=10;try{new RegExp(`(${_})`)}catch(A){throw new Error(`Invalid custom RegExp for param "${k}" (${_}): `+A.message)}}let f=y?`((?:${_})(?:/(?:${_}))*)`:`(${_})`;u||(f=x&&d.length<2?`(?:/${f})`:"/"+f),x&&(f+="?"),n+=f,m+=20,x&&(m+=-8),y&&(m+=-20),_===".*"&&(m+=-50)}p.push(m)}i.push(p)}if(t.strict&&t.end){const d=i.length-1;i[d][i[d].length-1]+=.7000000000000001}t.strict||(n+="/?"),t.end?n+="$":t.strict&&!n.endsWith("/")&&(n+="(?:/|$)");const s=new RegExp(n,t.sensitive?"":"i");function a(d){const p=d.match(s),u={};if(!p)return null;for(let g=1;g<p.length;g++){const m=p[g]||"",k=r[g-1];u[k.name]=m&&k.repeatable?m.split("/"):m}return u}function c(d){let p="",u=!1;for(const g of e){(!u||!p.endsWith("/"))&&(p+="/"),u=!1;for(const m of g)if(m.type===0)p+=m.value;else if(m.type===1){const{value:k,repeatable:y,optional:x}=m,E=k in d?d[k]:"";if(xl(E)&&!y)throw new Error(`Provided param "${k}" is an array but it is not repeatable (* or + modifiers)`);const _=xl(E)?E.join("/"):E;if(!_)if(x)g.length<2&&(p.endsWith("/")?p=p.slice(0,-1):u=!0);else throw new Error(`Missing required param "${k}"`);p+=_}}return p||"/"}return{re:s,score:i,keys:r,parse:a,stringify:c}}function Iu(e,l){let t=0;for(;t<e.length&&t<l.length;){const i=l[t]-e[t];if(i)return i;t++}return e.length<l.length?e.length===1&&e[0]===80?-1:1:e.length>l.length?l.length===1&&l[0]===80?1:-1:0}function nd(e,l){let t=0;const i=e.score,n=l.score;for(;t<i.length&&t<n.length;){const r=Iu(i[t],n[t]);if(r)return r;t++}if(Math.abs(n.length-i.length)===1){if(qa(i))return 1;if(qa(n))return-1}return n.length-i.length}function qa(e){const l=e[e.length-1];return e.length>0&&l[l.length-1]<0}const Ou={type:0,value:""},Pu=/[a-zA-Z0-9_]/;function ju(e){if(!e)return[[]];if(e==="/")return[[Ou]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function l(m){throw new Error(`ERR (${t})/"${d}": ${m}`)}let t=0,i=t;const n=[];let r;function s(){r&&n.push(r),r=[]}let a=0,c,d="",p="";function u(){d&&(t===0?r.push({type:0,value:d}):t===1||t===2||t===3?(r.length>1&&(c==="*"||c==="+")&&l(`A repeatable param (${d}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:d,regexp:p,repeatable:c==="*"||c==="+",optional:c==="*"||c==="?"})):l("Invalid state to consume buffer"),d="")}function g(){d+=c}for(;a<e.length;){if(c=e[a++],c==="\\"&&t!==2){i=t,t=4;continue}switch(t){case 0:c==="/"?(d&&u(),s()):c===":"?(u(),t=1):g();break;case 4:g(),t=i;break;case 1:c==="("?t=2:Pu.test(c)?g():(u(),t=0,c!=="*"&&c!=="?"&&c!=="+"&&a--);break;case 2:c===")"?p[p.length-1]=="\\"?p=p.slice(0,-1)+c:t=3:p+=c;break;case 3:u(),t=0,c!=="*"&&c!=="?"&&c!=="+"&&a--,p="";break;default:l("Unknown state");break}}return t===2&&l(`Unfinished custom RegExp for param "${d}"`),u(),s(),n}function Ru(e,l,t){const i=Su(ju(e.path),t),n=ve(i,{record:e,parent:l,children:[],alias:[]});return l&&!n.record.aliasOf==!l.record.aliasOf&&l.children.push(n),n}function Vu(e,l){const t=[],i=new Map;l=Na({strict:!1,end:!0,sensitive:!1},l);function n(u){return i.get(u)}function r(u,g,m){const k=!m,y=$a(u);y.aliasOf=m&&m.record;const x=Na(l,u),E=[y];if("alias"in u){const A=typeof u.alias=="string"?[u.alias]:u.alias;for(const I of A)E.push($a(ve({},y,{components:m?m.record.components:y.components,path:I,aliasOf:m?m.record:y})))}let _,f;for(const A of E){const{path:I}=A;if(g&&I[0]!=="/"){const M=g.record.path,T=M[M.length-1]==="/"?"":"/";A.path=g.record.path+(I&&T+I)}if(_=Ru(A,g,x),m?m.alias.push(_):(f=f||_,f!==_&&f.alias.push(_),k&&u.name&&!Ha(_)&&s(u.name)),rd(_)&&c(_),y.children){const M=y.children;for(let T=0;T<M.length;T++)r(M[T],_,m&&m.children[T])}m=m||_}return f?()=>{s(f)}:bi}function s(u){if(td(u)){const g=i.get(u);g&&(i.delete(u),t.splice(t.indexOf(g),1),g.children.forEach(s),g.alias.forEach(s))}else{const g=t.indexOf(u);g>-1&&(t.splice(g,1),u.record.name&&i.delete(u.record.name),u.children.forEach(s),u.alias.forEach(s))}}function a(){return t}function c(u){const g=qu(u,t);t.splice(g,0,u),u.record.name&&!Ha(u)&&i.set(u.record.name,u)}function d(u,g){let m,k={},y,x;if("name"in u&&u.name){if(m=i.get(u.name),!m)throw Xt(1,{location:u});x=m.record.name,k=ve(Ma(g.params,m.keys.filter(f=>!f.optional).concat(m.parent?m.parent.keys.filter(f=>f.optional):[]).map(f=>f.name)),u.params&&Ma(u.params,m.keys.map(f=>f.name))),y=m.stringify(k)}else if(u.path!=null)y=u.path,m=t.find(f=>f.re.test(y)),m&&(k=m.parse(y),x=m.record.name);else{if(m=g.name?i.get(g.name):t.find(f=>f.re.test(g.path)),!m)throw Xt(1,{location:u,currentLocation:g});x=m.record.name,k=ve({},g.params,u.params),y=m.stringify(k)}const E=[];let _=m;for(;_;)E.unshift(_.record),_=_.parent;return{name:x,path:y,params:k,matched:E,meta:zu(E)}}e.forEach(u=>r(u));function p(){t.length=0,i.clear()}return{addRoute:r,resolve:d,removeRoute:s,clearRoutes:p,getRoutes:a,getRecordMatcher:n}}function Ma(e,l){const t={};for(const i of l)i in e&&(t[i]=e[i]);return t}function $a(e){const l={path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:e.aliasOf,beforeEnter:e.beforeEnter,props:Bu(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}};return Object.defineProperty(l,"mods",{value:{}}),l}function Bu(e){const l={},t=e.props||!1;if("component"in e)l.default=t;else for(const i in e.components)l[i]=typeof t=="object"?t[i]:t;return l}function Ha(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function zu(e){return e.reduce((l,t)=>ve(l,t.meta),{})}function Na(e,l){const t={};for(const i in e)t[i]=i in l?l[i]:e[i];return t}function qu(e,l){let t=0,i=l.length;for(;t!==i;){const r=t+i>>1;nd(e,l[r])<0?i=r:t=r+1}const n=Mu(e);return n&&(i=l.lastIndexOf(n,i-1)),i}function Mu(e){let l=e;for(;l=l.parent;)if(rd(l)&&nd(e,l)===0)return l}function rd({record:e}){return!!(e.name||e.components&&Object.keys(e.components).length||e.redirect)}function $u(e){const l={};if(e===""||e==="?")return l;const i=(e[0]==="?"?e.slice(1):e).split("&");for(let n=0;n<i.length;++n){const r=i[n].replace(Qc," "),s=r.indexOf("="),a=Di(s<0?r:r.slice(0,s)),c=s<0?null:Di(r.slice(s+1));if(a in l){let d=l[a];xl(d)||(d=l[a]=[d]),d.push(c)}else l[a]=c}return l}function Ua(e){let l="";for(let t in e){const i=e[t];if(t=ou(t),i==null){i!==void 0&&(l+=(l.length?"&":"")+t);continue}(xl(i)?i.map(r=>r&&Or(r)):[i&&Or(i)]).forEach(r=>{r!==void 0&&(l+=(l.length?"&":"")+t,r!=null&&(l+="="+r))})}return l}function Hu(e){const l={};for(const t in e){const i=e[t];i!==void 0&&(l[t]=xl(i)?i.map(n=>n==null?null:""+n):i==null?i:""+i)}return l}const Nu=Symbol(""),Ga=Symbol(""),Bn=Symbol(""),_s=Symbol(""),jr=Symbol("");function ci(){let e=[];function l(i){return e.push(i),()=>{const n=e.indexOf(i);n>-1&&e.splice(n,1)}}function t(){e=[]}return{add:l,list:()=>e.slice(),reset:t}}function tt(e,l,t,i,n,r=s=>s()){const s=i&&(i.enterCallbacks[n]=i.enterCallbacks[n]||[]);return()=>new Promise((a,c)=>{const d=g=>{g===!1?c(Xt(4,{from:t,to:l})):g instanceof Error?c(g):Cu(g)?c(Xt(2,{from:l,to:g})):(s&&i.enterCallbacks[n]===s&&typeof g=="function"&&s.push(g),a())},p=r(()=>e.call(i&&i.instances[n],l,t,d));let u=Promise.resolve(p);e.length<3&&(u=u.then(d)),u.catch(g=>c(g))})}function dr(e,l,t,i,n=r=>r()){const r=[];for(const s of e)for(const a in s.components){let c=s.components[a];if(!(l!=="beforeRouteEnter"&&!s.instances[a]))if(Kc(c)){const p=(c.__vccOpts||c)[l];p&&r.push(tt(p,t,i,s,a,n))}else{let d=c();r.push(()=>d.then(p=>{if(!p)throw new Error(`Couldn't resolve component "${a}" at "${s.path}"`);const u=Y2(p)?p.default:p;s.mods[a]=p,s.components[a]=u;const m=(u.__vccOpts||u)[l];return m&&tt(m,t,i,s,a,n)()}))}}return r}function Wa(e){const l=Te(Bn),t=Te(_s),i=L(()=>{const c=rt(e.to);return l.resolve(c)}),n=L(()=>{const{matched:c}=i.value,{length:d}=c,p=c[d-1],u=t.matched;if(!p||!u.length)return-1;const g=u.findIndex(Yt.bind(null,p));if(g>-1)return g;const m=Ka(c[d-2]);return d>1&&Ka(p)===m&&u[u.length-1].path!==m?u.findIndex(Yt.bind(null,c[d-2])):g}),r=L(()=>n.value>-1&&Ju(t.params,i.value.params)),s=L(()=>n.value>-1&&n.value===t.matched.length-1&&ed(t.params,i.value.params));function a(c={}){if(Ku(c)){const d=l[rt(e.replace)?"replace":"push"](rt(e.to)).catch(bi);return e.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>d),d}return Promise.resolve()}return{route:i,href:L(()=>i.value.href),isActive:r,isExactActive:s,navigate:a}}function Uu(e){return e.length===1?e[0]:e}const Gu=V({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Wa,setup(e,{slots:l}){const t=_t(Wa(e)),{options:i}=Te(Bn),n=L(()=>({[Ja(e.activeClass,i.linkActiveClass,"router-link-active")]:t.isActive,[Ja(e.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active")]:t.isExactActive}));return()=>{const r=l.default&&Uu(l.default(t));return e.custom?r:o("a",{"aria-current":t.isExactActive?e.ariaCurrentValue:null,href:t.href,onClick:t.navigate,class:n.value},r)}}}),Wu=Gu;function Ku(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const l=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(l))return}return e.preventDefault&&e.preventDefault(),!0}}function Ju(e,l){for(const t in l){const i=l[t],n=e[t];if(typeof i=="string"){if(i!==n)return!1}else if(!xl(n)||n.length!==i.length||i.some((r,s)=>r!==n[s]))return!1}return!0}function Ka(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Ja=(e,l,t)=>e??l??t,Qu=V({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:l,slots:t}){const i=Te(jr),n=L(()=>e.route||i.value),r=Te(Ga,0),s=L(()=>{let d=rt(r);const{matched:p}=n.value;let u;for(;(u=p[d])&&!u.components;)d++;return d}),a=L(()=>n.value.matched[s.value]);yl(Ga,L(()=>s.value+1)),yl(Nu,a),yl(jr,n);const c=ee();return Ie(()=>[c.value,a.value,e.name],([d,p,u],[g,m,k])=>{p&&(p.instances[u]=d,m&&m!==p&&d&&d===g&&(p.leaveGuards.size||(p.leaveGuards=m.leaveGuards),p.updateGuards.size||(p.updateGuards=m.updateGuards))),d&&p&&(!m||!Yt(p,m)||!g)&&(p.enterCallbacks[u]||[]).forEach(y=>y(d))},{flush:"post"}),()=>{const d=n.value,p=e.name,u=a.value,g=u&&u.components[p];if(!g)return Qa(t.default,{Component:g,route:d});const m=u.props[p],k=m?m===!0?d.params:typeof m=="function"?m(d):m:null,x=o(g,ve({},k,l,{onVnodeUnmounted:E=>{E.component.isUnmounted&&(u.instances[p]=null)},ref:c}));return Qa(t.default,{Component:x,route:d})||x}}});function Qa(e,l){if(!e)return null;const t=e(l);return t.length===1?t[0]:t}const Yu=Qu;function Xu(e){const l=Vu(e.routes,e),t=e.parseQuery||$u,i=e.stringifyQuery||Ua,n=e.history,r=ci(),s=ci(),a=ci(),c=ne(zl);let d=zl;Rt&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const p=or.bind(null,C=>""+C),u=or.bind(null,du),g=or.bind(null,Di);function m(C,G){let $,Q;return td(C)?($=l.getRecordMatcher(C),Q=G):Q=C,l.addRoute(Q,$)}function k(C){const G=l.getRecordMatcher(C);G&&l.removeRoute(G)}function y(){return l.getRoutes().map(C=>C.record)}function x(C){return!!l.getRecordMatcher(C)}function E(C,G){if(G=ve({},G||c.value),typeof C=="string"){const b=cr(t,C,G.path),w=l.resolve({path:b.path},G),O=n.createHref(b.fullPath);return ve(b,w,{params:g(w.params),hash:Di(b.hash),redirectedFrom:void 0,href:O})}let $;if(C.path!=null)$=ve({},C,{path:cr(t,C.path,G.path).path});else{const b=ve({},C.params);for(const w in b)b[w]==null&&delete b[w];$=ve({},C,{params:u(b)}),G.params=u(G.params)}const Q=l.resolve($,G),de=C.hash||"";Q.params=p(g(Q.params));const be=uu(i,ve({},C,{hash:au(de),path:Q.path})),v=n.createHref(be);return ve({fullPath:be,hash:de,query:i===Ua?Hu(C.query):C.query||{}},Q,{redirectedFrom:void 0,href:v})}function _(C){return typeof C=="string"?cr(t,C,c.value.path):ve({},C)}function f(C,G){if(d!==C)return Xt(8,{from:G,to:C})}function A(C){return T(C)}function I(C){return A(ve(_(C),{replace:!0}))}function M(C){const G=C.matched[C.matched.length-1];if(G&&G.redirect){const{redirect:$}=G;let Q=typeof $=="function"?$(C):$;return typeof Q=="string"&&(Q=Q.includes("?")||Q.includes("#")?Q=_(Q):{path:Q},Q.params={}),ve({query:C.query,hash:C.hash,params:Q.path!=null?{}:C.params},Q)}}function T(C,G){const $=d=E(C),Q=c.value,de=C.state,be=C.force,v=C.replace===!0,b=M($);if(b)return T(ve(_(b),{state:typeof b=="object"?ve({},de,b.state):de,force:be,replace:v}),G||$);const w=$;w.redirectedFrom=G;let O;return!be&&gu(i,Q,$)&&(O=Xt(16,{to:w,from:Q}),dl(Q,Q,!0,!1)),(O?Promise.resolve(O):B(w,Q)).catch(D=>Vl(D)?Vl(D,2)?D:wl(D):J(D,w,Q)).then(D=>{if(D){if(Vl(D,2))return T(ve({replace:v},_(D.to),{state:typeof D.to=="object"?ve({},de,D.to.state):de,force:be}),G||w)}else D=S(w,Q,!0,v,de);return j(w,Q,D),D})}function N(C,G){const $=f(C,G);return $?Promise.reject($):Promise.resolve()}function F(C){const G=jl.values().next().value;return G&&typeof G.runWithContext=="function"?G.runWithContext(C):C()}function B(C,G){let $;const[Q,de,be]=Zu(C,G);$=dr(Q.reverse(),"beforeRouteLeave",C,G);for(const b of Q)b.leaveGuards.forEach(w=>{$.push(tt(w,C,G))});const v=N.bind(null,C,G);return $.push(v),qe($).then(()=>{$=[];for(const b of r.list())$.push(tt(b,C,G));return $.push(v),qe($)}).then(()=>{$=dr(de,"beforeRouteUpdate",C,G);for(const b of de)b.updateGuards.forEach(w=>{$.push(tt(w,C,G))});return $.push(v),qe($)}).then(()=>{$=[];for(const b of be)if(b.beforeEnter)if(xl(b.beforeEnter))for(const w of b.beforeEnter)$.push(tt(w,C,G));else $.push(tt(b.beforeEnter,C,G));return $.push(v),qe($)}).then(()=>(C.matched.forEach(b=>b.enterCallbacks={}),$=dr(be,"beforeRouteEnter",C,G,F),$.push(v),qe($))).then(()=>{$=[];for(const b of s.list())$.push(tt(b,C,G));return $.push(v),qe($)}).catch(b=>Vl(b,8)?b:Promise.reject(b))}function j(C,G,$){a.list().forEach(Q=>F(()=>Q(C,G,$)))}function S(C,G,$,Q,de){const be=f(C,G);if(be)return be;const v=G===zl,b=Rt?history.state:{};$&&(Q||v?n.replace(C.fullPath,ve({scroll:v&&b&&b.scroll},de)):n.push(C.fullPath,de)),c.value=C,dl(C,G,$,v),wl()}let H;function re(){H||(H=n.listen((C,G,$)=>{if(!Tl.listening)return;const Q=E(C),de=M(Q);if(de){T(ve(de,{replace:!0,force:!0}),Q).catch(bi);return}d=Q;const be=c.value;Rt&&xu(Ra(be.fullPath,$.delta),Vn()),B(Q,be).catch(v=>Vl(v,12)?v:Vl(v,2)?(T(ve(_(v.to),{force:!0}),Q).then(b=>{Vl(b,20)&&!$.delta&&$.type===Fi.pop&&n.go(-1,!1)}).catch(bi),Promise.reject()):($.delta&&n.go(-$.delta,!1),J(v,Q,be))).then(v=>{v=v||S(Q,be,!1),v&&($.delta&&!Vl(v,8)?n.go(-$.delta,!1):$.type===Fi.pop&&Vl(v,20)&&n.go(-1,!1)),j(Q,be,v)}).catch(bi)}))}let ge=ci(),K=ci(),X;function J(C,G,$){wl(C);const Q=K.list();return Q.length?Q.forEach(de=>de(C,G,$)):console.error(C),Promise.reject(C)}function me(){return X&&c.value!==zl?Promise.resolve():new Promise((C,G)=>{ge.add([C,G])})}function wl(C){return X||(X=!C,re(),ge.list().forEach(([G,$])=>C?$(C):G()),ge.reset()),C}function dl(C,G,$,Q){const{scrollBehavior:de}=e;if(!Rt||!de)return Promise.resolve();const be=!$&&Lu(Ra(C.fullPath,0))||(Q||!$)&&history.state&&history.state.scroll||null;return ct().then(()=>de(C,G,be)).then(v=>v&&_u(v)).catch(v=>J(v,C,G))}const ze=C=>n.go(C);let Xe;const jl=new Set,Tl={currentRoute:c,listening:!0,addRoute:m,removeRoute:k,clearRoutes:l.clearRoutes,hasRoute:x,getRoutes:y,resolve:E,options:e,push:A,replace:I,go:ze,back:()=>ze(-1),forward:()=>ze(1),beforeEach:r.add,beforeResolve:s.add,afterEach:a.add,onError:K.add,isReady:me,install(C){const G=this;C.component("RouterLink",Wu),C.component("RouterView",Yu),C.config.globalProperties.$router=G,Object.defineProperty(C.config.globalProperties,"$route",{enumerable:!0,get:()=>rt(c)}),Rt&&!Xe&&c.value===zl&&(Xe=!0,A(n.location).catch(de=>{}));const $={};for(const de in zl)Object.defineProperty($,de,{get:()=>c.value[de],enumerable:!0});C.provide(Bn,G),C.provide(_s,Ko($)),C.provide(jr,c);const Q=C.unmount;jl.add(C),C.unmount=function(){jl.delete(C),jl.size<1&&(d=zl,H&&H(),H=null,c.value=zl,Xe=!1,X=!1),Q()}}};function qe(C){return C.reduce((G,$)=>G.then(()=>F($)),Promise.resolve())}return Tl}function Zu(e,l){const t=[],i=[],n=[],r=Math.max(l.matched.length,e.matched.length);for(let s=0;s<r;s++){const a=l.matched[s];a&&(e.matched.find(d=>Yt(d,a))?i.push(a):t.push(a));const c=e.matched[s];c&&(l.matched.find(d=>Yt(d,c))||n.push(c))}return[t,i,n]}function Ul(){return Te(Bn)}function Gl(e){return Te(_s)}var xs=Symbol(""),Ll=()=>{const e=Te(xs);if(!e)throw new Error("useClientData() is called without provider.");return e},eg=()=>Ll().pageComponent,Ne=()=>Ll().pageData,pe=()=>Ll().pageFrontmatter,lg=()=>Ll().pageHead,zn=()=>Ll().pageLang,tg=()=>Ll().pageLayout,Al=()=>Ll().routeLocale,$i=()=>Ll().routePath,ig=()=>Ll().routes,sd=()=>Ll().siteData,qn=()=>Ll().siteLocaleData,vn=ne([]),Wl=e=>{vn.value.push(e),Tt(()=>{vn.value=vn.value.filter(l=>l!==e)})},ng=Symbol(""),Rr=ne(J2),Ut=ne(Q2),ad=(e,l)=>{const t=z2(e,l);if(Ut.value[t])return t;const i=encodeURI(t);if(Ut.value[i])return i;const n=Rr.value[t]||Rr.value[i];return n||t},ml=(e,l)=>{const{pathname:t,hashAndQueries:i}=Uc(e),n=ad(t,l),r=n+i;return Ut.value[n]?{...Ut.value[n],path:r,notFound:!1}:{...Ut.value["/404.html"],path:r,notFound:!0}},rg=(e,l)=>{const{pathname:t,hashAndQueries:i}=Uc(e);return ad(t,l)+i},sg=e=>{if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget){const l=e.currentTarget.getAttribute("target");if(l!=null&&l.match(/\b_blank\b/i))return}return e.preventDefault(),!0}},Oe=V({name:"RouteLink",props:{to:{type:String,required:!0},active:Boolean,activeClass:{type:String,default:"route-link-active"}},slots:Object,setup(e,{slots:l}){const t=Ul(),i=Gl(),n=L(()=>e.to.startsWith("#")||e.to.startsWith("?")?e.to:`/leetcode-notes/${rg(e.to,i.path).substring(1)}`);return()=>o("a",{class:["route-link",{[e.activeClass]:e.active}],href:n.value,onClick:(r={})=>{sg(r)&&t.push(e.to).catch()}},l.default())}}),ag=V({name:"AutoLink",props:{config:{type:Object,required:!0}},slots:Object,setup(e,{slots:l}){const t=wt(e,"config"),i=Gl(),n=sd(),r=L(()=>Mi(t.value.link)),s=L(()=>t.value.target||(r.value?"_blank":void 0)),a=L(()=>s.value==="_blank"),c=L(()=>!r.value&&!a.value),d=L(()=>t.value.rel||(a.value?"noopener noreferrer":null)),p=L(()=>t.value.ariaLabel??t.value.text),u=L(()=>{if(t.value.exact)return!1;const m=Object.keys(n.value.locales);return m.length?m.every(k=>k!==t.value.link):t.value.link!=="/"}),g=L(()=>c.value?t.value.activeMatch?(t.value.activeMatch instanceof RegExp?t.value.activeMatch:new RegExp(t.value.activeMatch,"u")).test(i.path):u.value?i.path.startsWith(t.value.link):i.path===t.value.link:!1);return()=>{const{before:m,after:k,default:y}=l,x=(y==null?void 0:y(t.value))??[m==null?void 0:m(t.value),t.value.text,k==null?void 0:k(t.value)];return c.value?o(Oe,{class:"auto-link",to:t.value.link,active:g.value,"aria-label":p.value},()=>x):o("a",{class:"auto-link external-link",href:t.value.link,"aria-label":p.value,rel:d.value,target:s.value},x)}}}),Ls=V({name:"ClientOnly",setup(e,l){const t=ee(!1);return Ee(()=>{t.value=!0}),()=>{var i,n;return t.value?(n=(i=l.slots).default)==null?void 0:n.call(i):null}}}),an=e=>{vn.value.forEach(l=>l(e))},od=V({name:"Content",props:{path:{type:String,required:!1,default:""}},setup(e){const l=eg(),t=L(()=>{if(!e.path)return l.value;const n=ml(e.path);return rp(async()=>n.loader().then(({comp:r})=>r))}),i=pe();return Ie(i,()=>{an("updated")},{deep:!0,flush:"post"}),()=>o(t.value,{onVnodeMounted:()=>{an("mounted")},onVnodeUpdated:()=>{an("updated")},onVnodeBeforeUnmount:()=>{an("beforeUnmount")}})}}),og="Layout",cg="en-US",gt=_t({resolveLayouts:e=>e.reduce((l,t)=>({...l,...t.layouts}),{}),resolvePageHead:(e,l,t)=>{const i=De(l.description)?l.description:t.description,n=[...Array.isArray(l.head)?l.head:[],...t.head,["title",{},e],["meta",{name:"description",content:i}]];return U2(n)},resolvePageHeadTitle:(e,l)=>[e.title,l.title].filter(t=>!!t).join(" | "),resolvePageLang:(e,l)=>e.lang||l.lang||cg,resolvePageLayout:(e,l)=>{const t=De(e.frontmatter.layout)?e.frontmatter.layout:og;if(!l[t])throw new Error(`[vuepress] Cannot resolve layout: ${t}`);return l[t]},resolveRouteLocale:(e,l)=>q2(e,decodeURI(l)),resolveSiteLocaleData:({base:e,locales:l,...t},i)=>{var n;return{...t,...l[i],head:[...((n=l[i])==null?void 0:n.head)??[],...t.head]}}}),Pl=(e={})=>e,ye=e=>li(e)?e:`/leetcode-notes/${Wc(e)}`,dg=Object.defineProperty,hg=(e,l)=>{for(var t in l)dg(e,t,{get:l[t],enumerable:!0})},pg={};hg(pg,{COMPONENT_STATE_TYPE:()=>ug,INSPECTOR_ID:()=>gg,INSPECTOR_LABEL:()=>mg,INSPECTOR_NODES:()=>vg,INSPECTOR_STATE_SECTION_NAME:()=>kg,PLUGIN_ID:()=>cd,PLUGIN_LABEL:()=>As});var cd="org.vuejs.vuepress",As="VuePress",ug=As,gg=cd,mg=As,Ya={id:"INTERNAL",label:"Internal",keys:["layouts","routes","redirects"]},Xa={id:"SITE",label:"Site",keys:["siteData","siteLocaleData"]},Za={id:"ROUTE",label:"Route",keys:["routePath","routeLocale"]},eo={id:"PAGE",label:"Page",keys:["pageData","pageFrontmatter","pageLang","pageHead","pageHeadTitle","pageLayout","pageComponent"]},vg={[Ya.id]:Ya,[Xa.id]:Xa,[Za.id]:Za,[eo.id]:eo},kg="State";function Dt(e){return Oo()?(vh(e),!0):!1}const hr=new WeakMap,fg=(...e)=>{var l;const t=e[0],i=(l=Ct())==null?void 0:l.proxy;if(i==null&&!gc())throw new Error("injectLocal must be called in setup");return i&&hr.has(i)&&t in hr.get(i)?hr.get(i)[t]:Te(...e)},Hi=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const bg=e=>e!=null,yg=Object.prototype.toString,_g=e=>yg.call(e)==="[object Object]",$l=()=>{},lo=xg();function xg(){var e,l;return Hi&&((e=window==null?void 0:window.navigator)==null?void 0:e.userAgent)&&(/iP(?:ad|hone|od)/.test(window.navigator.userAgent)||((l=window==null?void 0:window.navigator)==null?void 0:l.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function dd(...e){if(e.length!==1)return wt(...e);const l=e[0];return typeof l=="function"?Et(Yo(()=>({get:l,set:$l}))):ee(l)}function Es(e,l){function t(...i){return new Promise((n,r)=>{Promise.resolve(e(()=>l.apply(this,i),{fn:l,thisArg:this,args:i})).then(n).catch(r)})}return t}const hd=e=>e();function Lg(e,l={}){let t,i,n=$l;const r=c=>{clearTimeout(c),n(),n=$l};let s;return c=>{const d=ce(e),p=ce(l.maxWait);return t&&r(t),d<=0||p!==void 0&&p<=0?(i&&(r(i),i=null),Promise.resolve(c())):new Promise((u,g)=>{n=l.rejectOnCancel?g:u,s=c,p&&!i&&(i=setTimeout(()=>{t&&r(t),i=null,u(s())},p)),t=setTimeout(()=>{i&&r(i),i=null,u(c())},d)})}}function Ag(...e){let l=0,t,i=!0,n=$l,r,s,a,c,d;!Pe(e[0])&&typeof e[0]=="object"?{delay:s,trailing:a=!0,leading:c=!0,rejectOnCancel:d=!1}=e[0]:[s,a=!0,c=!0,d=!1]=e;const p=()=>{t&&(clearTimeout(t),t=void 0,n(),n=$l)};return g=>{const m=ce(s),k=Date.now()-l,y=()=>r=g();return p(),m<=0?(l=Date.now(),y()):(k>m&&(c||!i)?(l=Date.now(),y()):a&&(r=new Promise((x,E)=>{n=d?E:x,t=setTimeout(()=>{l=Date.now(),i=!0,x(y()),p()},Math.max(0,m-k))})),!c&&!t&&(t=setTimeout(()=>i=!0,m)),i=!1,r)}}function Eg(e=hd,l={}){const{initialState:t="active"}=l,i=dd(t==="active");function n(){i.value=!1}function r(){i.value=!0}const s=(...a)=>{i.value&&e(...a)};return{isActive:Et(i),pause:n,resume:r,eventFilter:s}}function wg(e){let l;function t(){return l||(l=e()),l}return t.reset=async()=>{const i=l;l=void 0,i&&await i},t}function to(e){return e.endsWith("rem")?Number.parseFloat(e)*16:Number.parseFloat(e)}function _i(e){return Array.isArray(e)?e:[e]}function pd(e){return Ct()}function ud(e,l=200,t={}){return Es(Lg(l,t),e)}function gd(e,l=200,t=!1,i=!0,n=!1){return Es(Ag(l,t,i,n),e)}function Tg(e,l,t={}){const{eventFilter:i=hd,...n}=t;return Ie(e,Es(i,l),n)}function Cg(e,l,t={}){const{eventFilter:i,initialState:n="active",...r}=t,{eventFilter:s,pause:a,resume:c,isActive:d}=Eg(i,{initialState:n});return{stop:Tg(e,l,{...r,eventFilter:s}),pause:a,resume:c,isActive:d}}function Ni(e,l=!0,t){pd()?Ee(e,t):l?e():ct(e)}function Dg(e,l){pd()&&Tt(e,l)}function Fg(e,l,t={}){const{immediate:i=!0,immediateCallback:n=!1}=t,r=ne(!1);let s=null;function a(){s&&(clearTimeout(s),s=null)}function c(){r.value=!1,a()}function d(...p){n&&e(),a(),r.value=!0,s=setTimeout(()=>{r.value=!1,s=null,e(...p)},ce(l))}return i&&(r.value=!0,Hi&&d()),Dt(c),{isPending:Et(r),start:d,stop:c}}function Si(e=!1,l={}){const{truthyValue:t=!0,falsyValue:i=!1}=l,n=Pe(e),r=ne(e);function s(a){if(arguments.length)return r.value=a,r.value;{const c=ce(t);return r.value=r.value===c?ce(i):c,r.value}}return n?s:[r,s]}function Ol(e,l,t){return Ie(e,l,{...t,immediate:!0})}const Je=Hi?window:void 0,md=Hi?window.document:void 0,vd=Hi?window.navigator:void 0;function ol(e){var l;const t=ce(e);return(l=t==null?void 0:t.$el)!=null?l:t}function he(...e){const l=[],t=()=>{l.forEach(a=>a()),l.length=0},i=(a,c,d,p)=>(a.addEventListener(c,d,p),()=>a.removeEventListener(c,d,p)),n=L(()=>{const a=_i(ce(e[0])).filter(c=>c!=null);return a.every(c=>typeof c!="string")?a:void 0}),r=Ol(()=>{var a,c;return[(c=(a=n.value)==null?void 0:a.map(d=>ol(d)))!=null?c:[Je].filter(d=>d!=null),_i(ce(n.value?e[1]:e[0])),_i(rt(n.value?e[2]:e[1])),ce(n.value?e[3]:e[2])]},([a,c,d,p])=>{if(t(),!(a!=null&&a.length)||!(c!=null&&c.length)||!(d!=null&&d.length))return;const u=_g(p)?{...p}:p;l.push(...a.flatMap(g=>c.flatMap(m=>d.map(k=>i(g,m,k,u)))))},{flush:"post"}),s=()=>{r(),t()};return Dt(t),s}function Sg(){const e=ne(!1),l=Ct();return l&&Ee(()=>{e.value=!0},l),e}function ii(e){const l=Sg();return L(()=>(l.value,!!e()))}function Ig(e,l,t={}){const{window:i=Je,...n}=t;let r;const s=ii(()=>i&&"MutationObserver"in i),a=()=>{r&&(r.disconnect(),r=void 0)},c=L(()=>{const g=ce(e),m=_i(g).map(ol).filter(bg);return new Set(m)}),d=Ie(()=>c.value,g=>{a(),s.value&&g.size&&(r=new MutationObserver(l),g.forEach(m=>r.observe(m,n)))},{immediate:!0,flush:"post"}),p=()=>r==null?void 0:r.takeRecords(),u=()=>{d(),a()};return Dt(u),{isSupported:s,stop:u,takeRecords:p}}function Og(e,l,t={}){const{window:i=Je,document:n=i==null?void 0:i.document,flush:r="sync"}=t;if(!i||!n)return $l;let s;const a=p=>{s==null||s(),s=p},c=ms(()=>{const p=ol(e);if(p){const{stop:u}=Ig(n,g=>{g.map(k=>[...k.removedNodes]).flat().some(k=>k===p||k.contains(p))&&l(g)},{window:i,childList:!0,subtree:!0});a(u)}},{flush:r}),d=()=>{c(),a()};return Dt(d),d}const Pg=Symbol("vueuse-ssr-width");function jg(){const e=gc()?fg(Pg,null):null;return typeof e=="number"?e:void 0}function ws(e,l={}){const{window:t=Je,ssrWidth:i=jg()}=l,n=ii(()=>t&&"matchMedia"in t&&typeof t.matchMedia=="function"),r=ne(typeof i=="number"),s=ne(),a=ne(!1),c=d=>{a.value=d.matches};return ms(()=>{if(r.value){r.value=!n.value;const d=ce(e).split(",");a.value=d.some(p=>{const u=p.includes("not all"),g=p.match(/\(\s*min-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/),m=p.match(/\(\s*max-width:\s*(-?\d+(?:\.\d*)?[a-z]+\s*)\)/);let k=!!(g||m);return g&&k&&(k=i>=to(g[1])),m&&k&&(k=i<=to(m[1])),u?!k:k});return}n.value&&(s.value=t.matchMedia(ce(e)),a.value=s.value.matches)}),he(s,"change",c,{passive:!0}),L(()=>a.value)}function io(e,l={}){const{controls:t=!1,navigator:i=vd}=l,n=ii(()=>i&&"permissions"in i),r=ne(),s=typeof e=="string"?{name:e}:e,a=ne(),c=()=>{var p,u;a.value=(u=(p=r.value)==null?void 0:p.state)!=null?u:"prompt"};he(r,"change",c,{passive:!0});const d=wg(async()=>{if(n.value){if(!r.value)try{r.value=await i.permissions.query(s)}catch{r.value=void 0}finally{c()}if(t)return oe(r.value)}});return d(),t?{state:a,isSupported:n,query:d}:a}function Rg(e={}){const{navigator:l=vd,read:t=!1,source:i,copiedDuring:n=1500,legacy:r=!1}=e,s=ii(()=>l&&"clipboard"in l),a=io("clipboard-read"),c=io("clipboard-write"),d=L(()=>s.value||r),p=ne(""),u=ne(!1),g=Fg(()=>u.value=!1,n,{immediate:!1});async function m(){let _=!(s.value&&E(a.value));if(!_)try{p.value=await l.clipboard.readText()}catch{_=!0}_&&(p.value=x())}d.value&&t&&he(["copy","cut"],m,{passive:!0});async function k(_=ce(i)){if(d.value&&_!=null){let f=!(s.value&&E(c.value));if(!f)try{await l.clipboard.writeText(_)}catch{f=!0}f&&y(_),p.value=_,u.value=!0,g.start()}}function y(_){const f=document.createElement("textarea");f.value=_??"",f.style.position="absolute",f.style.opacity="0",document.body.appendChild(f),f.select(),document.execCommand("copy"),f.remove()}function x(){var _,f,A;return(A=(f=(_=document==null?void 0:document.getSelection)==null?void 0:_.call(document))==null?void 0:f.toString())!=null?A:""}function E(_){return _==="granted"||_==="prompt"}return{isSupported:d,text:p,copied:u,copy:k}}const on=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},cn="__vueuse_ssr_handlers__",Vg=Bg();function Bg(){return cn in on||(on[cn]=on[cn]||{}),on[cn]}function zg(e,l){return Vg[e]||l}function qg(e){return ws("(prefers-color-scheme: dark)",e)}function Mg(e){return e==null?"any":e instanceof Set?"set":e instanceof Map?"map":e instanceof Date?"date":typeof e=="boolean"?"boolean":typeof e=="string"?"string":typeof e=="object"?"object":Number.isNaN(e)?"any":"number"}const $g={boolean:{read:e=>e==="true",write:e=>String(e)},object:{read:e=>JSON.parse(e),write:e=>JSON.stringify(e)},number:{read:e=>Number.parseFloat(e),write:e=>String(e)},any:{read:e=>e,write:e=>String(e)},string:{read:e=>e,write:e=>String(e)},map:{read:e=>new Map(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e.entries()))},set:{read:e=>new Set(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e))},date:{read:e=>new Date(e),write:e=>e.toISOString()}},no="vueuse-storage";function Ft(e,l,t,i={}){var n;const{flush:r="pre",deep:s=!0,listenToStorageChanges:a=!0,writeDefaults:c=!0,mergeDefaults:d=!1,shallow:p,window:u=Je,eventFilter:g,onError:m=j=>{console.error(j)},initOnMounted:k}=i,y=(p?ne:ee)(typeof l=="function"?l():l),x=L(()=>ce(e));if(!t)try{t=zg("getDefaultStorage",()=>{var j;return(j=Je)==null?void 0:j.localStorage})()}catch(j){m(j)}if(!t)return y;const E=ce(l),_=Mg(E),f=(n=i.serializer)!=null?n:$g[_],{pause:A,resume:I}=Cg(y,()=>T(y.value),{flush:r,deep:s,eventFilter:g});Ie(x,()=>F(),{flush:r}),u&&a&&Ni(()=>{t instanceof Storage?he(u,"storage",F,{passive:!0}):he(u,no,B),k&&F()}),k||F();function M(j,S){if(u){const H={key:x.value,oldValue:j,newValue:S,storageArea:t};u.dispatchEvent(t instanceof Storage?new StorageEvent("storage",H):new CustomEvent(no,{detail:H}))}}function T(j){try{const S=t.getItem(x.value);if(j==null)M(S,null),t.removeItem(x.value);else{const H=f.write(j);S!==H&&(t.setItem(x.value,H),M(S,H))}}catch(S){m(S)}}function N(j){const S=j?j.newValue:t.getItem(x.value);if(S==null)return c&&E!=null&&t.setItem(x.value,f.write(E)),E;if(!j&&d){const H=f.read(S);return typeof d=="function"?d(H,E):_==="object"&&!Array.isArray(H)?{...E,...H}:H}else return typeof S!="string"?S:f.read(S)}function F(j){if(!(j&&j.storageArea!==t)){if(j&&j.key==null){y.value=E;return}if(!(j&&j.key!==x.value)){A();try{(j==null?void 0:j.newValue)!==f.write(y.value)&&(y.value=N(j))}catch(S){m(S)}finally{j?ct(I):I()}}}}function B(j){F(j.detail)}return y}function Hg(e,l,t={}){const{window:i=Je,...n}=t;let r;const s=ii(()=>i&&"ResizeObserver"in i),a=()=>{r&&(r.disconnect(),r=void 0)},c=L(()=>{const u=ce(e);return Array.isArray(u)?u.map(g=>ol(g)):[ol(u)]}),d=Ie(c,u=>{if(a(),s.value&&i){r=new ResizeObserver(l);for(const g of u)g&&r.observe(g,n)}},{immediate:!0,flush:"post"}),p=()=>{a(),d()};return Dt(p),{isSupported:s,stop:p}}function Ng(e,l={}){const{delayEnter:t=0,delayLeave:i=0,triggerOnRemoval:n=!1,window:r=Je}=l,s=ne(!1);let a;const c=d=>{const p=d?t:i;a&&(clearTimeout(a),a=void 0),p?a=setTimeout(()=>s.value=d,p):s.value=d};return r&&(he(e,"mouseenter",()=>c(!0),{passive:!0}),he(e,"mouseleave",()=>c(!1),{passive:!0}),n&&Og(L(()=>ol(e)),()=>c(!1))),s}function Ug(e,l={width:0,height:0},t={}){const{window:i=Je,box:n="content-box"}=t,r=L(()=>{var u,g;return(g=(u=ol(e))==null?void 0:u.namespaceURI)==null?void 0:g.includes("svg")}),s=ne(l.width),a=ne(l.height),{stop:c}=Hg(e,([u])=>{const g=n==="border-box"?u.borderBoxSize:n==="content-box"?u.contentBoxSize:u.devicePixelContentBoxSize;if(i&&r.value){const m=ol(e);if(m){const k=m.getBoundingClientRect();s.value=k.width,a.value=k.height}}else if(g){const m=_i(g);s.value=m.reduce((k,{inlineSize:y})=>k+y,0),a.value=m.reduce((k,{blockSize:y})=>k+y,0)}else s.value=u.contentRect.width,a.value=u.contentRect.height},t);Ni(()=>{const u=ol(e);u&&(s.value="offsetWidth"in u?u.offsetWidth:l.width,a.value="offsetHeight"in u?u.offsetHeight:l.height)});const d=Ie(()=>ol(e),u=>{s.value=u?l.width:0,a.value=u?l.height:0});function p(){c(),d()}return{width:s,height:a,stop:p}}const ro=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function Mn(e,l={}){const{document:t=md,autoExit:i=!1}=l,n=L(()=>{var _;return(_=ol(e))!=null?_:t==null?void 0:t.documentElement}),r=ne(!1),s=L(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(_=>t&&_ in t||n.value&&_ in n.value)),a=L(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(_=>t&&_ in t||n.value&&_ in n.value)),c=L(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(_=>t&&_ in t||n.value&&_ in n.value)),d=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(_=>t&&_ in t),p=ii(()=>n.value&&t&&s.value!==void 0&&a.value!==void 0&&c.value!==void 0),u=()=>d?(t==null?void 0:t[d])===n.value:!1,g=()=>{if(c.value){if(t&&t[c.value]!=null)return t[c.value];{const _=n.value;if((_==null?void 0:_[c.value])!=null)return!!_[c.value]}}return!1};async function m(){if(!(!p.value||!r.value)){if(a.value)if((t==null?void 0:t[a.value])!=null)await t[a.value]();else{const _=n.value;(_==null?void 0:_[a.value])!=null&&await _[a.value]()}r.value=!1}}async function k(){if(!p.value||r.value)return;g()&&await m();const _=n.value;s.value&&(_==null?void 0:_[s.value])!=null&&(await _[s.value](),r.value=!0)}async function y(){await(r.value?m():k())}const x=()=>{const _=g();(!_||_&&u())&&(r.value=_)},E={capture:!1,passive:!0};return he(t,ro,x,E),he(()=>ol(n),ro,x,E),i&&Dt(m),{isSupported:p,isFullscreen:r,enter:k,exit:m,toggle:y}}function pr(e){return typeof Window<"u"&&e instanceof Window?e.document.documentElement:typeof Document<"u"&&e instanceof Document?e.documentElement:e}const so=1;function Gg(e,l={}){const{throttle:t=0,idle:i=200,onStop:n=$l,onScroll:r=$l,offset:s={left:0,right:0,top:0,bottom:0},eventListenerOptions:a={capture:!1,passive:!0},behavior:c="auto",window:d=Je,onError:p=T=>{console.error(T)}}=l,u=ne(0),g=ne(0),m=L({get(){return u.value},set(T){y(T,void 0)}}),k=L({get(){return g.value},set(T){y(void 0,T)}});function y(T,N){var F,B,j,S;if(!d)return;const H=ce(e);if(!H)return;(j=H instanceof Document?d.document.body:H)==null||j.scrollTo({top:(F=ce(N))!=null?F:k.value,left:(B=ce(T))!=null?B:m.value,behavior:ce(c)});const re=((S=H==null?void 0:H.document)==null?void 0:S.documentElement)||(H==null?void 0:H.documentElement)||H;m!=null&&(u.value=re.scrollLeft),k!=null&&(g.value=re.scrollTop)}const x=ne(!1),E=_t({left:!0,right:!1,top:!0,bottom:!1}),_=_t({left:!1,right:!1,top:!1,bottom:!1}),f=T=>{x.value&&(x.value=!1,_.left=!1,_.right=!1,_.top=!1,_.bottom=!1,n(T))},A=ud(f,t+i),I=T=>{var N;if(!d)return;const F=((N=T==null?void 0:T.document)==null?void 0:N.documentElement)||(T==null?void 0:T.documentElement)||ol(T),{display:B,flexDirection:j,direction:S}=getComputedStyle(F),H=S==="rtl"?-1:1,re=F.scrollLeft;_.left=re<u.value,_.right=re>u.value;const ge=Math.abs(re*H)<=(s.left||0),K=Math.abs(re*H)+F.clientWidth>=F.scrollWidth-(s.right||0)-so;B==="flex"&&j==="row-reverse"?(E.left=K,E.right=ge):(E.left=ge,E.right=K),u.value=re;let X=F.scrollTop;T===d.document&&!X&&(X=d.document.body.scrollTop),_.top=X<g.value,_.bottom=X>g.value;const J=Math.abs(X)<=(s.top||0),me=Math.abs(X)+F.clientHeight>=F.scrollHeight-(s.bottom||0)-so;B==="flex"&&j==="column-reverse"?(E.top=me,E.bottom=J):(E.top=J,E.bottom=me),g.value=X},M=T=>{var N;if(!d)return;const F=(N=T.target.documentElement)!=null?N:T.target;I(F),x.value=!0,A(T),r(T)};return he(e,"scroll",t?gd(M,t,!0,!1):M,a),Ni(()=>{try{const T=ce(e);if(!T)return;I(T)}catch(T){p(T)}}),he(e,"scrollend",f,a),{x:m,y:k,isScrolling:x,arrivedState:E,directions:_,measure(){const T=ce(e);d&&T&&I(T)}}}function Wg(e,l,t={}){const{window:i=Je}=t;return Ft(e,l,i==null?void 0:i.localStorage,t)}function Kg(e={}){const{window:l=Je}=e;if(!l)return ee(["en"]);const t=l.navigator,i=ee(t.languages);return he(l,"languagechange",()=>{i.value=t.languages},{passive:!0}),i}function Jg(e,l=$l,t={}){const{immediate:i=!0,manual:n=!1,type:r="text/javascript",async:s=!0,crossOrigin:a,referrerPolicy:c,noModule:d,defer:p,document:u=md,attrs:g={}}=t,m=ne(null);let k=null;const y=_=>new Promise((f,A)=>{const I=F=>(m.value=F,f(F),F);if(!u){f(!1);return}let M=!1,T=u.querySelector(`script[src="${ce(e)}"]`);T?T.hasAttribute("data-loaded")&&I(T):(T=u.createElement("script"),T.type=r,T.async=s,T.src=ce(e),p&&(T.defer=p),a&&(T.crossOrigin=a),d&&(T.noModule=d),c&&(T.referrerPolicy=c),Object.entries(g).forEach(([F,B])=>T==null?void 0:T.setAttribute(F,B)),M=!0);const N={passive:!0};he(T,"error",F=>A(F),N),he(T,"abort",F=>A(F),N),he(T,"load",()=>{T.setAttribute("data-loaded","true"),l(T),I(T)},N),M&&(T=u.head.appendChild(T)),_||I(T)}),x=(_=!0)=>(k||(k=y(_)),k),E=()=>{if(!u)return;k=null,m.value&&(m.value=null);const _=u.querySelector(`script[src="${ce(e)}"]`);_&&u.head.removeChild(_)};return i&&!n&&Ni(x),n||Dg(E),{scriptTag:m,load:x,unload:E}}function kd(e){const l=window.getComputedStyle(e);if(l.overflowX==="scroll"||l.overflowY==="scroll"||l.overflowX==="auto"&&e.clientWidth<e.scrollWidth||l.overflowY==="auto"&&e.clientHeight<e.scrollHeight)return!0;{const t=e.parentNode;return!t||t.tagName==="BODY"?!1:kd(t)}}function Qg(e){const l=e||window.event,t=l.target;return kd(t)?!1:l.touches.length>1?!0:(l.preventDefault&&l.preventDefault(),!1)}const ur=new WeakMap;function Ts(e,l=!1){const t=ne(l);let i=null,n="";Ie(dd(e),a=>{const c=pr(ce(a));if(c){const d=c;if(ur.get(d)||ur.set(d,d.style.overflow),d.style.overflow!=="hidden"&&(n=d.style.overflow),d.style.overflow==="hidden")return t.value=!0;if(t.value)return d.style.overflow="hidden"}},{immediate:!0});const r=()=>{const a=pr(ce(e));!a||t.value||(lo&&(i=he(a,"touchmove",c=>{Qg(c)},{passive:!1})),a.style.overflow="hidden",t.value=!0)},s=()=>{const a=pr(ce(e));!a||!t.value||(lo&&(i==null||i()),a.style.overflow=n,ur.delete(a),t.value=!1)};return Dt(s),L({get(){return t.value},set(a){a?r():s()}})}function Cs(e,l,t={}){const{window:i=Je}=t;return Ft(e,l,i==null?void 0:i.sessionStorage,t)}function Yg(e={}){const{window:l=Je,...t}=e;return Gg(l,t)}function Xg(e={}){const{window:l=Je,initialWidth:t=Number.POSITIVE_INFINITY,initialHeight:i=Number.POSITIVE_INFINITY,listenOrientation:n=!0,includeScrollbar:r=!0,type:s="inner"}=e,a=ne(t),c=ne(i),d=()=>{if(l)if(s==="outer")a.value=l.outerWidth,c.value=l.outerHeight;else if(s==="visual"&&l.visualViewport){const{width:u,height:g,scale:m}=l.visualViewport;a.value=Math.round(u*m),c.value=Math.round(g*m)}else r?(a.value=l.innerWidth,c.value=l.innerHeight):(a.value=l.document.documentElement.clientWidth,c.value=l.document.documentElement.clientHeight)};d(),Ni(d);const p={passive:!0};if(he("resize",d,p),l&&s==="visual"&&l.visualViewport&&he(l.visualViewport,"resize",d,p),n){const u=ws("(orientation: portrait)");Ie(u,()=>d())}return{width:a,height:c}}var rl=Uint8Array,zt=Uint16Array,Zg=Int32Array,fd=new rl([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),bd=new rl([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),e1=new rl([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),yd=function(e,l){for(var t=new zt(31),i=0;i<31;++i)t[i]=l+=1<<e[i-1];for(var n=new Zg(t[30]),i=1;i<30;++i)for(var r=t[i];r<t[i+1];++r)n[r]=r-t[i]<<5|i;return{b:t,r:n}},_d=yd(fd,2),xd=_d.b,l1=_d.r;xd[28]=258,l1[258]=28;var t1=yd(bd,0),i1=t1.b,Vr=new zt(32768);for(var we=0;we<32768;++we){var Ql=(we&43690)>>1|(we&21845)<<1;Ql=(Ql&52428)>>2|(Ql&13107)<<2,Ql=(Ql&61680)>>4|(Ql&3855)<<4,Vr[we]=((Ql&65280)>>8|(Ql&255)<<8)>>1}var xi=function(e,l,t){for(var i=e.length,n=0,r=new zt(l);n<i;++n)e[n]&&++r[e[n]-1];var s=new zt(l);for(n=1;n<l;++n)s[n]=s[n-1]+r[n-1]<<1;var a;if(t){a=new zt(1<<l);var c=15-l;for(n=0;n<i;++n)if(e[n])for(var d=n<<4|e[n],p=l-e[n],u=s[e[n]-1]++<<p,g=u|(1<<p)-1;u<=g;++u)a[Vr[u]>>c]=d}else for(a=new zt(i),n=0;n<i;++n)e[n]&&(a[n]=Vr[s[e[n]-1]++]>>15-e[n]);return a},Ui=new rl(288);for(var we=0;we<144;++we)Ui[we]=8;for(var we=144;we<256;++we)Ui[we]=9;for(var we=256;we<280;++we)Ui[we]=7;for(var we=280;we<288;++we)Ui[we]=8;var Ld=new rl(32);for(var we=0;we<32;++we)Ld[we]=5;var n1=xi(Ui,9,1),r1=xi(Ld,5,1),gr=function(e){for(var l=e[0],t=1;t<e.length;++t)e[t]>l&&(l=e[t]);return l},kl=function(e,l,t){var i=l/8|0;return(e[i]|e[i+1]<<8)>>(l&7)&t},mr=function(e,l){var t=l/8|0;return(e[t]|e[t+1]<<8|e[t+2]<<16)>>(l&7)},s1=function(e){return(e+7)/8|0},Ad=function(e,l,t){return(l==null||l<0)&&(l=0),(t==null||t>e.length)&&(t=e.length),new rl(e.subarray(l,t))},a1=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],ul=function(e,l,t){var i=new Error(l||a1[e]);if(i.code=e,Error.captureStackTrace&&Error.captureStackTrace(i,ul),!t)throw i;return i},o1=function(e,l,t,i){var n=e.length,r=0;if(!n||l.f&&!l.l)return t||new rl(0);var s=!t,a=s||l.i!=2,c=l.i;s&&(t=new rl(n*3));var d=function(de){var be=t.length;if(de>be){var v=new rl(Math.max(be*2,de));v.set(t),t=v}},p=l.f||0,u=l.p||0,g=l.b||0,m=l.l,k=l.d,y=l.m,x=l.n,E=n*8;do{if(!m){p=kl(e,u,1);var _=kl(e,u+1,3);if(u+=3,_)if(_==1)m=n1,k=r1,y=9,x=5;else if(_==2){var M=kl(e,u,31)+257,T=kl(e,u+10,15)+4,N=M+kl(e,u+5,31)+1;u+=14;for(var F=new rl(N),B=new rl(19),j=0;j<T;++j)B[e1[j]]=kl(e,u+j*3,7);u+=T*3;for(var S=gr(B),H=(1<<S)-1,re=xi(B,S,1),j=0;j<N;){var ge=re[kl(e,u,H)];u+=ge&15;var f=ge>>4;if(f<16)F[j++]=f;else{var K=0,X=0;for(f==16?(X=3+kl(e,u,3),u+=2,K=F[j-1]):f==17?(X=3+kl(e,u,7),u+=3):f==18&&(X=11+kl(e,u,127),u+=7);X--;)F[j++]=K}}var J=F.subarray(0,M),me=F.subarray(M);y=gr(J),x=gr(me),m=xi(J,y,1),k=xi(me,x,1)}else ul(1);else{var f=s1(u)+4,A=e[f-4]|e[f-3]<<8,I=f+A;if(I>n){c&&ul(0);break}a&&d(g+A),t.set(e.subarray(f,I),g),l.b=g+=A,l.p=u=I*8,l.f=p;continue}if(u>E){c&&ul(0);break}}a&&d(g+131072);for(var wl=(1<<y)-1,dl=(1<<x)-1,ze=u;;ze=u){var K=m[mr(e,u)&wl],Xe=K>>4;if(u+=K&15,u>E){c&&ul(0);break}if(K||ul(2),Xe<256)t[g++]=Xe;else if(Xe==256){ze=u,m=null;break}else{var jl=Xe-254;if(Xe>264){var j=Xe-257,Tl=fd[j];jl=kl(e,u,(1<<Tl)-1)+xd[j],u+=Tl}var qe=k[mr(e,u)&dl],C=qe>>4;qe||ul(3),u+=qe&15;var me=i1[C];if(C>3){var Tl=bd[C];me+=mr(e,u)&(1<<Tl)-1,u+=Tl}if(u>E){c&&ul(0);break}a&&d(g+131072);var G=g+jl;if(g<me){var $=r-me,Q=Math.min(me,G);for($+g<0&&ul(3);g<Q;++g)t[g]=i[$+g]}for(;g<G;++g)t[g]=t[g-me]}}l.l=m,l.p=ze,l.b=g,l.f=p,m&&(p=1,l.m=y,l.d=k,l.n=x)}while(!p);return g!=t.length&&s?Ad(t,0,g):t.subarray(0,g)},c1=new rl(0),d1=function(e,l){return((e[0]&15)!=8||e[0]>>4>7||(e[0]<<8|e[1])%31)&&ul(6,"invalid zlib data"),(e[1]>>5&1)==1&&ul(6,"invalid zlib data: "+(e[1]&32?"need":"unexpected")+" dictionary"),(e[1]>>3&4)+2};function h1(e,l){return o1(e.subarray(d1(e),-4),{i:2},l,l)}var Br=typeof TextDecoder<"u"&&new TextDecoder,p1=0;try{Br.decode(c1,{stream:!0}),p1=1}catch{}var u1=function(e){for(var l="",t=0;;){var i=e[t++],n=(i>127)+(i>223)+(i>239);if(t+n>e.length)return{s:l,r:Ad(e,t-1)};n?n==3?(i=((i&15)<<18|(e[t++]&63)<<12|(e[t++]&63)<<6|e[t++]&63)-65536,l+=String.fromCharCode(55296|i>>10,56320|i&1023)):n&1?l+=String.fromCharCode((i&31)<<6|e[t++]&63):l+=String.fromCharCode((i&15)<<12|(e[t++]&63)<<6|e[t++]&63):l+=String.fromCharCode(i)}};function g1(e,l){{for(var t=new rl(e.length),i=0;i<e.length;++i)t[i]=e.charCodeAt(i);return t}for(var n=e.length,i=0;i<n;++i);}function m1(e,l){var t;if(Br)return Br.decode(e);var i=u1(e),n=i.s,t=i.r;return t.length&&ul(8),n}const Ed=[...new Array(6)].map((e,l)=>`[vp-content] h${l+1}`).join(","),v1=(e,l=2)=>{if(l===!1)return[];const[t,i]=typeof l=="number"?[l,l]:l==="deep"?[2,6]:l,n=e.filter(s=>s.level>=t&&s.level<=i),r=[];e:for(let s=0;s<n.length;s++){const a=n[s];if(s===0)r.push(a);else{for(let c=s-1;c>=0;c--){const d=n[c];if(d.level<a.level){d.children.push(a);continue e}}r.push(a)}}return r},k1=(e,l=[])=>{let t;if(l.length){const i=e.cloneNode(!0);i.querySelectorAll(l.join(",")).forEach(n=>{n.remove()}),t=i.textContent||""}else t=e.textContent||"";return t.trim()},f1=(e=Ed,l=[])=>Array.from(document.querySelectorAll(e)).filter(t=>t.id&&t.hasChildNodes()).map(t=>({element:t,title:k1(t,l),link:`#${t.id}`,slug:t.id,level:Number(t.tagName[1]),children:[]})),b1=({selector:e=Ed,levels:l=2,ignore:t=[]}={})=>v1(f1(e,t),l),y1=e=>e instanceof Element?document.activeElement===e&&(["TEXTAREA","SELECT","INPUT"].includes(e.tagName)||e.hasAttribute("contenteditable")):!1,_1=(e,l)=>l.some(t=>{if(De(t))return t===e.key;const{key:i,ctrl:n=!1,shift:r=!1,alt:s=!1}=t;return i===e.key&&n===e.ctrlKey&&r===e.shiftKey&&s===e.altKey}),cl=(e,l)=>{var i;const t=(i=(l==null?void 0:l._instance)??Ct())==null?void 0:i.appContext.components;return t?e in t||He(e)in t||ei(He(e))in t:!1},wd=e=>typeof e<"u",kn=e=>typeof e=="number",{isArray:Cn}=Array,Ii=(e,l)=>De(e)&&e.startsWith(l),x1=(e,l)=>De(e)&&e.endsWith(l),{entries:ni}=Object,{keys:Hl}=Object,Ds=e=>{if(e){if(typeof e=="number")return new Date(e);const l=Date.parse(e.toString());if(!Number.isNaN(l))return new Date(l)}return null},$n=e=>Ii(e,"/")&&e[1]!=="/",L1=(e={})=>{const l=ee([]);return Wl(t=>{l.value=t==="beforeUnmount"?[]:b1(ce(e))}),l},St=e=>{const l=Al();return L(()=>ce(e)[l.value]??{})},A1=(e,l)=>{he("keydown",i=>{const n=ce(e);n!=null&&n.length&&_1(i,n)&&!y1(i.target)&&(i.preventDefault(),l())})},E1=(e=!0)=>{const l=pe(),t=Ne();return L(()=>{var i;return l.value.contributors===!1||!ce(e)?[]:((i=t.value.git)==null?void 0:i.contributors)??[]})};var ao={"/":{contributors:"贡献者",changelog:"更新日志",timeOn:"于",viewChangelog:"查看所有更新日志",latestUpdateAt:"最近更新："}};const w1=typeof ao>"u"?{}:ao,Td=()=>St(w1),T1=(e=!0)=>{const l=zn(),t=Td(),i=Ne();return L(()=>{var a,c,d;if(!ce(e))return null;const n=((a=i.value.git)==null?void 0:a.updatedTime)??((d=(c=i.value.git)==null?void 0:c.changelog)==null?void 0:d[0].time);if(!n)return null;const r=new Date(n),s=new Intl.DateTimeFormat(l.value,{dateStyle:"short",timeStyle:"short"}).format(n);return{date:r,text:s,iso:r.toISOString(),locale:t.value.latestUpdateAt}})},C1=({level:e=2,text:l,anchor:t})=>o(`h${e||2}`,{id:t,tabindex:"-1"},o("a",{href:`#${t}`,class:"header-anchor"},o("span",l))),D1=({name:e,url:l,avatar:t})=>o(l?"a":"span",{href:l,target:"_blank",rel:"noreferrer",class:"vp-contributor"},[t?o("img",{src:t,alt:"",class:"vp-contributor-avatar"}):null,o("span",{class:"vp-contributor-name"},e)]),F1=V({name:"GitContributors",props:{title:String,headerLevel:{type:Number,default:2}},setup(e){const l=E1(),t=Td();return()=>l.value.length?[o(C1,{level:e.headerLevel,anchor:"doc-contributors",text:e.title||t.value.contributors}),o("div",{class:"vp-contributors"},l.value.map(i=>o(D1,i)))]:null}}),S1={enhance:({app:e})=>{e.component("GitContributors",F1)}},I1=Object.freeze(Object.defineProperty({__proto__:null,default:S1},Symbol.toStringTag,{value:"Module"})),O1=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),P1=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),j1=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),R1=Pl({setup(){he("beforeprint",()=>{document.querySelectorAll("details").forEach(e=>{e.open=!0})},{passive:!0})}}),V1=Object.freeze(Object.defineProperty({__proto__:null,default:R1},Symbol.toStringTag,{value:"Module"})),B1="VUEPRESS_CODE_TAB_STORE",dn=Ft(B1,{}),z1=V({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:String},slots:Object,setup(e,{slots:l}){const t=ee(e.active),i=ne([]),n=()=>{e.tabId&&(dn.value[e.tabId]=e.data[t.value].id)},r=(d=t.value)=>{t.value=d<i.value.length-1?d+1:0,i.value[t.value].focus()},s=(d=t.value)=>{t.value=d>0?d-1:i.value.length-1,i.value[t.value].focus()},a=(d,p)=>{d.key===" "||d.key==="Enter"?(d.preventDefault(),t.value=p):d.key==="ArrowRight"?(d.preventDefault(),r()):d.key==="ArrowLeft"&&(d.preventDefault(),s()),e.tabId&&(dn.value[e.tabId]=e.data[t.value].id)},c=()=>{if(e.tabId){const d=e.data.findIndex(({id:p})=>dn.value[e.tabId]===p);if(d!==-1)return d}return e.active};return Ee(()=>{t.value=c(),Ie(()=>e.tabId&&dn.value[e.tabId],(d,p)=>{if(e.tabId&&d!==p){const u=e.data.findIndex(({id:g})=>g===d);u!==-1&&(t.value=u)}})}),()=>e.data.length?o("div",{class:"vp-code-tabs"},[o("div",{class:"vp-code-tabs-nav",role:"tablist"},e.data.map(({id:d},p)=>{const u=p===t.value;return o("button",{type:"button",ref:g=>{g&&(i.value[p]=g)},class:["vp-code-tab-nav",{active:u}],role:"tab","aria-controls":`codetab-${e.id}-${p}`,"aria-selected":u,onClick:()=>{t.value=p,n()},onKeydown:g=>{a(g,p)}},l[`title${p}`]({value:d,isActive:u}))})),e.data.map(({id:d},p)=>{const u=p===t.value;return o("div",{class:["vp-code-tab",{active:u}],id:`codetab-${e.id}-${p}`,role:"tabpanel","aria-expanded":u},[o("div",{class:"vp-code-tab-title"},l[`title${p}`]({value:d,isActive:u})),l[`tab${p}`]({value:d,isActive:u})])})]):null}}),q1="VUEPRESS_TAB_STORE",vr=Ft(q1,{}),M1=V({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:String},slots:Object,setup(e,{slots:l}){const t=ee(e.active),i=ne([]),n=()=>{e.tabId&&(vr.value[e.tabId]=e.data[t.value].id)},r=(d=t.value)=>{t.value=d<i.value.length-1?d+1:0,i.value[t.value].focus()},s=(d=t.value)=>{t.value=d>0?d-1:i.value.length-1,i.value[t.value].focus()},a=(d,p)=>{d.key===" "||d.key==="Enter"?(d.preventDefault(),t.value=p):d.key==="ArrowRight"?(d.preventDefault(),r()):d.key==="ArrowLeft"&&(d.preventDefault(),s()),n()},c=()=>{if(e.tabId){const d=e.data.findIndex(({id:p})=>vr.value[e.tabId]===p);if(d!==-1)return d}return e.active};return Ee(()=>{t.value=c(),Ie(()=>e.tabId&&vr.value[e.tabId],(d,p)=>{if(e.tabId&&d!==p){const u=e.data.findIndex(({id:g})=>g===d);u!==-1&&(t.value=u)}})}),()=>e.data.length?o("div",{class:"vp-tabs"},[o("div",{class:"vp-tabs-nav",role:"tablist"},e.data.map(({id:d},p)=>{const u=p===t.value;return o("button",{type:"button",ref:g=>{g&&(i.value[p]=g)},class:["vp-tab-nav",{active:u}],role:"tab","aria-controls":`tab-${e.id}-${p}`,"aria-selected":u,onClick:()=>{t.value=p,n()},onKeydown:g=>{a(g,p)}},l[`title${p}`]({value:d,isActive:u}))})),e.data.map(({id:d},p)=>{const u=p===t.value;return o("div",{class:["vp-tab",{active:u}],id:`tab-${e.id}-${p}`,role:"tabpanel","aria-expanded":u},[o("div",{class:"vp-tab-title"},l[`title${p}`]({value:d,isActive:u})),l[`tab${p}`]({value:d,isActive:u})])})]):null}}),$1={enhance:({app:e})=>{e.component("CodeTabs",z1),e.component("Tabs",M1)}},H1=Object.freeze(Object.defineProperty({__proto__:null,default:$1},Symbol.toStringTag,{value:"Module"})),oo=e=>typeof e=="number"?`${e}px`:e,Cd=({size:e=48,stroke:l=4,wrapper:t=!0,height:i=2*e})=>{const n=o("span",{style:`--loading-icon: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='${l}' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E");
--icon-size: ${oo(e)};
display: inline-block;
width: var(--icon-size);
height: var(--icon-size);
background-color: currentcolor;
-webkit-mask-image: var(--loading-icon);
mask-image: var(--loading-icon);
`});return t?o("div",{style:`display: flex;
align-items: center;
justify-content: center;
height: ${oo(i)}`},n):n};Cd.displayName="LoadingIcon";const co=e=>{const l=atob(e);return m1(h1(g1(l)))};[...new Array(6)].map((e,l)=>`[vp-content] h${l+1}`).join(",");const N1=e=>typeof e<"u",{keys:Dd}=Object,U1='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',G1='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>';var W1={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"};const kr=W1,ho={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},K1=(e,l,t)=>{const i=document.createElement(e);return ti(l)&&Dd(l).forEach(n=>{if(n.indexOf("data"))i[n]=l[n];else{const r=n.replace("data","");i.dataset[r]=l[n]}}),i},Fs=e=>({...kr,...e,jsLib:Array.from(new Set([kr.jsLib,e.jsLib??[]].flat())),cssLib:Array.from(new Set([kr.cssLib,e.cssLib??[]].flat()))}),Gt=(e,l)=>{if(N1(e[l]))return e[l];const t=new Promise(i=>{var r;const n=document.createElement("script");n.src=l,(r=document.querySelector("body"))==null||r.appendChild(n),n.onload=()=>{i()}});return e[l]=t,t},J1=(e,l)=>{if(l.css&&Array.from(e.childNodes).every(t=>t.nodeName!=="STYLE")){const t=K1("style",{innerHTML:l.css});e.appendChild(t)}},Q1=(e,l,t)=>{const i=t.getScript();if(i&&Array.from(l.childNodes).every(n=>n.nodeName!=="SCRIPT")){const n=document.createElement("script");n.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${e} .vp-code-demo-display').shadowRoot;
${i}}`)),l.appendChild(n)}},Y1=["html","js","css"],X1=e=>{const l=Dd(e),t={html:[],js:[],css:[],isLegal:!1};return Y1.forEach(i=>{const n=l.filter(r=>ho[i].types.includes(r));if(n.length){const r=n[0];t[i]=[e[r].replace(/^\n|\n$/g,""),ho[i].map[r]??r]}}),t.isLegal=(!t.html.length||t.html[1]==="none")&&(!t.js.length||t.js[1]==="none")&&(!t.css.length||t.css[1]==="none"),t},Fd=e=>e.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),Sd=e=>`<div id="app">
${Fd(e)}
</div>`,Z1=e=>`${e.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,em=e=>e.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),Id=e=>`(function(exports){var module={};module.exports=exports;${e};return module.exports.__esModule?exports.default:module.exports;})({})`,lm=(e,l)=>{const t=Fs(l),i=e.js[0]??"";return{...t,html:Fd(e.html[0]??""),js:i,css:e.css[0]??"",isLegal:e.isLegal,getScript:()=>{var n,r;return t.useBabel?((r=(n=window.Babel)==null?void 0:n.transform(i,{presets:["es2015"]}))==null?void 0:r.code)??"":i}}},tm=/<template>([\s\S]+)<\/template>/u,im=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,nm=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,rm=(e,l)=>{const t=Fs(l),i=e.html[0]??"",n=tm.exec(i),r=im.exec(i),s=nm.exec(i),a=(n==null?void 0:n[1].replace(/^\n|\n$/g,""))??"",[c="",d=""]=r?[r[4].replace(/^\n|\n$/g,""),r[3]]:[],[p="",u=""]=s?[s[4].replace(/^\n|\n$/g,""),s[3]]:[],g=d===""&&(u===""||u==="css");return{...t,html:Sd(a),js:em(c),css:p,isLegal:g,jsLib:[t.vue,...t.jsLib],getScript:()=>{var k,y;const m=l.useBabel?((y=(k=window.Babel)==null?void 0:k.transform(c,{presets:["es2015"]}))==null?void 0:y.code)??"":c.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${Id(m)};appOptions.template=\`${a.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},sm=(e,l)=>{var n;const t=Fs(l),i=e.js[0]??"";return{...t,html:Sd(""),js:Z1(i),css:e.css[0]??((n=e.js[0])==null?void 0:n.replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim())??"",isLegal:e.isLegal,jsLib:[t.react,t.reactDOM,...t.jsLib],jsx:!0,getScript:()=>{var s,a;const r=((a=(s=window.Babel)==null?void 0:s.transform(i,{presets:["es2015","react"]}))==null?void 0:a.code)??"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${Id(r)}))`}}},Wt={},am=e=>Promise.all([Gt(Wt,e.babel),Gt(Wt,e.react),Gt(Wt,e.reactDOM)]),om=e=>{const l=[Gt(Wt,e.vue)];return e.useBabel&&l.push(Gt(Wt,e.babel)),Promise.all(l)},cm=e=>e.useBabel?Gt(Wt,e.babel):Promise.resolve();var dm=V({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:String,config:String,code:{type:String,required:!0}},slots:Object,setup(e,{slots:l}){const[t,i]=Si(!1),n=ne(),r=ne(),s=ee("0"),a=ee(!1),c=L(()=>JSON.parse(e.config?co(e.config):"{}")),d=L(()=>{const k=JSON.parse(co(e.code));return X1(k)}),p=L(()=>e.type==="react"?sm(d.value,c.value):e.type==="vue"?rm(d.value,c.value):lm(d.value,c.value)),u=L(()=>p.value.isLegal),g=(k=!1)=>{const y=n.value.attachShadow({mode:"open"}),x=document.createElement("div");x.classList.add("code-demo-app"),y.appendChild(x),u.value?(k&&(x.innerHTML=p.value.html),J1(y,p.value),Q1(e.id,y,p.value),s.value="0"):s.value="auto",a.value=!0},m=()=>{switch(e.type){case"react":return am(p.value).then(()=>{g()});case"vue":return om(p.value).then(()=>{g()});default:return cm(p.value).then(()=>{g(!0)})}};return he("beforeprint",()=>{i(!0)}),Ee(async()=>{await m()}),()=>o("div",{class:"vp-container vp-code-demo",id:e.id},[o("div",{class:"vp-container-header"},[p.value.isLegal?o("button",{type:"button",title:"toggle",class:["vp-code-demo-toggle-button",t.value?"down":"end"],onClick:()=>{s.value=t.value?"0":`${r.value.clientHeight+13.8}px`,i()}}):null,e.title?o("span",{class:"vp-container-title"},decodeURIComponent(e.title)):null,p.value.isLegal&&(p.value.jsfiddle??!0)?o("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[o("input",{type:"hidden",name:"html",value:p.value.html}),o("input",{type:"hidden",name:"js",value:p.value.js}),o("input",{type:"hidden",name:"css",value:p.value.css}),o("input",{type:"hidden",name:"wrap",value:"1"}),o("input",{type:"hidden",name:"panel_js",value:"3"}),o("input",{type:"hidden",name:"resources",value:[...p.value.cssLib,...p.value.jsLib].join(",")}),o("button",{type:"submit",class:"jsfiddle-button",innerHTML:G1,"aria-label":"JSFiddle","data-balloon-pos":"down"})]):null,!p.value.isLegal||(p.value.codepen??!0)?o("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[o("input",{type:"hidden",name:"data",value:JSON.stringify({html:p.value.html,js:p.value.js,css:p.value.css,js_external:p.value.jsLib.join(";"),css_external:p.value.cssLib.join(";"),layout:p.value.codepenLayout,html_pre_processor:d.value.html[1]??"none",js_pre_processor:d.value.js[1]??(p.value.jsx?"babel":"none"),css_pre_processor:d.value.css[1]??"none",editors:p.value.codepenEditors})}),o("button",{type:"submit",innerHTML:U1,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"down"})]):null]),a.value?null:o(Cd,{class:"vp-code-demo-loading"}),o("div",{ref:n,class:"vp-code-demo-display",style:{display:u.value&&a.value?"block":"none"}}),o("div",{class:"vp-code-demo-code-wrapper",style:{height:s.value}},o("div",{ref:r,class:"vp-code-demo-codes"},l.default()))])}}),hm=V({name:"MdDemo",props:{id:{type:String,required:!0},title:String},slots:Object,setup(e,{slots:l}){const[t,i]=Si(!1),n=ne(),r=ee("0");return he("beforeprint",()=>{i(!0)}),()=>o("div",{class:"vp-container vp-md-demo",id:e.id},[o("div",{class:"vp-container-header"},[o("button",{type:"button",title:"toggle",class:["vp-md-demo-toggle-button",t.value?"down":"end"],onClick:()=>{r.value=t.value?"0":`${n.value.clientHeight+13.8}px`,i()}}),e.title?o("div",{class:"vp-container-title"},decodeURIComponent(e.title)):null]),o("div",{class:"vp-md-demo-display"},l.default()),o("div",{class:"vp-md-demo-code-wrapper",style:{height:r.value}},o("div",{ref:n,class:"vp-md-demo-codes"},l.code()))])}});const pm={enhance:({app:e})=>{e.component("CodeDemo",dm),e.component("MdDemo",hm)}},um=Object.freeze(Object.defineProperty({__proto__:null,default:pm},Symbol.toStringTag,{value:"Module"})),gm=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),mm=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"})),vm=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$ckkOJkh/QSS6Jgi..hYRvejqHMgLR58iUI/IT/sQfWS1Sb1Sm17Gm"],"hint":"Password: 1234"},"/zh/demo/encrypt.html":{"tokens":["$2b$10$3/DME1HX0OoPmtKroQMayuByXMbVWYLBVEhZMA/gGaU2kxF5zhK8K"],"hint":"Password: 1234"}}},"author":{"name":"老马啸西风","url":"https://houbb.github.io"},"logo":"/assets/images/lmxxf.png","repo":"houbb/leetcode-notes","docsDir":"src","blog":{"medias":{"GitHub":"https://houbb.github.com","Zhihu":"https://www.zhihu.com/people/xi-jue-3-28","Gitee":"https://gitee.com/houbinbin","Gitlab":"https://gitlab.com/houbb","Gmail":"houbinbin.echo@gmail.com","Wechat":"https://mp.weixin.qq.com/s/rkSvXxiiLGjl3S-ZOZCr0Q","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"Edit this page on GitHub","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":[{"text":"个人成长","icon":"fa6-solid:user-graduate","children":[{"text":"老马随笔","icon":"fa6-solid:pen-nib","link":"/category/notes/"},{"text":"职业发展","icon":"fa6-solid:user-tie","link":"/category/company/"},{"text":"方法模型","icon":"fa6-solid:diagram-project","link":"/category/methodsandmodel/"}]},{"text":"财务自由","icon":"fa6-solid:sack-dollar","children":[{"text":"财富自由","icon":"fa6-solid:sack-dollar","link":"/category/money/"},{"text":"商业思考","icon":"fa6-solid:briefcase","link":"/category/business/"}]},{"text":"推广营销","icon":"fa6-solid:bullhorn","children":[{"text":"市场营销","icon":"fa6-solid:bullhorn","link":"/category/marketing/"},{"text":"媒体运营","icon":"fa6-solid:photo-film","link":"/category/fans/"}]},{"text":"生活兴趣","icon":"fa6-solid:heart","children":[{"text":"环游世界","icon":"fa6-solid:globe","link":"/category/travel/"},{"text":"电影影视","icon":"fa6-solid:film","link":"/category/moive/"},{"text":"读书笔记","icon":"fa6-solid:book-open","link":"/category/reading/"}]},{"text":"全部文章","icon":"fa6-solid:pen-to-square","link":"/posts/"}],"sidebar":{"/":"structure"},"footer":"我是老马，期待与你的下次重逢","displayFooter":true,"blog":{"description":"一个兴趣使然的技术爱好者","intro":"/intro.html"}}}}'),km=ee(vm),Od=()=>km,Pd=Symbol(""),fm=()=>{const e=Te(Pd);if(!e)throw new Error("useThemeLocaleData() is called without provider.");return e},bm=(e,l)=>{const{locales:t,...i}=e;return{...i,...t==null?void 0:t[l]}},ym=Pl({enhance({app:e}){const l=Od(),t=e._context.provides[xs],i=L(()=>bm(l.value,t.routeLocale.value));e.provide(Pd,i),Object.defineProperties(e.config.globalProperties,{$theme:{get(){return l.value}},$themeLocale:{get(){return i.value}}})}}),_m=Object.freeze(Object.defineProperty({__proto__:null,default:ym},Symbol.toStringTag,{value:"Module"}));var xm={"/":{backToTop:"返回顶部"}};const Lm=V({name:"BackToTop",setup(){const e=pe(),l=St(xm),t=ne(),{height:i}=Ug(t),{height:n}=Xg(),{y:r}=Yg(),s=L(()=>(e.value.backToTop??!0)&&r.value>100),a=L(()=>r.value/(i.value-n.value)*100);return Ee(()=>{t.value=document.body}),()=>o(Qt,{name:"back-to-top"},()=>s.value?o("button",{type:"button",class:"vp-back-to-top-button","aria-label":l.value.backToTop,onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[o("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":a.value},o("svg",o("circle",{cx:"26",cy:"26",r:"24",fill:"none",stroke:"currentColor","stroke-width":"4","stroke-dasharray":`${Math.PI*a.value*.48} ${Math.PI*(100-a.value)*.48}`}))),o("div",{class:"back-to-top-icon"})]):null)}}),Am=Pl({rootComponents:[Lm]}),Em=Object.freeze(Object.defineProperty({__proto__:null,default:Am},Symbol.toStringTag,{value:"Module"})),wm=/language-(shellscript|shell|bash|sh|zsh)/,Tm=({selector:e,ignoreSelector:l,inlineSelector:t,duration:i=2e3,locales:n,showInMobile:r,transform:s})=>{const a=ws("(max-width: 419px)"),c=L(()=>!a.value||r),d=St(n),p=y=>{var E;if(y.hasAttribute("copy-code"))return;const x=document.createElement("button");x.type="button",x.classList.add("vp-copy-code-button"),x.setAttribute("aria-label",d.value.copy),x.setAttribute("data-copied",d.value.copied),(E=y.parentElement)==null||E.insertBefore(x,y),y.setAttribute("copy-code","")},u=()=>{document.body.classList.toggle("no-copy-code",!c.value),c.value&&document.querySelectorAll(e).forEach(p)};Ol(c,u,{flush:"post"}),Wl(y=>{y!=="beforeUnmount"&&u()});const{copy:g}=Rg({legacy:!0}),m=new WeakMap,k=async(y,x,E)=>{const _=x.cloneNode(!0);s&&s(_);let f=_.textContent||"";if(wm.test(y.className)&&(f=f.replace(/^ *(\$|>) /gm,"")),await g(f),i<=0)return;E.classList.add("copied"),clearTimeout(m.get(E));const A=setTimeout(()=>{E.classList.remove("copied"),E.blur(),m.delete(E)},i);m.set(E,A)};he("click",y=>{const x=y.target;if(c.value&&x.matches('div[class*="language-"] > button.vp-copy-code-button')){const E=x.parentElement,_=x.nextElementSibling;if(!E||!_)return;k(E,_,x)}},{passive:!0})};var Cm={"/":{copy:"复制代码",copied:"已复制"}};const Dm=Pl({setup:()=>{Tm({selector:'[vp-content] div[class*="language-"] pre',ignoreSelector:"",inlineSelector:"",locales:Cm,duration:2e3,showInMobile:!1})}}),Fm=Object.freeze(Object.defineProperty({__proto__:null,default:Dm},Symbol.toStringTag,{value:"Module"})),Sm=V({name:"VPIcon",props:{type:{type:String,default:"unknown"},prefix:String,icon:String,color:String,size:[String,Number],verticalAlign:String,sizing:{type:String,default:"height"}},setup(e){const l=L(()=>e.icon?li(e.icon)?e.icon:$n(e.icon)?ye(e.icon):null:null),t=L(()=>{const n={},r={},{type:s,verticalAlign:a,size:c,sizing:d}=e;return e.color&&(r.color=e.color),c&&(r["--icon-size"]=Number.isNaN(Number(c))?c:`${c}px`),a&&(r["--icon-vertical-align"]=a),s==="iconify"&&(d!=="height"&&(n.width=e.size||"1em"),d!=="width"&&(n.height=e.size||"1em")),e.sizing&&(n.sizing=e.sizing),Hl(r).length&&(n.style=r),n}),i=n=>n.includes("fa-")||/^fa.$/.test(n)?n:`fa-${n}`;return()=>{const{type:n,icon:r,prefix:s="",sizing:a}=e;if(!r)return null;if(l.value)return o("img",{class:"vp-icon",src:l.value,alt:"","aria-hidden":"","no-view":"",...t.value});if(n==="iconify")return o("iconify-icon",{key:r,class:"vp-icon",icon:r.includes(":")?r:`${s}${r}`,...t.value});if(n==="fontawesome"){const[c,d]=r.includes(":")?r.split(":",2):["fas",r];return o("i",{key:r,class:["vp-icon",c.length===1?`fa${c}`:i(c),...d.split(" ").map(i),a==="height"?"":"fa-fw"],...t.value})}return o("i",{key:r,class:["vp-icon",r.includes(" ")?r:`${s}${r}`],...t.value})}}}),Im={enhance:({app:e})=>{cl("VPIcon")||e.component("VPIcon",l=>o(Sm,{type:"iconify",prefix:"fa6-solid:",...l}))},setup:()=>{Jg("https://cdn.jsdelivr.net/npm/iconify-icon@2")}},Om=Object.freeze(Object.defineProperty({__proto__:null,default:Im},Symbol.toStringTag,{value:"Module"})),Pm=ee({}),jd=Symbol(""),jm=()=>Te(jd),Rm=e=>{e.provide(jd,Pm)},Rd=e=>new Promise((l,t)=>{e.complete?l({type:"image",element:e,src:e.src,width:e.naturalWidth,height:e.naturalHeight,alt:e.alt,msrc:e.src}):(e.onload=()=>{l(Rd(e))},e.onerror=()=>{t()})}),Vm='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',Bm=(e,{download:l=!0,fullscreen:t=!0}={})=>{e.on("uiRegister",()=>{if(e.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:i=>{const n=[];let r=-1;for(let s=0;s<e.getNumItems();s++){const a=document.createElement("div");a.className="photo-swipe-bullet",a.onclick=c=>{e.goTo(n.indexOf(c.target))},n.push(a),i.appendChild(a)}e.on("change",()=>{r>=0&&n[r].classList.remove("active"),n[e.currIndex].classList.add("active"),r=e.currIndex})}}),t){const{isSupported:i,toggle:n}=Mn();i.value&&e.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{n()}})}l&&e.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:i=>{i.setAttribute("download",""),i.setAttribute("target","_blank"),i.setAttribute("rel","noopener"),e.on("change",()=>{i.setAttribute("href",e.currSlide.data.src)})}})})},zm=({selector:e,locales:l,download:t=!0,fullscreen:i=!0,scrollToClose:n=!0})=>{const r=jm(),s=St(l),a=pe(),c=L(()=>{const{photoSwipe:k}=a.value;return k===!1?null:De(k)?k:Cn(e)?e.join(", "):e}),d=L(()=>({...r.value,...s.value,download:t,fullscreen:i,scrollToClose:n}));let p=null,u=0,g=null;const m=async k=>{const y=k.target;if(!c.value||!p||!y.matches(c.value))return;u!==0&&g.destroy();const x=Date.now(),E=await p,_=Array.from(document.querySelectorAll(c.value)),f=_.map(I=>({html:Vm,element:I,msrc:I.src})),A=_.findIndex(I=>I===y);g=new E({preloaderDelay:0,showHideAnimationType:"zoom",...d,dataSource:f,index:A,...n?{closeOnVerticalDrag:!0,wheelToZoom:!1}:{}}),u=x,Bm(g,{download:t,fullscreen:i}),g.init(),g.on("destroy",()=>{g=null,u=0}),_.map((I,M)=>Rd(I).then(T=>{u===x&&(f.splice(M,1,T),g==null||g.refreshSlideContent(M))}))};Ee(()=>{const k="requestIdleCallback"in window?window.requestIdleCallback:setTimeout;he("click",m,{passive:!0}),he("wheel",()=>{d.value.scrollToClose&&(g==null||g.close())}),k(()=>{p=h(async()=>{const{default:y}=await import("./photoswipe.esm-DXWKOczD.js");return{default:y}},[]).then(({default:y})=>y)})}),Tt(()=>{g==null||g.destroy()})};var qm={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const Mm="[vp-content] :not(a) > img:not([no-view])",$m=qm,Hm=!0,Nm=!0,Um=!0;var Gm=Pl({enhance:({app:e})=>{Rm(e)},setup:()=>{zm({selector:Mm,locales:$m,download:Hm,fullscreen:Nm,scrollToClose:Um})}});const Wm=Object.freeze(Object.defineProperty({__proto__:null,default:Gm},Symbol.toStringTag,{value:"Module"}));[...new Array(6)].map((e,l)=>`[vp-content] h${l+1}`).join(",");const po=(e,l)=>{var i;const t=(i=Ct())==null?void 0:i.appContext.components;return t?e in t||He(e)in t||ei(He(e))in t:!1},Vd=({type:e="info",text:l="",vertical:t,color:i,bgColor:n},{slots:r})=>{var s;return o("span",{class:["vp-badge",e,{diy:!!(i||n)}],style:{backgroundColor:n??!1,color:i??!1,verticalAlign:t??!1}},((s=r.default)==null?void 0:s.call(r))??l)};Vd.displayName="Badge";const Bd=({title:e,desc:l="",logo:t,background:i,color:n,link:r})=>{const s=[t?o("img",{class:"vp-card-logo",src:ye(t),loading:"lazy","no-view":""}):null,o("div",{class:"vp-card-content"},[o("div",{class:"vp-card-title",innerHTML:e}),o("hr"),o("div",{class:"vp-card-desc",innerHTML:l})])],a={};return i&&(a.background=i),n&&(a.color=n),r?Rn(r)?o("a",{class:"vp-card",href:r,target:"_blank",style:a},s):o(Oe,{to:r,class:"vp-card",style:a},()=>s):o("div",{class:"vp-card",style:a},s)};Bd.displayName="VPCard";const Km={enhance:({app:e})=>{po("Badge")||e.component("Badge",Vd),po("VPCard")||e.component("VPCard",Bd)},setup:()=>{},rootComponents:[]},Jm=Object.freeze(Object.defineProperty({__proto__:null,default:Km},Symbol.toStringTag,{value:"Module"})),uo=async(e,l)=>{const{path:t,query:i}=e.currentRoute.value,{scrollBehavior:n}=e.options;e.options.scrollBehavior=void 0,await e.replace({path:t,query:i,hash:l}),e.options.scrollBehavior=n},Qm=({headerLinkSelector:e,headerAnchorSelector:l,delay:t,offset:i=5})=>{const n=Ul();he("scroll",ud(()=>{var k,y;const s=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(s-0)<i){uo(n,"");return}const c=window.innerHeight+s,d=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),p=Math.abs(d-c)<i,u=Array.from(document.querySelectorAll(e)),m=Array.from(document.querySelectorAll(l)).filter(x=>u.some(E=>E.hash===x.hash));for(let x=0;x<m.length;x++){const E=m[x],_=m[x+1],f=s>=(((k=E.parentElement)==null?void 0:k.offsetTop)??0)-i,A=!_||s<(((y=_.parentElement)==null?void 0:y.offsetTop)??0)-i;if(!(f&&A))continue;const M=decodeURIComponent(n.currentRoute.value.hash),T=decodeURIComponent(E.hash);if(M===T)return;if(p){for(let N=x+1;N<m.length;N++)if(M===decodeURIComponent(m[N].hash))return}uo(n,T);return}},t))},Ym=".vp-sidebar-link, .vp-toc-link",Xm=".header-anchor",Zm=200,ev=5,lv=Pl({setup(){Qm({headerLinkSelector:Ym,headerAnchorSelector:Xm,delay:Zm,offset:ev})}}),tv=Object.freeze(Object.defineProperty({__proto__:null,default:lv},Symbol.toStringTag,{value:"Module"}));let zd=e=>De(e.title)?{title:e.title}:null;const qd=Symbol(""),iv=e=>{zd=e},nv=()=>Te(qd),rv=e=>{e.provide(qd,zd)};var sv={"/":{title:"目录",empty:"暂无目录"}},av=V({name:"Catalog",props:{base:String,level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(e){const l=nv(),t=St(sv),i=Ne(),n=ig(),r=sd(),s=ne(ni(n.value).map(([c,{meta:d}])=>{const p=l(d);if(!p)return null;const u=c.split("/").length;return{level:x1(c,"/")?u-2:u-1,base:c.replace(/\/[^/]+\/?$/,"/"),path:c,...p}}).filter(c=>ti(c)&&De(c.title))),a=L(()=>{const c=e.base?G2(Gc(e.base)):i.value.path.replace(/\/[^/]+$/,"/"),d=c.split("/").length-2,p=[];return s.value.filter(({level:u,path:g})=>{if(!Ii(g,c)||g===c)return!1;if(c==="/"){const m=Hl(r.value.locales).filter(k=>k!=="/");if(g==="/404.html"||m.some(k=>Ii(g,k)))return!1}return u-d<=e.level}).sort(({title:u,level:g,order:m},{title:k,level:y,order:x})=>g-y||(kn(m)?kn(x)?m>0?x>0?m-x:-1:x<0?m-x:1:m:kn(x)?x:u.localeCompare(k))).forEach(u=>{var k;const{base:g,level:m}=u;switch(m-d){case 1:{p.push(u);break}case 2:{const y=p.find(x=>x.path===g);y&&(y.children??(y.children=[])).push(u);break}default:{const y=p.find(x=>x.path===g.replace(/\/[^/]+\/$/,"/"));if(y){const x=(k=y.children)==null?void 0:k.find(E=>E.path===g);x&&(x.children??(x.children=[])).push(u)}}}}),p});return()=>{const c=a.value.some(d=>d.children);return o("div",{class:["vp-catalog",{index:e.index}]},[e.hideHeading?null:o("h2",{class:"vp-catalog-main-title"},t.value.title),a.value.length?o(e.index?"ol":"ul",{class:["vp-catalog-list",{deep:c}]},a.value.map(({children:d=[],title:p,path:u,content:g})=>{const m=o(Oe,{class:"vp-catalog-title",to:u},()=>g?o(g):p);return o("li",{class:"vp-catalog-item"},c?[o("h3",{id:p,class:["vp-catalog-child-title",{"has-children":d.length}]},[o("a",{href:`#${p}`,class:"vp-catalog-header-anchor","aria-hidden":!0}),m]),d.length?o(e.index?"ol":"ul",{class:"vp-child-catalogs"},d.map(({children:k=[],content:y,path:x,title:E})=>o("li",{class:"vp-child-catalog"},[o("div",{class:["vp-catalog-sub-title",{"has-children":k.length}]},[o("a",{href:`#${E}`,class:"vp-catalog-header-anchor"}),o(Oe,{class:"vp-catalog-title",to:x},()=>y?o(y):E)]),k.length?o(e.index?"ol":"div",{class:e.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},k.map(({content:_,path:f,title:A})=>e.index?o("li",{class:"vp-sub-catalog"},o(Oe,{to:f},()=>_?o(_):A)):o(Oe,{class:"vp-sub-catalog-link",to:f},()=>_?o(_):A))):null]))):null]:o("div",{class:"vp-catalog-child-title"},m))})):o("p",{class:"vp-empty-catalog"},t.value.empty)])}}}),ov=Pl({enhance:({app:e})=>{rv(e),cl("Catalog",e)||e.component("Catalog",av)}});const cv=Object.freeze(Object.defineProperty({__proto__:null,default:ov},Symbol.toStringTag,{value:"Module"}));/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const go=(e,l)=>{e.classList.add(l)},mo=(e,l)=>{e.classList.remove(l)},dv=e=>{var l;(l=e==null?void 0:e.parentNode)==null||l.removeChild(e)},fr=(e,l,t)=>e<l?l:e>t?t:e,vo=e=>(-1+e)*100,hv=(()=>{const e=[],l=()=>{const t=e.shift();t&&t(l)};return t=>{e.push(t),e.length===1&&l()}})(),pv=e=>e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(l,t)=>t.toUpperCase()),hn=(()=>{const e=["Webkit","O","Moz","ms"],l={},t=r=>{const{style:s}=document.body;if(r in s)return r;const a=r.charAt(0).toUpperCase()+r.slice(1);let c=e.length;for(;c--;){const d=`${e[c]}${a}`;if(d in s)return d}return r},i=r=>{const s=pv(r);return l[s]??(l[s]=t(s))},n=(r,s,a)=>{r.style[i(s)]=a};return(r,s)=>{for(const a in s){const c=s[a];Object.hasOwn(s,a)&&wd(c)&&n(r,a,c)}}})(),Bl={minimum:.08,easing:"ease",speed:200,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},Se={percent:null,isRendered:()=>!!document.getElementById("nprogress"),set:e=>{const{speed:l,easing:t}=Bl,i=Se.isStarted(),n=fr(e,Bl.minimum,1);Se.percent=n===1?null:n;const r=Se.render(!i),s=r.querySelector(Bl.barSelector);return r.offsetWidth,hv(a=>{hn(s,{transform:`translate3d(${vo(n)}%,0,0)`,transition:`all ${l}ms ${t}`}),n===1?(hn(r,{transition:"none",opacity:"1"}),r.offsetWidth,setTimeout(()=>{hn(r,{transition:`all ${l}ms linear`,opacity:"0"}),setTimeout(()=>{Se.remove(),a()},l)},l)):setTimeout(()=>{a()},l)}),Se},isStarted:()=>typeof Se.percent=="number",start:()=>{Se.percent||Se.set(0);const e=()=>{setTimeout(()=>{Se.percent&&(Se.trickle(),e())},Bl.trickleSpeed)};return e(),Se},done:e=>!e&&!Se.percent?Se:Se.increase(.3+.5*Math.random()).set(1),increase:e=>{let{percent:l}=Se;return l?(l=fr(l+(typeof e=="number"?e:(1-l)*fr(Math.random()*l,.1,.95)),0,.994),Se.set(l)):Se.start()},trickle:()=>Se.increase(Math.random()*Bl.trickleRate),render:e=>{if(Se.isRendered())return document.getElementById("nprogress");go(document.documentElement,"nprogress-busy");const l=document.createElement("div");l.id="nprogress",l.innerHTML=Bl.template;const t=l.querySelector(Bl.barSelector),i=document.querySelector(Bl.parent),n=e?"-100":vo(Se.percent??0);return hn(t,{transition:"all 0 linear",transform:`translate3d(${n}%,0,0)`}),i&&(i!==document.body&&go(i,"nprogress-custom-parent"),i.appendChild(l)),l},remove:()=>{mo(document.documentElement,"nprogress-busy"),mo(document.querySelector(Bl.parent),"nprogress-custom-parent"),dv(document.getElementById("nprogress"))}},uv=()=>{Ee(()=>{const e=Ul(),l=new Set;l.add(e.currentRoute.value.path),e.beforeEach(t=>{l.has(t.path)||Se.start()}),e.afterEach(t=>{l.add(t.path),Se.done()})})},gv=Pl({setup(){uv()}}),mv=Object.freeze(Object.defineProperty({__proto__:null,default:gv},Symbol.toStringTag,{value:"Module"})),vv=[{title:"老马啸西风",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"介绍页",headers:[{level:2,title:"关于我",slug:"关于我",link:"#关于我",children:[]},{level:2,title:"个人公众号",slug:"个人公众号",link:"#个人公众号",children:[]}],path:"/intro.html",pathLocale:"/",extraFields:[]},{title:"Algorithm Analysis 算法分析 时间复杂度",headers:[{level:3,title:"翻译要点说明：",slug:"翻译要点说明",link:"#翻译要点说明",children:[]}],path:"/posts/algorithm/2018-05-30-algorithm-analysis.html",pathLocale:"/",extraFields:[]},{title:"Bloom Filter",headers:[{level:2,title:"布隆过滤器速成",slug:"布隆过滤器速成",link:"#布隆过滤器速成",children:[]},{level:2,title:"特点",slug:"特点",link:"#特点",children:[]},{level:2,title:"引入 jar",slug:"引入-jar",link:"#引入-jar",children:[]},{level:2,title:"测试 demo",slug:"测试-demo",link:"#测试-demo",children:[]},{level:2,title:"原理回顾",slug:"原理回顾",link:"#原理回顾",children:[]},{level:2,title:"实现思路",slug:"实现思路",link:"#实现思路",children:[]},{level:2,title:"hash 算法",slug:"hash-算法",link:"#hash-算法",children:[]},{level:2,title:"Bloom Fliter 实现",slug:"bloom-fliter-实现",link:"#bloom-fliter-实现",children:[]}],path:"/posts/algorithm/2018-12-05-bloom-filter.html",pathLocale:"/",extraFields:[]},{title:"位图法对大量整数进行排序",headers:[{level:2,title:"关键点说明：",slug:"关键点说明",link:"#关键点说明",children:[]}],path:"/posts/algorithm/2019-01-03-many-number-sort.html",pathLocale:"/",extraFields:[]},{title:"优先级队列与堆排序 PriorityQueue & heap sort",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"初步思路",slug:"初步思路",link:"#初步思路",children:[]},{level:2,title:"进一步优化",slug:"进一步优化",link:"#进一步优化",children:[]},{level:2,title:"二叉堆的概念",slug:"二叉堆的概念",link:"#二叉堆的概念",children:[{level:3,title:"入队",slug:"入队",link:"#入队",children:[]},{level:3,title:"出队",slug:"出队",link:"#出队",children:[]}]}],path:"/posts/algorithm/2019-01-04-prority-queue.html",pathLocale:"/",extraFields:[]},{title:"算法之最大值、最小值",headers:[{level:2,title:"排序",slug:"排序",link:"#排序",children:[]},{level:2,title:"遍历",slug:"遍历",link:"#遍历",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"伪代码",slug:"伪代码",link:"#伪代码",children:[]},{level:2,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:2,title:"证明如下",slug:"证明如下",link:"#证明如下",children:[]}],path:"/posts/algorithm/2019-01-08-althgorim-min-max.html",pathLocale:"/",extraFields:[]},{title:"Gifford 算法",headers:[{level:2,title:"新算法",slug:"新算法",link:"#新算法",children:[]},{level:2,title:"3.1 环境",slug:"_3-1-环境",link:"#_3-1-环境",children:[]},{level:2,title:"论文",slug:"论文",link:"#论文",children:[]}],path:"/posts/algorithm/2019-04-05-althgorim-gifford.html",pathLocale:"/",extraFields:[]},{title:"Data Struct-01-Dynamic Array",headers:[],path:"/posts/data-struct/2018-06-19-data-struct-dynamic-array.html",pathLocale:"/",extraFields:[]},{title:"Binary Heap",headers:[],path:"/posts/data-struct/2018-11-07-data-struct-binary-heap.html",pathLocale:"/",extraFields:[]},{title:"Binary Tree",headers:[{level:2,title:"斜树",slug:"斜树",link:"#斜树",children:[]},{level:2,title:"满二叉树",slug:"满二叉树",link:"#满二叉树",children:[]},{level:2,title:"完全二叉树",slug:"完全二叉树",link:"#完全二叉树",children:[]},{level:2,title:"前序遍历",slug:"前序遍历",link:"#前序遍历",children:[]},{level:2,title:"中序遍历",slug:"中序遍历",link:"#中序遍历",children:[]},{level:2,title:"后序遍历",slug:"后序遍历",link:"#后序遍历",children:[]},{level:2,title:"层级遍历",slug:"层级遍历",link:"#层级遍历",children:[]}],path:"/posts/data-struct/2018-11-07-data-struct-binary-tree.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-01-压缩算法概览",headers:[],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-01-overview.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-02-压缩算法 ZIP Deflate 算法",headers:[{level:2,title:"实测",slug:"实测",link:"#实测",children:[]},{level:2,title:"LZ77 算法",slug:"lz77-算法",link:"#lz77-算法",children:[]},{level:2,title:"ZIP  处理",slug:"zip-处理",link:"#zip-处理",children:[]},{level:2,title:"码表",slug:"码表",link:"#码表",children:[]},{level:2,title:"对应的树",slug:"对应的树",link:"#对应的树",children:[]},{level:2,title:"怎么用最少的 bit 记录下来",slug:"怎么用最少的-bit-记录下来",link:"#怎么用最少的-bit-记录下来",children:[]},{level:2,title:"特殊的树",slug:"特殊的树",link:"#特殊的树",children:[]},{level:2,title:"码字对应的信息",slug:"码字对应的信息",link:"#码字对应的信息",children:[]},{level:2,title:"性能的消耗",slug:"性能的消耗",link:"#性能的消耗",children:[{level:3,title:"区间的划分",slug:"区间的划分",link:"#区间的划分",children:[]}]},{level:2,title:"长度的限制",slug:"长度的限制",link:"#长度的限制",children:[]},{level:2,title:"为什么要把二者合二为一呢？",slug:"为什么要把二者合二为一呢",link:"#为什么要把二者合二为一呢",children:[]},{level:2,title:"预处理",slug:"预处理",link:"#预处理",children:[]},{level:2,title:"游程编码",slug:"游程编码",link:"#游程编码",children:[]},{level:2,title:"ZIP 的处理",slug:"zip-的处理",link:"#zip-的处理",children:[]}],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-02-althgorim-zip.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-03-Apache Common Compress 包",headers:[{level:2,title:"代码来源",slug:"代码来源",link:"#代码来源",children:[]},{level:2,title:"其他",slug:"其他",link:"#其他",children:[]}],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-03-apache-compress-overview.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-04-Common Compress 通用笔记",headers:[],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-04-apache-compress-notes.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-05-Common Compress 归档器",headers:[{level:2,title:"不支持的功能",slug:"不支持的功能",link:"#不支持的功能",children:[]},{level:2,title:"条目名称",slug:"条目名称",link:"#条目名称",children:[]},{level:2,title:"通用提取逻辑",slug:"通用提取逻辑",link:"#通用提取逻辑",children:[]},{level:2,title:"代码骨架",slug:"代码骨架",link:"#代码骨架",children:[]},{level:2,title:"混合使用",slug:"混合使用",link:"#混合使用",children:[]},{level:2,title:"基础功能",slug:"基础功能",link:"#基础功能",children:[]},{level:2,title:"加密的7z档案",slug:"加密的7z档案",link:"#加密的7z档案",children:[]},{level:2,title:"常见方法",slug:"常见方法",link:"#常见方法",children:[]},{level:2,title:"不同的版本支持",slug:"不同的版本支持",link:"#不同的版本支持",children:[]},{level:2,title:"常见方法",slug:"常见方法-1",link:"#常见方法-1",children:[]},{level:2,title:"常用方法",slug:"常用方法",link:"#常用方法",children:[]},{level:2,title:"常用方法",slug:"常用方法-1",link:"#常用方法-1",children:[]},{level:2,title:"常见方法",slug:"常见方法-2",link:"#常见方法-2",children:[]},{level:2,title:"常见方法",slug:"常见方法-3",link:"#常见方法-3",children:[]},{level:2,title:"细节屏蔽",slug:"细节屏蔽",link:"#细节屏蔽",children:[]}],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-05-apache-compress-archivers.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-06-Common Compress 压缩器",headers:[{level:2,title:"连锁流",slug:"连锁流",link:"#连锁流",children:[]},{level:2,title:"常见方法",slug:"常见方法",link:"#常见方法",children:[]},{level:2,title:"常见方法",slug:"常见方法-1",link:"#常见方法-1",children:[]},{level:2,title:"常见方法",slug:"常见方法-2",link:"#常见方法-2",children:[]},{level:2,title:"常见方法",slug:"常见方法-3",link:"#常见方法-3",children:[]},{level:2,title:"常见方法",slug:"常见方法-4",link:"#常见方法-4",children:[]},{level:2,title:"常见方法",slug:"常见方法-5",link:"#常见方法-5",children:[]}],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-06-apache-compress-compressor.html",pathLocale:"/",extraFields:[]},{title:"Compress Althgorim-07-Common Compress 自定义拓展",headers:[],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-07-apache-compress-extend.html",pathLocale:"/",extraFields:[]},{title:"Roaring bitmap-08-更好的压缩位图算法",headers:[],path:"/posts/algorithm/compress/2018-11-09-althgorim-compress-08-framework-compress-bit.html",pathLocale:"/",extraFields:[]},{title:"加密算法简介",headers:[{level:2,title:"Demo-1",slug:"demo-1",link:"#demo-1",children:[]},{level:2,title:"Demo-2",slug:"demo-2",link:"#demo-2",children:[]},{level:2,title:"RSA",slug:"rsa",link:"#rsa",children:[]},{level:2,title:"为什么这种算范是安全的",slug:"为什么这种算范是安全的",link:"#为什么这种算范是安全的",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-01-overview-01.html",pathLocale:"/",extraFields:[]},{title:"几种常见的加密算法",headers:[{level:2,title:"注意：",slug:"注意",link:"#注意",children:[]},{level:2,title:"加密",slug:"加密",link:"#加密",children:[]},{level:2,title:"解密",slug:"解密",link:"#解密",children:[]},{level:2,title:"对称加密",slug:"对称加密",link:"#对称加密",children:[]},{level:2,title:"非对称加密",slug:"非对称加密",link:"#非对称加密",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"MD5算法",slug:"md5算法",link:"#md5算法",children:[]},{level:2,title:"SHA1算法",slug:"sha1算法",link:"#sha1算法",children:[]},{level:2,title:"HMAC算法",slug:"hmac算法",link:"#hmac算法",children:[]},{level:2,title:"AES/DES/3DES算法",slug:"aes-des-3des算法",link:"#aes-des-3des算法",children:[{level:3,title:"DES算法",slug:"des算法",link:"#des算法",children:[]},{level:3,title:"3DES算法",slug:"_3des算法",link:"#_3des算法",children:[]},{level:3,title:"AES算法",slug:"aes算法",link:"#aes算法",children:[]}]},{level:2,title:"RSA算法",slug:"rsa算法",link:"#rsa算法",children:[]},{level:2,title:"ECC算法",slug:"ecc算法",link:"#ecc算法",children:[]},{level:2,title:"散列算法比较",slug:"散列算法比较",link:"#散列算法比较",children:[]},{level:2,title:"对称加密算法比较",slug:"对称加密算法比较",link:"#对称加密算法比较",children:[]},{level:2,title:"非对称加密算法比较",slug:"非对称加密算法比较",link:"#非对称加密算法比较",children:[]},{level:2,title:"对称算法",slug:"对称算法",link:"#对称算法",children:[]},{level:2,title:"非对称算法",slug:"非对称算法",link:"#非对称算法",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-02-common-02.html",pathLocale:"/",extraFields:[]},{title:"Base64 加密算法详解",headers:[{level:2,title:"场景",slug:"场景",link:"#场景",children:[]},{level:2,title:"java 实现方式",slug:"java-实现方式",link:"#java-实现方式",children:[{level:3,title:"早期作法",slug:"早期作法",link:"#早期作法",children:[]},{level:3,title:"Apache Commons Codec作法",slug:"apache-commons-codec作法",link:"#apache-commons-codec作法",children:[]},{level:3,title:"Java 8之后的作法",slug:"java-8之后的作法",link:"#java-8之后的作法",children:[]}]},{level:2,title:"原理",slug:"原理",link:"#原理",children:[{level:3,title:"Base64 索引表",slug:"base64-索引表",link:"#base64-索引表",children:[]},{level:3,title:"不能整除的情况",slug:"不能整除的情况",link:"#不能整除的情况",children:[]}]},{level:2,title:"一些拓展",slug:"一些拓展",link:"#一些拓展",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-03-base64.html",pathLocale:"/",extraFields:[]},{title:"SM4 国密算法入门介绍",headers:[{level:2,title:"maven 依赖",slug:"maven-依赖",link:"#maven-依赖",children:[]},{level:2,title:"工具封装",slug:"工具封装",link:"#工具封装",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"加解密",slug:"加解密",link:"#加解密",children:[]},{level:2,title:"密钥拓展",slug:"密钥拓展",link:"#密钥拓展",children:[]},{level:2,title:"SM4 的逆运算",slug:"sm4-的逆运算",link:"#sm4-的逆运算",children:[{level:3,title:"3.1 SM4 加密流程",slug:"_3-1-sm4-加密流程",link:"#_3-1-sm4-加密流程",children:[]},{level:3,title:"SM4 解密流程",slug:"sm4-解密流程",link:"#sm4-解密流程",children:[]}]},{level:2,title:"循环移位",slug:"循环移位",link:"#循环移位",children:[]},{level:2,title:"将一个 32bit 数拆分成 4 个 8bit 数",slug:"将一个-32bit-数拆分成-4-个-8bit-数",link:"#将一个-32bit-数拆分成-4-个-8bit-数",children:[]},{level:2,title:"将 4 个 8bit 数合并为 1 个 32bit 数",slug:"将-4-个-8bit-数合并为-1-个-32bit-数",link:"#将-4-个-8bit-数合并为-1-个-32bit-数",children:[]},{level:2,title:"盒变换",slug:"盒变换",link:"#盒变换",children:[]},{level:2,title:"加解密主函数",slug:"加解密主函数",link:"#加解密主函数",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-04-sm4.html",pathLocale:"/",extraFields:[]},{title:"DES 加密算法入门及算法原理",headers:[{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"子密钥的产生",slug:"子密钥的产生",link:"#子密钥的产生",children:[]},{level:2,title:"F函数的原理",slug:"f函数的原理",link:"#f函数的原理",children:[]},{level:2,title:"16 次的迭代加密",slug:"_16-次的迭代加密",link:"#_16-次的迭代加密",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-05-des.html",pathLocale:"/",extraFields:[]},{title:"3DES 加密算法入门及算法原理",headers:[{level:2,title:"补位",slug:"补位",link:"#补位",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-06-3des.html",pathLocale:"/",extraFields:[]},{title:"AES 加密算法入门及算法原理",headers:[{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"AddRoundKey",slug:"addroundkey",link:"#addroundkey",children:[]},{level:2,title:"SubBytes",slug:"subbytes",link:"#subbytes",children:[]},{level:2,title:"ShiftRows",slug:"shiftrows",link:"#shiftrows",children:[]},{level:2,title:"MixColumns",slug:"mixcolumns",link:"#mixcolumns",children:[]},{level:2,title:"ECB(Electronic Code Book电子密码本)模式",slug:"ecb-electronic-code-book电子密码本-模式",link:"#ecb-electronic-code-book电子密码本-模式",children:[]},{level:2,title:"CBC(Cipher Block Chaining，加密块链)模式",slug:"cbc-cipher-block-chaining-加密块链-模式",link:"#cbc-cipher-block-chaining-加密块链-模式",children:[]},{level:2,title:"CFB(Cipher FeedBack Mode，加密反馈)模式",slug:"cfb-cipher-feedback-mode-加密反馈-模式",link:"#cfb-cipher-feedback-mode-加密反馈-模式",children:[]},{level:2,title:"OFB(Output FeedBack，输出反馈)模式",slug:"ofb-output-feedback-输出反馈-模式",link:"#ofb-output-feedback-输出反馈-模式",children:[]},{level:2,title:"CTR(Counter，计数)模式",slug:"ctr-counter-计数-模式",link:"#ctr-counter-计数-模式",children:[{level:3,title:"加密方式",slug:"加密方式",link:"#加密方式",children:[]}]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-07-aes.html",pathLocale:"/",extraFields:[]},{title:"和你一起走进对称加密算法的世界",headers:[{level:2,title:"简介",slug:"简介",link:"#简介",children:[]},{level:2,title:"设计原则",slug:"设计原则",link:"#设计原则",children:[]},{level:2,title:"入门使用",slug:"入门使用",link:"#入门使用",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读",link:"#拓展阅读",children:[]},{level:2,title:"算法介绍",slug:"算法介绍",link:"#算法介绍",children:[]},{level:2,title:"java 入门",slug:"java-入门",link:"#java-入门",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读-1",link:"#拓展阅读-1",children:[]},{level:2,title:"算法简介",slug:"算法简介",link:"#算法简介",children:[]},{level:2,title:"java 入门",slug:"java-入门-1",link:"#java-入门-1",children:[]},{level:2,title:"测试代码",slug:"测试代码-1",link:"#测试代码-1",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读-2",link:"#拓展阅读-2",children:[]},{level:2,title:"算法简介",slug:"算法简介-1",link:"#算法简介-1",children:[]},{level:2,title:"java 入门",slug:"java-入门-2",link:"#java-入门-2",children:[{level:3,title:"maven 依赖",slug:"maven-依赖",link:"#maven-依赖",children:[]},{level:3,title:"工具封装",slug:"工具封装",link:"#工具封装",children:[]}]},{level:2,title:"测试代码",slug:"测试代码-2",link:"#测试代码-2",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读-3",link:"#拓展阅读-3",children:[]},{level:2,title:"算法介绍",slug:"算法介绍-1",link:"#算法介绍-1",children:[]},{level:2,title:"java 工具类",slug:"java-工具类",link:"#java-工具类",children:[]},{level:2,title:"测试",slug:"测试-1",link:"#测试-1",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读-4",link:"#拓展阅读-4",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-08-symmetry.html",pathLocale:"/",extraFields:[]},{title:"RSA 非对称加密算法原理详解及 java 实现",headers:[{level:2,title:"加密场景",slug:"加密场景",link:"#加密场景",children:[]},{level:2,title:"签名场景",slug:"签名场景",link:"#签名场景",children:[]},{level:2,title:"工具类",slug:"工具类",link:"#工具类",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"互质",slug:"互质",link:"#互质",children:[]},{level:2,title:"欧拉函数",slug:"欧拉函数",link:"#欧拉函数",children:[{level:3,title:"性质",slug:"性质",link:"#性质",children:[]},{level:3,title:"证明",slug:"证明",link:"#证明",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"模反元素",slug:"模反元素",link:"#模反元素",children:[]},{level:2,title:"流程图",slug:"流程图",link:"#流程图",children:[]},{level:2,title:"加解密过程",slug:"加解密过程",link:"#加解密过程",children:[]},{level:2,title:"密钥生成的步骤",slug:"密钥生成的步骤",link:"#密钥生成的步骤",children:[]},{level:2,title:"RSA算法的可靠性",slug:"rsa算法的可靠性",link:"#rsa算法的可靠性",children:[]},{level:2,title:"RSA算法的加密和解密",slug:"rsa算法的加密和解密",link:"#rsa算法的加密和解密",children:[]},{level:2,title:"优点",slug:"优点",link:"#优点",children:[]},{level:2,title:"缺点",slug:"缺点",link:"#缺点",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa.html",pathLocale:"/",extraFields:[]},{title:"RSA 非对称加密算法原理详解及 java 实现 02 一点额外的思考",headers:[{level:2,title:"加密",slug:"加密",link:"#加密",children:[{level:3,title:"签名",slug:"签名",link:"#签名",children:[]}]},{level:2,title:"为什么需要分块",slug:"为什么需要分块",link:"#为什么需要分块",children:[]},{level:2,title:"公司",slug:"公司",link:"#公司",children:[]},{level:2,title:"接口约定",slug:"接口约定",link:"#接口约定",children:[]},{level:2,title:"公司A-向B 发起请求",slug:"公司a-向b-发起请求",link:"#公司a-向b-发起请求",children:[]},{level:2,title:"公司A-接收B 发起的请求",slug:"公司a-接收b-发起的请求",link:"#公司a-接收b-发起的请求",children:[]}],path:"/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa2.html",pathLocale:"/",extraFields:[]},{title:"Hash-10-聊一聊哈希",headers:[{level:2,title:"🧠 核心概念",slug:"🧠-核心概念",link:"#🧠-核心概念",children:[{level:3,title:"1. 哈希函数（Hash Function）",slug:"_1-哈希函数-hash-function",link:"#_1-哈希函数-hash-function",children:[]}]},{level:2,title:"🧮 哈希的主要用途",slug:"🧮-哈希的主要用途",link:"#🧮-哈希的主要用途",children:[{level:3,title:"1. 哈希表（Hash Table）",slug:"_1-哈希表-hash-table",link:"#_1-哈希表-hash-table",children:[]},{level:3,title:"2. 哈希去重",slug:"_2-哈希去重",link:"#_2-哈希去重",children:[]},{level:3,title:"3. 密码加密（如 MD5, SHA-256）",slug:"_3-密码加密-如-md5-sha-256",link:"#_3-密码加密-如-md5-sha-256",children:[]},{level:3,title:"4. 数据校验（如文件传输）",slug:"_4-数据校验-如文件传输",link:"#_4-数据校验-如文件传输",children:[]},{level:3,title:"5. 负载均衡 / 分布式系统",slug:"_5-负载均衡-分布式系统",link:"#_5-负载均衡-分布式系统",children:[]}]},{level:2,title:"⚠️ 哈希冲突",slug:"⚠️-哈希冲突",link:"#⚠️-哈希冲突",children:[{level:3,title:"1. 开放地址法",slug:"_1-开放地址法",link:"#_1-开放地址法",children:[]},{level:3,title:"2. 链地址法（Java HashMap 用的）",slug:"_2-链地址法-java-hashmap-用的",link:"#_2-链地址法-java-hashmap-用的",children:[]}]},{level:2,title:"🧪 哈希函数的好坏标准",slug:"🧪-哈希函数的好坏标准",link:"#🧪-哈希函数的好坏标准",children:[]},{level:2,title:"🧰 常见哈希函数",slug:"🧰-常见哈希函数",link:"#🧰-常见哈希函数",children:[]},{level:2,title:"🔍 例子：哈希表查找效率",slug:"🔍-例子-哈希表查找效率",link:"#🔍-例子-哈希表查找效率",children:[]},{level:2,title:"总结 🧾",slug:"总结-🧾",link:"#总结-🧾",children:[]},{level:2,title:"✅ 哈希的更多应用场景拓展",slug:"✅-哈希的更多应用场景拓展",link:"#✅-哈希的更多应用场景拓展",children:[{level:3,title:"1. 布隆过滤器（Bloom Filter）",slug:"_1-布隆过滤器-bloom-filter",link:"#_1-布隆过滤器-bloom-filter",children:[]},{level:3,title:"2. 一致性哈希（Consistent Hashing）",slug:"_2-一致性哈希-consistent-hashing",link:"#_2-一致性哈希-consistent-hashing",children:[]},{level:3,title:"3. LRU Cache（最近最少使用缓存）",slug:"_3-lru-cache-最近最少使用缓存",link:"#_3-lru-cache-最近最少使用缓存",children:[]},{level:3,title:"4. 区块链（BlockChain）",slug:"_4-区块链-blockchain",link:"#_4-区块链-blockchain",children:[]},{level:3,title:"5. Merkle Tree（默克尔树）",slug:"_5-merkle-tree-默克尔树",link:"#_5-merkle-tree-默克尔树",children:[]},{level:3,title:"6. 图像/音频指纹识别",slug:"_6-图像-音频指纹识别",link:"#_6-图像-音频指纹识别",children:[]},{level:3,title:"7. 哈希索引（数据库）",slug:"_7-哈希索引-数据库",link:"#_7-哈希索引-数据库",children:[]},{level:3,title:"8. 负载均衡（Load Balancing）",slug:"_8-负载均衡-load-balancing",link:"#_8-负载均衡-load-balancing",children:[]},{level:3,title:"9. 分布式系统中的幂等处理",slug:"_9-分布式系统中的幂等处理",link:"#_9-分布式系统中的幂等处理",children:[]},{level:3,title:"10. 验证码识别/防刷机制",slug:"_10-验证码识别-防刷机制",link:"#_10-验证码识别-防刷机制",children:[]}]},{level:2,title:"📌 总结：哈希的高级应用场景地图",slug:"📌-总结-哈希的高级应用场景地图",link:"#📌-总结-哈希的高级应用场景地图",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-10-chat-intro.html",pathLocale:"/",extraFields:[]},{title:"Hash-11-聊一聊哈希函数 Hash Function",headers:[{level:2,title:"🧠 什么是哈希函数？",slug:"🧠-什么是哈希函数",link:"#🧠-什么是哈希函数",children:[]},{level:2,title:"📌 哈希函数的基本特性",slug:"📌-哈希函数的基本特性",link:"#📌-哈希函数的基本特性",children:[]},{level:2,title:"🎯 哈希函数的常见应用场景 & 不同类型",slug:"🎯-哈希函数的常见应用场景-不同类型",link:"#🎯-哈希函数的常见应用场景-不同类型",children:[]},{level:2,title:"🔬 哈希函数分类详解",slug:"🔬-哈希函数分类详解",link:"#🔬-哈希函数分类详解",children:[{level:3,title:"1. 普通哈希函数（适合哈希表等通用用途）",slug:"_1-普通哈希函数-适合哈希表等通用用途",link:"#_1-普通哈希函数-适合哈希表等通用用途",children:[]},{level:3,title:"2. 加密哈希函数（密码学哈希）",slug:"_2-加密哈希函数-密码学哈希",link:"#_2-加密哈希函数-密码学哈希",children:[]},{level:3,title:"3. 感知哈希（Perceptual Hash）",slug:"_3-感知哈希-perceptual-hash",link:"#_3-感知哈希-perceptual-hash",children:[]}]},{level:2,title:"🧮 常见哈希函数示意",slug:"🧮-常见哈希函数示意",link:"#🧮-常见哈希函数示意",children:[]},{level:2,title:"⚠️ 哈希冲突 & 哈希空间",slug:"⚠️-哈希冲突-哈希空间",link:"#⚠️-哈希冲突-哈希空间",children:[]},{level:2,title:"🧪 Java 中的 hashCode 示例拆解",slug:"🧪-java-中的-hashcode-示例拆解",link:"#🧪-java-中的-hashcode-示例拆解",children:[]},{level:2,title:"📦 常用哈希函数库",slug:"📦-常用哈希函数库",link:"#📦-常用哈希函数库",children:[]},{level:2,title:"🎯 总结：一图读懂哈希函数",slug:"🎯-总结-一图读懂哈希函数",link:"#🎯-总结-一图读懂哈希函数",children:[{level:3,title:"1. Object.hashCode()",slug:"_1-object-hashcode",link:"#_1-object-hashcode",children:[]},{level:3,title:"2. Objects.hash(Object...)",slug:"_2-objects-hash-object",link:"#_2-objects-hash-object",children:[]},{level:3,title:"3. String.hashCode()",slug:"_3-string-hashcode",link:"#_3-string-hashcode",children:[]},{level:3,title:"4. Arrays.hashCode()",slug:"_4-arrays-hashcode",link:"#_4-arrays-hashcode",children:[]},{level:3,title:"5. MessageDigest (MD5/SHA)",slug:"_5-messagedigest-md5-sha",link:"#_5-messagedigest-md5-sha",children:[]},{level:3,title:"6. CRC32",slug:"_6-crc32",link:"#_6-crc32",children:[]},{level:3,title:"7. Guava Hashing (Murmur3)",slug:"_7-guava-hashing-murmur3",link:"#_7-guava-hashing-murmur3",children:[]},{level:3,title:"8. java.util.zip.Adler32",slug:"_8-java-util-zip-adler32",link:"#_8-java-util-zip-adler32",children:[]},{level:3,title:"9. IdentityHashMap 的 System.identityHashCode()",slug:"_9-identityhashmap-的-system-identityhashcode",link:"#_9-identityhashmap-的-system-identityhashcode",children:[]},{level:3,title:"10. Long.hashCode() / Double.hashCode()",slug:"_10-long-hashcode-double-hashcode",link:"#_10-long-hashcode-double-hashcode",children:[]},{level:3,title:"总结对比表",slug:"总结对比表",link:"#总结对比表",children:[]}]}],path:"/posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.html",pathLocale:"/",extraFields:[]},{title:"Hash-12-聊一聊哈希数据结构之 HashMap",headers:[{level:2,title:"✅ 一句话总结",slug:"✅-一句话总结",link:"#✅-一句话总结",children:[]},{level:2,title:"🧠 核心特性",slug:"🧠-核心特性",link:"#🧠-核心特性",children:[]},{level:2,title:"🔧 底层结构概览",slug:"🔧-底层结构概览",link:"#🔧-底层结构概览",children:[]},{level:2,title:"🔢 关键参数",slug:"🔢-关键参数",link:"#🔢-关键参数",children:[]},{level:2,title:"🧮 常见操作实现原理",slug:"🧮-常见操作实现原理",link:"#🧮-常见操作实现原理",children:[{level:3,title:"1. put(K key, V value) – 添加键值对",slug:"_1-put-k-key-v-value-–-添加键值对",link:"#_1-put-k-key-v-value-–-添加键值对",children:[]},{level:3,title:"2. get(Object key) – 获取 value",slug:"_2-get-object-key-–-获取-value",link:"#_2-get-object-key-–-获取-value",children:[]},{level:3,title:"3. remove(Object key) – 删除元素",slug:"_3-remove-object-key-–-删除元素",link:"#_3-remove-object-key-–-删除元素",children:[]},{level:3,title:"4. 扩容（resize）",slug:"_4-扩容-resize",link:"#_4-扩容-resize",children:[]}]},{level:2,title:"🌳 链表 vs 红黑树的转换条件（Java 8）",slug:"🌳-链表-vs-红黑树的转换条件-java-8",link:"#🌳-链表-vs-红黑树的转换条件-java-8",children:[]},{level:2,title:"🧪 示例代码演示",slug:"🧪-示例代码演示",link:"#🧪-示例代码演示",children:[]},{level:2,title:"🚩 为什么 HashMap 不是线程安全的？",slug:"🚩-为什么-hashmap-不是线程安全的",link:"#🚩-为什么-hashmap-不是线程安全的",children:[]},{level:2,title:"🚨 面试高频问题小结",slug:"🚨-面试高频问题小结",link:"#🚨-面试高频问题小结",children:[]},{level:2,title:"📌 总结：HashMap 的优缺点",slug:"📌-总结-hashmap-的优缺点",link:"#📌-总结-hashmap-的优缺点",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-12-chat-hash-data-struct-hashmap.html",pathLocale:"/",extraFields:[]},{title:"Hash-13-聊一聊哈希数据结构之 HashSet",headers:[{level:2,title:"✅ 一句话总结",slug:"✅-一句话总结",link:"#✅-一句话总结",children:[]},{level:2,title:"🧠 基本特性",slug:"🧠-基本特性",link:"#🧠-基本特性",children:[]},{level:2,title:"🔧 底层原理简述",slug:"🔧-底层原理简述",link:"#🔧-底层原理简述",children:[{level:3,title:"插入过程等价于：",slug:"插入过程等价于",link:"#插入过程等价于",children:[]}]},{level:2,title:"🔢 常用方法",slug:"🔢-常用方法",link:"#🔢-常用方法",children:[]},{level:2,title:"📌 元素为什么不能重复？",slug:"📌-元素为什么不能重复",link:"#📌-元素为什么不能重复",children:[{level:3,title:"例子：",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"🧮 时间复杂度分析",slug:"🧮-时间复杂度分析",link:"#🧮-时间复杂度分析",children:[]},{level:2,title:"🧪 扩容机制",slug:"🧪-扩容机制",link:"#🧪-扩容机制",children:[]},{level:2,title:"🚩 和其他 Set 的区别",slug:"🚩-和其他-set-的区别",link:"#🚩-和其他-set-的区别",children:[]},{level:2,title:"🧠 面试常考知识点",slug:"🧠-面试常考知识点",link:"#🧠-面试常考知识点",children:[]},{level:2,title:"🎯 示例：正确使用 HashSet 存储自定义对象",slug:"🎯-示例-正确使用-hashset-存储自定义对象",link:"#🎯-示例-正确使用-hashset-存储自定义对象",children:[]},{level:2,title:"📦 总结：HashSet 的优缺点",slug:"📦-总结-hashset-的优缺点",link:"#📦-总结-hashset-的优缺点",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-13-chat-hash-data-struct-hashset.html",pathLocale:"/",extraFields:[]},{title:"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器",headers:[{level:2,title:"一、Bloom Filter 是什么？",slug:"一、bloom-filter-是什么",link:"#一、bloom-filter-是什么",children:[]},{level:2,title:"二、Bloom Filter 的核心原理",slug:"二、bloom-filter-的核心原理",link:"#二、bloom-filter-的核心原理",children:[{level:3,title:"1. 数据结构组成",slug:"_1-数据结构组成",link:"#_1-数据结构组成",children:[]},{level:3,title:'2. 添加元素（以字符串 "hello" 为例）',slug:"_2-添加元素-以字符串-hello-为例",link:"#_2-添加元素-以字符串-hello-为例",children:[]},{level:3,title:'3. 查询元素（比如查询 "world"）',slug:"_3-查询元素-比如查询-world",link:"#_3-查询元素-比如查询-world",children:[]}]},{level:2,title:"三、例子：可视化理解",slug:"三、例子-可视化理解",link:"#三、例子-可视化理解",children:[]},{level:2,title:"四、优缺点总结",slug:"四、优缺点总结",link:"#四、优缺点总结",children:[{level:3,title:"✅ 优点",slug:"✅-优点",link:"#✅-优点",children:[]},{level:3,title:"❌ 缺点",slug:"❌-缺点",link:"#❌-缺点",children:[]}]},{level:2,title:"五、实际应用场景",slug:"五、实际应用场景",link:"#五、实际应用场景",children:[{level:3,title:"🔍 1. 网页黑名单过滤",slug:"🔍-1-网页黑名单过滤",link:"#🔍-1-网页黑名单过滤",children:[]},{level:3,title:"📚 2. 搜索引擎的缓存过滤器",slug:"📚-2-搜索引擎的缓存过滤器",link:"#📚-2-搜索引擎的缓存过滤器",children:[]},{level:3,title:"🛒 3. 电商防重复推荐",slug:"🛒-3-电商防重复推荐",link:"#🛒-3-电商防重复推荐",children:[]},{level:3,title:"📬 4. 邮件反垃圾系统",slug:"📬-4-邮件反垃圾系统",link:"#📬-4-邮件反垃圾系统",children:[]},{level:3,title:"🧠 5. 区块链",slug:"🧠-5-区块链",link:"#🧠-5-区块链",children:[]}]},{level:2,title:"六、扩展变种",slug:"六、扩展变种",link:"#六、扩展变种",children:[]},{level:2,title:"七、误判率计算（了解）",slug:"七、误判率计算-了解",link:"#七、误判率计算-了解",children:[]},{level:2,title:"八、与 HashSet 的比较",slug:"八、与-hashset-的比较",link:"#八、与-hashset-的比较",children:[]},{level:2,title:"一、背景：为什么 Bloom Filter 不支持删除？",slug:"一、背景-为什么-bloom-filter-不支持删除",link:"#一、背景-为什么-bloom-filter-不支持删除",children:[]},{level:2,title:"二、常见解决方案",slug:"二、常见解决方案",link:"#二、常见解决方案",children:[{level:3,title:"✅ 方案一：使用 Counting Bloom Filter（计数型布隆过滤器）",slug:"✅-方案一-使用-counting-bloom-filter-计数型布隆过滤器",link:"#✅-方案一-使用-counting-bloom-filter-计数型布隆过滤器",children:[]},{level:3,title:"✅ 方案二：定期“重建” Bloom Filter（Rebuild）",slug:"✅-方案二-定期-重建-bloom-filter-rebuild",link:"#✅-方案二-定期-重建-bloom-filter-rebuild",children:[]},{level:3,title:"✅ 方案三：分片 + 版本化 Bloom Filter（Double Buffer / Rotating Bloom Filter）",slug:"✅-方案三-分片-版本化-bloom-filter-double-buffer-rotating-bloom-filter",link:"#✅-方案三-分片-版本化-bloom-filter-double-buffer-rotating-bloom-filter",children:[]},{level:3,title:"✅ 方案四：使用 LRU + Bloom Filter 组合方案",slug:"✅-方案四-使用-lru-bloom-filter-组合方案",link:"#✅-方案四-使用-lru-bloom-filter-组合方案",children:[]}]},{level:2,title:"三、业界推荐实践（总结）",slug:"三、业界推荐实践-总结",link:"#三、业界推荐实践-总结",children:[]},{level:2,title:"四、小贴士：什么时候不应该用 Bloom Filter？",slug:"四、小贴士-什么时候不应该用-bloom-filter",link:"#四、小贴士-什么时候不应该用-bloom-filter",children:[]},{level:2,title:"✅ 一、架构概览：三层过滤机制",slug:"✅-一、架构概览-三层过滤机制",link:"#✅-一、架构概览-三层过滤机制",children:[]},{level:2,title:"✅ 二、这个组合能解决什么问题？",slug:"✅-二、这个组合能解决什么问题",link:"#✅-二、这个组合能解决什么问题",children:[{level:3,title:"🌩️ 1. 防止 缓存穿透",slug:"🌩️-1-防止-缓存穿透",link:"#🌩️-1-防止-缓存穿透",children:[]},{level:3,title:"🎯 2. 降低 Redis 压力",slug:"🎯-2-降低-redis-压力",link:"#🎯-2-降低-redis-压力",children:[]},{level:3,title:"📉 3. 缓解 数据库压力",slug:"📉-3-缓解-数据库压力",link:"#📉-3-缓解-数据库压力",children:[]}]},{level:2,title:"✅ 三、示例流程（以用户请求 GET /product?id=12345 为例）",slug:"✅-三、示例流程-以用户请求-get-product-id-12345-为例",link:"#✅-三、示例流程-以用户请求-get-product-id-12345-为例",children:[]},{level:2,title:"✅ 四、配套策略建议",slug:"✅-四、配套策略建议",link:"#✅-四、配套策略建议",children:[]},{level:2,title:"✅ 五、代码角度如何组织？（伪代码）",slug:"✅-五、代码角度如何组织-伪代码",link:"#✅-五、代码角度如何组织-伪代码",children:[]},{level:2,title:"✅ 六、实际案例",slug:"✅-六、实际案例",link:"#✅-六、实际案例",children:[]},{level:2,title:"✅ 七、小结",slug:"✅-七、小结",link:"#✅-七、小结",children:[]},{level:2,title:"✅ 一、核心特性再强调一次（理解这些才能避免误用）",slug:"✅-一、核心特性再强调一次-理解这些才能避免误用",link:"#✅-一、核心特性再强调一次-理解这些才能避免误用",children:[]},{level:2,title:"🧱 二、使用 Bloom Filter 时要特别注意的点",slug:"🧱-二、使用-bloom-filter-时要特别注意的点",link:"#🧱-二、使用-bloom-filter-时要特别注意的点",children:[{level:3,title:"1️⃣ 哈希函数的选择 至关重要",slug:"_1️⃣-哈希函数的选择-至关重要",link:"#_1️⃣-哈希函数的选择-至关重要",children:[]},{level:3,title:"2️⃣ 合理配置参数：m, k, n",slug:"_2️⃣-合理配置参数-m-k-n",link:"#_2️⃣-合理配置参数-m-k-n",children:[]},{level:3,title:"3️⃣ 误判带来的影响不能被忽视",slug:"_3️⃣-误判带来的影响不能被忽视",link:"#_3️⃣-误判带来的影响不能被忽视",children:[]},{level:3,title:"4️⃣ 容量是固定的，一旦满了误判率会迅速升高",slug:"_4️⃣-容量是固定的-一旦满了误判率会迅速升高",link:"#_4️⃣-容量是固定的-一旦满了误判率会迅速升高",children:[]},{level:3,title:"5️⃣ 不支持取出数据（不是传统意义的集合）",slug:"_5️⃣-不支持取出数据-不是传统意义的集合",link:"#_5️⃣-不支持取出数据-不是传统意义的集合",children:[]},{level:3,title:"6️⃣ 不适合对数据准确性要求极高的场景",slug:"_6️⃣-不适合对数据准确性要求极高的场景",link:"#_6️⃣-不适合对数据准确性要求极高的场景",children:[]},{level:3,title:"7️⃣ 分布式部署注意“版本同步”问题",slug:"_7️⃣-分布式部署注意-版本同步-问题",link:"#_7️⃣-分布式部署注意-版本同步-问题",children:[]},{level:3,title:"8️⃣ 冷启动期间，bloom filter 是“空的”",slug:"_8️⃣-冷启动期间-bloom-filter-是-空的",link:"#_8️⃣-冷启动期间-bloom-filter-是-空的",children:[]}]},{level:2,title:"✅ 三、Bloom Filter 的使用 checklist",slug:"✅-三、bloom-filter-的使用-checklist",link:"#✅-三、bloom-filter-的使用-checklist",children:[]},{level:2,title:"✅ 四、推荐工具库和组件",slug:"✅-四、推荐工具库和组件",link:"#✅-四、推荐工具库和组件",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html",pathLocale:"/",extraFields:[]},{title:"Hash-13-聊一聊哈希数据结构之 Merkle Tree（默克尔树）",headers:[{level:2,title:"什么是 Merkle Tree？",slug:"什么是-merkle-tree",link:"#什么是-merkle-tree",children:[]},{level:2,title:"Merkle Tree 的结构特点",slug:"merkle-tree-的结构特点",link:"#merkle-tree-的结构特点",children:[]},{level:2,title:"Merkle Tree 的构建过程举例",slug:"merkle-tree-的构建过程举例",link:"#merkle-tree-的构建过程举例",children:[]},{level:2,title:"为什么要用 Merkle Tree？",slug:"为什么要用-merkle-tree",link:"#为什么要用-merkle-tree",children:[]},{level:2,title:"Merkle Tree 的应用场景",slug:"merkle-tree-的应用场景",link:"#merkle-tree-的应用场景",children:[]},{level:2,title:"Merkle Tree 的验证流程",slug:"merkle-tree-的验证流程",link:"#merkle-tree-的验证流程",children:[]},{level:2,title:"Merkle Tree 的优缺点",slug:"merkle-tree-的优缺点",link:"#merkle-tree-的优缺点",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-data-struct-merkle-tree.html",pathLocale:"/",extraFields:[]},{title:"Hash-15-聊一聊哈希负载均衡之一致性哈希 Consistent Hashing",headers:[{level:2,title:"✨ 背景问题：为什么需要一致性哈希？",slug:"✨-背景问题-为什么需要一致性哈希",link:"#✨-背景问题-为什么需要一致性哈希",children:[{level:3,title:"常规哈希的缺点",slug:"常规哈希的缺点",link:"#常规哈希的缺点",children:[]}]},{level:2,title:"🧠 一致性哈希的核心思想",slug:"🧠-一致性哈希的核心思想",link:"#🧠-一致性哈希的核心思想",children:[]},{level:2,title:"🎯 一致性哈希的具体流程",slug:"🎯-一致性哈希的具体流程",link:"#🎯-一致性哈希的具体流程",children:[{level:3,title:"1. 构造哈希环",slug:"_1-构造哈希环",link:"#_1-构造哈希环",children:[]},{level:3,title:"2. 数据存储策略",slug:"_2-数据存储策略",link:"#_2-数据存储策略",children:[]},{level:3,title:"3. 增删节点操作",slug:"_3-增删节点操作",link:"#_3-增删节点操作",children:[]}]},{level:2,title:"🎮 举个例子",slug:"🎮-举个例子",link:"#🎮-举个例子",children:[{level:3,title:"环上服务器分布：",slug:"环上服务器分布",link:"#环上服务器分布",children:[]}]},{level:2,title:"🧩 虚拟节点（Virtual Nodes）",slug:"🧩-虚拟节点-virtual-nodes",link:"#🧩-虚拟节点-virtual-nodes",children:[]},{level:2,title:"🏗 应用场景",slug:"🏗-应用场景",link:"#🏗-应用场景",children:[]},{level:2,title:"✅ 一致性哈希的优点",slug:"✅-一致性哈希的优点",link:"#✅-一致性哈希的优点",children:[]},{level:2,title:"⚠️ 注意事项 / 缺点",slug:"⚠️-注意事项-缺点",link:"#⚠️-注意事项-缺点",children:[]},{level:2,title:"总结一句话：",slug:"总结一句话",link:"#总结一句话",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-load-balance-consist-hash.html",pathLocale:"/",extraFields:[]},{title:"Hash conflict 哈希碰撞/哈希冲突解决方式",headers:[{level:2,title:"解决办法（总共有四种）：",slug:"解决办法-总共有四种",link:"#解决办法-总共有四种",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-conflict.html",pathLocale:"/",extraFields:[]},{title:"Hash implement in java 哈希算法实现",headers:[{level:2,title:"jdk7 HashMap",slug:"jdk7-hashmap",link:"#jdk7-hashmap",children:[]},{level:2,title:"jdk7 ConcurrentHashMap",slug:"jdk7-concurrenthashmap",link:"#jdk7-concurrenthashmap",children:[]},{level:2,title:"String",slug:"string",link:"#string",children:[{level:3,title:"为什么使用31作为计算的因子呢？",slug:"为什么使用31作为计算的因子呢",link:"#为什么使用31作为计算的因子呢",children:[]}]},{level:2,title:"times33 hash 算法",slug:"times33-hash-算法",link:"#times33-hash-算法",children:[]},{level:2,title:"google提供的字符串hash算法",slug:"google提供的字符串hash算法",link:"#google提供的字符串hash算法",children:[]},{level:2,title:"STL中的字符串hash算法",slug:"stl中的字符串hash算法",link:"#stl中的字符串hash算法",children:[]},{level:2,title:"FNV哈希算法",slug:"fnv哈希算法",link:"#fnv哈希算法",children:[{level:3,title:"FNV1",slug:"fnv1",link:"#fnv1",children:[]},{level:3,title:"FNV1a",slug:"fnv1a",link:"#fnv1a",children:[]}]},{level:2,title:"32 bit MixFunction",slug:"_32-bit-mixfunction",link:"#_32-bit-mixfunction",children:[]},{level:2,title:"64 bit Mix Functions",slug:"_64-bit-mix-functions",link:"#_64-bit-mix-functions",children:[]},{level:2,title:"MurmurHash2",slug:"murmurhash2",link:"#murmurhash2",children:[]},{level:2,title:"jdk 源码",slug:"jdk-源码",link:"#jdk-源码",children:[]},{level:2,title:"取模算法为什么用的是位与运算？",slug:"取模算法为什么用的是位与运算",link:"#取模算法为什么用的是位与运算",children:[]},{level:2,title:"为什么不直接使用key.hashcode()进行取模运算？",slug:"为什么不直接使用key-hashcode-进行取模运算",link:"#为什么不直接使用key-hashcode-进行取模运算",children:[]},{level:2,title:"前言",slug:"前言",link:"#前言",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-impl.html",pathLocale:"/",extraFields:[]},{title:"完美哈希函数(Perfect Hash Function)",headers:[{level:2,title:"使用场景",slug:"使用场景",link:"#使用场景",children:[]},{level:2,title:"什么时候使用PHF和MPHF",slug:"什么时候使用phf和mphf",link:"#什么时候使用phf和mphf",children:[]},{level:2,title:"（准备阶 段）",slug:"准备阶-段",link:"#准备阶-段",children:[]},{level:2,title:"（使用阶 段）",slug:"使用阶-段",link:"#使用阶-段",children:[]},{level:2,title:"gperf",slug:"gperf",link:"#gperf",children:[]},{level:2,title:"CMPH",slug:"cmph",link:"#cmph",children:[]},{level:2,title:"mph",slug:"mph",link:"#mph",children:[]},{level:2,title:"无名",slug:"无名",link:"#无名",children:[]},{level:2,title:"perfect_hash.py",slug:"perfect-hash-py",link:"#perfect-hash-py",children:[]},{level:2,title:"算法实现",slug:"算法实现",link:"#算法实现",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"怎么办呢？",slug:"怎么办呢",link:"#怎么办呢",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash-perfect.html",pathLocale:"/",extraFields:[]},{title:"Hash 哈希",headers:[{level:2,title:"基础概念",slug:"基础概念",link:"#基础概念",children:[]},{level:2,title:"冲突",slug:"冲突",link:"#冲突",children:[]},{level:2,title:"Why",slug:"why",link:"#why",children:[]},{level:2,title:"birthday attack",slug:"birthday-attack",link:"#birthday-attack",children:[]},{level:2,title:"SHA1 & SHA2",slug:"sha1-sha2",link:"#sha1-sha2",children:[]},{level:2,title:"SHA3",slug:"sha3",link:"#sha3",children:[]},{level:2,title:"Hashing and Proof of Work",slug:"hashing-and-proof-of-work",link:"#hashing-and-proof-of-work",children:[]},{level:2,title:"比特币为什么选择 double SHA256",slug:"比特币为什么选择-double-sha256",link:"#比特币为什么选择-double-sha256",children:[]},{level:2,title:"Ethereum 2.0 and BLAKE",slug:"ethereum-2-0-and-blake",link:"#ethereum-2-0-and-blake",children:[]},{level:2,title:"量子计算的未来呢?哈希算法安全吗?",slug:"量子计算的未来呢-哈希算法安全吗",link:"#量子计算的未来呢-哈希算法安全吗",children:[]},{level:2,title:"特点",slug:"特点",link:"#特点",children:[]},{level:2,title:"可逆性",slug:"可逆性",link:"#可逆性",children:[]},{level:2,title:"雪崩效应",slug:"雪崩效应",link:"#雪崩效应",children:[]},{level:2,title:"除法哈希法（The Division Method）",slug:"除法哈希法-the-division-method",link:"#除法哈希法-the-division-method",children:[]},{level:2,title:"乘法哈希法（The Multiplication Method）",slug:"乘法哈希法-the-multiplication-method",link:"#乘法哈希法-the-multiplication-method",children:[]},{level:2,title:"全域哈希法（Universal Hashing）",slug:"全域哈希法-universal-hashing",link:"#全域哈希法-universal-hashing",children:[]}],path:"/posts/algorithm/hash/2018-05-30-hash.html",pathLocale:"/",extraFields:[]},{title:"Algorithm Load Balance 负载均衡算法",headers:[{level:2,title:"概念",slug:"概念",link:"#概念",children:[]},{level:2,title:"二层负载均衡",slug:"二层负载均衡",link:"#二层负载均衡",children:[]},{level:2,title:"三层负载均衡",slug:"三层负载均衡",link:"#三层负载均衡",children:[]},{level:2,title:"四层负载均衡",slug:"四层负载均衡",link:"#四层负载均衡",children:[]},{level:2,title:"七层负载均衡",slug:"七层负载均衡",link:"#七层负载均衡",children:[]},{level:2,title:"LVS",slug:"lvs",link:"#lvs",children:[]},{level:2,title:"Nginx",slug:"nginx",link:"#nginx",children:[]},{level:2,title:"HAProxy",slug:"haproxy",link:"#haproxy",children:[]},{level:2,title:"常用「负载均衡」策略优缺点和适用场景",slug:"常用「负载均衡」策略优缺点和适用场景",link:"#常用「负载均衡」策略优缺点和适用场景",children:[]},{level:2,title:"http重定向",slug:"http重定向",link:"#http重定向",children:[{level:3,title:"性能缺陷：",slug:"性能缺陷",link:"#性能缺陷",children:[]}]},{level:2,title:"DNS负载均衡",slug:"dns负载均衡",link:"#dns负载均衡",children:[{level:3,title:"特性:",slug:"特性",link:"#特性",children:[]},{level:3,title:"不足：",slug:"不足",link:"#不足",children:[]}]},{level:2,title:"反向代理负载均衡",slug:"反向代理负载均衡",link:"#反向代理负载均衡",children:[{level:3,title:"特性：",slug:"特性-1",link:"#特性-1",children:[]}]},{level:2,title:"IP负载均衡(LVS-NAT)",slug:"ip负载均衡-lvs-nat",link:"#ip负载均衡-lvs-nat",children:[]},{level:2,title:"直接路由(LVS-DR)",slug:"直接路由-lvs-dr",link:"#直接路由-lvs-dr",children:[]},{level:2,title:"IP隧道(LVS-TUN)",slug:"ip隧道-lvs-tun",link:"#ip隧道-lvs-tun",children:[]},{level:2,title:"基础介绍",slug:"基础介绍",link:"#基础介绍",children:[]},{level:2,title:"成熟产品",slug:"成熟产品",link:"#成熟产品",children:[]}],path:"/posts/algorithm/load-balance/2018-09-10-algorithm-load-balance.html",pathLocale:"/",extraFields:[]},{title:"Search 二分查找法",headers:[{level:2,title:"复杂度分析：",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"概览",slug:"概览",link:"#概览",children:[]},{level:2,title:"步骤",slug:"步骤",link:"#步骤",children:[]},{level:2,title:"Java 代码实现",slug:"java-代码实现",link:"#java-代码实现",children:[]}],path:"/posts/algorithm/search/2018-07-26-search.html",pathLocale:"/",extraFields:[]},{title:"Data Struct-01-Dynamic Array",headers:[],path:"/posts/leetcode/datastruct/2018-06-19-data-struct-dynamic-array.html",pathLocale:"/",extraFields:[]},{title:"LSM 索引",headers:[{level:2,title:"B+ Tree",slug:"b-tree",link:"#b-tree",children:[]},{level:2,title:"Hash",slug:"hash",link:"#hash",children:[]},{level:2,title:"FULLTEXT",slug:"fulltext",link:"#fulltext",children:[]},{level:2,title:"空间索引",slug:"空间索引",link:"#空间索引",children:[]},{level:2,title:"位图索引",slug:"位图索引",link:"#位图索引",children:[]},{level:2,title:"LSM",slug:"lsm",link:"#lsm",children:[]}],path:"/posts/leetcode/datastruct/2018-09-10-index-lsm.html",pathLocale:"/",extraFields:[]},{title:"Slim 战胜Btree索引",headers:[{level:2,title:"索引的要求",slug:"索引的要求",link:"#索引的要求",children:[]},{level:2,title:"hash vs tree",slug:"hash-vs-tree",link:"#hash-vs-tree",children:[]},{level:2,title:"Tree",slug:"tree",link:"#tree",children:[]},{level:2,title:"功能要求：",slug:"功能要求",link:"#功能要求",children:[]},{level:2,title:"限制：",slug:"限制",link:"#限制",children:[]},{level:2,title:"SlimTrie的术语定义",slug:"slimtrie的术语定义",link:"#slimtrie的术语定义",children:[]}],path:"/posts/leetcode/datastruct/2018-09-10-index-slimtrie.html",pathLocale:"/",extraFields:[]},{title:"数据结构之 B Tree",headers:[{level:2,title:"B+树的磁盘读写代价更低",slug:"b-树的磁盘读写代价更低",link:"#b-树的磁盘读写代价更低",children:[]},{level:2,title:"B+树的查询效率更加稳定",slug:"b-树的查询效率更加稳定",link:"#b-树的查询效率更加稳定",children:[]},{level:2,title:"B+树更有利于对数据库的扫描",slug:"b-树更有利于对数据库的扫描",link:"#b-树更有利于对数据库的扫描",children:[]}],path:"/posts/leetcode/datastruct/2018-09-12-b-tree.html",pathLocale:"/",extraFields:[]},{title:"数据结构之红黑树 Red Black Tree",headers:[{level:2,title:"用途和好处",slug:"用途和好处",link:"#用途和好处",children:[]},{level:2,title:"性质",slug:"性质",link:"#性质",children:[]},{level:2,title:"左旋转",slug:"左旋转",link:"#左旋转",children:[]},{level:2,title:"右旋转",slug:"右旋转",link:"#右旋转",children:[]},{level:2,title:"变色",slug:"变色",link:"#变色",children:[]},{level:2,title:"区分左旋和右旋",slug:"区分左旋和右旋",link:"#区分左旋和右旋",children:[]},{level:2,title:"左旋示例图",slug:"左旋示例图",link:"#左旋示例图",children:[]},{level:2,title:"右旋示例图(以x为节点进行右旋)：",slug:"右旋示例图-以x为节点进行右旋",link:"#右旋示例图-以x为节点进行右旋",children:[]},{level:2,title:"1. 新插入结点 X 是根结点",slug:"_1-新插入结点-x-是根结点",link:"#_1-新插入结点-x-是根结点",children:[]},{level:2,title:"2. 新插入结点 X 的父结点 P 是黑色",slug:"_2-新插入结点-x-的父结点-p-是黑色",link:"#_2-新插入结点-x-的父结点-p-是黑色",children:[]},{level:2,title:"3. 父结点 P 为红色，同时存在叔叔结点 U 也为红色",slug:"_3-父结点-p-为红色-同时存在叔叔结点-u-也为红色",link:"#_3-父结点-p-为红色-同时存在叔叔结点-u-也为红色",children:[]},{level:2,title:"4. 父结点 P 为红色，同时叔叔结点 U 为黑色或不存在",slug:"_4-父结点-p-为红色-同时叔叔结点-u-为黑色或不存在",link:"#_4-父结点-p-为红色-同时叔叔结点-u-为黑色或不存在",children:[]},{level:2,title:"1. N 是新的根",slug:"_1-n-是新的根",link:"#_1-n-是新的根",children:[]},{level:2,title:"2. N 的父结点、兄弟结点 B，以及 B 的孩子结点均为黑色",slug:"_2-n-的父结点、兄弟结点-b-以及-b-的孩子结点均为黑色",link:"#_2-n-的父结点、兄弟结点-b-以及-b-的孩子结点均为黑色",children:[]},{level:2,title:"3. N 的兄弟结点 B 为红色，其余结点均为黑色",slug:"_3-n-的兄弟结点-b-为红色-其余结点均为黑色",link:"#_3-n-的兄弟结点-b-为红色-其余结点均为黑色",children:[]},{level:2,title:"4. N 的父结点 P 为红色，兄弟结点 B，以及 B 的孩子结点均为黑色",slug:"_4-n-的父结点-p-为红色-兄弟结点-b-以及-b-的孩子结点均为黑色",link:"#_4-n-的父结点-p-为红色-兄弟结点-b-以及-b-的孩子结点均为黑色",children:[]},{level:2,title:"5. N 的兄弟结点 B 为黑色，B 的左孩子为红色，B 的右孩子为黑色",slug:"_5-n-的兄弟结点-b-为黑色-b-的左孩子为红色-b-的右孩子为黑色",link:"#_5-n-的兄弟结点-b-为黑色-b-的左孩子为红色-b-的右孩子为黑色",children:[]},{level:2,title:"6. N 的兄弟结点 B 为黑色，B 的右孩子为红色",slug:"_6-n-的兄弟结点-b-为黑色-b-的右孩子为红色",link:"#_6-n-的兄弟结点-b-为黑色-b-的右孩子为红色",children:[]}],path:"/posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.html",pathLocale:"/",extraFields:[]},{title:"Binary Heap",headers:[],path:"/posts/leetcode/datastruct/2018-11-07-data-struct-binary-heap.html",pathLocale:"/",extraFields:[]},{title:"Binary Tree",headers:[{level:2,title:"斜树",slug:"斜树",link:"#斜树",children:[]},{level:2,title:"满二叉树",slug:"满二叉树",link:"#满二叉树",children:[]},{level:2,title:"完全二叉树",slug:"完全二叉树",link:"#完全二叉树",children:[]},{level:2,title:"前序遍历",slug:"前序遍历",link:"#前序遍历",children:[]},{level:2,title:"中序遍历",slug:"中序遍历",link:"#中序遍历",children:[]},{level:2,title:"后序遍历",slug:"后序遍历",link:"#后序遍历",children:[]},{level:2,title:"层级遍历",slug:"层级遍历",link:"#层级遍历",children:[]}],path:"/posts/leetcode/datastruct/2018-11-07-data-struct-binary-tree.html",pathLocale:"/",extraFields:[]},{title:"数据结构之 Bitmap",headers:[{level:2,title:"问题",slug:"问题",link:"#问题",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]}],path:"/posts/leetcode/datastruct/2018-12-25-bitmap.html",pathLocale:"/",extraFields:[]},{title:"跳跃表(SkipList)",headers:[{level:2,title:"为什么需要？",slug:"为什么需要",link:"#为什么需要",children:[]},{level:2,title:"William Pugh",slug:"william-pugh",link:"#william-pugh",children:[]},{level:2,title:"算法核心思想",slug:"算法核心思想",link:"#算法核心思想",children:[]},{level:2,title:"结构",slug:"结构",link:"#结构",children:[]},{level:2,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:2,title:"搜索算法",slug:"搜索算法",link:"#搜索算法",children:[]},{level:2,title:"插入和删除算法",slug:"插入和删除算法",link:"#插入和删除算法",children:[]},{level:2,title:"选择一个随机级别",slug:"选择一个随机级别",link:"#选择一个随机级别",children:[]},{level:2,title:"我们从什么级别开始搜索？定义L(n)",slug:"我们从什么级别开始搜索-定义l-n",link:"#我们从什么级别开始搜索-定义l-n",children:[{level:3,title:"别担心，要乐观些。",slug:"别担心-要乐观些。",link:"#别担心-要乐观些。",children:[]},{level:3,title:"使用少于给定的数量。",slug:"使用少于给定的数量。",link:"#使用少于给定的数量。",children:[]},{level:3,title:"修复随机性（dice）",slug:"修复随机性-dice",link:"#修复随机性-dice",children:[]}]},{level:2,title:"确定MaxLevel",slug:"确定maxlevel",link:"#确定maxlevel",children:[]},{level:2,title:"加深印象",slug:"加深印象",link:"#加深印象",children:[]},{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"查询实现",slug:"查询实现",link:"#查询实现",children:[]},{level:2,title:"插入",slug:"插入",link:"#插入",children:[]},{level:2,title:"删除",slug:"删除",link:"#删除",children:[]},{level:2,title:"输出跳表",slug:"输出跳表",link:"#输出跳表",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]},{level:2,title:"概率论",slug:"概率论",link:"#概率论",children:[]},{level:2,title:"预期搜寻费用分析",slug:"预期搜寻费用分析",link:"#预期搜寻费用分析",children:[]},{level:2,title:"比较次数",slug:"比较次数",link:"#比较次数",children:[]},{level:2,title:"概率分析",slug:"概率分析",link:"#概率分析",children:[]},{level:2,title:"选择合适的 P",slug:"选择合适的-p",link:"#选择合适的-p",children:[]},{level:2,title:"操作顺序",slug:"操作顺序",link:"#操作顺序",children:[]},{level:2,title:"实施难度",slug:"实施难度",link:"#实施难度",children:[]},{level:2,title:"恒定因素",slug:"恒定因素",link:"#恒定因素",children:[]},{level:2,title:"绩效约束类型",slug:"绩效约束类型",link:"#绩效约束类型",children:[]},{level:2,title:"查询分布不均匀",slug:"查询分布不均匀",link:"#查询分布不均匀",children:[]},{level:2,title:"skiplist 的其他工作",slug:"skiplist-的其他工作",link:"#skiplist-的其他工作",children:[]},{level:2,title:"定义节点",slug:"定义节点",link:"#定义节点",children:[]},{level:2,title:"节点的创建",slug:"节点的创建",link:"#节点的创建",children:[]},{level:2,title:"列表的初始化",slug:"列表的初始化",link:"#列表的初始化",children:[]},{level:2,title:"插入元素",slug:"插入元素",link:"#插入元素",children:[]},{level:2,title:"删除节点",slug:"删除节点",link:"#删除节点",children:[]},{level:2,title:"查找",slug:"查找",link:"#查找",children:[]}],path:"/posts/leetcode/datastruct/2019-02-13-datastruct-skiplist.html",pathLocale:"/",extraFields:[]},{title:"数据结构 00 概览 数据结构专题汇总",headers:[{level:2,title:"开源代码",slug:"开源代码",link:"#开源代码",children:[]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-00-overview.html",pathLocale:"/",extraFields:[]},{title:"数据结构 01 IdentityHashMap 详解",headers:[{level:2,title:"简介",slug:"简介",link:"#简介",children:[]},{level:2,title:"注意",slug:"注意",link:"#注意",children:[]},{level:2,title:"使用场景",slug:"使用场景",link:"#使用场景",children:[]},{level:2,title:"jdk 版本",slug:"jdk-版本",link:"#jdk-版本",children:[]},{level:2,title:"接口定义",slug:"接口定义",link:"#接口定义",children:[]},{level:2,title:"基础属性",slug:"基础属性",link:"#基础属性",children:[]},{level:2,title:"基础工具方法",slug:"基础工具方法",link:"#基础工具方法",children:[{level:3,title:"null 的处理",slug:"null-的处理",link:"#null-的处理",children:[]},{level:3,title:"hash 的处理",slug:"hash-的处理",link:"#hash-的处理",children:[]}]},{level:2,title:"构造器",slug:"构造器",link:"#构造器",children:[{level:3,title:"init()",slug:"init",link:"#init",children:[]},{level:3,title:"capacity",slug:"capacity",link:"#capacity",children:[]},{level:3,title:"putAll()",slug:"putall",link:"#putall",children:[]}]},{level:2,title:"put() 核心方法",slug:"put-核心方法",link:"#put-核心方法",children:[]},{level:2,title:"get() 属性的获取",slug:"get-属性的获取",link:"#get-属性的获取",children:[]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-01-identify-hash-map.html",pathLocale:"/",extraFields:[]},{title:"数据结构 02 ArrayList 源码分析",headers:[{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[{level:3,title:"RandomAccess 接口",slug:"randomaccess-接口",link:"#randomaccess-接口",children:[]},{level:3,title:"AbstractList 抽象父类",slug:"abstractlist-抽象父类",link:"#abstractlist-抽象父类",children:[]}]},{level:2,title:"属性",slug:"属性",link:"#属性",children:[]},{level:2,title:"构造器",slug:"构造器",link:"#构造器",children:[]},{level:2,title:"add",slug:"add",link:"#add",children:[{level:3,title:"modCount",slug:"modcount",link:"#modcount",children:[]},{level:3,title:"add(e, elementData, size);",slug:"add-e-elementdata-size",link:"#add-e-elementdata-size",children:[]},{level:3,title:"hugeCapacity(minCapacity)",slug:"hugecapacity-mincapacity",link:"#hugecapacity-mincapacity",children:[]}]},{level:2,title:"set-修改",slug:"set-修改",link:"#set-修改",children:[]},{level:2,title:"get 读取",slug:"get-读取",link:"#get-读取",children:[]},{level:2,title:"remove",slug:"remove",link:"#remove",children:[{level:3,title:"fastRemove",slug:"fastremove",link:"#fastremove",children:[]}]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-02-arraylist-source-code.html",pathLocale:"/",extraFields:[]},{title:"数据结构 03 LinkedList 源码分析",headers:[{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"Deque 接口",slug:"deque-接口",link:"#deque-接口",children:[]},{level:2,title:"AbstractSequentialList",slug:"abstractsequentiallist",link:"#abstractsequentiallist",children:[]},{level:2,title:"Node 节点",slug:"node-节点",link:"#node-节点",children:[]},{level:2,title:"addAll()",slug:"addall",link:"#addall",children:[]},{level:2,title:"检测下标 checkPositionIndex",slug:"检测下标-checkpositionindex",link:"#检测下标-checkpositionindex",children:[]},{level:2,title:"add",slug:"add",link:"#add",children:[{level:3,title:"node(index)",slug:"node-index",link:"#node-index",children:[]},{level:3,title:"linkLast",slug:"linklast",link:"#linklast",children:[]},{level:3,title:"linkBefore",slug:"linkbefore",link:"#linkbefore",children:[]}]},{level:2,title:"set",slug:"set",link:"#set",children:[]},{level:2,title:"get",slug:"get",link:"#get",children:[]},{level:2,title:"remove",slug:"remove",link:"#remove",children:[{level:3,title:"unlink",slug:"unlink",link:"#unlink",children:[]}]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-03-linkedlist-source-code.html",pathLocale:"/",extraFields:[]},{title:"数据结构 04 Stack 源码分析",headers:[{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"push",slug:"push",link:"#push",children:[]},{level:2,title:"pop",slug:"pop",link:"#pop",children:[{level:3,title:"peek",slug:"peek",link:"#peek",children:[]},{level:3,title:"removeElementAt",slug:"removeelementat",link:"#removeelementat",children:[]}]},{level:2,title:"search",slug:"search",link:"#search",children:[]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-04-stack-source-code.html",pathLocale:"/",extraFields:[]},{title:"数据结构 05 HashSet 源码分析",headers:[{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"AbstractSet",slug:"abstractset",link:"#abstractset",children:[]},{level:2,title:"核心方法",slug:"核心方法",link:"#核心方法",children:[]},{level:2,title:"clone",slug:"clone",link:"#clone",children:[]},{level:2,title:"读写对象",slug:"读写对象",link:"#读写对象",children:[]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-05-hashset.html",pathLocale:"/",extraFields:[]},{title:"数据结构 06 TreeSet + NavigableMap 源码分析",headers:[{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"内部变量",slug:"内部变量",link:"#内部变量",children:[]},{level:2,title:"构造器",slug:"构造器",link:"#构造器",children:[]},{level:2,title:"核心方法",slug:"核心方法",link:"#核心方法",children:[]},{level:2,title:"读写对象",slug:"读写对象",link:"#读写对象",children:[]}],path:"/posts/leetcode/datastruct/2019-02-19-data-struct-06-treeset.html",pathLocale:"/",extraFields:[]},{title:"数据结构与算法学习目录",headers:[{level:2,title:"书籍",slug:"书籍",link:"#书籍",children:[]},{level:2,title:"做题",slug:"做题",link:"#做题",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-00-index.html",pathLocale:"/",extraFields:[]},{title:"数据结构与算法学习-《算法》目录",headers:[],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-01-book-algorithm-index.html",pathLocale:"/",extraFields:[]},{title:"数据结构之背包，栈，队列，链表",headers:[{level:2,title:"java 的数据类型",slug:"java-的数据类型",link:"#java-的数据类型",children:[]},{level:2,title:"背包 Bag",slug:"背包-bag",link:"#背包-bag",children:[]},{level:2,title:"栈Stack",slug:"栈stack",link:"#栈stack",children:[]},{level:2,title:"队列Queue",slug:"队列queue",link:"#队列queue",children:[]},{level:2,title:"小总结",slug:"小总结",link:"#小总结",children:[]},{level:2,title:"基本操作",slug:"基本操作",link:"#基本操作",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-02-base-type.html",pathLocale:"/",extraFields:[]},{title:"利用有向无环图（DAG）进行任务调度",headers:[{level:2,title:"定义接口",slug:"定义接口",link:"#定义接口",children:[]},{level:2,title:"定义一个Executor接口的实现Task",slug:"定义一个executor接口的实现task",link:"#定义一个executor接口的实现task",children:[]},{level:2,title:"任务图",slug:"任务图",link:"#任务图",children:[]},{level:2,title:"调度器",slug:"调度器",link:"#调度器",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-schedule.html",pathLocale:"/",extraFields:[]},{title:"DAG 拓扑序列 什么是拓扑排序 Topological Sorting",headers:[{level:2,title:"相关简介",slug:"相关简介",link:"#相关简介",children:[]},{level:2,title:"过程",slug:"过程",link:"#过程",children:[]},{level:2,title:"卡恩算法(Kahn)",slug:"卡恩算法-kahn",link:"#卡恩算法-kahn",children:[]},{level:2,title:"深度优先搜索",slug:"深度优先搜索",link:"#深度优先搜索",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-topological-sorting.html",pathLocale:"/",extraFields:[]},{title:"DAG 有向无环图（Directed Acyclic Graph）",headers:[{level:2,title:"图主要包括：",slug:"图主要包括",link:"#图主要包括",children:[]},{level:2,title:"术语",slug:"术语",link:"#术语",children:[]},{level:2,title:"术语",slug:"术语-1",link:"#术语-1",children:[]},{level:2,title:"邻接表数组",slug:"邻接表数组",link:"#邻接表数组",children:[]},{level:2,title:"包数据结构",slug:"包数据结构",link:"#包数据结构",children:[]},{level:2,title:"有向图结构",slug:"有向图结构",link:"#有向图结构",children:[]},{level:2,title:"深度优先搜索",slug:"深度优先搜索",link:"#深度优先搜索",children:[]},{level:2,title:"Tremaux搜索",slug:"tremaux搜索",link:"#tremaux搜索",children:[]},{level:2,title:"可达性的一种应用：垃圾收集",slug:"可达性的一种应用-垃圾收集",link:"#可达性的一种应用-垃圾收集",children:[]},{level:2,title:"寻找有向环",slug:"寻找有向环",link:"#寻找有向环",children:[]},{level:2,title:"DAG 的缺点",slug:"dag-的缺点",link:"#dag-的缺点",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag.html",pathLocale:"/",extraFields:[]},{title:"java 实现有向图(Direct Graph)",headers:[{level:2,title:"术语",slug:"术语",link:"#术语",children:[]},{level:2,title:"术语",slug:"术语-1",link:"#术语-1",children:[]},{level:2,title:"邻接表数组",slug:"邻接表数组",link:"#邻接表数组",children:[]},{level:2,title:"接口定义",slug:"接口定义",link:"#接口定义",children:[]},{level:2,title:"默认实现",slug:"默认实现",link:"#默认实现",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"图流程",slug:"图流程",link:"#图流程",children:[]},{level:2,title:"java 代码实现",slug:"java-代码实现-1",link:"#java-代码实现-1",children:[]},{level:2,title:"流程",slug:"流程-1",link:"#流程-1",children:[]},{level:2,title:"图示",slug:"图示",link:"#图示",children:[]},{level:2,title:"java 代码实现",slug:"java-代码实现-2",link:"#java-代码实现-2",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"测试结果",slug:"测试结果",link:"#测试结果",children:[]},{level:2,title:"other",slug:"other",link:"#other",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-direct-graph.html",pathLocale:"/",extraFields:[]},{title:"图最短路径算法之迪杰斯特拉算法（Dijkstra）",headers:[{level:2,title:"贪心算法",slug:"贪心算法",link:"#贪心算法",children:[]},{level:2,title:"最短路径的证明",slug:"最短路径的证明",link:"#最短路径的证明",children:[]},{level:2,title:"迪克斯特拉算法",slug:"迪克斯特拉算法",link:"#迪克斯特拉算法",children:[]},{level:2,title:"定义",slug:"定义",link:"#定义",children:[]},{level:2,title:"动态图",slug:"动态图",link:"#动态图",children:[]},{level:2,title:"算法流程",slug:"算法流程",link:"#算法流程",children:[]},{level:2,title:"算法思路",slug:"算法思路",link:"#算法思路",children:[]},{level:2,title:"算法图解",slug:"算法图解",link:"#算法图解",children:[]},{level:2,title:"无向图",slug:"无向图",link:"#无向图",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"理解",slug:"理解",link:"#理解",children:[]},{level:2,title:"为什么 Dijkstra 算法不适用于带负权的图？",slug:"为什么-dijkstra-算法不适用于带负权的图",link:"#为什么-dijkstra-算法不适用于带负权的图",children:[]},{level:2,title:"直观的实现",slug:"直观的实现",link:"#直观的实现",children:[]},{level:2,title:"个人 java 实现",slug:"个人-java-实现",link:"#个人-java-实现",children:[{level:3,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]}]},{level:2,title:"思考",slug:"思考",link:"#思考",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"java 代码实现",slug:"java-代码实现",link:"#java-代码实现",children:[]},{level:2,title:"书籍",slug:"书籍",link:"#书籍",children:[]},{level:2,title:"blog",slug:"blog",link:"#blog",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-dijkstra.html",pathLocale:"/",extraFields:[]},{title:"图最短路径算法之弗洛伊德算法（Floyd）",headers:[{level:2,title:"定义概览",slug:"定义概览",link:"#定义概览",children:[]},{level:2,title:"算法描述",slug:"算法描述",link:"#算法描述",children:[{level:3,title:"1) 算法思想原理：",slug:"_1-算法思想原理",link:"#_1-算法思想原理",children:[]},{level:3,title:"2) 算法描述：",slug:"_2-算法描述",link:"#_2-算法描述",children:[]}]},{level:2,title:"Floyd算法过程矩阵的计算----十字交叉法",slug:"floyd算法过程矩阵的计算-十字交叉法",link:"#floyd算法过程矩阵的计算-十字交叉法",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[{level:3,title:"java 版本",slug:"java-版本",link:"#java-版本",children:[]},{level:3,title:"正确性分析",slug:"正确性分析",link:"#正确性分析",children:[]},{level:3,title:"K 为什么要放在最外层",slug:"k-为什么要放在最外层",link:"#k-为什么要放在最外层",children:[]}]},{level:2,title:"6 大算法",slug:"_6-大算法",link:"#_6-大算法",children:[]},{level:2,title:"书籍",slug:"书籍",link:"#书籍",children:[]},{level:2,title:"blog",slug:"blog",link:"#blog",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-floyd.html",pathLocale:"/",extraFields:[]},{title:"遗传算法详解",headers:[{level:2,title:"遗传算法的科学定义",slug:"遗传算法的科学定义",link:"#遗传算法的科学定义",children:[]},{level:2,title:"遗传算法的执行过程(参照百度百科)",slug:"遗传算法的执行过程-参照百度百科",link:"#遗传算法的执行过程-参照百度百科",children:[]},{level:2,title:"遗传算法图解",slug:"遗传算法图解",link:"#遗传算法图解",children:[]},{level:2,title:"一元函数最大值问题",slug:"一元函数最大值问题",link:"#一元函数最大值问题",children:[]},{level:2,title:'"袋鼠蹦跳"',slug:"袋鼠蹦跳",link:"#袋鼠蹦跳",children:[{level:3,title:"爬山算法",slug:"爬山算法",link:"#爬山算法",children:[]},{level:3,title:"模拟退火",slug:"模拟退火",link:"#模拟退火",children:[]},{level:3,title:"遗传算法",slug:"遗传算法",link:"#遗传算法",children:[]}]},{level:2,title:"大体实现过程",slug:"大体实现过程",link:"#大体实现过程",children:[{level:3,title:"一般步骤",slug:"一般步骤",link:"#一般步骤",children:[]}]},{level:2,title:"先从编码说起",slug:"先从编码说起",link:"#先从编码说起",children:[{level:3,title:"二进制编码法",slug:"二进制编码法",link:"#二进制编码法",children:[]},{level:3,title:"浮点编码法",slug:"浮点编码法",link:"#浮点编码法",children:[]},{level:3,title:"符号编码法",slug:"符号编码法",link:"#符号编码法",children:[]}]},{level:2,title:"为我们的袋鼠染色体编码",slug:"为我们的袋鼠染色体编码",link:"#为我们的袋鼠染色体编码",children:[]},{level:2,title:"二进制串转换为实数值",slug:"二进制串转换为实数值",link:"#二进制串转换为实数值",children:[]},{level:2,title:"评价个体的适应度--适应度函数（fitness function）",slug:"评价个体的适应度-适应度函数-fitness-function",link:"#评价个体的适应度-适应度函数-fitness-function",children:[]},{level:2,title:"射杀一些袋鼠--选择函数（selection）",slug:"射杀一些袋鼠-选择函数-selection",link:"#射杀一些袋鼠-选择函数-selection",children:[]},{level:2,title:"轮盘选择",slug:"轮盘选择",link:"#轮盘选择",children:[]},{level:2,title:"遗传--染色体交叉(crossover)",slug:"遗传-染色体交叉-crossover",link:"#遗传-染色体交叉-crossover",children:[]},{level:2,title:"变异--基因突变(Mutation)",slug:"变异-基因突变-mutation",link:"#变异-基因突变-mutation",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-05-gene.html",pathLocale:"/",extraFields:[]},{title:"viterbi 算法：利用动态规划寻找最短路径",headers:[{level:2,title:"使用条件",slug:"使用条件",link:"#使用条件",children:[{level:3,title:"Optimal substructure（优化子结构）：",slug:"optimal-substructure-优化子结构",link:"#optimal-substructure-优化子结构",children:[]},{level:3,title:"Subteties（重叠子问题）",slug:"subteties-重叠子问题",link:"#subteties-重叠子问题",children:[]}]},{level:2,title:"动态规划算法的设计步骤：",slug:"动态规划算法的设计步骤",link:"#动态规划算法的设计步骤",children:[]},{level:2,title:"动态规划特点：",slug:"动态规划特点",link:"#动态规划特点",children:[]},{level:2,title:"穷举法",slug:"穷举法",link:"#穷举法",children:[]},{level:2,title:"最短路径是存在的",slug:"最短路径是存在的",link:"#最短路径是存在的",children:[]},{level:2,title:"完整算法",slug:"完整算法",link:"#完整算法",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"最短路径的结构",slug:"最短路径的结构",link:"#最短路径的结构",children:[]},{level:2,title:"给定一个有向图",slug:"给定一个有向图",link:"#给定一个有向图",children:[{level:3,title:"有向图",slug:"有向图",link:"#有向图",children:[]},{level:3,title:"邻接矩阵",slug:"邻接矩阵",link:"#邻接矩阵",children:[]}]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-06-vertibi.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法之回溯算法 backtracking",headers:[{level:2,title:"与穷举的联系",slug:"与穷举的联系",link:"#与穷举的联系",children:[]},{level:2,title:"剪枝",slug:"剪枝",link:"#剪枝",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路1-回溯",slug:"思路1-回溯",link:"#思路1-回溯",children:[{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"问题",slug:"问题",link:"#问题",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"问题的解空间",slug:"问题的解空间",link:"#问题的解空间",children:[]},{level:2,title:"求解步骤",slug:"求解步骤",link:"#求解步骤",children:[]},{level:2,title:"算法描述",slug:"算法描述",link:"#算法描述",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-backtracking.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法之分治算法 Divided",headers:[{level:2,title:"二分法",slug:"二分法",link:"#二分法",children:[]},{level:2,title:"分治法解题的一般步骤：",slug:"分治法解题的一般步骤",link:"#分治法解题的一般步骤",children:[]},{level:2,title:"应用场景",slug:"应用场景",link:"#应用场景",children:[]},{level:2,title:"分治算法的时间复杂度",slug:"分治算法的时间复杂度",link:"#分治算法的时间复杂度",children:[]},{level:2,title:"经典问题",slug:"经典问题",link:"#经典问题",children:[]},{level:2,title:"快速排序",slug:"快速排序",link:"#快速排序",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-divided.html",pathLocale:"/",extraFields:[]},{title:"面试算法：斐波那契数列时间复杂度为 O(1) 的解法，你会吗？",headers:[{level:2,title:"思路分析",slug:"思路分析",link:"#思路分析",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"时间复杂度优化",slug:"时间复杂度优化",link:"#时间复杂度优化",children:[{level:3,title:"滚动数组",slug:"滚动数组",link:"#滚动数组",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"矩阵-O(logn) 复杂度",slug:"矩阵-o-logn-复杂度",link:"#矩阵-o-logn-复杂度",children:[]},{level:2,title:"递推公式",slug:"递推公式",link:"#递推公式",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"空间换时间",slug:"空间换时间",link:"#空间换时间",children:[{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:2,title:"滚动数组优化",slug:"滚动数组优化",link:"#滚动数组优化",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp-fib.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法之动态规划算法 DP dynamic programming",headers:[{level:2,title:"写在前面",slug:"写在前面",link:"#写在前面",children:[]},{level:2,title:"啥叫「自顶向下」？",slug:"啥叫「自顶向下」",link:"#啥叫「自顶向下」",children:[]},{level:2,title:"啥叫「自底向上」？",slug:"啥叫「自底向上」",link:"#啥叫「自底向上」",children:[]},{level:2,title:"状态转移方程",slug:"状态转移方程",link:"#状态转移方程",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"递归解法",slug:"递归解法",link:"#递归解法",children:[{level:3,title:"重复计算",slug:"重复计算",link:"#重复计算",children:[]}]},{level:2,title:"动态规划解法",slug:"动态规划解法",link:"#动态规划解法",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"滚动数组优化",slug:"滚动数组优化",link:"#滚动数组优化",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"递归法",slug:"递归法",link:"#递归法",children:[]},{level:2,title:"动态规划",slug:"动态规划",link:"#动态规划",children:[{level:3,title:"动态规划转移方程",slug:"动态规划转移方程",link:"#动态规划转移方程",children:[]},{level:3,title:"java 实现方式",slug:"java-实现方式",link:"#java-实现方式",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"排列组合",slug:"排列组合",link:"#排列组合",children:[{level:3,title:"组合",slug:"组合",link:"#组合",children:[]},{level:3,title:"实现",slug:"实现",link:"#实现",children:[]}]},{level:2,title:"题目",slug:"题目-3",link:"#题目-3",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"分析",slug:"分析",link:"#分析",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"滚动数组思想优化",slug:"滚动数组思想优化",link:"#滚动数组思想优化",children:[]},{level:2,title:"简介",slug:"简介",link:"#简介",children:[]},{level:2,title:"斐波那契的例子",slug:"斐波那契的例子",link:"#斐波那契的例子",children:[]},{level:2,title:"二维数组压缩",slug:"二维数组压缩",link:"#二维数组压缩",children:[]},{level:2,title:"题目",slug:"题目-4",link:"#题目-4",children:[{level:3,title:"示例 1：",slug:"示例-1",link:"#示例-1",children:[]}]},{level:2,title:"递归解法",slug:"递归解法-1",link:"#递归解法-1",children:[]},{level:2,title:"DP 版本",slug:"dp-版本",link:"#dp-版本",children:[{level:3,title:"换一种方式",slug:"换一种方式",link:"#换一种方式",children:[]}]},{level:2,title:"题目",slug:"题目-5",link:"#题目-5",children:[]},{level:2,title:"解题思路",slug:"解题思路-1",link:"#解题思路-1",children:[]},{level:2,title:"思考过程",slug:"思考过程",link:"#思考过程",children:[]},{level:2,title:"动态规划实现",slug:"动态规划实现",link:"#动态规划实现",children:[]},{level:2,title:"滚动数组 DP",slug:"滚动数组-dp",link:"#滚动数组-dp",children:[]},{level:2,title:"题目",slug:"题目-6",link:"#题目-6",children:[]},{level:2,title:"思路1-双指针法",slug:"思路1-双指针法",link:"#思路1-双指针法",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"反思",slug:"反思",link:"#反思",children:[]}]},{level:2,title:"思路2-动态规划",slug:"思路2-动态规划",link:"#思路2-动态规划",children:[{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]},{level:2,title:"优化-滚动数组",slug:"优化-滚动数组",link:"#优化-滚动数组",children:[{level:3,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:3,title:"java 实现",slug:"java-实现-4",link:"#java-实现-4",children:[]}]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法之穷举算法",headers:[{level:2,title:"定义",slug:"定义",link:"#定义",children:[]},{level:2,title:"基本概念",slug:"基本概念",link:"#基本概念",children:[{level:3,title:"解空间的定义",slug:"解空间的定义",link:"#解空间的定义",children:[]},{level:3,title:"穷举解空间的策略",slug:"穷举解空间的策略",link:"#穷举解空间的策略",children:[]},{level:3,title:"盲目搜索和启发式搜索",slug:"盲目搜索和启发式搜索",link:"#盲目搜索和启发式搜索",children:[]},{level:3,title:"剪枝策略",slug:"剪枝策略",link:"#剪枝策略",children:[]},{level:3,title:"剪枝和启发",slug:"剪枝和启发",link:"#剪枝和启发",children:[]},{level:3,title:"搜索算法的评估和收敛",slug:"搜索算法的评估和收敛",link:"#搜索算法的评估和收敛",children:[]}]},{level:2,title:"基本思想",slug:"基本思想",link:"#基本思想",children:[]},{level:2,title:"分析的角度",slug:"分析的角度",link:"#分析的角度",children:[]},{level:2,title:"程序结构",slug:"程序结构",link:"#程序结构",children:[]},{level:2,title:"编程思路。",slug:"编程思路。",link:"#编程思路。",children:[]},{level:2,title:"源程序及运行结果",slug:"源程序及运行结果",link:"#源程序及运行结果",children:[]},{level:2,title:"场景",slug:"场景",link:"#场景",children:[]},{level:2,title:"弱口令",slug:"弱口令",link:"#弱口令",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-enum.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法之贪心算法 Greedy",headers:[{level:2,title:"贪心选择",slug:"贪心选择",link:"#贪心选择",children:[]},{level:2,title:"最优子结构",slug:"最优子结构",link:"#最优子结构",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思考过程",slug:"思考过程",link:"#思考过程",children:[]},{level:2,title:"思路1",slug:"思路1",link:"#思路1",children:[{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}]},{level:2,title:"思路 2",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-greedy.html",pathLocale:"/",extraFields:[]},{title:"五大基本算法概览",headers:[{level:2,title:"有穷性（Finiteness）",slug:"有穷性-finiteness",link:"#有穷性-finiteness",children:[]},{level:2,title:"确切性（Definiteness）",slug:"确切性-definiteness",link:"#确切性-definiteness",children:[]},{level:2,title:"输入项（Input）",slug:"输入项-input",link:"#输入项-input",children:[]},{level:2,title:"输出项（Output）",slug:"输出项-output",link:"#输出项-output",children:[]},{level:2,title:"可行性（Effectiveness）",slug:"可行性-effectiveness",link:"#可行性-effectiveness",children:[]},{level:2,title:"1、数据对象的运算和操作",slug:"_1、数据对象的运算和操作",link:"#_1、数据对象的运算和操作",children:[]},{level:2,title:"2、算法的控制结构",slug:"_2、算法的控制结构",link:"#_2、算法的控制结构",children:[]},{level:2,title:"基本概念",slug:"基本概念",link:"#基本概念",children:[]},{level:2,title:"基本思想及策略",slug:"基本思想及策略",link:"#基本思想及策略",children:[]},{level:2,title:"分治法适用的情况",slug:"分治法适用的情况",link:"#分治法适用的情况",children:[]},{level:2,title:"分治法的基本步骤",slug:"分治法的基本步骤",link:"#分治法的基本步骤",children:[]},{level:2,title:"分治法的复杂性分析",slug:"分治法的复杂性分析",link:"#分治法的复杂性分析",children:[]},{level:2,title:"基本概念",slug:"基本概念-1",link:"#基本概念-1",children:[]},{level:2,title:"基本思想与策略",slug:"基本思想与策略",link:"#基本思想与策略",children:[]},{level:2,title:"适用的情况",slug:"适用的情况",link:"#适用的情况",children:[]},{level:2,title:"求解的基本步骤",slug:"求解的基本步骤",link:"#求解的基本步骤",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base.html",pathLocale:"/",extraFields:[]},{title:"DFS 深度优先遍历与 BFS 广度优先遍历详解",headers:[{level:2,title:"时间复杂度：",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:2,title:"模板",slug:"模板",link:"#模板",children:[]},{level:2,title:"剪枝",slug:"剪枝",link:"#剪枝",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"数字型",slug:"数字型",link:"#数字型",children:[]},{level:2,title:"地图型",slug:"地图型",link:"#地图型",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路1-DFS 深度优先遍历",slug:"思路1-dfs-深度优先遍历",link:"#思路1-dfs-深度优先遍历",children:[{level:3,title:"深度拷贝",slug:"深度拷贝",link:"#深度拷贝",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"其他",slug:"其他",link:"#其他",children:[]}]},{level:2,title:"思路2-BFS 广度优先遍历",slug:"思路2-bfs-广度优先遍历",link:"#思路2-bfs-广度优先遍历",children:[{level:3,title:"BFS 流程",slug:"bfs-流程",link:"#bfs-流程",children:[]},{level:3,title:"实现流程",slug:"实现流程",link:"#实现流程",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路1：DFS",slug:"思路1-dfs",link:"#思路1-dfs",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]}]},{level:2,title:"dsf 非递归:",slug:"dsf-非递归",link:"#dsf-非递归",children:[]},{level:2,title:"bfs 非递归:",slug:"bfs-非递归",link:"#bfs-非递归",children:[]},{level:2,title:"并查集:",slug:"并查集",link:"#并查集",children:[]}],path:"/posts/leetcode/datastruct/2020-01-23-data-struct-learn-08-dfs-bfs.html",pathLocale:"/",extraFields:[]},{title:"Tree-00-概览",headers:[{level:2,title:"二叉查找树（Binary Search Tree）",slug:"二叉查找树-binary-search-tree",link:"#二叉查找树-binary-search-tree",children:[]},{level:2,title:"自平衡二叉查找树（Self-balancing Binary Search Tree）",slug:"自平衡二叉查找树-self-balancing-binary-search-tree",link:"#自平衡二叉查找树-self-balancing-binary-search-tree",children:[]},{level:2,title:"B 树（B-Tree）",slug:"b-树-b-tree",link:"#b-树-b-tree",children:[]},{level:2,title:"字典树（Trie-Tree）",slug:"字典树-trie-tree",link:"#字典树-trie-tree",children:[]},{level:2,title:"空间数据分割树（Spatial Data Partitioning Tree）",slug:"空间数据分割树-spatial-data-partitioning-tree",link:"#空间数据分割树-spatial-data-partitioning-tree",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.html",pathLocale:"/",extraFields:[]},{title:"Tree-01-二叉树 Binary Tree",headers:[{level:2,title:"分类",slug:"分类",link:"#分类",children:[]},{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"遍历",slug:"遍历",link:"#遍历",children:[]},{level:2,title:"概念",slug:"概念",link:"#概念",children:[]},{level:2,title:"查找算法",slug:"查找算法",link:"#查找算法",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[{level:3,title:"最差情况",slug:"最差情况",link:"#最差情况",children:[]}]},{level:2,title:"插入节点",slug:"插入节点",link:"#插入节点",children:[]},{level:2,title:"删除节点",slug:"删除节点",link:"#删除节点",children:[]},{level:2,title:"遍历节点",slug:"遍历节点",link:"#遍历节点",children:[{level:3,title:"前序遍历（Perorder traversal）",slug:"前序遍历-perorder-traversal",link:"#前序遍历-perorder-traversal",children:[]},{level:3,title:"中序遍历（Inorder traversal）",slug:"中序遍历-inorder-traversal",link:"#中序遍历-inorder-traversal",children:[]},{level:3,title:"后序遍历（Postorder traversal）",slug:"后序遍历-postorder-traversal",link:"#后序遍历-postorder-traversal",children:[]}]},{level:2,title:"其他",slug:"其他",link:"#其他",children:[]},{level:2,title:"1. build123（）",slug:"_1-build123",link:"#_1-build123",children:[]},{level:2,title:"2. size（）",slug:"_2-size",link:"#_2-size",children:[]},{level:2,title:"3. maxDepth（）",slug:"_3-maxdepth",link:"#_3-maxdepth",children:[]},{level:2,title:"4. minValue（）",slug:"_4-minvalue",link:"#_4-minvalue",children:[]},{level:2,title:"5. printTree（）",slug:"_5-printtree",link:"#_5-printtree",children:[]},{level:2,title:"6. printPostorder（）",slug:"_6-printpostorder",link:"#_6-printpostorder",children:[]},{level:2,title:"7. hasPathSum（）",slug:"_7-haspathsum",link:"#_7-haspathsum",children:[]},{level:2,title:"8. printPaths（）",slug:"_8-printpaths",link:"#_8-printpaths",children:[]},{level:2,title:"9. mirror() 镜像",slug:"_9-mirror-镜像",link:"#_9-mirror-镜像",children:[]},{level:2,title:"10. doubleTree（）",slug:"_10-doubletree",link:"#_10-doubletree",children:[]},{level:2,title:"11. sameTree（）",slug:"_11-sametree",link:"#_11-sametree",children:[]},{level:2,title:"12. countTrees（）",slug:"_12-counttrees",link:"#_12-counttrees",children:[]},{level:2,title:"二进制搜索树检查（针对问题13和14）",slug:"二进制搜索树检查-针对问题13和14",link:"#二进制搜索树检查-针对问题13和14",children:[]},{level:2,title:"13 isBST（）-版本1",slug:"_13-isbst-版本1",link:"#_13-isbst-版本1",children:[]},{level:2,title:"14. isBST（）-版本2",slug:"_14-isbst-版本2",link:"#_14-isbst-版本2",children:[]},{level:2,title:"15. Tree-List 树状列表",slug:"_15-tree-list-树状列表",link:"#_15-tree-list-树状列表",children:[]},{level:2,title:"概念",slug:"概念-1",link:"#概念-1",children:[]},{level:2,title:"需要",slug:"需要",link:"#需要",children:[]},{level:2,title:"核心问题",slug:"核心问题",link:"#核心问题",children:[]},{level:2,title:"解决思路",slug:"解决思路",link:"#解决思路",children:[{level:3,title:"第几行",slug:"第几行",link:"#第几行",children:[]}]},{level:2,title:"如何确定每一个元素的位置？",slug:"如何确定每一个元素的位置",link:"#如何确定每一个元素的位置",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-01-binary-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-02-java 实现 BST 二叉查询树详解",headers:[{level:2,title:"概念",slug:"概念",link:"#概念",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"分类",slug:"分类",link:"#分类",children:[]},{level:2,title:"概念",slug:"概念-1",link:"#概念-1",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"查找算法",slug:"查找算法",link:"#查找算法",children:[{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:3,title:"最差情况",slug:"最差情况",link:"#最差情况",children:[]}]},{level:2,title:"插入节点",slug:"插入节点",link:"#插入节点",children:[]},{level:2,title:"删除节点",slug:"删除节点",link:"#删除节点",children:[]},{level:2,title:"遍历节点",slug:"遍历节点",link:"#遍历节点",children:[{level:3,title:"前序遍历（Perorder traversal）",slug:"前序遍历-perorder-traversal",link:"#前序遍历-perorder-traversal",children:[]},{level:3,title:"中序遍历（Inorder traversal）",slug:"中序遍历-inorder-traversal",link:"#中序遍历-inorder-traversal",children:[]},{level:3,title:"后序遍历（Postorder traversal）",slug:"后序遍历-postorder-traversal",link:"#后序遍历-postorder-traversal",children:[]}]},{level:2,title:"其他",slug:"其他",link:"#其他",children:[{level:3,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:3,title:"接口的定义",slug:"接口的定义",link:"#接口的定义",children:[]}]},{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"基本方法",slug:"基本方法",link:"#基本方法",children:[{level:3,title:"是否包含指定元素",slug:"是否包含指定元素",link:"#是否包含指定元素",children:[]},{level:3,title:"获取元素个数",slug:"获取元素个数",link:"#获取元素个数",children:[]}]},{level:2,title:"4 种遍历方式",slug:"_4-种遍历方式",link:"#_4-种遍历方式",children:[{level:3,title:"中序遍历",slug:"中序遍历",link:"#中序遍历",children:[]},{level:3,title:"先序遍历",slug:"先序遍历",link:"#先序遍历",children:[]},{level:3,title:"后续遍历",slug:"后续遍历",link:"#后续遍历",children:[]},{level:3,title:"层级遍历",slug:"层级遍历",link:"#层级遍历",children:[]}]},{level:2,title:"插入新元素",slug:"插入新元素",link:"#插入新元素",children:[]},{level:2,title:"删除元素",slug:"删除元素",link:"#删除元素",children:[]},{level:2,title:"问题",slug:"问题",link:"#问题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[{level:3,title:"定义用于输出的对象节点",slug:"定义用于输出的对象节点",link:"#定义用于输出的对象节点",children:[]},{level:3,title:"核心实现",slug:"核心实现",link:"#核心实现",children:[]}]},{level:2,title:"构建 BST",slug:"构建-bst",link:"#构建-bst",children:[]},{level:2,title:"打印一棵树",slug:"打印一棵树",link:"#打印一棵树",children:[]},{level:2,title:"打印另一个棵树",slug:"打印另一个棵树",link:"#打印另一个棵树",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-02-binary-search-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-03-图解 AVL 自平衡二叉查找树及 java 实现",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"平衡因子",slug:"平衡因子",link:"#平衡因子",children:[]},{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"是否平衡",slug:"是否平衡",link:"#是否平衡",children:[]},{level:2,title:"添加节点",slug:"添加节点",link:"#添加节点",children:[{level:3,title:"LL（右旋）",slug:"ll-右旋",link:"#ll-右旋",children:[]},{level:3,title:"RR（左旋）",slug:"rr-左旋",link:"#rr-左旋",children:[]},{level:3,title:"LR",slug:"lr",link:"#lr",children:[]},{level:3,title:"RL",slug:"rl",link:"#rl",children:[]},{level:3,title:"完整的添加实现",slug:"完整的添加实现",link:"#完整的添加实现",children:[]}]},{level:2,title:"删除操作",slug:"删除操作",link:"#删除操作",children:[]},{level:2,title:"准备工作",slug:"准备工作",link:"#准备工作",children:[]},{level:2,title:"测试",slug:"测试-1",link:"#测试-1",children:[{level:3,title:"ll-右旋场景",slug:"ll-右旋场景",link:"#ll-右旋场景",children:[]},{level:3,title:"rr-左旋测试",slug:"rr-左旋测试",link:"#rr-左旋测试",children:[]},{level:3,title:"LR-左旋右旋测试",slug:"lr-左旋右旋测试",link:"#lr-左旋右旋测试",children:[]},{level:3,title:"RL-右旋左旋测试",slug:"rl-右旋左旋测试",link:"#rl-右旋左旋测试",children:[]}]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-03-avl-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-04-图解红黑树 Red Black Tree 及 java 实现",headers:[{level:2,title:"用途和好处",slug:"用途和好处",link:"#用途和好处",children:[]},{level:2,title:"性质",slug:"性质",link:"#性质",children:[]},{level:2,title:"约束的作用",slug:"约束的作用",link:"#约束的作用",children:[]},{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"类定义",slug:"类定义",link:"#类定义",children:[]},{level:2,title:"自平衡策略",slug:"自平衡策略",link:"#自平衡策略",children:[{level:3,title:"左旋转",slug:"左旋转",link:"#左旋转",children:[]},{level:3,title:"右旋转",slug:"右旋转",link:"#右旋转",children:[]},{level:3,title:"变色",slug:"变色",link:"#变色",children:[]}]},{level:2,title:"添加",slug:"添加",link:"#添加",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"新增修正场景",slug:"新增修正场景",link:"#新增修正场景",children:[{level:3,title:"场景1：叔叔是红色",slug:"场景1-叔叔是红色",link:"#场景1-叔叔是红色",children:[]},{level:3,title:"场景2：叔叔是黑色，且当前节点是右孩子",slug:"场景2-叔叔是黑色-且当前节点是右孩子",link:"#场景2-叔叔是黑色-且当前节点是右孩子",children:[]},{level:3,title:"场景3：叔叔是黑色，且当前节点是左孩子",slug:"场景3-叔叔是黑色-且当前节点是左孩子",link:"#场景3-叔叔是黑色-且当前节点是左孩子",children:[]}]},{level:2,title:"新增修正实现",slug:"新增修正实现",link:"#新增修正实现",children:[]},{level:2,title:"删除元素",slug:"删除元素",link:"#删除元素",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"删除修正",slug:"删除修正",link:"#删除修正",children:[{level:3,title:'场景1：x是"黑+黑"节点，x的兄弟节点是红色',slug:"场景1-x是-黑-黑-节点-x的兄弟节点是红色",link:"#场景1-x是-黑-黑-节点-x的兄弟节点是红色",children:[]},{level:3,title:'场景2： x是"黑+黑"节点，x的兄弟节点是黑色，x的兄弟节点的两个孩子都是黑色',slug:"场景2-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的两个孩子都是黑色",link:"#场景2-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的两个孩子都是黑色",children:[]},{level:3,title:"场景3：x是“黑+黑”节点，x的兄弟节点是黑色；x的兄弟节点的左孩子是红色，右孩子是黑色的",slug:"场景3-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的左孩子是红色-右孩子是黑色的",link:"#场景3-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的左孩子是红色-右孩子是黑色的",children:[]},{level:3,title:"场景4：x是“黑+黑”节点，x的兄弟节点是黑色；x的兄弟节点的右孩子是红色的，x的兄弟节点的左孩子任意颜色",slug:"场景4-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的右孩子是红色的-x的兄弟节点的左孩子任意颜色",link:"#场景4-x是-黑-黑-节点-x的兄弟节点是黑色-x的兄弟节点的右孩子是红色的-x的兄弟节点的左孩子任意颜色",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[{level:3,title:"日志",slug:"日志",link:"#日志",children:[]}]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-04-red-black-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-05-伸展树 Splay Tree 及 java 实现",headers:[{level:2,title:"核心思想",slug:"核心思想",link:"#核心思想",children:[]},{level:2,title:"操作方案",slug:"操作方案",link:"#操作方案",children:[]},{level:2,title:"优点",slug:"优点",link:"#优点",children:[]},{level:2,title:"缺点",slug:"缺点",link:"#缺点",children:[]},{level:2,title:"伸展(splay)",slug:"伸展-splay",link:"#伸展-splay",children:[]},{level:2,title:"连接(join)",slug:"连接-join",link:"#连接-join",children:[]},{level:2,title:"分割(split)",slug:"分割-split",link:"#分割-split",children:[]},{level:2,title:"插入(insert)",slug:"插入-insert",link:"#插入-insert",children:[]},{level:2,title:"节点结构定义",slug:"节点结构定义",link:"#节点结构定义",children:[]},{level:2,title:"旋转操作",slug:"旋转操作",link:"#旋转操作",children:[{level:3,title:"单 R 型",slug:"单-r-型",link:"#单-r-型",children:[]},{level:3,title:"单 L 型",slug:"单-l-型",link:"#单-l-型",children:[]},{level:3,title:"RR 型",slug:"rr-型",link:"#rr-型",children:[]},{level:3,title:"LL 型",slug:"ll-型",link:"#ll-型",children:[]},{level:3,title:"RL 型",slug:"rl-型",link:"#rl-型",children:[]},{level:3,title:"LR 型",slug:"lr-型",link:"#lr-型",children:[]}]},{level:2,title:"伸展树的操作",slug:"伸展树的操作",link:"#伸展树的操作",children:[{level:3,title:"(1) 先看看查找函数search：",slug:"_1-先看看查找函数search",link:"#_1-先看看查找函数search",children:[]},{level:3,title:"插入",slug:"插入",link:"#插入",children:[]},{level:3,title:"伸展",slug:"伸展",link:"#伸展",children:[]},{level:3,title:"删除",slug:"删除",link:"#删除",children:[]}]},{level:2,title:"完整的 C 实现",slug:"完整的-c-实现",link:"#完整的-c-实现",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-05-spaly-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-06- B 树之 2-3 Tree",headers:[{level:2,title:"定义",slug:"定义",link:"#定义",children:[]},{level:2,title:"性质",slug:"性质",link:"#性质",children:[]},{level:2,title:"插入",slug:"插入",link:"#插入",children:[]},{level:2,title:"向2-节点中插入新节点",slug:"向2-节点中插入新节点",link:"#向2-节点中插入新节点",children:[]},{level:2,title:"向一棵只含 3- 节点的树中插入新节点",slug:"向一棵只含-3-节点的树中插入新节点",link:"#向一棵只含-3-节点的树中插入新节点",children:[]},{level:2,title:"向一个父节点为 2- 节点的 3- 节点中插入新节点",slug:"向一个父节点为-2-节点的-3-节点中插入新节点",link:"#向一个父节点为-2-节点的-3-节点中插入新节点",children:[]},{level:2,title:"向一个父节点为3-节点的3-节点中插入新节点",slug:"向一个父节点为3-节点的3-节点中插入新节点",link:"#向一个父节点为3-节点的3-节点中插入新节点",children:[]},{level:2,title:"删除非叶子节点",slug:"删除非叶子节点",link:"#删除非叶子节点",children:[]},{level:2,title:"删除不为2-节点的叶子节点",slug:"删除不为2-节点的叶子节点",link:"#删除不为2-节点的叶子节点",children:[]},{level:2,title:"删除为2-节点的叶子节点",slug:"删除为2-节点的叶子节点",link:"#删除为2-节点的叶子节点",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-06-2-3-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-08-多路查找树 BTree 及 java 实现",headers:[{level:2,title:"B树的定义",slug:"b树的定义",link:"#b树的定义",children:[]},{level:2,title:"描述",slug:"描述",link:"#描述",children:[]},{level:2,title:"BTree 的优势",slug:"btree-的优势",link:"#btree-的优势",children:[]},{level:2,title:"结构定义",slug:"结构定义",link:"#结构定义",children:[]},{level:2,title:"元素的查找",slug:"元素的查找",link:"#元素的查找",children:[]},{level:2,title:"实战演练",slug:"实战演练",link:"#实战演练",children:[{level:3,title:"结构定义",slug:"结构定义-1",link:"#结构定义-1",children:[]},{level:3,title:"插入（insert）操作",slug:"插入-insert-操作",link:"#插入-insert-操作",children:[]},{level:3,title:"删除",slug:"删除",link:"#删除",children:[]},{level:3,title:"删除的场景 2",slug:"删除的场景-2",link:"#删除的场景-2",children:[]}]},{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"定义树",slug:"定义树",link:"#定义树",children:[]},{level:2,title:"B 树的查找",slug:"b-树的查找",link:"#b-树的查找",children:[]},{level:2,title:"B树的插入",slug:"b树的插入",link:"#b树的插入",children:[]},{level:2,title:"树的删除",slug:"树的删除",link:"#树的删除",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-08-b-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-09-多路查找树 B+ 树 及 java 实现",headers:[{level:2,title:"描述",slug:"描述",link:"#描述",children:[]},{level:2,title:"带有顺序访问指针的B+Tree",slug:"带有顺序访问指针的b-tree",link:"#带有顺序访问指针的b-tree",children:[]},{level:2,title:"与 B Tree 的差异",slug:"与-b-tree-的差异",link:"#与-b-tree-的差异",children:[]},{level:2,title:"B+ Tree的磁盘读写代价更低",slug:"b-tree的磁盘读写代价更低",link:"#b-tree的磁盘读写代价更低",children:[]},{level:2,title:"B+ Tree 的查询效率更加稳定",slug:"b-tree-的查询效率更加稳定",link:"#b-tree-的查询效率更加稳定",children:[]},{level:2,title:"主存存取原理",slug:"主存存取原理",link:"#主存存取原理",children:[]},{level:2,title:"磁盘原理",slug:"磁盘原理",link:"#磁盘原理",children:[]},{level:2,title:"局部性原理与磁盘预读",slug:"局部性原理与磁盘预读",link:"#局部性原理与磁盘预读",children:[]},{level:2,title:"B-/+Tree索引的性能分析",slug:"b-tree索引的性能分析",link:"#b-tree索引的性能分析",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-09-bplus-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-10-多路查找树 B* 树 及 java 实现",headers:[],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-10-bstar-tree.html",pathLocale:"/",extraFields:[]},{title:"Tree-11-mysql index 数据库索引",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]}],path:"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-11-database-index.html",pathLocale:"/",extraFields:[]},{title:"01-ksum 求符合条件的 k 个数  1. Two Sum/15. 3Sum/18. 4Sum/",headers:[{level:2,title:"1. Two Sum 两数之和",slug:"_1-two-sum-两数之和",link:"#_1-two-sum-两数之和",children:[{level:3,title:"题目",slug:"题目",link:"#题目",children:[]},{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"基础解法",slug:"基础解法",link:"#基础解法",children:[]},{level:3,title:"优化解法",slug:"优化解法",link:"#优化解法",children:[]}]},{level:2,title:"15. 3Sum 三数之和",slug:"_15-3sum-三数之和",link:"#_15-3sum-三数之和",children:[{level:3,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:3,title:"粗暴解法",slug:"粗暴解法",link:"#粗暴解法",children:[]},{level:3,title:"优化解法",slug:"优化解法-1",link:"#优化解法-1",children:[]}]},{level:2,title:"V1-双指针法",slug:"v1-双指针法",link:"#v1-双指针法",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"V2-优化",slug:"v2-优化",link:"#v2-优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"18. 4Sum 四数之和",slug:"_18-4sum-四数之和",link:"#_18-4sum-四数之和",children:[{level:3,title:"题目",slug:"题目-2",link:"#题目-2",children:[]},{level:3,title:"解法",slug:"解法",link:"#解法",children:[]},{level:3,title:"优化方法",slug:"优化方法",link:"#优化方法",children:[]}]},{level:2,title:"ksum",slug:"ksum",link:"#ksum",children:[{level:3,title:"题目",slug:"题目-3",link:"#题目-3",children:[]},{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"示例代码",slug:"示例代码",link:"#示例代码",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-001-leetcode-01-ksum.html",pathLocale:"/",extraFields:[]},{title:"02-leetcode 2. 两数相加 add two numbers",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-002-leetcode-02-add-two-numbers.html",pathLocale:"/",extraFields:[]},{title:"03-leetcode 3. 无重复字符的最长子串 Longest Substring Without Repeating Characters",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters.html",pathLocale:"/",extraFields:[]},{title:"04-4.median of two sorted arrays 寻找两个正序数组的中位数",headers:[{level:2,title:"4. 题目",slug:"_4-题目",link:"#_4-题目",children:[{level:3,title:"示例 1:",slug:"示例-1",link:"#示例-1",children:[]},{level:3,title:"示例 2:",slug:"示例-2",link:"#示例-2",children:[]}]},{level:2,title:"简单解法",slug:"简单解法",link:"#简单解法",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 源码",slug:"java-源码",link:"#java-源码",children:[]},{level:3,title:"性能",slug:"性能",link:"#性能",children:[]}]},{level:2,title:"进阶解法",slug:"进阶解法",link:"#进阶解法",children:[{level:3,title:"中位数有什么用",slug:"中位数有什么用",link:"#中位数有什么用",children:[]},{level:3,title:"分析过程",slug:"分析过程",link:"#分析过程",children:[]},{level:3,title:"python 实现",slug:"python-实现",link:"#python-实现",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"性能",slug:"性能-1",link:"#性能-1",children:[]}]},{level:2,title:"个人收获",slug:"个人收获",link:"#个人收获",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays.html",pathLocale:"/",extraFields:[]},{title:"05-5. 最长回文子串 Longest Palindromic Substring",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring.html",pathLocale:"/",extraFields:[]},{title:"06-6. N 字形变换 zigzag conversion",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"列的改进",slug:"列的改进",link:"#列的改进",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-006-leetcode-06-zigzag-conversion.html",pathLocale:"/",extraFields:[]},{title:"07-7. 整数反转 reverse integer 整数的位运算汇总",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"例子",slug:"例子-1",link:"#例子-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"例子",slug:"例子-2",link:"#例子-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"V2-借助整数逆序",slug:"v2-借助整数逆序",link:"#v2-借助整数逆序",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子-3",link:"#例子-3",children:[]},{level:3,title:"提示：",slug:"提示-1",link:"#提示-1",children:[]}]},{level:2,title:"V1-基本实现",slug:"v1-基本实现",link:"#v1-基本实现",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"V2-减法",slug:"v2-减法",link:"#v2-减法",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"java 实现",slug:"java-实现-4",link:"#java-实现-4",children:[]},{level:3,title:"效果",slug:"效果-5",link:"#效果-5",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-007-leetcode-07-reverse-integer.html",pathLocale:"/",extraFields:[]},{title:"08 - 10. Regular Expression Matching 正则表达式匹配 + 42.Wildcard Matching 通配符匹配",headers:[{level:2,title:"10. Regular Expression Matching 题目",slug:"_10-regular-expression-matching-题目",link:"#_10-regular-expression-matching-题目",children:[{level:3,title:"个人分析",slug:"个人分析",link:"#个人分析",children:[]}]},{level:2,title:"v1 标准库实现版本",slug:"v1-标准库实现版本",link:"#v1-标准库实现版本",children:[{level:3,title:"代码",slug:"代码",link:"#代码",children:[]},{level:3,title:"性能",slug:"性能",link:"#性能",children:[]}]},{level:2,title:"v2 递归实现",slug:"v2-递归实现",link:"#v2-递归实现",children:[{level:3,title:"实现思路",slug:"实现思路",link:"#实现思路",children:[]},{level:3,title:"如果存在 * 号",slug:"如果存在-号",link:"#如果存在-号",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"v3 动态规划",slug:"v3-动态规划",link:"#v3-动态规划",children:[{level:3,title:"对于递归的思考",slug:"对于递归的思考",link:"#对于递归的思考",children:[]},{level:3,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:3,title:"自顶向下的方法",slug:"自顶向下的方法",link:"#自顶向下的方法",children:[]},{level:3,title:"自上而下",slug:"自上而下",link:"#自上而下",children:[]}]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读",link:"#拓展阅读",children:[]},{level:2,title:"描述",slug:"描述",link:"#描述",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"DP 思路解析",slug:"dp-思路解析",link:"#dp-思路解析",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"解题思路",slug:"解题思路-1",link:"#解题思路-1",children:[]},{level:2,title:"原始的 c++ 实现",slug:"原始的-c-实现",link:"#原始的-c-实现",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"注释更加丰富的版本",slug:"注释更加丰富的版本",link:"#注释更加丰富的版本",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-008-leetcode-10-regex-match.html",pathLocale:"/",extraFields:[]},{title:"009 - 11. 盛最多水的容器 Container With Most Water 双指针法 + 42. 接雨水 Trapping Rain Water + 407. Trapping Rain Water II",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"简单优化",slug:"简单优化",link:"#简单优化",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"示例",slug:"示例",link:"#示例",children:[]}]},{level:2,title:"v1-按列计算",slug:"v1-按列计算",link:"#v1-按列计算",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"V2-动态规划",slug:"v2-动态规划",link:"#v2-动态规划",children:[{level:3,title:"思路-空间换时间",slug:"思路-空间换时间",link:"#思路-空间换时间",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"v3-双指针",slug:"v3-双指针",link:"#v3-双指针",children:[{level:3,title:"优化左边高度数组",slug:"优化左边高度数组",link:"#优化左边高度数组",children:[]},{level:3,title:"java 实现 1",slug:"java-实现-1-1",link:"#java-实现-1-1",children:[]},{level:3,title:"优化右边高度数组的思路-双指针",slug:"优化右边高度数组的思路-双指针",link:"#优化右边高度数组的思路-双指针",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:3,title:"评价",slug:"评价",link:"#评价",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"示例",slug:"示例-1",link:"#示例-1",children:[]}]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-009-leetcode-11-container-with-most-water.html",pathLocale:"/",extraFields:[]},{title:"010-19. 删除链表的倒数第 N 个结点 Remove Nth Node From End of List  双指针",headers:[{level:2,title:"示例",slug:"示例",link:"#示例",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"官方解法",slug:"官方解法",link:"#官方解法",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思考",slug:"思考",link:"#思考",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list.html",pathLocale:"/",extraFields:[]},{title:"011-21.合并多个有序的链表 merge k sorted lists",headers:[{level:2,title:"开胃菜",slug:"开胃菜",link:"#开胃菜",children:[{level:3,title:"题目 21. 合并两个有序链表",slug:"题目-21-合并两个有序链表",link:"#题目-21-合并两个有序链表",children:[]},{level:3,title:"解法 1",slug:"解法-1",link:"#解法-1",children:[]},{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"解法 2",slug:"解法-2",link:"#解法-2",children:[]},{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"实现",slug:"实现",link:"#实现",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"进阶版",slug:"进阶版",link:"#进阶版",children:[]},{level:2,title:"1. 暴力破万法",slug:"_1-暴力破万法",link:"#_1-暴力破万法",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"2. k = (k-1) + 1",slug:"_2-k-k-1-1",link:"#_2-k-k-1-1",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"3. 优先级队列-排序我最强",slug:"_3-优先级队列-排序我最强",link:"#_3-优先级队列-排序我最强",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}]},{level:2,title:"4. 分治-分而治之，各个击破",slug:"_4-分治-分而治之-各个击破",link:"#_4-分治-分而治之-各个击破",children:[{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-5",link:"#效果-5",children:[]}]},{level:2,title:"5. 优化的尽头",slug:"_5-优化的尽头",link:"#_5-优化的尽头",children:[{level:3,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:3,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:3,title:"效果",slug:"效果-6",link:"#效果-6",children:[]}]},{level:2,title:"拓展阅读",slug:"拓展阅读",link:"#拓展阅读",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists.html",pathLocale:"/",extraFields:[]},{title:"012-22.括号生成 generate-parentheses + 20. 有效的括号 valid parentheses + 32. 最长有效括号 Longest Valid Parentheses",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]},{level:3,title:"提示：",slug:"提示",link:"#提示",children:[]}]},{level:2,title:"V1-基于 Stack",slug:"v1-基于-stack",link:"#v1-基于-stack",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"v2-模拟 stack",slug:"v2-模拟-stack",link:"#v2-模拟-stack",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路分析",slug:"思路分析",link:"#思路分析",children:[]},{level:2,title:"思路1-暴力破万法",slug:"思路1-暴力破万法",link:"#思路1-暴力破万法",children:[{level:3,title:"流程",slug:"流程",link:"#流程",children:[]},{level:3,title:"示例代码",slug:"示例代码",link:"#示例代码",children:[]},{level:3,title:"性能",slug:"性能",link:"#性能",children:[]}]},{level:2,title:"思路2-DFS 深度优先遍历",slug:"思路2-dfs-深度优先遍历",link:"#思路2-dfs-深度优先遍历",children:[{level:3,title:"流程",slug:"流程-1",link:"#流程-1",children:[]},{level:3,title:"实现",slug:"实现",link:"#实现",children:[]},{level:3,title:"性能",slug:"性能-1",link:"#性能-1",children:[]}]},{level:2,title:"思路3-DFS 深度优先遍历改进",slug:"思路3-dfs-深度优先遍历改进",link:"#思路3-dfs-深度优先遍历改进",children:[{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"性能",slug:"性能-2",link:"#性能-2",children:[]}]},{level:2,title:"思路4-DFS 深度优先方式2",slug:"思路4-dfs-深度优先方式2",link:"#思路4-dfs-深度优先方式2",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"思路5-BFS 广度优先遍历",slug:"思路5-bfs-广度优先遍历",link:"#思路5-bfs-广度优先遍历",children:[{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]},{level:2,title:"思路6-DP 动态规划",slug:"思路6-dp-动态规划",link:"#思路6-dp-动态规划",children:[{level:3,title:"核心思路",slug:"核心思路",link:"#核心思路",children:[]},{level:3,title:"java 实现",slug:"java-实现-4",link:"#java-实现-4",children:[]},{level:3,title:"性能",slug:"性能-3",link:"#性能-3",children:[]}]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"v1-暴力算法",slug:"v1-暴力算法",link:"#v1-暴力算法",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-5",link:"#java-实现-5",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"V2-基于 stack",slug:"v2-基于-stack",link:"#v2-基于-stack",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"java 实现",slug:"java-实现-6",link:"#java-实现-6",children:[]},{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"v3-DP 动态规划",slug:"v3-dp-动态规划",link:"#v3-dp-动态规划",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"确定状态-最后一步",slug:"确定状态-最后一步",link:"#确定状态-最后一步",children:[]},{level:3,title:"子问题",slug:"子问题",link:"#子问题",children:[]},{level:3,title:"转移方程",slug:"转移方程",link:"#转移方程",children:[]},{level:3,title:"初始条件和边界情况：",slug:"初始条件和边界情况",link:"#初始条件和边界情况",children:[]},{level:3,title:"计算顺序：",slug:"计算顺序",link:"#计算顺序",children:[]},{level:3,title:"java 实现",slug:"java-实现-7",link:"#java-实现-7",children:[]},{level:3,title:"复杂度计算：",slug:"复杂度计算",link:"#复杂度计算",children:[]}]},{level:2,title:"V4-正向逆向结合",slug:"v4-正向逆向结合",link:"#v4-正向逆向结合",children:[{level:3,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:3,title:"java 实现",slug:"java-实现-8",link:"#java-实现-8",children:[]},{level:3,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-012-leetcode-22-generate-parentheses.html",pathLocale:"/",extraFields:[]},{title:"013-25.K 个一组翻转链表 Reverse Nodes in k-Group + 24. 两两交换链表中的节点 swap nodes in pairs",headers:[{level:2,title:"示例",slug:"示例",link:"#示例",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"示例",slug:"示例-1",link:"#示例-1",children:[]},{level:2,title:"性能",slug:"性能",link:"#性能",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group.html",pathLocale:"/",extraFields:[]},{title:"014-29.两数相除 divide two integers",headers:[{level:2,title:"29.整数相除",slug:"_29-整数相除",link:"#_29-整数相除",children:[]},{level:2,title:"数学的方式",slug:"数学的方式",link:"#数学的方式",children:[{level:3,title:"解法",slug:"解法",link:"#解法",children:[]},{level:3,title:"性能",slug:"性能",link:"#性能",children:[]},{level:3,title:"解析",slug:"解析",link:"#解析",children:[]}]},{level:2,title:"逼近",slug:"逼近",link:"#逼近",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"例子",slug:"例子",link:"#例子",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"性能",slug:"性能-1",link:"#性能-1",children:[]}]},{level:2,title:"int 版本",slug:"int-版本",link:"#int-版本",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-014-leetcode-29-divide-two-integers.html",pathLocale:"/",extraFields:[]},{title:"015-30.串联所有单词的子串 Substring with Concatenation of All Words",headers:[{level:2,title:"串联所有单词的子串",slug:"串联所有单词的子串",link:"#串联所有单词的子串",children:[]},{level:2,title:"解法1",slug:"解法1",link:"#解法1",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"解法二",slug:"解法二",link:"#解法二",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"算法优化",slug:"算法优化",link:"#算法优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"大道至简",slug:"大道至简",link:"#大道至简",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words.html",pathLocale:"/",extraFields:[]},{title:"016-31.下一个排列 next permutation + 46. 全排列 permutations + 47. 全排列 II permutations-ii + 60. 排列序列 permutation sequence",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[{level:3,title:"例子",slug:"例子-2",link:"#例子-2",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"V2-剪枝",slug:"v2-剪枝",link:"#v2-剪枝",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"题目",slug:"题目-3",link:"#题目-3",children:[{level:3,title:"例子",slug:"例子-3",link:"#例子-3",children:[]}]},{level:2,title:"v1-基本方式",slug:"v1-基本方式",link:"#v1-基本方式",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"V2-回溯剪枝",slug:"v2-回溯剪枝",link:"#v2-回溯剪枝",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"阶乘",slug:"阶乘",link:"#阶乘",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]}]},{level:2,title:"V3-有序数组（链表）模拟",slug:"v3-有序数组-链表-模拟",link:"#v3-有序数组-链表-模拟",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"算法",slug:"算法-1",link:"#算法-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-4",link:"#java-实现-4",children:[]},{level:3,title:"复杂度分析",slug:"复杂度分析-1",link:"#复杂度分析-1",children:[]}]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-016-leetcode-31-next-permutation.html",pathLocale:"/",extraFields:[]},{title:"017-33. 搜索旋转排序数组 Search in Rotated Sorted Array + 81. Search in Rotated Sorted Array II + 153. Find Minimum in Rotated Sorted Array 寻找旋转排序数组中的最小值 + 154.Find Minimum in Rotated Sorted Array II",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]},{level:3,title:"评价",slug:"评价",link:"#评价",children:[]}]},{level:2,title:"v2-二分法",slug:"v2-二分法",link:"#v2-二分法",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[{level:3,title:"例子",slug:"例子-2",link:"#例子-2",children:[]}]},{level:2,title:"题目",slug:"题目-3",link:"#题目-3",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array.html",pathLocale:"/",extraFields:[]},{title:"018-34. 在排序数组中查找元素的第一个和最后一个位置 Find First and Last Position of Element in Sorted Array",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"不满意的答案",slug:"不满意的答案",link:"#不满意的答案",children:[]},{level:2,title:"改进思路",slug:"改进思路",link:"#改进思路",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"更进一步的优化",slug:"更进一步的优化",link:"#更进一步的优化",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array.html",pathLocale:"/",extraFields:[]},{title:"019-36. 有效的数独 Valid Sudoku + 37. 解数独 sudoku solver",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"注意：",slug:"注意",link:"#注意",children:[]},{level:3,title:"示例",slug:"示例",link:"#示例",children:[]},{level:3,title:"提示：",slug:"提示",link:"#提示",children:[]}]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]},{level:3,title:"提示",slug:"提示-1",link:"#提示-1",children:[]}]},{level:2,title:"V1-基本回溯版本",slug:"v1-基本回溯版本",link:"#v1-基本回溯版本",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"V2-回溯版本优化",slug:"v2-回溯版本优化",link:"#v2-回溯版本优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-019-leetcode-36-valid-suduku.html",pathLocale:"/",extraFields:[]},{title:"1882-1182. 与目标颜色间的最短距离",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color.html",pathLocale:"/",extraFields:[]},{title:"020-39. 组合总和 Combination Sum + 40. 组合总和 II Combination Sum II + 77. 组合 combinations + 216. Combination Sum III + 377. 组合总和 Ⅳ",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"示例",slug:"示例",link:"#示例",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"v1-基本版本回溯",slug:"v1-基本版本回溯",link:"#v1-基本版本回溯",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现1",slug:"java-实现1",link:"#java-实现1",children:[]},{level:3,title:"java 实现2",slug:"java-实现2",link:"#java-实现2",children:[]}]},{level:2,title:"题目",slug:"题目-3",link:"#题目-3",children:[{level:3,title:"示例",slug:"示例-1",link:"#示例-1",children:[]},{level:3,title:"java 实现2",slug:"java-实现2-1",link:"#java-实现2-1",children:[]}]},{level:2,title:"V2-回溯大道至简",slug:"v2-回溯大道至简",link:"#v2-回溯大道至简",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"题目",slug:"题目-4",link:"#题目-4",children:[{level:3,title:"示例",slug:"示例-2",link:"#示例-2",children:[]}]},{level:2,title:"v1-回溯",slug:"v1-回溯",link:"#v1-回溯",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"v2-回溯+引入缓存",slug:"v2-回溯-引入缓存",link:"#v2-回溯-引入缓存",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"v3-dp",slug:"v3-dp",link:"#v3-dp",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-39-combination-sum.html",pathLocale:"/",extraFields:[]},{title:"40-best-time-to-buy-and-sell-stock 力扣 121. 买卖股票的最佳时机",headers:[{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"V2.5-代码性能优化",slug:"v2-5-代码性能优化",link:"#v2-5-代码性能优化",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"核心实现",slug:"核心实现",link:"#核心实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[{level:3,title:"初始化",slug:"初始化",link:"#初始化",children:[]}]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock.html",pathLocale:"/",extraFields:[]},{title:"41-best-time-to-buy-and-sell-stock-ii 力扣 122. 买卖股票的最佳时机 II",headers:[{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]},{level:2,title:"上一题",slug:"上一题",link:"#上一题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"递推公式",slug:"递推公式",link:"#递推公式",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii.html",pathLocale:"/",extraFields:[]},{title:"42-best-time-to-buy-and-sell-stock-iii 力扣 123. 买卖股票的最佳时机 III",headers:[{level:2,title:"借助第一题的思路",slug:"借助第一题的思路",link:"#借助第一题的思路",children:[]},{level:2,title:"伪代码",slug:"伪代码",link:"#伪代码",children:[]},{level:2,title:"T121 的解法",slug:"t121-的解法",link:"#t121-的解法",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"评价",slug:"评价",link:"#评价",children:[]},{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii.html",pathLocale:"/",extraFields:[]},{title:"43-best-time-to-buy-and-sell-stock-iv 力扣 188. 买卖股票的最佳时机 IV",headers:[{level:2,title:"和其他题目的关联",slug:"和其他题目的关联",link:"#和其他题目的关联",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"评价",slug:"评价",link:"#评价",children:[]},{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv.html",pathLocale:"/",extraFields:[]},{title:"44-best-time-to-buy-and-sell-stock-with-cooldown 力扣 309. 买卖股票的最佳时机包含冷冻期",headers:[{level:2,title:"整体思路",slug:"整体思路",link:"#整体思路",children:[]},{level:2,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:2,title:"递推公式",slug:"递推公式",link:"#递推公式",children:[{level:3,title:"a1",slug:"a1",link:"#a1",children:[]},{level:3,title:"a2",slug:"a2",link:"#a2",children:[]},{level:3,title:"a3",slug:"a3",link:"#a3",children:[]}]},{level:2,title:"完整的伪代码",slug:"完整的伪代码",link:"#完整的伪代码",children:[]},{level:2,title:"评价",slug:"评价",link:"#评价",children:[]},{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown.html",pathLocale:"/",extraFields:[]},{title:"45-best-time-to-buy-and-sell-stock-with-cooldown 力扣 714. 买卖股票的最佳时机包含手续费",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"DP 考量",slug:"dp-考量",link:"#dp-考量",children:[]},{level:2,title:"递推公式",slug:"递推公式",link:"#递推公式",children:[]},{level:2,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"开源地址",slug:"开源地址",link:"#开源地址",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee.html",pathLocale:"/",extraFields:[]},{title:"46-Prefix Sum 力扣前缀和介绍",headers:[{level:2,title:"一、什么是前缀和？",slug:"一、什么是前缀和",link:"#一、什么是前缀和",children:[]},{level:2,title:"在线可视化",slug:"在线可视化",link:"#在线可视化",children:[]},{level:2,title:"二、代码实现（以 Java 为例）",slug:"二、代码实现-以-java-为例",link:"#二、代码实现-以-java-为例",children:[]},{level:2,title:"四、复杂度分析",slug:"四、复杂度分析",link:"#四、复杂度分析",children:[]},{level:2,title:"五、注意事项",slug:"五、注意事项",link:"#五、注意事项",children:[]},{level:2,title:"六、例题推荐",slug:"六、例题推荐",link:"#六、例题推荐",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html",pathLocale:"/",extraFields:[]},{title:"47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"前缀和",slug:"前缀和",link:"#前缀和",children:[]},{level:2,title:"整体思路",slug:"整体思路",link:"#整体思路",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"二分法",slug:"二分法",link:"#二分法",children:[]},{level:2,title:"代码",slug:"代码-2",link:"#代码-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心代码",slug:"核心代码",link:"#核心代码",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum.html",pathLocale:"/",extraFields:[]},{title:"47-Prefix Sum 724. 寻找数组的中心下标 + 1991. 找到数组的中间位置",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724.html",pathLocale:"/",extraFields:[]},{title:"48-product-of-array-except-self 力扣 238. 除自身以外的数组的乘积",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"其他思路",slug:"其他思路",link:"#其他思路",children:[]},{level:2,title:"如何计算前缀积和后缀积？",slug:"如何计算前缀积和后缀积",link:"#如何计算前缀积和后缀积",children:[]},{level:2,title:"边界值考虑",slug:"边界值考虑",link:"#边界值考虑",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self.html",pathLocale:"/",extraFields:[]},{title:"49-303. range-sum-query-immutable  力扣 303. 区域和检索 - 数组不可变",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable.html",pathLocale:"/",extraFields:[]},{title:"50-307. range-sum-query-mutable  力扣 307. 区域和检索 - 数组可变",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"他山之石",slug:"他山之石",link:"#他山之石",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable.html",pathLocale:"/",extraFields:[]},{title:"50-树状数组 Binary Indexed Tree，简称 BIT FenwickTree",headers:[{level:2,title:"详细介绍一下树状数组",slug:"详细介绍一下树状数组",link:"#详细介绍一下树状数组",children:[{level:3,title:"1. 树状数组的基本原理",slug:"_1-树状数组的基本原理",link:"#_1-树状数组的基本原理",children:[]},{level:3,title:"2. 树状数组的实现",slug:"_2-树状数组的实现",link:"#_2-树状数组的实现",children:[]},{level:3,title:"3. 树状数组的时间复杂度",slug:"_3-树状数组的时间复杂度",link:"#_3-树状数组的时间复杂度",children:[]},{level:3,title:"4. 应用场景",slug:"_4-应用场景",link:"#_4-应用场景",children:[]},{level:3,title:"5. 树状数组的扩展",slug:"_5-树状数组的扩展",link:"#_5-树状数组的扩展",children:[]},{level:3,title:"6. 与其他数据结构的比较",slug:"_6-与其他数据结构的比较",link:"#_6-与其他数据结构的比较",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"实在无法理解这个位运算，结合具体的例子，一步步推导一下",slug:"实在无法理解这个位运算-结合具体的例子-一步步推导一下",link:"#实在无法理解这个位运算-结合具体的例子-一步步推导一下",children:[{level:3,title:"1. lowbit(i) 的含义",slug:"_1-lowbit-i-的含义",link:"#_1-lowbit-i-的含义",children:[]},{level:3,title:"2. lowbit(i) 在树状数组中的应用",slug:"_2-lowbit-i-在树状数组中的应用",link:"#_2-lowbit-i-在树状数组中的应用",children:[]},{level:3,title:"3. 总结",slug:"_3-总结",link:"#_3-总结",children:[]}]},{level:2,title:"如何记忆呢？",slug:"如何记忆呢",link:"#如何记忆呢",children:[{level:3,title:"1. 理解二进制的低位性质",slug:"_1-理解二进制的低位性质",link:"#_1-理解二进制的低位性质",children:[]},{level:3,title:"2. 逐步理解流程，减少一次性负担",slug:"_2-逐步理解流程-减少一次性负担",link:"#_2-逐步理解流程-减少一次性负担",children:[]},{level:3,title:"3. 通过具体例子反复练习",slug:"_3-通过具体例子反复练习",link:"#_3-通过具体例子反复练习",children:[]},{level:3,title:"4. 关联已知知识",slug:"_4-关联已知知识",link:"#_4-关联已知知识",children:[]},{level:3,title:"5. 总结和规律提取",slug:"_5-总结和规律提取",link:"#_5-总结和规律提取",children:[]},{level:3,title:"6. 持续练习和复习",slug:"_6-持续练习和复习",link:"#_6-持续练习和复习",children:[]},{level:3,title:"7. 思维导图或图示化",slug:"_7-思维导图或图示化",link:"#_7-思维导图或图示化",children:[]},{level:3,title:"总结",slug:"总结-1",link:"#总结-1",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array.html",pathLocale:"/",extraFields:[]},{title:"51-1124. longest-well-performing-interval  力扣 1124. 表现良好的最长时间段  前缀和+HashMap",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"前提",slug:"前提",link:"#前提",children:[]},{level:2,title:"推导",slug:"推导",link:"#推导",children:[{level:3,title:"思路：",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"具体做法：",slug:"具体做法",link:"#具体做法",children:[]}]},{level:2,title:"基本解法",slug:"基本解法",link:"#基本解法",children:[{level:3,title:"疑问1：为什么这里不需要设置对应的 map.put(0. -1)?",slug:"疑问1-为什么这里不需要设置对应的-map-put-0-1",link:"#疑问1-为什么这里不需要设置对应的-map-put-0-1",children:[]},{level:3,title:"疑问2：prefixSum[i] > 0 时，比较好理解，就是子数组大于0。但是为什么要判断 map.containsKey(prefixSum[i] - 1)？",slug:"疑问2-prefixsum-i-0-时-比较好理解-就是子数组大于0。但是为什么要判断-map-containskey-prefixsum-i-1",link:"#疑问2-prefixsum-i-0-时-比较好理解-就是子数组大于0。但是为什么要判断-map-containskey-prefixsum-i-1",children:[]}]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval.html",pathLocale:"/",extraFields:[]},{title:"52-410. split-array-largest-sum  力扣 410. 分割数组的最大值",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"子问题1-拆分",slug:"子问题1-拆分",link:"#子问题1-拆分",children:[]},{level:2,title:"子问题2-最小值",slug:"子问题2-最小值",link:"#子问题2-最小值",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum.html",pathLocale:"/",extraFields:[]},{title:"53-523. continuous-subarray-sum  力扣 523. 连续的子数组和 同余定理  前缀和+HashMap",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"同余定理的定义可以用以下公式表达：",slug:"同余定理的定义可以用以下公式表达",link:"#同余定理的定义可以用以下公式表达",children:[{level:3,title:"为什么是取余相同？",slug:"为什么是取余相同",link:"#为什么是取余相同",children:[]}]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum.html",pathLocale:"/",extraFields:[]},{title:"54-325. max-size-subarray-sum-equals-k  力扣 325：和等于 k 的最长子数组长度",headers:[{level:3,title:"示例 1：",slug:"示例-1",link:"#示例-1",children:[]},{level:3,title:"示例 2：",slug:"示例-2",link:"#示例-2",children:[]},{level:3,title:"后续问题：",slug:"后续问题",link:"#后续问题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路：",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"疑问1：为什么出现多次，就说明子数组为0？",slug:"疑问1-为什么出现多次-就说明子数组为0",link:"#疑问1-为什么出现多次-就说明子数组为0",children:[]},{level:3,title:"疑问2：为什么  map.put(0, -1); 是为了什么？",slug:"疑问2-为什么-map-put-0-1-是为了什么",link:"#疑问2-为什么-map-put-0-1-是为了什么",children:[]}]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"思路：",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"疑问：为什么 prefixSum - k 就是满足目标的数据呢、",slug:"疑问-为什么-prefixsum-k-就是满足目标的数据呢、",link:"#疑问-为什么-prefixsum-k-就是满足目标的数据呢、",children:[]}]},{level:2,title:"代码实现：",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k.html",pathLocale:"/",extraFields:[]},{title:"53-525. continuous-subarray-sum  力扣 525. 连续的子数组和 同余定理  前缀和+HashMap",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"数据处理",slug:"数据处理",link:"#数据处理",children:[]},{level:2,title:"怎么求",slug:"怎么求",link:"#怎么求",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array.html",pathLocale:"/",extraFields:[]},{title:"56-560. subarray-sum-equals-k  力扣 560. 和为 k 的子数组  前缀和+HashMap",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"疑问",slug:"疑问",link:"#疑问",children:[{level:3,title:"为什么需要 map.put(0, 1)?",slug:"为什么需要-map-put-0-1",link:"#为什么需要-map-put-0-1",children:[]},{level:3,title:"疑问2：当 k = 0, nums[0] = 0 时，也是正确的吗？",slug:"疑问2-当-k-0-nums-0-0-时-也是正确的吗",link:"#疑问2-当-k-0-nums-0-0-时-也是正确的吗",children:[]}]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k.html",pathLocale:"/",extraFields:[]},{title:"57-1371. find-the-longest-substring-containing-vowels-in-even-counts  力扣 1371. 每个元音包含偶数次的最长子字符串",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"方便理解的思路",slug:"方便理解的思路",link:"#方便理解的思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts.html",pathLocale:"/",extraFields:[]},{title:"61-198. house-robber  力扣 198. 打家劫舍  dynamic-programming",headers:[{level:2,title:"个人思路",slug:"个人思路",link:"#个人思路",children:[{level:3,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:3,title:"结果",slug:"结果",link:"#结果",children:[]}]},{level:2,title:"完整代码",slug:"完整代码",link:"#完整代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber.html",pathLocale:"/",extraFields:[]},{title:"62-213. house-robber-ii  力扣 213. 打家劫舍 II  dynamic-programming",headers:[{level:2,title:"这一题还上一题的区别",slug:"这一题还上一题的区别",link:"#这一题还上一题的区别",children:[]},{level:2,title:"个人思路",slug:"个人思路",link:"#个人思路",children:[{level:3,title:"初始化",slug:"初始化",link:"#初始化",children:[]},{level:3,title:"结果",slug:"结果",link:"#结果",children:[]}]},{level:2,title:"完整代码",slug:"完整代码",link:"#完整代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii.html",pathLocale:"/",extraFields:[]},{title:"62-337. house-robber-iii  力扣 337. 打家劫舍 III  dynamic-programming",headers:[{level:2,title:"这一题还上一题的区别",slug:"这一题还上一题的区别",link:"#这一题还上一题的区别",children:[]},{level:2,title:"个人思路",slug:"个人思路",link:"#个人思路",children:[{level:3,title:"初始化",slug:"初始化",link:"#初始化",children:[]}]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii.html",pathLocale:"/",extraFields:[]},{title:"70-greedy 贪心算法",headers:[{level:2,title:"详细介绍一下 贪心算法",slug:"详细介绍一下-贪心算法",link:"#详细介绍一下-贪心算法",children:[{level:3,title:"贪心算法的特点",slug:"贪心算法的特点",link:"#贪心算法的特点",children:[]},{level:3,title:"贪心算法的适用场景",slug:"贪心算法的适用场景",link:"#贪心算法的适用场景",children:[]},{level:3,title:"贪心算法的设计步骤",slug:"贪心算法的设计步骤",link:"#贪心算法的设计步骤",children:[]},{level:3,title:"贪心算法的经典例题",slug:"贪心算法的经典例题",link:"#贪心算法的经典例题",children:[]},{level:3,title:"贪心算法的优缺点",slug:"贪心算法的优缺点",link:"#贪心算法的优缺点",children:[]},{level:3,title:"贪心算法与其他算法的对比",slug:"贪心算法与其他算法的对比",link:"#贪心算法与其他算法的对比",children:[]},{level:3,title:"贪心算法的总结",slug:"贪心算法的总结",link:"#贪心算法的总结",children:[]}]},{level:2,title:"贪心和动态规划区别是什么",slug:"贪心和动态规划区别是什么",link:"#贪心和动态规划区别是什么",children:[{level:3,title:"1. 基本思路",slug:"_1-基本思路",link:"#_1-基本思路",children:[]},{level:3,title:"2. 适用问题",slug:"_2-适用问题",link:"#_2-适用问题",children:[]},{level:3,title:"3. 求解过程",slug:"_3-求解过程",link:"#_3-求解过程",children:[]},{level:3,title:"4. 能否保证最优解",slug:"_4-能否保证最优解",link:"#_4-能否保证最优解",children:[]},{level:3,title:"举例",slug:"举例",link:"#举例",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"那是不是动态规划一定能解决贪心算法的问题？",slug:"那是不是动态规划一定能解决贪心算法的问题",link:"#那是不是动态规划一定能解决贪心算法的问题",children:[{level:3,title:"1. 贪心算法的问题可能不需要动态规划的复杂性",slug:"_1-贪心算法的问题可能不需要动态规划的复杂性",link:"#_1-贪心算法的问题可能不需要动态规划的复杂性",children:[]},{level:3,title:"2. 贪心策略有特定的“贪心选择性质”",slug:"_2-贪心策略有特定的-贪心选择性质",link:"#_2-贪心策略有特定的-贪心选择性质",children:[]},{level:3,title:"3. 问题结构可能不适合动态规划",slug:"_3-问题结构可能不适合动态规划",link:"#_3-问题结构可能不适合动态规划",children:[]},{level:3,title:"4. 动态规划和贪心算法的适用场景不同",slug:"_4-动态规划和贪心算法的适用场景不同",link:"#_4-动态规划和贪心算法的适用场景不同",children:[]},{level:3,title:"总结",slug:"总结-1",link:"#总结-1",children:[]}]},{level:2,title:"贪心算法 leetcode 经典题目",slug:"贪心算法-leetcode-经典题目",link:"#贪心算法-leetcode-经典题目",children:[{level:3,title:"1. 跳跃游戏系列",slug:"_1-跳跃游戏系列",link:"#_1-跳跃游戏系列",children:[]},{level:3,title:"2. 分发糖果",slug:"_2-分发糖果",link:"#_2-分发糖果",children:[]},{level:3,title:"3. 无重叠区间",slug:"_3-无重叠区间",link:"#_3-无重叠区间",children:[]},{level:3,title:"4. 用最少箭头射爆气球",slug:"_4-用最少箭头射爆气球",link:"#_4-用最少箭头射爆气球",children:[]},{level:3,title:"5. 划分字母区间",slug:"_5-划分字母区间",link:"#_5-划分字母区间",children:[]},{level:3,title:"6. 分配饼干",slug:"_6-分配饼干",link:"#_6-分配饼干",children:[]},{level:3,title:"7. 买卖股票系列",slug:"_7-买卖股票系列",link:"#_7-买卖股票系列",children:[]},{level:3,title:"8. 会议室",slug:"_8-会议室",link:"#_8-会议室",children:[]},{level:3,title:"9. 零钱兑换问题",slug:"_9-零钱兑换问题",link:"#_9-零钱兑换问题",children:[]},{level:3,title:"10. 车加油问题",slug:"_10-车加油问题",link:"#_10-车加油问题",children:[]},{level:3,title:"总结",slug:"总结-2",link:"#总结-2",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-70-greedy-overview.html",pathLocale:"/",extraFields:[]},{title:"72-greedy 2548. 填满背包的最大价格 分数背包",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:3,title:"实现代码",slug:"实现代码",link:"#实现代码",children:[]},{level:3,title:"代码解析",slug:"代码解析",link:"#代码解析",children:[]},{level:3,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]}]},{level:2,title:"为什么可以用贪心",slug:"为什么可以用贪心",link:"#为什么可以用贪心",children:[{level:3,title:"1. 物品可以任意分割",slug:"_1-物品可以任意分割",link:"#_1-物品可以任意分割",children:[]},{level:3,title:"2. 贪心策略的适用性",slug:"_2-贪心策略的适用性",link:"#_2-贪心策略的适用性",children:[]},{level:3,title:"3. 为什么动态规划不适合",slug:"_3-为什么动态规划不适合",link:"#_3-为什么动态规划不适合",children:[]},{level:3,title:"4. 分数背包的数学证明",slug:"_4-分数背包的数学证明",link:"#_4-分数背包的数学证明",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight.html",pathLocale:"/",extraFields:[]},{title:"73-greedy 2459. 通过移动项目到空白区域来排序数组",headers:[],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty.html",pathLocale:"/",extraFields:[]},{title:"73-3195. 包含所有 1 的最小矩形面积 I",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-3195_dfs.html",pathLocale:"/",extraFields:[]},{title:"80-recursive 递归",headers:[{level:2,title:"是什么？",slug:"是什么",link:"#是什么",children:[{level:3,title:"递归的基本组成部分",slug:"递归的基本组成部分",link:"#递归的基本组成部分",children:[]},{level:3,title:"递归算法的工作原理",slug:"递归算法的工作原理",link:"#递归算法的工作原理",children:[]},{level:3,title:"示例：阶乘计算",slug:"示例-阶乘计算",link:"#示例-阶乘计算",children:[]},{level:3,title:"递归的优缺点",slug:"递归的优缺点",link:"#递归的优缺点",children:[]},{level:3,title:"递归与动态规划",slug:"递归与动态规划",link:"#递归与动态规划",children:[]},{level:3,title:"递归的应用场景",slug:"递归的应用场景",link:"#递归的应用场景",children:[]},{level:3,title:"递归优化建议",slug:"递归优化建议",link:"#递归优化建议",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-80-recursive-overview.html",pathLocale:"/",extraFields:[]},{title:"81-recursive 递归 汉诺塔（Tower of Hanoi）",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:3,title:"递归过程示例",slug:"递归过程示例",link:"#递归过程示例",children:[]},{level:3,title:"Java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"运行过程示例",slug:"运行过程示例",link:"#运行过程示例",children:[]},{level:3,title:"解释",slug:"解释",link:"#解释",children:[]},{level:3,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]}]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo.html",pathLocale:"/",extraFields:[]},{title:"力扣刷题之空间复杂度介绍 Space Complexity",headers:[{level:2,title:"1. 核心概念：什么是空间复杂度？",slug:"_1-核心概念-什么是空间复杂度",link:"#_1-核心概念-什么是空间复杂度",children:[]},{level:2,title:"2. 空间复杂度的组成",slug:"_2-空间复杂度的组成",link:"#_2-空间复杂度的组成",children:[]},{level:2,title:"3. 常见的空间复杂度等级（从低到高）",slug:"_3-常见的空间复杂度等级-从低到高",link:"#_3-常见的空间复杂度等级-从低到高",children:[]},{level:2,title:"4. 如何分析算法的空间复杂度？",slug:"_4-如何分析算法的空间复杂度",link:"#_4-如何分析算法的空间复杂度",children:[{level:3,title:"分析示例",slug:"分析示例",link:"#分析示例",children:[]}]},{level:2,title:"5. 关键点与注意事项",slug:"_5-关键点与注意事项",link:"#_5-关键点与注意事项",children:[]},{level:2,title:"6. 与时间复杂度的关系",slug:"_6-与时间复杂度的关系",link:"#_6-与时间复杂度的关系",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-098-space-complex-intro.html",pathLocale:"/",extraFields:[]},{title:"力扣刷题之时间复杂度常见算法速查表+推断技巧",headers:[{level:2,title:"常见算法的时间复杂度",slug:"常见算法的时间复杂度",link:"#常见算法的时间复杂度",children:[]},{level:2,title:"一、常见算法时间复杂度速查表",slug:"一、常见算法时间复杂度速查表",link:"#一、常见算法时间复杂度速查表",children:[]},{level:2,title:"二、时间复杂度推断核心技巧 (如何分析？)",slug:"二、时间复杂度推断核心技巧-如何分析",link:"#二、时间复杂度推断核心技巧-如何分析",children:[]},{level:2,title:"三、核心推断步骤总结",slug:"三、核心推断步骤总结",link:"#三、核心推断步骤总结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-fast-table.html",pathLocale:"/",extraFields:[]},{title:"力扣刷题之时间复杂度介绍 Time Complexity",headers:[{level:2,title:"1. 核心概念：什么是时间复杂度？",slug:"_1-核心概念-什么是时间复杂度",link:"#_1-核心概念-什么是时间复杂度",children:[]},{level:2,title:"2. 大 O 表示法 (Big O Notation)",slug:"_2-大-o-表示法-big-o-notation",link:"#_2-大-o-表示法-big-o-notation",children:[]},{level:2,title:"3. 常见的时间复杂度等级（从快到慢）",slug:"_3-常见的时间复杂度等级-从快到慢",link:"#_3-常见的时间复杂度等级-从快到慢",children:[]},{level:2,title:"4. 如何分析一个算法的时间复杂度？",slug:"_4-如何分析一个算法的时间复杂度",link:"#_4-如何分析一个算法的时间复杂度",children:[]},{level:2,title:"5. 关键点与注意事项",slug:"_5-关键点与注意事项",link:"#_5-关键点与注意事项",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-intro.html",pathLocale:"/",extraFields:[]},{title:"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性",headers:[{level:2,title:"什么是对数器？",slug:"什么是对数器",link:"#什么是对数器",children:[{level:3,title:"为什么叫“对数器”？",slug:"为什么叫-对数器",link:"#为什么叫-对数器",children:[]}]},{level:2,title:"为什么需要对数器？（解决的问题）",slug:"为什么需要对数器-解决的问题",link:"#为什么需要对数器-解决的问题",children:[]},{level:2,title:"对数器的实现步骤（核心流程）",slug:"对数器的实现步骤-核心流程",link:"#对数器的实现步骤-核心流程",children:[]},{level:2,title:"关键要素与注意事项",slug:"关键要素与注意事项",link:"#关键要素与注意事项",children:[]},{level:2,title:"一个简单示例（验证自定义排序算法）",slug:"一个简单示例-验证自定义排序算法",link:"#一个简单示例-验证自定义排序算法",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html",pathLocale:"/",extraFields:[]},{title:"力扣刷题技巧之结构化练习",headers:[{level:3,title:"⚙️ 一、基础理论与分析技巧",slug:"⚙️-一、基础理论与分析技巧",link:"#⚙️-一、基础理论与分析技巧",children:[]},{level:3,title:"📚 二、系统学习方法",slug:"📚-二、系统学习方法",link:"#📚-二、系统学习方法",children:[]},{level:3,title:"💡 三、解题实践技巧",slug:"💡-三、解题实践技巧",link:"#💡-三、解题实践技巧",children:[]},{level:3,title:"🐞 四、验证与调试技巧",slug:"🐞-四、验证与调试技巧",link:"#🐞-四、验证与调试技巧",children:[]},{level:3,title:"🔍 五、综合能力提升",slug:"🔍-五、综合能力提升",link:"#🔍-五、综合能力提升",children:[]},{level:3,title:"表：算法优化技巧对比与适用场景",slug:"表-算法优化技巧对比与适用场景",link:"#表-算法优化技巧对比与适用场景",children:[]},{level:3,title:"💎 建议学习路线",slug:"💎-建议学习路线",link:"#💎-建议学习路线",children:[]}],path:"/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise.html",pathLocale:"/",extraFields:[]},{title:"leecode 详解 03-Manacher Algorithm 马拉车算法",headers:[{level:2,title:"1. 超出了 R",slug:"_1-超出了-r",link:"#_1-超出了-r",children:[]},{level:2,title:"2. P [ i_mirror ] 遇到了原字符串的左边界",slug:"_2-p-i-mirror-遇到了原字符串的左边界",link:"#_2-p-i-mirror-遇到了原字符串的左边界",children:[]},{level:2,title:"3. i 等于了 R",slug:"_3-i-等于了-r",link:"#_3-i-等于了-r",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-01-Manacher-Algorithm.html",pathLocale:"/",extraFields:[]},{title:"leecode 39 Combination Sum backtracking 回溯算法 + 剪枝",headers:[{level:2,title:"一个不会解的问题",slug:"一个不会解的问题",link:"#一个不会解的问题",children:[]},{level:2,title:"最简单的思路",slug:"最简单的思路",link:"#最简单的思路",children:[]},{level:2,title:"分析思路",slug:"分析思路",link:"#分析思路",children:[]},{level:2,title:"树型图",slug:"树型图",link:"#树型图",children:[]},{level:2,title:"数据为什么重复",slug:"数据为什么重复",link:"#数据为什么重复",children:[{level:3,title:"hash 去重",slug:"hash-去重",link:"#hash-去重",children:[]},{level:3,title:"搜索去重",slug:"搜索去重",link:"#搜索去重",children:[]}]},{level:2,title:"剪枝提速",slug:"剪枝提速",link:"#剪枝提速",children:[{level:3,title:"只有这一种方式吗？",slug:"只有这一种方式吗",link:"#只有这一种方式吗",children:[]}]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[{level:3,title:"还能优化吗？",slug:"还能优化吗",link:"#还能优化吗",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-039-combine-sum.html",pathLocale:"/",extraFields:[]},{title:"leecode 126 127-Word Ladder II-backtracking 回溯算法 + 剪枝 BFS DFS",headers:[{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"V2 性能优化",slug:"v2-性能优化",link:"#v2-性能优化",children:[]},{level:2,title:"Word Ladder II",slug:"word-ladder-ii",link:"#word-ladder-ii",children:[]},{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints-1",link:"#constraints-1",children:[]},{level:2,title:"V1 版本",slug:"v1-版本",link:"#v1-版本",children:[]},{level:2,title:"V2 如何优化性能？",slug:"v2-如何优化性能",link:"#v2-如何优化性能",children:[]},{level:2,title:"性能优化 V3",slug:"性能优化-v3",link:"#性能优化-v3",children:[]},{level:2,title:"最快的算法",slug:"最快的算法",link:"#最快的算法",children:[]},{level:2,title:"直观图",slug:"直观图",link:"#直观图",children:[]},{level:2,title:"解释",slug:"解释",link:"#解释",children:[]},{level:2,title:"Why Other's Solutions Get TLE 为何其他算法超时",slug:"why-other-s-solutions-get-tle-为何其他算法超时",link:"#why-other-s-solutions-get-tle-为何其他算法超时",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[{level:3,title:"伪代码",slug:"伪代码",link:"#伪代码",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[{level:3,title:"实现 1",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"实现方式 2",slug:"实现方式-2",link:"#实现方式-2",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-126-word-ladder-ii.html",pathLocale:"/",extraFields:[]},{title:"面试算法力扣96-二叉搜索树一共有多少种？",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"推广",slug:"推广",link:"#推广",children:[]},{level:2,title:"找规律",slug:"找规律",link:"#找规律",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"还能更优吗？",slug:"还能更优吗",link:"#还能更优吗",children:[]},{level:2,title:"卡塔兰数 C_n",slug:"卡塔兰数-c-n",link:"#卡塔兰数-c-n",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析-1",link:"#复杂度分析-1",children:[]},{level:2,title:"问",slug:"问",link:"#问",children:[]},{level:2,title:"面向测试案例编程",slug:"面向测试案例编程",link:"#面向测试案例编程",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-13-bst-nums.html",pathLocale:"/",extraFields:[]},{title:"面试算法：有序链表转换为高度平衡的二叉搜索树",headers:[{level:2,title:"二叉树的性质",slug:"二叉树的性质",link:"#二叉树的性质",children:[]},{level:2,title:"高度平衡",slug:"高度平衡",link:"#高度平衡",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"快慢指针",slug:"快慢指针",link:"#快慢指针",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-14-bst-best-solve.html",pathLocale:"/",extraFields:[]},{title:"面试算法力扣95-二叉搜索树的所有解法结果？",headers:[{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"重复解的问题",slug:"重复解的问题",link:"#重复解的问题",children:[]},{level:2,title:"分析",slug:"分析",link:"#分析",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-14-bst-solves.html",pathLocale:"/",extraFields:[]},{title:"面试算法力扣98-验证二叉搜索树",headers:[{level:2,title:"错误的第一次解法",slug:"错误的第一次解法",link:"#错误的第一次解法",children:[]},{level:2,title:"正确的解法",slug:"正确的解法",link:"#正确的解法",children:[]},{level:2,title:"中序遍历为什么是升序？",slug:"中序遍历为什么是升序",link:"#中序遍历为什么是升序",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-15-bst-valid.html",pathLocale:"/",extraFields:[]},{title:"面试算法：二叉树的前序/中序/后序非递归遍历图解",headers:[{level:2,title:"节点定义",slug:"节点定义",link:"#节点定义",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[{level:3,title:"二叉树构造",slug:"二叉树构造",link:"#二叉树构造",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[{level:3,title:"遍历分析",slug:"遍历分析",link:"#遍历分析",children:[]}]},{level:2,title:"非递归实现",slug:"非递归实现",link:"#非递归实现",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"栈信息",slug:"栈信息",link:"#栈信息",children:[]}]},{level:2,title:"递归实现",slug:"递归实现",link:"#递归实现",children:[]},{level:2,title:"迭代实现",slug:"迭代实现",link:"#迭代实现",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"栈信息",slug:"栈信息-1",link:"#栈信息-1",children:[]}]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"递归实现",slug:"递归实现-1",link:"#递归实现-1",children:[]},{level:2,title:"非递归实现",slug:"非递归实现-1",link:"#非递归实现-1",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"前序遍历回顾",slug:"前序遍历回顾",link:"#前序遍历回顾",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"栈信息",slug:"栈信息-2",link:"#栈信息-2",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel-pic.html",pathLocale:"/",extraFields:[]},{title:"面试算法：二叉树的前序/中序/后序/层序遍历方式汇总 preorder/Inorder/postorder/levelorder",headers:[{level:2,title:"递归实现",slug:"递归实现",link:"#递归实现",children:[]},{level:2,title:"迭代实现",slug:"迭代实现",link:"#迭代实现",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"非递归实现",slug:"非递归实现",link:"#非递归实现",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"递归实现",slug:"递归实现-1",link:"#递归实现-1",children:[]},{level:2,title:"非递归实现",slug:"非递归实现-1",link:"#非递归实现-1",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"解法一：前序遍历",slug:"解法一-前序遍历",link:"#解法一-前序遍历",children:[{level:3,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[]},{level:2,title:"解题思路",slug:"解题思路-1",link:"#解题思路-1",children:[]},{level:2,title:"实现如下",slug:"实现如下",link:"#实现如下",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel.html",pathLocale:"/",extraFields:[]},{title:"面试算法：如何根据前序与中序遍历序列构造二叉树？",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"优化根节点获取",slug:"优化根节点获取",link:"#优化根节点获取",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"依然是下面的几个步骤",slug:"依然是下面的几个步骤",link:"#依然是下面的几个步骤",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-17-construct-binray-tree.html",pathLocale:"/",extraFields:[]},{title:"面试算法：二叉树路径之和问题汇总",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"优化思路一：直接计算",slug:"优化思路一-直接计算",link:"#优化思路一-直接计算",children:[]},{level:2,title:"优化思路二：剪枝",slug:"优化思路二-剪枝",link:"#优化思路二-剪枝",children:[]},{level:2,title:"优化思路三：数组创建",slug:"优化思路三-数组创建",link:"#优化思路三-数组创建",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"题目",slug:"题目-3",link:"#题目-3",children:[]},{level:2,title:"思路一：穷举",slug:"思路一-穷举",link:"#思路一-穷举",children:[]},{level:2,title:"思路2：双递归法",slug:"思路2-双递归法",link:"#思路2-双递归法",children:[{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]},{level:2,title:"前缀和定义",slug:"前缀和定义",link:"#前缀和定义",children:[]},{level:2,title:"与本题的关系",slug:"与本题的关系",link:"#与本题的关系",children:[]},{level:2,title:"HashMap存的是什么",slug:"hashmap存的是什么",link:"#hashmap存的是什么",children:[]},{level:2,title:"恢复状态的意义",slug:"恢复状态的意义",link:"#恢复状态的意义",children:[]},{level:2,title:"java 实现",slug:"java-实现-4",link:"#java-实现-4",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"題目",slug:"題目",link:"#題目",children:[]},{level:2,title:"思路1",slug:"思路1",link:"#思路1",children:[{level:3,title:"java 实现",slug:"java-实现-5",link:"#java-实现-5",children:[]}]},{level:2,title:"思路2",slug:"思路2",link:"#思路2",children:[{level:3,title:"java 实现",slug:"java-实现-6",link:"#java-实现-6",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-18-binary-tree-path-sum.html",pathLocale:"/",extraFields:[]},{title:"面试算法：二叉树展开为链表",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"寻找前驱节点",slug:"寻找前驱节点",link:"#寻找前驱节点",children:[{level:3,title:"算法流程",slug:"算法流程",link:"#算法流程",children:[]}]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list.html",pathLocale:"/",extraFields:[]},{title:"面试算法：填充每个节点的下一个右侧节点指针汇总",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"分析",slug:"分析",link:"#分析",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]}]},{level:2,title:"思路 1",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"思路 2",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-20-binary-tree-next-pointer.html",pathLocale:"/",extraFields:[]},{title:"面试算法：动态规划解三角形最短路径详解",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"初始值",slug:"初始值",link:"#初始值",children:[]},{level:3,title:"递推公式",slug:"递推公式",link:"#递推公式",children:[]},{level:3,title:"边界的考虑",slug:"边界的考虑",link:"#边界的考虑",children:[]},{level:3,title:"最后的结果",slug:"最后的结果",link:"#最后的结果",children:[]}]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"O(n) 空间的思路 1",slug:"o-n-空间的思路-1",link:"#o-n-空间的思路-1",children:[]},{level:2,title:"O(n) 空间的思路 2",slug:"o-n-空间的思路-2",link:"#o-n-空间的思路-2",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-21-dp-minest-path.html",pathLocale:"/",extraFields:[]},{title:"面试算法：加油站难题，加油的学问还真不少",headers:[{level:2,title:"示例 1:",slug:"示例-1",link:"#示例-1",children:[]},{level:2,title:"示例 2:",slug:"示例-2",link:"#示例-2",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-22-gas-station.html",pathLocale:"/",extraFields:[]},{title:"面试算法：只出现一次的数字详解汇总",headers:[{level:2,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:2,title:"优化1-使用 HashSet",slug:"优化1-使用-hashset",link:"#优化1-使用-hashset",children:[]},{level:2,title:"优化2-位运算",slug:"优化2-位运算",link:"#优化2-位运算",children:[{level:3,title:"更进一步优化",slug:"更进一步优化",link:"#更进一步优化",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"解题思路-HashMap",slug:"解题思路-hashmap",link:"#解题思路-hashmap",children:[]},{level:2,title:"优化思路-位运算",slug:"优化思路-位运算",link:"#优化思路-位运算",children:[]},{level:2,title:"位运算",slug:"位运算",link:"#位运算",children:[{level:3,title:"异或 XOR",slug:"异或-xor",link:"#异或-xor",children:[]},{level:3,title:"AND NOT",slug:"and-not",link:"#and-not",children:[]},{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}]},{level:2,title:"題目",slug:"題目",link:"#題目",children:[]},{level:2,title:"解題思路",slug:"解題思路",link:"#解題思路",children:[]},{level:2,title:"优化2-尽头",slug:"优化2-尽头",link:"#优化2-尽头",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-23-single-number.html",pathLocale:"/",extraFields:[]},{title:"面试算法：数字 1 的个数",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"3 个场景详解",slug:"_3-个场景详解",link:"#_3-个场景详解",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-24-number-of-digit-one.html",pathLocale:"/",extraFields:[]},{title:"面试算法：如何找到数组中出现次数最多的元素？",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路0-HashMap 次数统计",slug:"思路0-hashmap-次数统计",link:"#思路0-hashmap-次数统计",children:[{level:3,title:"java-出现次数最多的",slug:"java-出现次数最多的",link:"#java-出现次数最多的",children:[]},{level:3,title:"java-次数超过一半",slug:"java-次数超过一半",link:"#java-次数超过一半",children:[]}]},{level:2,title:"思路1-排序",slug:"思路1-排序",link:"#思路1-排序",children:[{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"思路2-摩尔投票法",slug:"思路2-摩尔投票法",link:"#思路2-摩尔投票法",children:[{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"題目",slug:"題目",link:"#題目",children:[]},{level:2,title:"思路0-HashMap 记数",slug:"思路0-hashmap-记数",link:"#思路0-hashmap-记数",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"优化思路1-摩尔投票法",slug:"优化思路1-摩尔投票法",link:"#优化思路1-摩尔投票法",children:[{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]},{level:2,title:"优化思路2-排序",slug:"优化思路2-排序",link:"#优化思路2-排序",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-25-major-element.html",pathLocale:"/",extraFields:[]},{title:"面试算法：前 K 个高频元素详解汇总",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[]},{level:2,title:"思路1-列表排序",slug:"思路1-列表排序",link:"#思路1-列表排序",children:[]},{level:2,title:"思路2-优先级队列排序",slug:"思路2-优先级队列排序",link:"#思路2-优先级队列排序",children:[]},{level:2,title:"思路3-TreeMap 实现",slug:"思路3-treemap-实现",link:"#思路3-treemap-实现",children:[]},{level:2,title:"思路4-摩尔投票法",slug:"思路4-摩尔投票法",link:"#思路4-摩尔投票法",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[]},{level:2,title:"思路2-排序",slug:"思路2-排序",link:"#思路2-排序",children:[{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"辅助度",slug:"辅助度",link:"#辅助度",children:[]}]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[]},{level:2,title:"思路1-排序",slug:"思路1-排序",link:"#思路1-排序",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"思路2-堆",slug:"思路2-堆",link:"#思路2-堆",children:[]},{level:2,title:"思路3-自定义堆",slug:"思路3-自定义堆",link:"#思路3-自定义堆",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-26-topk-freq.html",pathLocale:"/",extraFields:[]},{title:"leetcode 115 Distinct Subsequences 动态规划",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"递归",slug:"递归",link:"#递归",children:[]},{level:2,title:"DP: top to bottom",slug:"dp-top-to-bottom",link:"#dp-top-to-bottom",children:[]},{level:2,title:"DP: bottom to top",slug:"dp-bottom-to-top",link:"#dp-bottom-to-top",children:[]},{level:2,title:"例子",slug:"例子-1",link:"#例子-1",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-27-leetcode-115-distinct-sequences.html",pathLocale:"/",extraFields:[]},{title:"leetcode 123 Best Time to Buy and Sell Stock III 动态规划",headers:[{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"约束",slug:"约束",link:"#约束",children:[]},{level:2,title:"变量定义",slug:"变量定义",link:"#变量定义",children:[]},{level:2,title:"递归终止条件",slug:"递归终止条件",link:"#递归终止条件",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"递归",slug:"递归",link:"#递归",children:[]},{level:2,title:"Memoization Solution",slug:"memoization-solution",link:"#memoization-solution",children:[]},{level:2,title:"DP solution with O(N) space",slug:"dp-solution-with-o-n-space",link:"#dp-solution-with-o-n-space",children:[]},{level:2,title:"DP solution with O(1) space",slug:"dp-solution-with-o-1-space",link:"#dp-solution-with-o-1-space",children:[]},{level:2,title:"问题所在",slug:"问题所在",link:"#问题所在",children:[]},{level:2,title:"针对性解法思路",slug:"针对性解法思路",link:"#针对性解法思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[{level:3,title:"变量背后的逻辑",slug:"变量背后的逻辑",link:"#变量背后的逻辑",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 131 Palindrome Partitioning 动态规划/回溯  DP/backtrack",headers:[{level:2,title:"描述",slug:"描述",link:"#描述",children:[]},{level:2,title:"拓展阅读",slug:"拓展阅读",link:"#拓展阅读",children:[]},{level:2,title:"核心解法",slug:"核心解法",link:"#核心解法",children:[]},{level:2,title:"V1 基于回溯",slug:"v1-基于回溯",link:"#v1-基于回溯",children:[]},{level:2,title:"V2-引入 DP 优化性能",slug:"v2-引入-dp-优化性能",link:"#v2-引入-dp-优化性能",children:[{level:3,title:"DP 的思路",slug:"dp-的思路",link:"#dp-的思路",children:[]},{level:3,title:"自己回文的理解",slug:"自己回文的理解",link:"#自己回文的理解",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"V3-性能还能优化吗？",slug:"v3-性能还能优化吗",link:"#v3-性能还能优化吗",children:[]},{level:2,title:"描述",slug:"描述-1",link:"#描述-1",children:[{level:3,title:"EX",slug:"ex",link:"#ex",children:[]},{level:3,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"V1-基础实现",slug:"v1-基础实现",link:"#v1-基础实现",children:[]},{level:2,title:"V2-DP 提升性能",slug:"v2-dp-提升性能",link:"#v2-dp-提升性能",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning.html",pathLocale:"/",extraFields:[]},{title:"leetcode 135 Candy 递归+MEM",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"V2-mem+递归 内存提升",slug:"v2-mem-递归-内存提升",link:"#v2-mem-递归-内存提升",children:[]},{level:2,title:"V3-two pass",slug:"v3-two-pass",link:"#v3-two-pass",children:[]},{level:2,title:"V4-ONE PASS",slug:"v4-one-pass",link:"#v4-one-pass",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"个人感受",slug:"个人感受",link:"#个人感受",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-29-leetcode-135-candy.html",pathLocale:"/",extraFields:[]},{title:"leetcode 139 word break 回溯 backtrack",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"切割 s",slug:"切割-s",link:"#切割-s",children:[]},{level:2,title:"wordDict 拼接",slug:"worddict-拼接",link:"#worddict-拼接",children:[]},{level:2,title:"V1-backtrack 回溯算法",slug:"v1-backtrack-回溯算法",link:"#v1-backtrack-回溯算法",children:[]},{level:2,title:"V2.1 剪枝优化",slug:"v2-1-剪枝优化",link:"#v2-1-剪枝优化",children:[]},{level:2,title:"V2.2 调整 wordDict 的顺序",slug:"v2-2-调整-worddict-的顺序",link:"#v2-2-调整-worddict-的顺序",children:[]},{level:2,title:"V3-从字符串切分的角度思考",slug:"v3-从字符串切分的角度思考",link:"#v3-从字符串切分的角度思考",children:[{level:3,title:"V3.1 字符串切分的回溯实现",slug:"v3-1-字符串切分的回溯实现",link:"#v3-1-字符串切分的回溯实现",children:[]},{level:3,title:"V3.2 引入内存化 Backtracking (Memoization)",slug:"v3-2-引入内存化-backtracking-memoization",link:"#v3-2-引入内存化-backtracking-memoization",children:[]},{level:3,title:"V3.3 DP",slug:"v3-3-dp",link:"#v3-3-dp",children:[]}]},{level:2,title:"V4-backtrack 的优化",slug:"v4-backtrack-的优化",link:"#v4-backtrack-的优化",children:[{level:3,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"对比",slug:"对比",link:"#对比",children:[]}]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"EX",slug:"ex-1",link:"#ex-1",children:[]},{level:3,title:"Constraints:",slug:"constraints-1",link:"#constraints-1",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-30-leetcode-139-word-break.html",pathLocale:"/",extraFields:[]},{title:"leetcode 141+142 Linked List Cycle 循环链表 快慢指针",headers:[{level:2,title:"描述",slug:"描述",link:"#描述",children:[]},{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"第一感觉",slug:"第一感觉",link:"#第一感觉",children:[]},{level:2,title:"快慢指针",slug:"快慢指针",link:"#快慢指针",children:[]},{level:2,title:"java 解法",slug:"java-解法",link:"#java-解法",children:[]},{level:2,title:"EX",slug:"ex-1",link:"#ex-1",children:[]},{level:2,title:"Constraints:",slug:"constraints-1",link:"#constraints-1",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-31-leetcode-141-linked-list-cycle.html",pathLocale:"/",extraFields:[]},{title:"leetcode 20+32 Longest Valid Parentheses 动态规划/DP",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"V1-stack 版本",slug:"v1-stack-版本",link:"#v1-stack-版本",children:[]},{level:2,title:"v2-基于数组模拟 stack",slug:"v2-基于数组模拟-stack",link:"#v2-基于数组模拟-stack",children:[]},{level:2,title:"Ex",slug:"ex-1",link:"#ex-1",children:[]},{level:2,title:"Constraints:",slug:"constraints-1",link:"#constraints-1",children:[]},{level:2,title:"基于堆栈的思路",slug:"基于堆栈的思路",link:"#基于堆栈的思路",children:[{level:3,title:"个人理解",slug:"个人理解",link:"#个人理解",children:[]}]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"自己的初步思路",slug:"自己的初步思路",link:"#自己的初步思路",children:[]},{level:2,title:"他山之石",slug:"他山之石",link:"#他山之石",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[{level:3,title:"例子解释",slug:"例子解释",link:"#例子解释",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-32-leetcode-032-valid-parentheses.html",pathLocale:"/",extraFields:[]},{title:"leetcode 42 Trapping Rain Water 双指针",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"问题的本质",slug:"问题的本质",link:"#问题的本质",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-33-leetcode-042-trapping-rain-water.html",pathLocale:"/",extraFields:[]},{title:"leetcode 31+46+60 下一个排列 Next Permutation/Permutations/Permutation Sequence  backtrack",headers:[{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"EX",slug:"ex",link:"#ex",children:[]},{level:3,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]}]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"暴力算法",slug:"暴力算法",link:"#暴力算法",children:[]},{level:2,title:"比较的方式",slug:"比较的方式",link:"#比较的方式",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"题目",slug:"题目-1",link:"#题目-1",children:[{level:3,title:"例子",slug:"例子-1",link:"#例子-1",children:[]},{level:3,title:"Constraints:",slug:"constraints-1",link:"#constraints-1",children:[]}]},{level:2,title:"分析",slug:"分析",link:"#分析",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"题目",slug:"题目-2",link:"#题目-2",children:[{level:3,title:"Ex",slug:"ex-1",link:"#ex-1",children:[]},{level:3,title:"Constraints:",slug:"constraints-2",link:"#constraints-2",children:[]}]},{level:2,title:"V1-基于 backtrack 实现",slug:"v1-基于-backtrack-实现",link:"#v1-基于-backtrack-实现",children:[{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"V2-换种思路",slug:"v2-换种思路",link:"#v2-换种思路",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"个人感受",slug:"个人感受",link:"#个人感受",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-34-leetcode-permutation.html",pathLocale:"/",extraFields:[]},{title:"leetcode 72 Edit Distance 编辑距离 DP",headers:[{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"Java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-36-leetcode-edit-distance.html",pathLocale:"/",extraFields:[]},{title:"leetcode 76 Minimum Window Substring",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"76 题目的解法",slug:"_76-题目的解法",link:"#_76-题目的解法",children:[]},{level:2,title:"解题模板",slug:"解题模板",link:"#解题模板",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-37-leetcode-minimum-window-substring.html",pathLocale:"/",extraFields:[]},{title:"leetcode 84 Largest Rectangle in Histogram",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"一点额外的解释",slug:"一点额外的解释",link:"#一点额外的解释",children:[{level:3,title:"r l",slug:"r-l",link:"#r-l",children:[]},{level:3,title:"p = lessFromLeft[p]",slug:"p-lessfromleft-p",link:"#p-lessfromleft-p",children:[]}]},{level:2,title:"完整实现",slug:"完整实现",link:"#完整实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram.html",pathLocale:"/",extraFields:[]},{title:"leetcode 85 maximal rectangle",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-39-leetcode-maximal-rectangle.html",pathLocale:"/",extraFields:[]},{title:"leetcode 87 Scramble String",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-40-leetcode-scramble-string.html",pathLocale:"/",extraFields:[]},{title:"leetcode 41 LRU CACHE",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-41-leetcode-lru-cache.html",pathLocale:"/",extraFields:[]},{title:"leetcode 42 150-Evaluate Reverse Polish Notation 逆波兰表达式",headers:[{level:2,title:"概念",slug:"概念",link:"#概念",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"如何得到",slug:"如何得到",link:"#如何得到",children:[]},{level:2,title:"C 实现",slug:"c-实现",link:"#c-实现",children:[]},{level:2,title:"题目",slug:"题目",link:"#题目",children:[{level:3,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:3,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]}]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-42-leetcode-reverse-polish-notation.html",pathLocale:"/",extraFields:[]},{title:"leetcode 43 152. Maximum Product Subarray 动态规划",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-43-leetcode-maximum-product-subarray.html",pathLocale:"/",extraFields:[]},{title:"leetcode 44 179. Largest Number",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"定理",slug:"定理",link:"#定理",children:[]},{level:2,title:"证明",slug:"证明",link:"#证明",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-44-leetcode-largest-number.html",pathLocale:"/",extraFields:[]},{title:"leetcode 45 198. House Robber DP/动态规划",headers:[{level:2,title:"EX",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"核心",slug:"核心",link:"#核心",children:[]},{level:2,title:"递归关系",slug:"递归关系",link:"#递归关系",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-45-leetcode-house-robber.html",pathLocale:"/",extraFields:[]},{title:"leetcode 46 204. Count Primes count-primes 素数的判断算法 Sieve of Eratosthenes",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"Constraints:",slug:"constraints",link:"#constraints",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"算法",slug:"算法-1",link:"#算法-1",children:[]},{level:2,title:"筛选到根 (Sieving till root)",slug:"筛选到根-sieving-till-root",link:"#筛选到根-sieving-till-root",children:[]},{level:2,title:"仅按奇数筛选 (Sieving by the odd numbers only)",slug:"仅按奇数筛选-sieving-by-the-odd-numbers-only",link:"#仅按奇数筛选-sieving-by-the-odd-numbers-only",children:[]},{level:2,title:"内存消耗和操作速度 (Memory consumption and speed of operations)",slug:"内存消耗和操作速度-memory-consumption-and-speed-of-operations",link:"#内存消耗和操作速度-memory-consumption-and-speed-of-operations",children:[]},{level:2,title:"分段筛 (Segmented Sieve)",slug:"分段筛-segmented-sieve",link:"#分段筛-segmented-sieve",children:[]},{level:2,title:"查找范围内的素数",slug:"查找范围内的素数",link:"#查找范围内的素数",children:[]},{level:2,title:"线性时间修改",slug:"线性时间修改",link:"#线性时间修改",children:[]},{level:2,title:"算法",slug:"算法-2",link:"#算法-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[{level:3,title:"c语言",slug:"c语言",link:"#c语言",children:[]}]},{level:2,title:"Runtime & Memory",slug:"runtime-memory",link:"#runtime-memory",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-46-leetcode-count-primes.html",pathLocale:"/",extraFields:[]},{title:"leetcode 47 207. Course Schedule 课程表 DFS/BFS",headers:[{level:2,title:"Ex",slug:"ex",link:"#ex",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"题意解释",slug:"题意解释",link:"#题意解释",children:[]},{level:2,title:"再举个生活的例子",slug:"再举个生活的例子",link:"#再举个生活的例子",children:[]},{level:2,title:"用有向图描述依赖关系",slug:"用有向图描述依赖关系",link:"#用有向图描述依赖关系",children:[]},{level:2,title:"每次只能选你能上的课",slug:"每次只能选你能上的课",link:"#每次只能选你能上的课",children:[]},{level:2,title:"这很像 BFS",slug:"这很像-bfs",link:"#这很像-bfs",children:[]},{level:2,title:"BFS 前的准备工作",slug:"bfs-前的准备工作",link:"#bfs-前的准备工作",children:[]},{level:2,title:"怎么判断能否修完所有课？",slug:"怎么判断能否修完所有课",link:"#怎么判断能否修完所有课",children:[]},{level:2,title:"总结：拓扑排序问题",slug:"总结-拓扑排序问题",link:"#总结-拓扑排序问题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"优化",slug:"优化",link:"#优化",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"算法",slug:"算法-1",link:"#算法-1",children:[]},{level:2,title:"优化",slug:"优化-1",link:"#优化-1",children:[]},{level:2,title:"java",slug:"java-1",link:"#java-1",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析-1",link:"#复杂度分析-1",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-47-leetcode-course-schedule.html",pathLocale:"/",extraFields:[]},{title:"leetcode 48 - Trie (Prefix Tree) 实现 Trie 前缀树",headers:[{level:2,title:"示例：",slug:"示例",link:"#示例",children:[]},{level:2,title:"定义",slug:"定义",link:"#定义",children:[]},{level:2,title:"插入",slug:"插入",link:"#插入",children:[]},{level:2,title:"查找",slug:"查找",link:"#查找",children:[]},{level:2,title:"前缀匹配",slug:"前缀匹配",link:"#前缀匹配",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]},{level:2,title:"示例：",slug:"示例-1",link:"#示例-1",children:[]},{level:2,title:"提示：",slug:"提示",link:"#提示",children:[]},{level:2,title:"V1-基于 Trie Tree",slug:"v1-基于-trie-tree",link:"#v1-基于-trie-tree",children:[{level:3,title:"思路",slug:"思路",link:"#思路",children:[]},{level:3,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]}]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[{level:3,title:"评价",slug:"评价",link:"#评价",children:[]}]},{level:2,title:"V2-通过 Trie Tree",slug:"v2-通过-trie-tree",link:"#v2-通过-trie-tree",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]}]},{level:2,title:"V3-进一步性能优化",slug:"v3-进一步性能优化",link:"#v3-进一步性能优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-48-leetcode-trie-tree.html",pathLocale:"/",extraFields:[]},{title:"leetcode 49 209. Minimum Size Subarray Sum 双指针 binary-search 二分法查找",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum.html",pathLocale:"/",extraFields:[]},{title:"leetcode 50 - 214. 最短回文串 shortest-palindrome",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"初步实现",slug:"初步实现",link:"#初步实现",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"评价",slug:"评价",link:"#评价",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"java 实现",slug:"java-实现-2",link:"#java-实现-2",children:[]},{level:2,title:"点评",slug:"点评",link:"#点评",children:[]},{level:2,title:"算法",slug:"算法-1",link:"#算法-1",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"java 实现",slug:"java-实现-3",link:"#java-实现-3",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-50-leecode-shortest-palindrome.html",pathLocale:"/",extraFields:[]},{title:"leetcode 51 - 217. Contains Duplicate 存在重复元素 哈希？位运算？插入排序？",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"Q: 介绍一下位运算",slug:"q-介绍一下位运算",link:"#q-介绍一下位运算",children:[]},{level:2,title:"Q: 如何通过位运算，判断一个数字是否重复出现？java 实现",slug:"q-如何通过位运算-判断一个数字是否重复出现-java-实现",link:"#q-如何通过位运算-判断一个数字是否重复出现-java-实现",children:[{level:3,title:"疑问1: int mask = 1 << num; 这个在 num 很大的时候，不会很慢吗？",slug:"疑问1-int-mask-1-num-这个在-num-很大的时候-不会很慢吗",link:"#疑问1-int-mask-1-num-这个在-num-很大的时候-不会很慢吗",children:[]},{level:3,title:"疑问2：为什么 checker & mask 不等于0就能说明数字重复？详细解释一下",slug:"疑问2-为什么-checker-mask-不等于0就能说明数字重复-详细解释一下",link:"#疑问2-为什么-checker-mask-不等于0就能说明数字重复-详细解释一下",children:[]}]},{level:2,title:"问题",slug:"问题",link:"#问题",children:[]},{level:2,title:"大佬的解法",slug:"大佬的解法",link:"#大佬的解法",children:[]},{level:2,title:"Q: 详细介绍一下插入排序？",slug:"q-详细介绍一下插入排序",link:"#q-详细介绍一下插入排序",children:[]},{level:2,title:"Q: 插入排序去重为什么会比哈希更好？",slug:"q-插入排序去重为什么会比哈希更好",link:"#q-插入排序去重为什么会比哈希更好",children:[]},{level:2,title:"实际测试",slug:"实际测试",link:"#实际测试",children:[]},{level:2,title:"想法",slug:"想法",link:"#想法",children:[{level:3,title:"step1-二分法找到插入位置",slug:"step1-二分法找到插入位置",link:"#step1-二分法找到插入位置",children:[]},{level:3,title:"step2-使用 Arrays.copy，而不是移动",slug:"step2-使用-arrays-copy-而不是移动",link:"#step2-使用-arrays-copy-而不是移动",children:[]}]},{level:2,title:"性能对比",slug:"性能对比",link:"#性能对比",children:[{level:3,title:"数据构造",slug:"数据构造",link:"#数据构造",children:[]}]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-217-duplicate-nums.html",pathLocale:"/",extraFields:[]},{title:"leetcode 51 - 218. 天际线问题",headers:[{level:2,title:"示例 1：",slug:"示例-1",link:"#示例-1",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-218-skyline.html",pathLocale:"/",extraFields:[]},{title:"leetcode 219 Contains Duplicate II",headers:[],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 220 Contains Duplicate III",headers:[{level:2,title:"示例 1：",slug:"示例-1",link:"#示例-1",children:[]},{level:2,title:"示例 2：",slug:"示例-2",link:"#示例-2",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路2",slug:"思路2",link:"#思路2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"解法",slug:"解法-2",link:"#解法-2",children:[]},{level:2,title:"回顾",slug:"回顾",link:"#回顾",children:[]},{level:2,title:"桶排序",slug:"桶排序",link:"#桶排序",children:[]},{level:2,title:"插入排序",slug:"插入排序",link:"#插入排序",children:[]},{level:2,title:"TreeSet AVL 树",slug:"treeset-avl-树",link:"#treeset-avl-树",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 253 [LeetCode] 253. Meeting Rooms II",headers:[{level:2,title:"思路一 - 排序 + 双指针",slug:"思路一-排序-双指针",link:"#思路一-排序-双指针",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-min-room.html",pathLocale:"/",extraFields:[]},{title:"leetcode 1275. 找出井字棋的获胜者",headers:[],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-move.html",pathLocale:"/",extraFields:[]},{title:"leetcode 681 最近时刻 next-closest-time [Medium]",headers:[{level:2,title:"681. 最近时刻",slug:"_681-最近时刻",link:"#_681-最近时刻",children:[]},{level:2,title:"思路:",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time%20copy%202.html",pathLocale:"/",extraFields:[]},{title:"leetcode 681 最近时刻 next-closest-time [Medium]",headers:[{level:2,title:"681. 最近时刻",slug:"_681-最近时刻",link:"#_681-最近时刻",children:[]},{level:2,title:"思路:",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time.html",pathLocale:"/",extraFields:[]},{title:"leetcode 716 最大栈",headers:[{level:2,title:"直接一个 list + 一个内部变量",slug:"直接一个-list-一个内部变量",link:"#直接一个-list-一个内部变量",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]}],path:"/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-716-max-stack.html",pathLocale:"/",extraFields:[]},{title:"从零开始的数据结构与算法-00-概览 算法专题汇总",headers:[{level:2,title:"查找",slug:"查找",link:"#查找",children:[]},{level:2,title:"sort",slug:"sort",link:"#sort",children:[]},{level:2,title:"五大算法",slug:"五大算法",link:"#五大算法",children:[]}],path:"/posts/leetcode/index/2020-06-06-algorithm-000-index-01-overview.html",pathLocale:"/",extraFields:[]},{title:"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？",headers:[{level:2,title:"1. 建立模式卡片：",slug:"_1-建立模式卡片",link:"#_1-建立模式卡片",children:[]},{level:2,title:"2. 深度优先，而非广度优先：",slug:"_2-深度优先-而非广度优先",link:"#_2-深度优先-而非广度优先",children:[]},{level:2,title:"如何系统的学习？",slug:"如何系统的学习",link:"#如何系统的学习",children:[]},{level:2,title:"🧠 一、转变刷题目标：从“做题”到“构建认知体系”",slug:"🧠-一、转变刷题目标-从-做题-到-构建认知体系",link:"#🧠-一、转变刷题目标-从-做题-到-构建认知体系",children:[{level:3,title:"✅ 建议：明确一个主线目标",slug:"✅-建议-明确一个主线目标",link:"#✅-建议-明确一个主线目标",children:[]}]},{level:2,title:"🗂️ 二、刷题思路：系统化、结构化分阶段",slug:"🗂️-二、刷题思路-系统化、结构化分阶段",link:"#🗂️-二、刷题思路-系统化、结构化分阶段",children:[{level:3,title:"🔵 第一阶段：构建知识树（夯实基本功）",slug:"🔵-第一阶段-构建知识树-夯实基本功",link:"#🔵-第一阶段-构建知识树-夯实基本功",children:[]},{level:3,title:"🟠 第二阶段：题目归类 + 巩固迁移",slug:"🟠-第二阶段-题目归类-巩固迁移",link:"#🟠-第二阶段-题目归类-巩固迁移",children:[]},{level:3,title:"🟢 第三阶段：反复复习 + 模拟实战 + 场景应用",slug:"🟢-第三阶段-反复复习-模拟实战-场景应用",link:"#🟢-第三阶段-反复复习-模拟实战-场景应用",children:[]}]},{level:2,title:"🧰 三、工具建议：让刷题变“有沉淀”",slug:"🧰-三、工具建议-让刷题变-有沉淀",link:"#🧰-三、工具建议-让刷题变-有沉淀",children:[]},{level:2,title:"🧪 四、用得出来，价值才会提升",slug:"🧪-四、用得出来-价值才会提升",link:"#🧪-四、用得出来-价值才会提升",children:[]},{level:2,title:"🧭 五、每日/每周计划推荐",slug:"🧭-五、每日-每周计划推荐",link:"#🧭-五、每日-每周计划推荐",children:[{level:3,title:"🗓️ 每日计划（60~90 分钟）：",slug:"🗓️-每日计划-60-90-分钟",link:"#🗓️-每日计划-60-90-分钟",children:[]},{level:3,title:"📆 每周计划：",slug:"📆-每周计划",link:"#📆-每周计划",children:[]}]},{level:2,title:"🧩 六、建议关注的资源",slug:"🧩-六、建议关注的资源",link:"#🧩-六、建议关注的资源",children:[]},{level:2,title:"🎯 最后一条核心建议",slug:"🎯-最后一条核心建议",link:"#🎯-最后一条核心建议",children:[]},{level:2,title:"DS",slug:"ds",link:"#ds",children:[{level:3,title:"一、构建知识体系：告别零散，建立“算法地图”（核心基础）",slug:"一、构建知识体系-告别零散-建立-算法地图-核心基础",link:"#一、构建知识体系-告别零散-建立-算法地图-核心基础",children:[]},{level:3,title:"二、高效刷题法：对抗遗忘，深度加工（执行策略）",slug:"二、高效刷题法-对抗遗忘-深度加工-执行策略",link:"#二、高效刷题法-对抗遗忘-深度加工-执行策略",children:[]},{level:3,title:"三、学以致用：连接理论与价值（提升价值感）",slug:"三、学以致用-连接理论与价值-提升价值感",link:"#三、学以致用-连接理论与价值-提升价值感",children:[]},{level:3,title:"四、高效工具链：自动化辅助",slug:"四、高效工具链-自动化辅助",link:"#四、高效工具链-自动化辅助",children:[]},{level:3,title:"五、关键心态调整",slug:"五、关键心态调整",link:"#五、关键心态调整",children:[]}]}],path:"/posts/leetcode/index/2020-06-06-algorithm-000-index-02-how-to-learn.html",pathLocale:"/",extraFields:[]},{title:"从零开始的数据结构与算法-02-leetcode 算法系统分类",headers:[{level:2,title:"📚 完整版：LeetCode 数据结构与算法系统分类（升级加强版）",slug:"📚-完整版-leetcode-数据结构与算法系统分类-升级加强版",link:"#📚-完整版-leetcode-数据结构与算法系统分类-升级加强版",children:[{level:3,title:"🟢 一、基础数据结构 + 基本操作",slug:"🟢-一、基础数据结构-基本操作",link:"#🟢-一、基础数据结构-基本操作",children:[]},{level:3,title:"🟠 二、树结构 + 遍历算法",slug:"🟠-二、树结构-遍历算法",link:"#🟠-二、树结构-遍历算法",children:[]},{level:3,title:"🟡 三、图结构 + 搜索算法",slug:"🟡-三、图结构-搜索算法",link:"#🟡-三、图结构-搜索算法",children:[]},{level:3,title:"🔵 四、常用算法思想（💥全核心模块💥）",slug:"🔵-四、常用算法思想-💥全核心模块💥",link:"#🔵-四、常用算法思想-💥全核心模块💥",children:[]},{level:3,title:"核心算法",slug:"核心算法",link:"#核心算法",children:[]},{level:3,title:"核心技巧",slug:"核心技巧",link:"#核心技巧",children:[]},{level:3,title:"🔶 五、动态规划分类",slug:"🔶-五、动态规划分类",link:"#🔶-五、动态规划分类",children:[]},{level:3,title:"🟣 六、特殊结构算法（提升段）",slug:"🟣-六、特殊结构算法-提升段",link:"#🟣-六、特殊结构算法-提升段",children:[]}]},{level:2,title:"🎓 建议学习顺序（按阶段）",slug:"🎓-建议学习顺序-按阶段",link:"#🎓-建议学习顺序-按阶段",children:[]},{level:2,title:"✅ 最终成果可以形成：",slug:"✅-最终成果可以形成",link:"#✅-最终成果可以形成",children:[]},{level:2,title:"第一阶段：基础数据结构与算法 (入门)",slug:"第一阶段-基础数据结构与算法-入门",link:"#第一阶段-基础数据结构与算法-入门",children:[]},{level:2,title:"第二阶段：核心数据结构与算法 (进阶)",slug:"第二阶段-核心数据结构与算法-进阶",link:"#第二阶段-核心数据结构与算法-进阶",children:[]},{level:2,title:"第三阶段：高级数据结构与算法 (深入)",slug:"第三阶段-高级数据结构与算法-深入",link:"#第三阶段-高级数据结构与算法-深入",children:[]},{level:2,title:"第四阶段：补充与专项 (查漏补缺与优化)",slug:"第四阶段-补充与专项-查漏补缺与优化",link:"#第四阶段-补充与专项-查漏补缺与优化",children:[]}],path:"/posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.html",pathLocale:"/",extraFields:[]},{title:"分享｜如何科学刷题？ by 灵茶山艾府",headers:[{level:2,title:"前言",slug:"前言",link:"#前言",children:[]},{level:2,title:"方法 A：专题训练",slug:"方法-a-专题训练",link:"#方法-a-专题训练",children:[]},{level:2,title:"方法 B：随机训练",slug:"方法-b-随机训练",link:"#方法-b-随机训练",children:[]},{level:2,title:"方法 C：突击训练",slug:"方法-c-突击训练",link:"#方法-c-突击训练",children:[]},{level:2,title:"答疑",slug:"答疑",link:"#答疑",children:[]}],path:"/posts/leetcode/index/2025-08-22-how-to-cross-leetcodes.html",pathLocale:"/",extraFields:[]},{title:"LC1768. 交替合并字符串 merge-strings-alternately",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-01-LC1768-merge-strings-alternately.html",pathLocale:"/",extraFields:[]},{title:"LC1071. 字符串的最大公因子 greatest-common-divisor-of-strings",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"疑问",slug:"疑问",link:"#疑问",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings.html",pathLocale:"/",extraFields:[]},{title:"LC1431. 拥有最多糖果的孩子 kids-with-the-greatest-number-of-candies",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies.html",pathLocale:"/",extraFields:[]},{title:"LC605. 种花问题 can-place-flowers",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-04-LC605-can-place-flowers.html",pathLocale:"/",extraFields:[]},{title:"LC345. 反转字符串中的元音字母  reverse-vowels-of-a-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string.html",pathLocale:"/",extraFields:[]},{title:"LC151. 反转字符串中的单词 reverse-words-in-a-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-06-LC151-reverse-words-in-a-string.html",pathLocale:"/",extraFields:[]},{title:"LC334. 递增的三元子序列 increasing-triplet-subsequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-08-LC334-increasing-triplet-subsequence.html",pathLocale:"/",extraFields:[]},{title:"LC443. 压缩字符串 string-compression",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"最后一个字符的优化",slug:"最后一个字符的优化",link:"#最后一个字符的优化",children:[]},{level:2,title:"appendCount 改写",slug:"appendcount-改写",link:"#appendcount-改写",children:[{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]}],path:"/posts/leetcode/leetcode-75/2025-08-31-array-string-09-LC443-string-compression.html",pathLocale:"/",extraFields:[]},{title:"LC283. 移动零 move-zeros",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-two-pointer-01-LC283-move-zeros.html",pathLocale:"/",extraFields:[]},{title:"LC392. 判断子序列 is-subsequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-two-pointer-02-LC392-is-subsequence.html",pathLocale:"/",extraFields:[]},{title:"LC11. 盛最多水的容器 container-with-most-water",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-two-pointer-03-LC11-container-with-most-water.html",pathLocale:"/",extraFields:[]},{title:"LC1679. K 和数对的最大数目 max-number-of-k-sum-pairs",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"为什么排序会被 Hash 更快？",slug:"为什么排序会被-hash-更快",link:"#为什么排序会被-hash-更快",children:[]},{level:2,title:"1. 常数因子的差异",slug:"_1-常数因子的差异",link:"#_1-常数因子的差异",children:[]},{level:2,title:"2. CPU 缓存友好性",slug:"_2-cpu-缓存友好性",link:"#_2-cpu-缓存友好性",children:[]},{level:2,title:"3. JVM 内联 & 向量化",slug:"_3-jvm-内联-向量化",link:"#_3-jvm-内联-向量化",children:[]},{level:2,title:"4. 数据规模的平衡点",slug:"_4-数据规模的平衡点",link:"#_4-数据规模的平衡点",children:[]}],path:"/posts/leetcode/leetcode-75/2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs.html",pathLocale:"/",extraFields:[]},{title:"LC643. 子数组最大平均数 I maximum-average-subarray-i",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[{level:3,title:"优化",slug:"优化",link:"#优化",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:3,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i.html",pathLocale:"/",extraFields:[]},{title:"LC1456. 定长子串中元音的最大数目 maximum-number-of-vowels-in-a-substring-of-given-length",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"说明",slug:"说明",link:"#说明",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"说明",slug:"说明-1",link:"#说明-1",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length.html",pathLocale:"/",extraFields:[]},{title:"LC1004. 最大连续1的个数 III max-consecutive-ones-iii",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii.html",pathLocale:"/",extraFields:[]},{title:"LC1493. 删掉一个元素以后全为 1 的最长子数组 longest-subarray-of-1s-after-deleting-one-element",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element.html",pathLocale:"/",extraFields:[]},{title:"LC2215. 找出两数组的不同 find-the-difference-of-two-arrays",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays.html",pathLocale:"/",extraFields:[]},{title:"LC1207. 独一无二的出现次数 unique-number-of-occurrences",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-09-hash-02-LC1207-unique-number-of-occurrences.html",pathLocale:"/",extraFields:[]},{title:"LC1657. 确定两个字符串是否接近 determine-if-two-strings-are-close",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"优化-避免 toCharArray",slug:"优化-避免-tochararray",link:"#优化-避免-tochararray",children:[{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]}],path:"/posts/leetcode/leetcode-75/2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close.html",pathLocale:"/",extraFields:[]},{title:"LC2352. 相等行列对 equal-row-and-column-pairs",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-09-hash-04-LC2352-equal-row-and-column-pairs.html",pathLocale:"/",extraFields:[]},{title:"LC1732. 找到最高海拔 find-the-highest-altitude",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude.html",pathLocale:"/",extraFields:[]},{title:"LC724. 寻找数组的中心下标 find-pivot-index",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-09-prefixsum-02-LC724-find-pivot-index.html",pathLocale:"/",extraFields:[]},{title:"LC2390. 从字符串中移除星号 removing-stars-from-a-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"栈",slug:"栈",link:"#栈",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-18-stack-01-LC2390-removing-stars-from-a-string.html",pathLocale:"/",extraFields:[]},{title:"LC735. 小行星碰撞 asteroid-collision",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-18-stack-02-LC735-asteroid-collision.html",pathLocale:"/",extraFields:[]},{title:"LC394. 字符串解码 decode-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"处理流程",slug:"处理流程",link:"#处理流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string%20copy.html",pathLocale:"/",extraFields:[]},{title:"LC394. 字符串解码 decode-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"处理流程",slug:"处理流程",link:"#处理流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string.html",pathLocale:"/",extraFields:[]},{title:"Sort-00-十大排序算法汇总",headers:[{level:2,title:"插入排序",slug:"插入排序",link:"#插入排序",children:[]},{level:2,title:"算法描述",slug:"算法描述",link:"#算法描述",children:[]},{level:2,title:"实例代码",slug:"实例代码",link:"#实例代码",children:[]},{level:2,title:"算法复杂度",slug:"算法复杂度",link:"#算法复杂度",children:[]},{level:2,title:"参考资料",slug:"参考资料",link:"#参考资料",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-00-overview-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-01-bubble sort 冒泡排序算法详解",headers:[{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"已有实现的不足",slug:"已有实现的不足",link:"#已有实现的不足",children:[]},{level:2,title:"接口定义",slug:"接口定义",link:"#接口定义",children:[]},{level:2,title:"抽象实现",slug:"抽象实现",link:"#抽象实现",children:[]},{level:2,title:"冒泡排序",slug:"冒泡排序-1",link:"#冒泡排序-1",children:[]},{level:2,title:"工具类",slug:"工具类",link:"#工具类",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"日志",slug:"日志",link:"#日志",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-01-bubble-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-02-QuickSort 快速排序到底快在哪里？",headers:[{level:2,title:"基准数",slug:"基准数",link:"#基准数",children:[]},{level:2,title:"分区",slug:"分区",link:"#分区",children:[{level:3,title:"第一次交换",slug:"第一次交换",link:"#第一次交换",children:[]},{level:3,title:"第二次交换",slug:"第二次交换",link:"#第二次交换",children:[]},{level:3,title:"第三次交换",slug:"第三次交换",link:"#第三次交换",children:[]},{level:3,title:"递归",slug:"递归",link:"#递归",children:[]}]},{level:2,title:"核心代码实现",slug:"核心代码实现",link:"#核心代码实现",children:[]},{level:2,title:"InnerSortUtil 工具类",slug:"innersortutil-工具类",link:"#innersortutil-工具类",children:[]},{level:2,title:"工具方法",slug:"工具方法",link:"#工具方法",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"测试日志",slug:"测试日志",link:"#测试日志",children:[{level:3,title:"数据交换时",slug:"数据交换时",link:"#数据交换时",children:[]},{level:3,title:"基准归位时",slug:"基准归位时",link:"#基准归位时",children:[]}]},{level:2,title:"测试日志",slug:"测试日志-1",link:"#测试日志-1",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-02-quick-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-03-SelectSort 选择排序算法详解",headers:[{level:2,title:"比较方法",slug:"比较方法",link:"#比较方法",children:[]},{level:2,title:"静态化",slug:"静态化",link:"#静态化",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"测试日志",slug:"测试日志",link:"#测试日志",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-03-select-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-04-heap sort 堆排序算法详解",headers:[{level:2,title:"最大堆",slug:"最大堆",link:"#最大堆",children:[]},{level:2,title:"堆节点的访问",slug:"堆节点的访问",link:"#堆节点的访问",children:[]},{level:2,title:"堆的操作",slug:"堆的操作",link:"#堆的操作",children:[]},{level:2,title:"基本思想",slug:"基本思想",link:"#基本思想",children:[]},{level:2,title:"步骤",slug:"步骤",link:"#步骤",children:[{level:3,title:"步骤一 构造初始堆",slug:"步骤一-构造初始堆",link:"#步骤一-构造初始堆",children:[]},{level:3,title:"步骤二 调整堆",slug:"步骤二-调整堆",link:"#步骤二-调整堆",children:[]}]},{level:2,title:"简单总结",slug:"简单总结",link:"#简单总结",children:[]},{level:2,title:"说明",slug:"说明",link:"#说明",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-05-insert sort 插入排序算法详解",headers:[{level:2,title:"算法步骤",slug:"算法步骤",link:"#算法步骤",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"java 实现",slug:"java-实现-1",link:"#java-实现-1",children:[]},{level:2,title:"代码测试",slug:"代码测试",link:"#代码测试",children:[]},{level:2,title:"v1-基础版本",slug:"v1-基础版本",link:"#v1-基础版本",children:[]},{level:2,title:"v2-binarySearch 版本",slug:"v2-binarysearch-版本",link:"#v2-binarysearch-版本",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-05-insert-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-06-shell sort 希尔排序算法详解",headers:[{level:2,title:"算法实现",slug:"算法实现",link:"#算法实现",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"步长序列如何选择？",slug:"步长序列如何选择",link:"#步长序列如何选择",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[{level:3,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:3,title:"测试日志",slug:"测试日志",link:"#测试日志",children:[]}]}],path:"/posts/leetcode/sorts/2016-07-14-sort-06-shell-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-07-merge sort 归并排序",headers:[{level:2,title:"概述",slug:"概述",link:"#概述",children:[]},{level:2,title:"递归法（Top-down）",slug:"递归法-top-down",link:"#递归法-top-down",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"代码测试",slug:"代码测试",link:"#代码测试",children:[]},{level:2,title:"测试日志",slug:"测试日志",link:"#测试日志",children:[]},{level:2,title:"迭代法（Bottom-up）",slug:"迭代法-bottom-up",link:"#迭代法-bottom-up",children:[]},{level:2,title:"迭代实现",slug:"迭代实现",link:"#迭代实现",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-07-merge-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-08-counting sort 计数排序",headers:[{level:2,title:"算法步骤",slug:"算法步骤",link:"#算法步骤",children:[]},{level:2,title:"java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:2,title:"测试",slug:"测试",link:"#测试",children:[]},{level:2,title:"空间浪费",slug:"空间浪费",link:"#空间浪费",children:[]},{level:2,title:"改良版本实现",slug:"改良版本实现",link:"#改良版本实现",children:[]},{level:2,title:"测试",slug:"测试-1",link:"#测试-1",children:[]},{level:2,title:"算法的本质",slug:"算法的本质",link:"#算法的本质",children:[]},{level:2,title:"算法的不足",slug:"算法的不足",link:"#算法的不足",children:[]},{level:2,title:"一点想法",slug:"一点想法",link:"#一点想法",children:[]},{level:2,title:"TreeMap 版本",slug:"treemap-版本",link:"#treemap-版本",children:[]},{level:2,title:"测试",slug:"测试-2",link:"#测试-2",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-08-counting-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-09-bucket sort 桶排序",headers:[{level:2,title:"算法流程",slug:"算法流程",link:"#算法流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"测试代码",slug:"测试代码",link:"#测试代码",children:[]},{level:2,title:"时间复杂度：O(N + C)",slug:"时间复杂度-o-n-c",link:"#时间复杂度-o-n-c",children:[]},{level:2,title:"额外空间复杂度",slug:"额外空间复杂度",link:"#额外空间复杂度",children:[]}],path:"/posts/leetcode/sorts/2016-07-14-sort-09-bucket-sort.html",pathLocale:"/",extraFields:[]},{title:"sort-10-bigfile sort 大文件外部排序",headers:[{level:2,title:"归并排序（Merge Sort）",slug:"归并排序-merge-sort",link:"#归并排序-merge-sort",children:[]},{level:2,title:"合并过程",slug:"合并过程",link:"#合并过程",children:[{level:3,title:"1. 分而治之",slug:"_1-分而治之",link:"#_1-分而治之",children:[]},{level:3,title:"2. 各个击破",slug:"_2-各个击破",link:"#_2-各个击破",children:[]},{level:3,title:"3. 合并同类项",slug:"_3-合并同类项",link:"#_3-合并同类项",children:[]},{level:3,title:"磁盘I/O",slug:"磁盘i-o",link:"#磁盘i-o",children:[]}]}],path:"/posts/leetcode/sorts/2016-07-14-sort-10-bigfile-sort.html",pathLocale:"/",extraFields:[]},{title:"Time Sort",headers:[{level:2,title:"算法简介",slug:"算法简介",link:"#算法简介",children:[]},{level:2,title:"具体",slug:"具体",link:"#具体",children:[]},{level:2,title:"插入元素低于 64 个",slug:"插入元素低于-64-个",link:"#插入元素低于-64-个",children:[{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"排序元素超过 64 个",slug:"排序元素超过-64-个",link:"#排序元素超过-64-个",children:[]},{level:2,title:"Code (代码)",slug:"code-代码",link:"#code-代码",children:[]}],path:"/posts/leetcode/sorts/2018-07-26-timesort.html",pathLocale:"/",extraFields:[]},{title:"LC70. 爬楼梯 climbing-stairs",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}],path:"/posts/leetcode/topinterview-150/2025-08-22-dp-01-LC70-climbing-stairs.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之回溯",slug:"详细介绍一下力扣算法之回溯",link:"#详细介绍一下力扣算法之回溯",children:[]},{level:2,title:"🧠 一、什么是回溯算法？",slug:"🧠-一、什么是回溯算法",link:"#🧠-一、什么是回溯算法",children:[]},{level:2,title:"🔄 二、回溯的基本思路",slug:"🔄-二、回溯的基本思路",link:"#🔄-二、回溯的基本思路",children:[{level:3,title:"通用套路：",slug:"通用套路",link:"#通用套路",children:[]}]},{level:2,title:"🔧 三、适合用回溯解决的问题类型",slug:"🔧-三、适合用回溯解决的问题类型",link:"#🔧-三、适合用回溯解决的问题类型",children:[]},{level:2,title:"📋 四、三大经典模板题型",slug:"📋-四、三大经典模板题型",link:"#📋-四、三大经典模板题型",children:[{level:3,title:"1 排列类模板（如 LeetCode 46）",slug:"_1-排列类模板-如-leetcode-46",link:"#_1-排列类模板-如-leetcode-46",children:[]},{level:3,title:"2. 组合类模板（如 LeetCode 77）",slug:"_2-组合类模板-如-leetcode-77",link:"#_2-组合类模板-如-leetcode-77",children:[]},{level:3,title:"3. 子集类模板（如 LeetCode 78）",slug:"_3-子集类模板-如-leetcode-78",link:"#_3-子集类模板-如-leetcode-78",children:[]}]},{level:2,title:"✂️ 五、剪枝技巧",slug:"✂️-五、剪枝技巧",link:"#✂️-五、剪枝技巧",children:[]},{level:2,title:"🧠 六、回溯 VS DFS",slug:"🧠-六、回溯-vs-dfs",link:"#🧠-六、回溯-vs-dfs",children:[]},{level:2,title:"🎯 七、LeetCode 高频回溯题推荐",slug:"🎯-七、leetcode-高频回溯题推荐",link:"#🎯-七、leetcode-高频回溯题推荐",children:[]},{level:2,title:"✅ 八、总结一句话",slug:"✅-八、总结一句话",link:"#✅-八、总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 与递归和 DFS 的关系？",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"🔹 1. 递归（Recursion）是什么？",slug:"🔹-1-递归-recursion-是什么",link:"#🔹-1-递归-recursion-是什么",children:[]},{level:2,title:"🔹 2. DFS（深度优先搜索）是什么？",slug:"🔹-2-dfs-深度优先搜索-是什么",link:"#🔹-2-dfs-深度优先搜索-是什么",children:[]},{level:2,title:"🔹 3. 回溯（Backtracking）是什么？",slug:"🔹-3-回溯-backtracking-是什么",link:"#🔹-3-回溯-backtracking-是什么",children:[]},{level:2,title:"🔹 4. 它们的关系总结",slug:"🔹-4-它们的关系总结",link:"#🔹-4-它们的关系总结",children:[]},{level:2,title:"📌 为什么回溯常常作为单独的模块？",slug:"📌-为什么回溯常常作为单独的模块",link:"#📌-为什么回溯常常作为单独的模块",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC46. 全排列 permutations",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"示例（文字演示）：",slug:"示例-文字演示",link:"#示例-文字演示",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC77. 组合 combinations",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"优化思路-剪枝",slug:"优化思路-剪枝",link:"#优化思路-剪枝",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC78 子集 subsets",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC17 电话号码的字母组合 letter-combinations-of-a-phone-number",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC39 组合总和 combination-sum",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[{level:3,title:"Step 1: 确定递归参数",slug:"step-1-确定递归参数",link:"#step-1-确定递归参数",children:[]},{level:3,title:"Step 2: 递归终止条件",slug:"step-2-递归终止条件",link:"#step-2-递归终止条件",children:[]},{level:3,title:"Step 3: 循环遍历选择",slug:"step-3-循环遍历选择",link:"#step-3-循环遍历选择",children:[]},{level:3,title:"Step 4: 递归 + 回溯",slug:"step-4-递归-回溯",link:"#step-4-递归-回溯",children:[]}]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC22 22. 括号生成 generate-parentheses",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC79 单词搜索 word-search",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"修正",slug:"修正",link:"#修正",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"1、字符数量",slug:"_1、字符数量",link:"#_1、字符数量",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC131 分割回文串 palindrome-partitioning",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之回溯 Backtracking 02-LC51. N 皇后 n-queens",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"写法优化1",slug:"写法优化1",link:"#写法优化1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens.html",pathLocale:"/",extraFields:[]},{title:"leetcode 基础篇专题之枚举 enumration 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣基础之枚举 enumration",slug:"详细介绍一下力扣基础之枚举-enumration",link:"#详细介绍一下力扣基础之枚举-enumration",children:[]},{level:2,title:"一、什么是枚举？",slug:"一、什么是枚举",link:"#一、什么是枚举",children:[]},{level:2,title:"二、什么时候用枚举？",slug:"二、什么时候用枚举",link:"#二、什么时候用枚举",children:[]},{level:2,title:"三、常见枚举方式分类",slug:"三、常见枚举方式分类",link:"#三、常见枚举方式分类",children:[{level:3,title:"1. 枚举一个变量",slug:"_1-枚举一个变量",link:"#_1-枚举一个变量",children:[]},{level:3,title:"2. 枚举两个变量（双层嵌套）",slug:"_2-枚举两个变量-双层嵌套",link:"#_2-枚举两个变量-双层嵌套",children:[]},{level:3,title:"3. 枚举子串 / 子数组",slug:"_3-枚举子串-子数组",link:"#_3-枚举子串-子数组",children:[]},{level:3,title:"4. 枚举组合（回溯/位运算）",slug:"_4-枚举组合-回溯-位运算",link:"#_4-枚举组合-回溯-位运算",children:[]},{level:3,title:"5. 特殊结构的枚举",slug:"_5-特殊结构的枚举",link:"#_5-特殊结构的枚举",children:[]}]},{level:2,title:"四、优化枚举的方法",slug:"四、优化枚举的方法",link:"#四、优化枚举的方法",children:[{level:3,title:"✅ 技巧一：剪枝（提前退出）",slug:"✅-技巧一-剪枝-提前退出",link:"#✅-技巧一-剪枝-提前退出",children:[]},{level:3,title:"✅ 技巧二：用数据结构辅助",slug:"✅-技巧二-用数据结构辅助",link:"#✅-技巧二-用数据结构辅助",children:[]},{level:3,title:"✅ 技巧三：位运算枚举子集",slug:"✅-技巧三-位运算枚举子集",link:"#✅-技巧三-位运算枚举子集",children:[]}]},{level:2,title:"五、枚举模板代码总结",slug:"五、枚举模板代码总结",link:"#五、枚举模板代码总结",children:[{level:3,title:"🔁 枚举两个数：",slug:"🔁-枚举两个数",link:"#🔁-枚举两个数",children:[]},{level:3,title:"🔁 枚举所有子数组：",slug:"🔁-枚举所有子数组",link:"#🔁-枚举所有子数组",children:[]},{level:3,title:"🔁 枚举所有子集（二进制法）：",slug:"🔁-枚举所有子集-二进制法",link:"#🔁-枚举所有子集-二进制法",children:[]}]},{level:2,title:"六、推荐刷题顺序（入门 → 提升）",slug:"六、推荐刷题顺序-入门-→-提升",link:"#六、推荐刷题顺序-入门-→-提升",children:[{level:3,title:"✅ 入门枚举题",slug:"✅-入门枚举题",link:"#✅-入门枚举题",children:[]},{level:3,title:"✅ 中等枚举题",slug:"✅-中等枚举题",link:"#✅-中等枚举题",children:[]},{level:3,title:"✅ 高阶进阶",slug:"✅-高阶进阶",link:"#✅-高阶进阶",children:[]}]},{level:2,title:"七、小结",slug:"七、小结",link:"#七、小结",children:[]}],path:"/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 基础篇专题之模拟 simulation 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣基础之模拟 simulation",slug:"详细介绍一下力扣基础之模拟-simulation",link:"#详细介绍一下力扣基础之模拟-simulation",children:[]},{level:2,title:"一、什么是模拟（Simulation）？",slug:"一、什么是模拟-simulation",link:"#一、什么是模拟-simulation",children:[{level:3,title:"✅ 本质就是：把题目的“自然语言”变成“代码实现”。",slug:"✅-本质就是-把题目的-自然语言-变成-代码实现-。",link:"#✅-本质就是-把题目的-自然语言-变成-代码实现-。",children:[]}]},{level:2,title:"二、什么时候用模拟？",slug:"二、什么时候用模拟",link:"#二、什么时候用模拟",children:[]},{level:2,title:"三、模拟题常见类型",slug:"三、模拟题常见类型",link:"#三、模拟题常见类型",children:[{level:3,title:"1. 数组/字符串模拟",slug:"_1-数组-字符串模拟",link:"#_1-数组-字符串模拟",children:[]},{level:3,title:"2. 矩阵模拟",slug:"_2-矩阵模拟",link:"#_2-矩阵模拟",children:[]},{level:3,title:"3. 数独/棋盘类模拟",slug:"_3-数独-棋盘类模拟",link:"#_3-数独-棋盘类模拟",children:[]},{level:3,title:"4. 模拟移动 / 机器人轨迹",slug:"_4-模拟移动-机器人轨迹",link:"#_4-模拟移动-机器人轨迹",children:[]},{level:3,title:"5. 数据结构模拟题",slug:"_5-数据结构模拟题",link:"#_5-数据结构模拟题",children:[]}]},{level:2,title:"四、解题思路 & 模板技巧",slug:"四、解题思路-模板技巧",link:"#四、解题思路-模板技巧",children:[{level:3,title:"✅ 通用思路：",slug:"✅-通用思路",link:"#✅-通用思路",children:[]},{level:3,title:"🔁 常见套路（比如旋转矩阵）：",slug:"🔁-常见套路-比如旋转矩阵",link:"#🔁-常见套路-比如旋转矩阵",children:[]},{level:3,title:"⬅ 方向数组（模拟移动）",slug:"⬅-方向数组-模拟移动",link:"#⬅-方向数组-模拟移动",children:[]}]},{level:2,title:"五、模拟题的注意事项",slug:"五、模拟题的注意事项",link:"#五、模拟题的注意事项",children:[]},{level:2,title:"六、模拟题推荐刷题顺序（入门 → 提升）",slug:"六、模拟题推荐刷题顺序-入门-→-提升",link:"#六、模拟题推荐刷题顺序-入门-→-提升",children:[{level:3,title:"✅ 入门级：",slug:"✅-入门级",link:"#✅-入门级",children:[]},{level:3,title:"✅ 中级：",slug:"✅-中级",link:"#✅-中级",children:[]},{level:3,title:"✅ 进阶：",slug:"✅-进阶",link:"#✅-进阶",children:[]}]}],path:"/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode data-struct-000-力扣数据结构练习篇概览",headers:[{level:2,title:"创作目的",slug:"创作目的",link:"#创作目的",children:[]},{level:2,title:"理论",slug:"理论",link:"#理论",children:[]},{level:2,title:"理论+编码",slug:"理论-编码",link:"#理论-编码",children:[]},{level:2,title:"编码+练习",slug:"编码-练习",link:"#编码-练习",children:[]},{level:2,title:"实践应用",slug:"实践应用",link:"#实践应用",children:[{level:3,title:"按数据结构分类",slug:"按数据结构分类",link:"#按数据结构分类",children:[]},{level:3,title:"按算法分类",slug:"按算法分类",link:"#按算法分类",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 力扣数据结构之数组-00-概览",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"一、什么是数组（Array）？",slug:"一、什么是数组-array",link:"#一、什么是数组-array",children:[]},{level:2,title:"二、数组的特点",slug:"二、数组的特点",link:"#二、数组的特点",children:[]},{level:2,title:"三、常见操作及复杂度",slug:"三、常见操作及复杂度",link:"#三、常见操作及复杂度",children:[]},{level:2,title:"四、数组的优缺点",slug:"四、数组的优缺点",link:"#四、数组的优缺点",children:[{level:3,title:"✅ 优点",slug:"✅-优点",link:"#✅-优点",children:[]},{level:3,title:"❌ 缺点",slug:"❌-缺点",link:"#❌-缺点",children:[]}]},{level:2,title:"✅ 数组密切关联的核心算法整理",slug:"✅-数组密切关联的核心算法整理",link:"#✅-数组密切关联的核心算法整理",children:[{level:3,title:"🟢 一、查找类算法（适用于有序/无序数组）",slug:"🟢-一、查找类算法-适用于有序-无序数组",link:"#🟢-一、查找类算法-适用于有序-无序数组",children:[]},{level:3,title:"🔵 二、指针/窗口类算法（适合线性遍历、局部范围处理）",slug:"🔵-二、指针-窗口类算法-适合线性遍历、局部范围处理",link:"#🔵-二、指针-窗口类算法-适合线性遍历、局部范围处理",children:[]},{level:3,title:"🟡 三、前缀思想类算法",slug:"🟡-三、前缀思想类算法",link:"#🟡-三、前缀思想类算法",children:[]},{level:3,title:"🟠 四、排序类算法（很多题的前置步骤）",slug:"🟠-四、排序类算法-很多题的前置步骤",link:"#🟠-四、排序类算法-很多题的前置步骤",children:[]},{level:3,title:"🔴 五、构造类 / 模拟类算法",slug:"🔴-五、构造类-模拟类算法",link:"#🔴-五、构造类-模拟类算法",children:[]},{level:3,title:"🟣 六、组合与变形类算法",slug:"🟣-六、组合与变形类算法",link:"#🟣-六、组合与变形类算法",children:[]}]},{level:2,title:"从 leetcode 推荐最值得练习的 10 道数组题",slug:"从-leetcode-推荐最值得练习的-10-道数组题",link:"#从-leetcode-推荐最值得练习的-10-道数组题",children:[{level:3,title:"1. Two Sum (1)",slug:"_1-two-sum-1",link:"#_1-two-sum-1",children:[]},{level:3,title:"2. Best Time to Buy and Sell Stock (121)",slug:"_2-best-time-to-buy-and-sell-stock-121",link:"#_2-best-time-to-buy-and-sell-stock-121",children:[]},{level:3,title:"3. Rotate Array (189)",slug:"_3-rotate-array-189",link:"#_3-rotate-array-189",children:[]},{level:3,title:"4. Move Zeroes (283)",slug:"_4-move-zeroes-283",link:"#_4-move-zeroes-283",children:[]},{level:3,title:"5. Container With Most Water (11)",slug:"_5-container-with-most-water-11",link:"#_5-container-with-most-water-11",children:[]},{level:3,title:"6. 3Sum (15)",slug:"_6-3sum-15",link:"#_6-3sum-15",children:[]},{level:3,title:"7. Subarray Sum Equals K (560)",slug:"_7-subarray-sum-equals-k-560",link:"#_7-subarray-sum-equals-k-560",children:[]},{level:3,title:"8. Maximum Subarray (53)",slug:"_8-maximum-subarray-53",link:"#_8-maximum-subarray-53",children:[]},{level:3,title:"9. Product of Array Except Self (238)",slug:"_9-product-of-array-except-self-238",link:"#_9-product-of-array-except-self-238",children:[]},{level:3,title:"10. Find Minimum in Rotated Sorted Array (153)",slug:"_10-find-minimum-in-rotated-sorted-array-153",link:"#_10-find-minimum-in-rotated-sorted-array-153",children:[]}]},{level:2,title:"🧠 一、数据预处理类技巧（和前缀和/差分类似）",slug:"🧠-一、数据预处理类技巧-和前缀和-差分类似",link:"#🧠-一、数据预处理类技巧-和前缀和-差分类似",children:[]},{level:2,title:"⚡ 二、查找类技巧（离散化、二分、哈希）",slug:"⚡-二、查找类技巧-离散化、二分、哈希",link:"#⚡-二、查找类技巧-离散化、二分、哈希",children:[]},{level:2,title:"🧊 三、空间压缩/动态技巧",slug:"🧊-三、空间压缩-动态技巧",link:"#🧊-三、空间压缩-动态技巧",children:[]},{level:2,title:"💥 四、排序类 + 归并 + 树状结构",slug:"💥-四、排序类-归并-树状结构",link:"#💥-四、排序类-归并-树状结构",children:[]},{level:2,title:"🌈 五、子数组/子序列类技巧",slug:"🌈-五、子数组-子序列类技巧",link:"#🌈-五、子数组-子序列类技巧",children:[]},{level:2,title:"📐 六、矩阵和二维数组技巧（和数组密切相关）",slug:"📐-六、矩阵和二维数组技巧-和数组密切相关",link:"#📐-六、矩阵和二维数组技巧-和数组密切相关",children:[]},{level:2,title:"🧩 七、其他零散但实用技巧",slug:"🧩-七、其他零散但实用技巧",link:"#🧩-七、其他零散但实用技巧",children:[]},{level:2,title:"🔚 总结表格",slug:"🔚-总结表格",link:"#🔚-总结表格",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-力扣.53 最大子数组和 leetcode maximum-subarray",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"左右两边的双指针可行吗？",slug:"左右两边的双指针可行吗",link:"#左右两边的双指针可行吗",children:[]},{level:2,title:"思路1",slug:"思路1",link:"#思路1",children:[]},{level:2,title:"思路-打开评论区",slug:"思路-打开评论区",link:"#思路-打开评论区",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"递推公式是什么？",slug:"递推公式是什么",link:"#递推公式是什么",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-力扣.128 最长连续序列 leetcode longest-consecutive-sequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-leetcode.1 two-sum 力扣.1 两数之和 N 种解法",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"顺序修正",slug:"顺序修正",link:"#顺序修正",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-5",link:"#效果-5",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-leetcode.167 two-sum-ii 力扣.167 两数之和II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"双指针",slug:"双指针",link:"#双指针",children:[]},{level:2,title:"代码",slug:"代码-2",link:"#代码-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-leetcode.170 two-sum III 力扣 170. 两数之和 III - 数据结构设计",headers:[{level:2,title:"区别",slug:"区别",link:"#区别",children:[]},{level:2,title:"常见算法",slug:"常见算法",link:"#常见算法",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 01-leetcode.653 two-sum IV 力扣 653. 两数之和 IV 二叉树/binary-tree",headers:[{level:2,title:"常见算法",slug:"常见算法",link:"#常见算法",children:[{level:3,title:"树的遍历",slug:"树的遍历",link:"#树的遍历",children:[]},{level:3,title:"找到符合的结果",slug:"找到符合的结果",link:"#找到符合的结果",children:[]},{level:3,title:"1. 前序遍历 (Preorder Traversal)",slug:"_1-前序遍历-preorder-traversal",link:"#_1-前序遍历-preorder-traversal",children:[]},{level:3,title:"2. 中序遍历 (Inorder Traversal)",slug:"_2-中序遍历-inorder-traversal",link:"#_2-中序遍历-inorder-traversal",children:[]},{level:3,title:"3. 后序遍历 (Postorder Traversal)",slug:"_3-后序遍历-postorder-traversal",link:"#_3-后序遍历-postorder-traversal",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"层序遍历",slug:"层序遍历",link:"#层序遍历",children:[{level:3,title:"层序遍历的实现步骤：",slug:"层序遍历的实现步骤",link:"#层序遍历的实现步骤",children:[]},{level:3,title:"层序遍历的 Java 实现：",slug:"层序遍历的-java-实现",link:"#层序遍历的-java-实现",children:[]},{level:3,title:"代码说明：",slug:"代码说明",link:"#代码说明",children:[]}]},{level:2,title:"结合本题",slug:"结合本题",link:"#结合本题",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"回顾 T167",slug:"回顾-t167",link:"#回顾-t167",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 04-leetcode.15 three-sum 力扣.15 三数之和",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"疑问 数据去重问题呢？",slug:"疑问-数据去重问题呢",link:"#疑问-数据去重问题呢",children:[]}]},{level:2,title:"编程思路",slug:"编程思路",link:"#编程思路",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"初始值的问题",slug:"初始值的问题",link:"#初始值的问题",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 04-leetcode.16 three-sum-closest 力扣.16 最接近的三数之和",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 04-leetcode.259 three-sum-smaller 力扣.259 较小的三数之和",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"疑问",slug:"疑问",link:"#疑问",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 05-leetcode.018 four-sum 力扣.018 四数之和",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[{level:3,title:"为什么错误了",slug:"为什么错误了",link:"#为什么错误了",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 05-leetcode.454 four-sum-ii 力扣.454 四数相加之和 II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"限制",slug:"限制",link:"#限制",children:[]},{level:2,title:"二分法的注意点",slug:"二分法的注意点",link:"#二分法的注意点",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"注释版本1-极致版本",slug:"注释版本1-极致版本",link:"#注释版本1-极致版本",children:[]},{level:2,title:"相对好理解的版本",slug:"相对好理解的版本",link:"#相对好理解的版本",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"为什么这个要比 HashMap 更快？二者核心理念其实差不多，只是实现的数据结构差异",slug:"为什么这个要比-hashmap-更快-二者核心理念其实差不多-只是实现的数据结构差异",link:"#为什么这个要比-hashmap-更快-二者核心理念其实差不多-只是实现的数据结构差异",children:[{level:3,title:"1. 数组比 HashMap 更高效",slug:"_1-数组比-hashmap-更高效",link:"#_1-数组比-hashmap-更高效",children:[]},{level:3,title:"2. 使用数组代替哈希表避免了哈希冲突",slug:"_2-使用数组代替哈希表避免了哈希冲突",link:"#_2-使用数组代替哈希表避免了哈希冲突",children:[]},{level:3,title:"3. 减少内存管理开销",slug:"_3-减少内存管理开销",link:"#_3-减少内存管理开销",children:[]},{level:3,title:"4. 优化的空间复杂度",slug:"_4-优化的空间复杂度",link:"#_4-优化的空间复杂度",children:[]},{level:3,title:"5. 简化代码和常数项优化",slug:"_5-简化代码和常数项优化",link:"#_5-简化代码和常数项优化",children:[]},{level:3,title:"举例说明",slug:"举例说明",link:"#举例说明",children:[]}]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）",headers:[{level:2,title:"什么是扫描线算法？",slug:"什么是扫描线算法",link:"#什么是扫描线算法",children:[{level:3,title:"扫描线算法的基本步骤",slug:"扫描线算法的基本步骤",link:"#扫描线算法的基本步骤",children:[]},{level:3,title:"应用场景",slug:"应用场景",link:"#应用场景",children:[]},{level:3,title:"扫描线算法的具体步骤",slug:"扫描线算法的具体步骤",link:"#扫描线算法的具体步骤",children:[]},{level:3,title:"例子：检测会议是否有重叠",slug:"例子-检测会议是否有重叠",link:"#例子-检测会议是否有重叠",children:[]},{level:3,title:"扫描线算法的优势",slug:"扫描线算法的优势",link:"#扫描线算法的优势",children:[]},{level:3,title:"扩展应用",slug:"扩展应用",link:"#扩展应用",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"扫描线算法的应用场景",slug:"扫描线算法的应用场景",link:"#扫描线算法的应用场景",children:[{level:3,title:"1. 几何问题",slug:"_1-几何问题",link:"#_1-几何问题",children:[]},{level:3,title:"2. 区间问题",slug:"_2-区间问题",link:"#_2-区间问题",children:[]},{level:3,title:"3. 图像处理与计算几何",slug:"_3-图像处理与计算几何",link:"#_3-图像处理与计算几何",children:[]},{level:3,title:"4. 统计与计数问题",slug:"_4-统计与计数问题",link:"#_4-统计与计数问题",children:[]},{level:3,title:"5. 动态数据维护问题",slug:"_5-动态数据维护问题",link:"#_5-动态数据维护问题",children:[]},{level:3,title:"总结",slug:"总结-1",link:"#总结-1",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.1851 minimum-interval-to-include-each-query 力扣.1851 包含每个查询的最小区间",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"否决",slug:"否决",link:"#否决",children:[]},{level:2,title:"核心",slug:"核心",link:"#核心",children:[]},{level:2,title:"问题的重新考虑",slug:"问题的重新考虑",link:"#问题的重新考虑",children:[]},{level:2,title:"什么是离线优化？",slug:"什么是离线优化",link:"#什么是离线优化",children:[{level:3,title:"离线优化的解释",slug:"离线优化的解释",link:"#离线优化的解释",children:[]},{level:3,title:"离线优化的关键步骤",slug:"离线优化的关键步骤",link:"#离线优化的关键步骤",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"关系",slug:"关系",link:"#关系",children:[{level:3,title:"为什么线段树适合解决这类问题？",slug:"为什么线段树适合解决这类问题",link:"#为什么线段树适合解决这类问题",children:[]},{level:3,title:"线段树应用的思路：",slug:"线段树应用的思路",link:"#线段树应用的思路",children:[]},{level:3,title:"如何用线段树解决？",slug:"如何用线段树解决",link:"#如何用线段树解决",children:[]}]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"c++ 实现",slug:"c-实现",link:"#c-实现",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 06-leetcode.218 the-skyline-problem 力扣.218 天际线问题 扫描线",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心步骤拆分",slug:"核心步骤拆分",link:"#核心步骤拆分",children:[{level:3,title:"左右定点初始化",slug:"左右定点初始化",link:"#左右定点初始化",children:[]},{level:3,title:"排序",slug:"排序",link:"#排序",children:[]},{level:3,title:"更新",slug:"更新",link:"#更新",children:[]}]},{level:2,title:"整体实现",slug:"整体实现",link:"#整体实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"详细注释版本",slug:"详细注释版本",link:"#详细注释版本",children:[{level:3,title:"详细解释：",slug:"详细解释",link:"#详细解释",children:[]},{level:3,title:"为什么？？？",slug:"为什么",link:"#为什么",children:[]},{level:3,title:"1. 遇到左边界时，将该建筑物的高度加入堆：",slug:"_1-遇到左边界时-将该建筑物的高度加入堆",link:"#_1-遇到左边界时-将该建筑物的高度加入堆",children:[]},{level:3,title:"2. 遇到右边界时，将该建筑物的高度从堆中移除：",slug:"_2-遇到右边界时-将该建筑物的高度从堆中移除",link:"#_2-遇到右边界时-将该建筑物的高度从堆中移除",children:[]},{level:3,title:"3. 堆中的最大高度发生变化时，记录关键点：",slug:"_3-堆中的最大高度发生变化时-记录关键点",link:"#_3-堆中的最大高度发生变化时-记录关键点",children:[]},{level:3,title:"为什么要通过这些操作来拼接天际线？",slug:"为什么要通过这些操作来拼接天际线",link:"#为什么要通过这些操作来拼接天际线",children:[]}]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[{level:3,title:"扫描线算法（Sweep Line Algorithm）",slug:"扫描线算法-sweep-line-algorithm",link:"#扫描线算法-sweep-line-algorithm",children:[]},{level:3,title:"天际线问题中的扫描线实现",slug:"天际线问题中的扫描线实现",link:"#天际线问题中的扫描线实现",children:[]},{level:3,title:"为什么叫扫描线？",slug:"为什么叫扫描线",link:"#为什么叫扫描线",children:[]},{level:3,title:"扫描线算法的步骤（简要总结）：",slug:"扫描线算法的步骤-简要总结",link:"#扫描线算法的步骤-简要总结",children:[]},{level:3,title:"扫描线在天际线问题中的具体应用：",slug:"扫描线在天际线问题中的具体应用",link:"#扫描线在天际线问题中的具体应用",children:[]},{level:3,title:"扫描线算法的优势：",slug:"扫描线算法的优势",link:"#扫描线算法的优势",children:[]},{level:3,title:"总结：",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.223 rectangle-area 力扣.223 矩形面积",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"计算重叠面积",slug:"计算重叠面积",link:"#计算重叠面积",children:[{level:3,title:"判断交集是否存在",slug:"判断交集是否存在",link:"#判断交集是否存在",children:[]},{level:3,title:"结果",slug:"结果",link:"#结果",children:[]}]},{level:2,title:"代码示例",slug:"代码示例",link:"#代码示例",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.252 meeting room 力扣.252 会议室",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[{level:3,title:"重叠条件解释",slug:"重叠条件解释",link:"#重叠条件解释",children:[]}]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"为什么要这样排序？",slug:"为什么要这样排序",link:"#为什么要这样排序",children:[{level:3,title:"排序规则解释",slug:"排序规则解释",link:"#排序规则解释",children:[]},{level:3,title:"为什么时间相同时优先处理结束事件？",slug:"为什么时间相同时优先处理结束事件",link:"#为什么时间相同时优先处理结束事件",children:[]},{level:3,title:"具体排序语句解释",slug:"具体排序语句解释",link:"#具体排序语句解释",children:[]},{level:3,title:"示例说明",slug:"示例说明",link:"#示例说明",children:[]},{level:3,title:"综上所述",slug:"综上所述",link:"#综上所述",children:[]}]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"为啥要用优先级队列？",slug:"为啥要用优先级队列",link:"#为啥要用优先级队列",children:[{level:3,title:"为什么排序之后不直接对比而要用优先级队列？",slug:"为什么排序之后不直接对比而要用优先级队列",link:"#为什么排序之后不直接对比而要用优先级队列",children:[]},{level:3,title:"优先级队列的关键作用",slug:"优先级队列的关键作用",link:"#优先级队列的关键作用",children:[]},{level:3,title:"典型的使用场景",slug:"典型的使用场景",link:"#典型的使用场景",children:[]},{level:3,title:"优先级队列在这里的作用：",slug:"优先级队列在这里的作用",link:"#优先级队列在这里的作用",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"小结",slug:"小结-2",link:"#小结-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.253 meeting room ii 力扣.253 会议室 II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[{level:3,title:"代码实现：",slug:"代码实现",link:"#代码实现",children:[]},{level:3,title:"代码实现：",slug:"代码实现-1",link:"#代码实现-1",children:[]},{level:3,title:"代码解释：",slug:"代码解释",link:"#代码解释",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"思路：",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"详细步骤：",slug:"详细步骤",link:"#详细步骤",children:[]},{level:3,title:"扫描线算法实现：",slug:"扫描线算法实现",link:"#扫描线算法实现",children:[]},{level:3,title:"代码解释：",slug:"代码解释-1",link:"#代码解释-1",children:[]},{level:3,title:"时间复杂度：",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:3,title:"空间复杂度：",slug:"空间复杂度",link:"#空间复杂度",children:[]}]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路：",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"代码解释",slug:"代码解释-2",link:"#代码解释-2",children:[{level:3,title:"时间复杂度：",slug:"时间复杂度-1",link:"#时间复杂度-1",children:[]},{level:3,title:"空间复杂度：",slug:"空间复杂度-1",link:"#空间复杂度-1",children:[]}]},{level:2,title:"本题中最小堆到底解决了什么问题？",slug:"本题中最小堆到底解决了什么问题",link:"#本题中最小堆到底解决了什么问题",children:[]},{level:2,title:"如何利用最小堆来解决问题？",slug:"如何利用最小堆来解决问题",link:"#如何利用最小堆来解决问题",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.3047 find-the-largest-area-of-square-inside-two-rectangles 力扣.3047 求交集区域的最大正方形面积",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"计算重叠面积",slug:"计算重叠面积",link:"#计算重叠面积",children:[{level:3,title:"判断交集是否存在",slug:"判断交集是否存在",link:"#判断交集是否存在",children:[]},{level:3,title:"重叠面积",slug:"重叠面积",link:"#重叠面积",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"v1.5 内存创建改进",slug:"v1-5-内存创建改进",link:"#v1-5-内存创建改进",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:3,title:"小结",slug:"小结-2",link:"#小结-2",children:[]}]},{level:2,title:"扫描线",slug:"扫描线",link:"#扫描线",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"详细步骤",slug:"详细步骤",link:"#详细步骤",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题 06-leetcode.391 perfect-rectangle 力扣.391 完美矩形 扫描线",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心步骤拆分",slug:"核心步骤拆分",link:"#核心步骤拆分",children:[{level:3,title:"左右定点初始化",slug:"左右定点初始化",link:"#左右定点初始化",children:[]},{level:3,title:"排序",slug:"排序",link:"#排序",children:[]},{level:3,title:"更新",slug:"更新",link:"#更新",children:[]}]},{level:2,title:"整体实现",slug:"整体实现",link:"#整体实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"详细注释版本",slug:"详细注释版本",link:"#详细注释版本",children:[{level:3,title:"详细解释：",slug:"详细解释",link:"#详细解释",children:[]},{level:3,title:"为什么？？？",slug:"为什么",link:"#为什么",children:[]},{level:3,title:"1. 遇到左边界时，将该建筑物的高度加入堆：",slug:"_1-遇到左边界时-将该建筑物的高度加入堆",link:"#_1-遇到左边界时-将该建筑物的高度加入堆",children:[]},{level:3,title:"2. 遇到右边界时，将该建筑物的高度从堆中移除：",slug:"_2-遇到右边界时-将该建筑物的高度从堆中移除",link:"#_2-遇到右边界时-将该建筑物的高度从堆中移除",children:[]},{level:3,title:"3. 堆中的最大高度发生变化时，记录关键点：",slug:"_3-堆中的最大高度发生变化时-记录关键点",link:"#_3-堆中的最大高度发生变化时-记录关键点",children:[]},{level:3,title:"为什么要通过这些操作来拼接天际线？",slug:"为什么要通过这些操作来拼接天际线",link:"#为什么要通过这些操作来拼接天际线",children:[]}]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[{level:3,title:"扫描线算法（Sweep Line Algorithm）",slug:"扫描线算法-sweep-line-algorithm",link:"#扫描线算法-sweep-line-algorithm",children:[]},{level:3,title:"天际线问题中的扫描线实现",slug:"天际线问题中的扫描线实现",link:"#天际线问题中的扫描线实现",children:[]},{level:3,title:"为什么叫扫描线？",slug:"为什么叫扫描线",link:"#为什么叫扫描线",children:[]},{level:3,title:"扫描线算法的步骤（简要总结）：",slug:"扫描线算法的步骤-简要总结",link:"#扫描线算法的步骤-简要总结",children:[]},{level:3,title:"扫描线在天际线问题中的具体应用：",slug:"扫描线在天际线问题中的具体应用",link:"#扫描线在天际线问题中的具体应用",children:[]},{level:3,title:"扫描线算法的优势：",slug:"扫描线算法的优势",link:"#扫描线算法的优势",children:[]},{level:3,title:"总结：",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.391 perfect-rectangle 力扣.391 完美矩形",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.836 rectangle-overlap 力扣.836 矩形重叠",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"计算重叠面积",slug:"计算重叠面积",link:"#计算重叠面积",children:[{level:3,title:"判断交集是否存在",slug:"判断交集是否存在",link:"#判断交集是否存在",children:[]}]},{level:2,title:"代码示例",slug:"代码示例",link:"#代码示例",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结-2",link:"#小结-2",children:[]},{level:2,title:"扫描线",slug:"扫描线",link:"#扫描线",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"详细步骤",slug:"详细步骤",link:"#详细步骤",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap.html",pathLocale:"/",extraFields:[]},{title:"leetcode 扫描线专题 06-leetcode.850 rectangle-area 力扣.850 矩形面积 II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现拆分",slug:"实现拆分",link:"#实现拆分",children:[{level:3,title:"事件初始化",slug:"事件初始化",link:"#事件初始化",children:[]},{level:3,title:"排序规则",slug:"排序规则",link:"#排序规则",children:[]},{level:3,title:"面积计算",slug:"面积计算",link:"#面积计算",children:[]},{level:3,title:"active 区间高度如何计算？",slug:"active-区间高度如何计算",link:"#active-区间高度如何计算",children:[]}]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"1. 为什么高度计算这么麻烦，不能直接是当前有效的最大值 y？",slug:"_1-为什么高度计算这么麻烦-不能直接是当前有效的最大值-y",link:"#_1-为什么高度计算这么麻烦-不能直接是当前有效的最大值-y",children:[{level:3,title:"为什么不能只用最大 y 坐标呢？",slug:"为什么不能只用最大-y-坐标呢",link:"#为什么不能只用最大-y-坐标呢",children:[]},{level:3,title:"为什么需要计算合并的高度？",slug:"为什么需要计算合并的高度",link:"#为什么需要计算合并的高度",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.217 contains-duplicate 力扣.217 存在重复的元素",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"解题思路",slug:"解题思路",link:"#解题思路",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.219 contains-duplicate-ii 力扣.219 存在重复的元素 II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现方式",slug:"实现方式",link:"#实现方式",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.220 contains-duplicate-iii 力扣.220 存在重复的元素 III",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"简单介绍一下 treeSet",slug:"简单介绍一下-treeset",link:"#简单介绍一下-treeset",children:[{level:3,title:"特点：",slug:"特点",link:"#特点",children:[]},{level:3,title:"常用方法：",slug:"常用方法",link:"#常用方法",children:[]},{level:3,title:"适用场景：",slug:"适用场景",link:"#适用场景",children:[]}]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"桶排序解法：",slug:"桶排序解法",link:"#桶排序解法",children:[]}]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[{level:3,title:"代码解释：",slug:"代码解释",link:"#代码解释",children:[]},{level:3,title:"适用场景：",slug:"适用场景-1",link:"#适用场景-1",children:[]}]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"小结",slug:"小结-2",link:"#小结-2",children:[]},{level:2,title:"桶排序的 id 获取问题",slug:"桶排序的-id-获取问题",link:"#桶排序的-id-获取问题",children:[{level:3,title:"1. 桶排序的基本思路",slug:"_1-桶排序的基本思路",link:"#_1-桶排序的基本思路",children:[]},{level:3,title:"2. 负数问题",slug:"_2-负数问题",link:"#_2-负数问题",children:[]},{level:3,title:"3. 计算桶 ID",slug:"_3-计算桶-id",link:"#_3-计算桶-id",children:[]},{level:3,title:"4. 举个例子",slug:"_4-举个例子",link:"#_4-举个例子",children:[]},{level:3,title:"5. 总结",slug:"_5-总结",link:"#_5-总结",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array -01-入门介绍",headers:[{level:2,title:"一、什么是普通数组？",slug:"一、什么是普通数组",link:"#一、什么是普通数组",children:[]},{level:2,title:"二、数组的特点",slug:"二、数组的特点",link:"#二、数组的特点",children:[]},{level:2,title:"三、力扣中数组的常见操作",slug:"三、力扣中数组的常见操作",link:"#三、力扣中数组的常见操作",children:[]},{level:2,title:"四、常见题型分类",slug:"四、常见题型分类",link:"#四、常见题型分类",children:[]},{level:2,title:"五、力扣数组典型题目推荐",slug:"五、力扣数组典型题目推荐",link:"#五、力扣数组典型题目推荐",children:[]},{level:2,title:"六、总结",slug:"六、总结",link:"#六、总结",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array-02-LC189 轮转数组 rotate-array",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"如何用 “反转” 实现这个操作？",slug:"如何用-反转-实现这个操作",link:"#如何用-反转-实现这个操作",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"举个例子快速理解",slug:"举个例子快速理解",link:"#举个例子快速理解",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array-02-LC238 除自身以外数组的乘积  product-of-array-except-self",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array-02-LC41 缺失的第一个正数 first-missing-positive",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思想",slug:"思想",link:"#思想",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程-1",link:"#核心流程-1",children:[]},{level:2,title:"举个例子",slug:"举个例子",link:"#举个例子",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array-02-53. 最大子数组和 maximum-subarray",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"优化1-去掉前缀和数组",slug:"优化1-去掉前缀和数组",link:"#优化1-去掉前缀和数组",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:3,title:"反思",slug:"反思",link:"#反思",children:[]}]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"效果",slug:"效果-5",link:"#效果-5",children:[]},{level:2,title:"效果",slug:"效果-6",link:"#效果-6",children:[]},{level:2,title:"优化版本",slug:"优化版本",link:"#优化版本",children:[{level:3,title:"思路",slug:"思路-6",link:"#思路-6",children:[]},{level:3,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:3,title:"效果",slug:"效果-7",link:"#效果-7",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"思路",slug:"思路-7",link:"#思路-7",children:[]},{level:2,title:"实现",slug:"实现-5",link:"#实现-5",children:[]},{level:2,title:"效果",slug:"效果-8",link:"#效果-8",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"改进？",slug:"改进",link:"#改进",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53.html",pathLocale:"/",extraFields:[]},{title:"力扣 数组 array-02-LC56. 合并区间",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[{level:3,title:"核心代码解释",slug:"核心代码解释",link:"#核心代码解释",children:[]}]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56.html",pathLocale:"/",extraFields:[]},{title:"什么是差分数组（Difference Array）",headers:[{level:2,title:"一、什么是差分数组？",slug:"一、什么是差分数组",link:"#一、什么是差分数组",children:[{level:3,title:"✅ 举个例子：",slug:"✅-举个例子",link:"#✅-举个例子",children:[]}]},{level:2,title:"二、差分数组的原理",slug:"二、差分数组的原理",link:"#二、差分数组的原理",children:[]},{level:2,title:"三、区间加操作怎么做？",slug:"三、区间加操作怎么做",link:"#三、区间加操作怎么做",children:[]},{level:2,title:"在线可视化",slug:"在线可视化",link:"#在线可视化",children:[]},{level:2,title:"四、完整代码实现（Java 示例）",slug:"四、完整代码实现-java-示例",link:"#四、完整代码实现-java-示例",children:[]},{level:2,title:"五、差分数组的应用场景",slug:"五、差分数组的应用场景",link:"#五、差分数组的应用场景",children:[{level:3,title:"✅ 1. 多次区间修改",slug:"✅-1-多次区间修改",link:"#✅-1-多次区间修改",children:[]},{level:3,title:"✅ 2. 多次修改后判断某个位置是否满足条件",slug:"✅-2-多次修改后判断某个位置是否满足条件",link:"#✅-2-多次修改后判断某个位置是否满足条件",children:[]}]},{level:2,title:"六、差分 vs 前缀和 的对比",slug:"六、差分-vs-前缀和-的对比",link:"#六、差分-vs-前缀和-的对比",children:[]},{level:2,title:"七、常见注意点",slug:"七、常见注意点",link:"#七、常见注意点",children:[]},{level:2,title:"八、例题推荐",slug:"八、例题推荐",link:"#八、例题推荐",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro.html",pathLocale:"/",extraFields:[]},{title:"58-差分数组（Difference Array） 1854. 人口最多的年份 maximum-population-year",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"说明",slug:"说明",link:"#说明",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854.html",pathLocale:"/",extraFields:[]},{title:"58-差分数组（Difference Array） 力扣 370. 区间加法",headers:[{level:2,title:"模板方法",slug:"模板方法",link:"#模板方法",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"差分数组",slug:"差分数组",link:"#差分数组",children:[]},{level:2,title:"结合我们的写法",slug:"结合我们的写法",link:"#结合我们的写法",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370.html",pathLocale:"/",extraFields:[]},{title:"58-差分数组（Difference Array） 力扣 1109. 航班预订统计 corporate-flight-bookings",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"差分数组",slug:"差分数组",link:"#差分数组",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109.html",pathLocale:"/",extraFields:[]},{title:"58-差分数组（Difference Array） 力扣 1094. 拼车 car-pooling",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"差分数组",slug:"差分数组",link:"#差分数组",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-入门介绍",headers:[{level:2,title:"🧩 力扣矩阵题型分类总览",slug:"🧩-力扣矩阵题型分类总览",link:"#🧩-力扣矩阵题型分类总览",children:[]},{level:2,title:"🧠 常用基础知识",slug:"🧠-常用基础知识",link:"#🧠-常用基础知识",children:[{level:3,title:"✅ 二维数组声明 & 遍历",slug:"✅-二维数组声明-遍历",link:"#✅-二维数组声明-遍历",children:[]},{level:3,title:"✅ 常见方向数组（上下左右、八方向）",slug:"✅-常见方向数组-上下左右、八方向",link:"#✅-常见方向数组-上下左右、八方向",children:[]}]},{level:2,title:"💡 重点题型详解",slug:"💡-重点题型详解",link:"#💡-重点题型详解",children:[{level:3,title:"1️⃣ 螺旋遍历类",slug:"_1️⃣-螺旋遍历类",link:"#_1️⃣-螺旋遍历类",children:[]},{level:3,title:"2️⃣ 搜索连通块类",slug:"_2️⃣-搜索连通块类",link:"#_2️⃣-搜索连通块类",children:[]},{level:3,title:"3️⃣ 最短路径类（BFS）",slug:"_3️⃣-最短路径类-bfs",link:"#_3️⃣-最短路径类-bfs",children:[]},{level:3,title:"4️⃣ 最小路径和类（动态规划）",slug:"_4️⃣-最小路径和类-动态规划",link:"#_4️⃣-最小路径和类-动态规划",children:[]},{level:3,title:"5️⃣ 模拟类",slug:"_5️⃣-模拟类",link:"#_5️⃣-模拟类",children:[]},{level:3,title:"6️⃣ 前缀和 / 差分类",slug:"_6️⃣-前缀和-差分类",link:"#_6️⃣-前缀和-差分类",children:[]},{level:3,title:"7️⃣ 状态压缩类",slug:"_7️⃣-状态压缩类",link:"#_7️⃣-状态压缩类",children:[]}]},{level:2,title:"📚 推荐刷题顺序（由浅入深）",slug:"📚-推荐刷题顺序-由浅入深",link:"#📚-推荐刷题顺序-由浅入深",children:[]},{level:2,title:"🧰 常见技巧小结",slug:"🧰-常见技巧小结",link:"#🧰-常见技巧小结",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-LC240. 搜索二维矩阵 II search-a-2d-matrix-ii",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[{level:3,title:"想法推导思路：",slug:"想法推导思路",link:"#想法推导思路",children:[]},{level:3,title:"右上角出发",slug:"右上角出发",link:"#右上角出发",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-LC48. 旋转图像 rotate-image",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路：先转置，再翻转",slug:"思路-先转置-再翻转",link:"#思路-先转置-再翻转",children:[]},{level:2,title:"举例：",slug:"举例",link:"#举例",children:[]},{level:2,title:"为什么可以这样做？",slug:"为什么可以这样做",link:"#为什么可以这样做",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"位置变换如下：",slug:"位置变换如下",link:"#位置变换如下",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-LC54 螺旋矩阵 spiral-matrix",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-LC73. 矩阵置零 set-matrix-zeroes",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思想",slug:"思想",link:"#思想",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73.html",pathLocale:"/",extraFields:[]},{title:"力扣矩阵 matrix -01-LC74. 搜索二维矩阵 search-a-2d-matrix",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[{level:3,title:"想法推导思路：",slug:"想法推导思路",link:"#想法推导思路",children:[]},{level:3,title:"右上角出发",slug:"右上角出发",link:"#右上角出发",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"复杂度",slug:"复杂度-3",link:"#复杂度-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74.html",pathLocale:"/",extraFields:[]},{title:"二维前缀和 Prefix Sum Matrix-01-基本概念",headers:[{level:2,title:"是什么？",slug:"是什么",link:"#是什么",children:[]},{level:2,title:"前缀和数组的构造方法",slug:"前缀和数组的构造方法",link:"#前缀和数组的构造方法",children:[]},{level:2,title:"🔍 如何查询任意子矩形和？",slug:"🔍-如何查询任意子矩形和",link:"#🔍-如何查询任意子矩形和",children:[{level:3,title:"一个直观的例子",slug:"一个直观的例子",link:"#一个直观的例子",children:[]}]},{level:2,title:"代码实现模板（Java）",slug:"代码实现模板-java",link:"#代码实现模板-java",children:[{level:3,title:"构造前缀和数组：",slug:"构造前缀和数组",link:"#构造前缀和数组",children:[]},{level:3,title:"查询任意矩形和：",slug:"查询任意矩形和",link:"#查询任意矩形和",children:[]}]},{level:2,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:2,title:"适用场景",slug:"适用场景",link:"#适用场景",children:[]},{level:2,title:"常见的二维前缀和题目列表",slug:"常见的二维前缀和题目列表",link:"#常见的二维前缀和题目列表",children:[]},{level:2,title:"💡 拓展技巧",slug:"💡-拓展技巧",link:"#💡-拓展技巧",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html",pathLocale:"/",extraFields:[]},{title:"Prefix Sum 二维前缀和 LC1314 矩阵区域和 matrix-block-sum",headers:[{level:2,title:"解释下题目的例子",slug:"解释下题目的例子",link:"#解释下题目的例子",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心算法",slug:"核心算法",link:"#核心算法",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314.html",pathLocale:"/",extraFields:[]},{title:"Prefix Sum 二维区域和检索 - LC304 矩阵不可变",headers:[{level:2,title:"📝 题目描述：",slug:"📝-题目描述",link:"#📝-题目描述",children:[{level:3,title:"✅ 方法调用说明：",slug:"✅-方法调用说明",link:"#✅-方法调用说明",children:[]},{level:3,title:"🧮 示例：",slug:"🧮-示例",link:"#🧮-示例",children:[]}]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"可视化理解",slug:"可视化理解",link:"#可视化理解",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304.html",pathLocale:"/",extraFields:[]},{title:"Prefix Sum 二维前缀和 1732. 找到最高海拔 find-the-highest-altitude",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732.html",pathLocale:"/",extraFields:[]},{title:"Prefix Sum 二维前缀和 1277. 统计全为 1 的正方形子矩阵 count-square-submatrices-with-all-ones",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心模板",slug:"核心模板",link:"#核心模板",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路转换",slug:"思路转换",link:"#思路转换",children:[]},{level:2,title:"DP",slug:"dp",link:"#dp",children:[{level:3,title:"疑问",slug:"疑问",link:"#疑问",children:[]}]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"DP 可视化在线",slug:"dp-可视化在线",link:"#dp-可视化在线",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"🧠 一句话理解",slug:"🧠-一句话理解",link:"#🧠-一句话理解",children:[]},{level:2,title:"🧩 常见数组遍历方式总览",slug:"🧩-常见数组遍历方式总览",link:"#🧩-常见数组遍历方式总览",children:[]},{level:2,title:"✅ 一、最常见的基本遍历",slug:"✅-一、最常见的基本遍历",link:"#✅-一、最常见的基本遍历",children:[]},{level:2,title:"✅ 二、双指针遍历（重点）",slug:"✅-二、双指针遍历-重点",link:"#✅-二、双指针遍历-重点",children:[{level:3,title:"🔹 1. 快慢指针（常用于去重、链表）",slug:"🔹-1-快慢指针-常用于去重、链表",link:"#🔹-1-快慢指针-常用于去重、链表",children:[]},{level:3,title:"🔹 2. 左右夹逼（常用于排序数组）",slug:"🔹-2-左右夹逼-常用于排序数组",link:"#🔹-2-左右夹逼-常用于排序数组",children:[]}]},{level:2,title:"✅ 三、滑动窗口遍历",slug:"✅-三、滑动窗口遍历",link:"#✅-三、滑动窗口遍历",children:[]},{level:2,title:"✅ 四、枚举所有子数组/子序列",slug:"✅-四、枚举所有子数组-子序列",link:"#✅-四、枚举所有子数组-子序列",children:[{level:3,title:"🔹 所有子数组 O(n²)",slug:"🔹-所有子数组-o-n2",link:"#🔹-所有子数组-o-n2",children:[]},{level:3,title:"🔹 所有子序列（用回溯）O(2^n)",slug:"🔹-所有子序列-用回溯-o-2-n",link:"#🔹-所有子序列-用回溯-o-2-n",children:[]}]},{level:2,title:"✅ 五、倒序遍历（动态更新时避免污染）",slug:"✅-五、倒序遍历-动态更新时避免污染",link:"#✅-五、倒序遍历-动态更新时避免污染",children:[]},{level:2,title:"✅ 六、按规则模拟遍历",slug:"✅-六、按规则模拟遍历",link:"#✅-六、按规则模拟遍历",children:[{level:3,title:"🔹 例：旋转数组",slug:"🔹-例-旋转数组",link:"#🔹-例-旋转数组",children:[]}]},{level:2,title:"✅ 七、其他：跳跃、螺旋、循环",slug:"✅-七、其他-跳跃、螺旋、循环",link:"#✅-七、其他-跳跃、螺旋、循环",children:[{level:3,title:"🔹 LeetCode 54 螺旋矩阵",slug:"🔹-leetcode-54-螺旋矩阵",link:"#🔹-leetcode-54-螺旋矩阵",children:[]},{level:3,title:"🔹 LeetCode 45 跳跃游戏 II",slug:"🔹-leetcode-45-跳跃游戏-ii",link:"#🔹-leetcode-45-跳跃游戏-ii",children:[]}]},{level:2,title:"🎯 常见遍历技巧 + 力扣题目对照表",slug:"🎯-常见遍历技巧-力扣题目对照表",link:"#🎯-常见遍历技巧-力扣题目对照表",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 T1089 复写零",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"逆流而上",slug:"逆流而上",link:"#逆流而上",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[{level:3,title:"错误的解法1",slug:"错误的解法1",link:"#错误的解法1",children:[]},{level:3,title:"正确解法",slug:"正确解法",link:"#正确解法",children:[]}]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"🎯 常见遍历技巧 + 力扣题目对照表",slug:"🎯-常见遍历技巧-力扣题目对照表",link:"#🎯-常见遍历技巧-力扣题目对照表",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 11. 盛最多水的容器",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 15-三数之和",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"优化1-k 位置判断优化",slug:"优化1-k-位置判断优化",link:"#优化1-k-位置判断优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 T26 删除有序数组中的重复项",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思考",slug:"思考",link:"#思考",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"🎯 常见遍历技巧 + 力扣题目对照表",slug:"🎯-常见遍历技巧-力扣题目对照表",link:"#🎯-常见遍历技巧-力扣题目对照表",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 T27 移除元素",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"问题",slug:"问题",link:"#问题",children:[]},{level:2,title:"原地删除的意思",slug:"原地删除的意思",link:"#原地删除的意思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"双指针",slug:"双指针",link:"#双指针",children:[]},{level:2,title:"举个例子对比下结果",slug:"举个例子对比下结果",link:"#举个例子对比下结果",children:[{level:3,title:"📌 快慢指针（保顺序）",slug:"📌-快慢指针-保顺序",link:"#📌-快慢指针-保顺序",children:[]},{level:3,title:"📌 尾部覆盖（不保顺序）",slug:"📌-尾部覆盖-不保顺序",link:"#📌-尾部覆盖-不保顺序",children:[]}]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 T283 移动零",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 T31 下一个排列 next-permutation",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[{level:3,title:"Step 1：从后往前找到第一个“下降点”",slug:"step-1-从后往前找到第一个-下降点",link:"#step-1-从后往前找到第一个-下降点",children:[]},{level:3,title:"Step 2：在右边找比 nums[i] 大的最小的数",slug:"step-2-在右边找比-nums-i-大的最小的数",link:"#step-2-在右边找比-nums-i-大的最小的数",children:[]},{level:3,title:"Step 3：交换 nums[i] 和 nums[j]",slug:"step-3-交换-nums-i-和-nums-j",link:"#step-3-交换-nums-i-和-nums-j",children:[]},{level:3,title:"Step 4：反转 i+1 到末尾的那一段",slug:"step-4-反转-i-1-到末尾的那一段",link:"#step-4-反转-i-1-到末尾的那一段",children:[]}]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-01-遍历 42. 接雨水",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-03-遍历 Sliding Window 滑动窗口介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"🧠 核心思想",slug:"🧠-核心思想",link:"#🧠-核心思想",children:[]},{level:2,title:"📦 常见类型",slug:"📦-常见类型",link:"#📦-常见类型",children:[{level:3,title:"1. 固定长度窗口",slug:"_1-固定长度窗口",link:"#_1-固定长度窗口",children:[]},{level:3,title:"2. 动态长度窗口（也叫可变窗口）",slug:"_2-动态长度窗口-也叫可变窗口",link:"#_2-动态长度窗口-也叫可变窗口",children:[]}]},{level:2,title:"🧩 适用场景",slug:"🧩-适用场景",link:"#🧩-适用场景",children:[]},{level:2,title:"⏱️ 时间复杂度分析",slug:"⏱️-时间复杂度分析",link:"#⏱️-时间复杂度分析",children:[]},{level:2,title:"🛠️ 实战技巧",slug:"🛠️-实战技巧",link:"#🛠️-实战技巧",children:[]},{level:2,title:"🧭 二者的联系",slug:"🧭-二者的联系",link:"#🧭-二者的联系",children:[]},{level:2,title:"🔍 核心区别对比",slug:"🔍-核心区别对比",link:"#🔍-核心区别对比",children:[]},{level:2,title:"🧠 总结口诀",slug:"🧠-总结口诀",link:"#🧠-总结口诀",children:[{level:3,title:"✅ 简单区分建议：",slug:"✅-简单区分建议",link:"#✅-简单区分建议",children:[]}]},{level:2,title:"🧪 如果你还在纠结，可以记住这三点：",slug:"🧪-如果你还在纠结-可以记住这三点",link:"#🧪-如果你还在纠结-可以记住这三点",children:[]},{level:2,title:"🎯 常见遍历技巧 + 力扣题目对照表",slug:"🎯-常见遍历技巧-力扣题目对照表",link:"#🎯-常见遍历技巧-力扣题目对照表",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T3. 无重复字符的最长子串",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"优化1-用数组替代 set",slug:"优化1-用数组替代-set",link:"#优化1-用数组替代-set",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:3,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-5",link:"#效果-5",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]},{level:2,title:"思路",slug:"思路-6",link:"#思路-6",children:[]},{level:2,title:"实现",slug:"实现-5",link:"#实现-5",children:[]},{level:2,title:"效果",slug:"效果-6",link:"#效果-6",children:[]},{level:2,title:"反思",slug:"反思-4",link:"#反思-4",children:[]},{level:2,title:"模板方法",slug:"模板方法",link:"#模板方法",children:[{level:3,title:"模板",slug:"模板",link:"#模板",children:[]},{level:3,title:"实现",slug:"实现-6",link:"#实现-6",children:[]},{level:3,title:"效果",slug:"效果-7",link:"#效果-7",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 438. 找到字符串中所有字母异位词",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"模板",slug:"模板",link:"#模板",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T643. 子数组最大平均数 I",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"精髓",slug:"精髓",link:"#精髓",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"用队列来等价模拟实现",slug:"用队列来等价模拟实现",link:"#用队列来等价模拟实现",children:[{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之数组遍历-03-遍历滑动窗口 T76 最小覆盖子串",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"优化1-满足条件判断",slug:"优化1-满足条件判断",link:"#优化1-满足条件判断",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"代码",slug:"代码",link:"#代码",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"优化2-移除 stringBuilder",slug:"优化2-移除-stringbuilder",link:"#优化2-移除-stringbuilder",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}]},{level:2,title:"优化三-数组哈希替代 HashMap",slug:"优化三-数组哈希替代-hashmap",link:"#优化三-数组哈希替代-hashmap",children:[{level:3,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-5",link:"#效果-5",children:[]}]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76.html",pathLocale:"/",extraFields:[]},{title:"leetcode 基础篇专题数组矩阵 array matrix 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣基础数据结构之矩阵",slug:"详细介绍一下力扣基础数据结构之矩阵",link:"#详细介绍一下力扣基础数据结构之矩阵",children:[]},{level:2,title:"一、矩阵基础知识",slug:"一、矩阵基础知识",link:"#一、矩阵基础知识",children:[]},{level:2,title:"二、常见题型分类",slug:"二、常见题型分类",link:"#二、常见题型分类",children:[{level:3,title:"1. 遍历类",slug:"_1-遍历类",link:"#_1-遍历类",children:[]},{level:3,title:"2. 搜索类（DFS / BFS）",slug:"_2-搜索类-dfs-bfs",link:"#_2-搜索类-dfs-bfs",children:[]},{level:3,title:"3. 前缀和类",slug:"_3-前缀和类",link:"#_3-前缀和类",children:[]},{level:3,title:"4. 模拟类",slug:"_4-模拟类",link:"#_4-模拟类",children:[]},{level:3,title:"5. 动态规划类（DP）",slug:"_5-动态规划类-dp",link:"#_5-动态规划类-dp",children:[]},{level:3,title:"6. 位运算 / 哈希辅助类",slug:"_6-位运算-哈希辅助类",link:"#_6-位运算-哈希辅助类",children:[]}]},{level:2,title:"三、矩阵常用技巧",slug:"三、矩阵常用技巧",link:"#三、矩阵常用技巧",children:[]},{level:2,title:"四、面试中的高频矩阵题",slug:"四、面试中的高频矩阵题",link:"#四、面试中的高频矩阵题",children:[]},{level:2,title:"五、推荐刷题顺序（从简单到复杂）",slug:"五、推荐刷题顺序-从简单到复杂",link:"#五、推荐刷题顺序-从简单到复杂",children:[]}],path:"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之广度优先遍历 BFS Breadth-First Search 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之广度优先遍历",slug:"详细介绍一下力扣算法之广度优先遍历",link:"#详细介绍一下力扣算法之广度优先遍历",children:[]},{level:2,title:"🌊 一、什么是广度优先遍历（BFS）？",slug:"🌊-一、什么是广度优先遍历-bfs",link:"#🌊-一、什么是广度优先遍历-bfs",children:[]},{level:2,title:"🔁 二、BFS 的基本原理",slug:"🔁-二、bfs-的基本原理",link:"#🔁-二、bfs-的基本原理",children:[]},{level:2,title:"🧩 三、BFS 模板写法",slug:"🧩-三、bfs-模板写法",link:"#🧩-三、bfs-模板写法",children:[{level:3,title:"✅ 通用写法（图、网格、树都通用）",slug:"✅-通用写法-图、网格、树都通用",link:"#✅-通用写法-图、网格、树都通用",children:[]}]},{level:2,title:"🛠 四、BFS 应用场景",slug:"🛠-四、bfs-应用场景",link:"#🛠-四、bfs-应用场景",children:[]},{level:2,title:"📘 五、力扣常见 BFS 模板题",slug:"📘-五、力扣常见-bfs-模板题",link:"#📘-五、力扣常见-bfs-模板题",children:[{level:3,title:"✅ 1. 最基础：树的层序遍历",slug:"✅-1-最基础-树的层序遍历",link:"#✅-1-最基础-树的层序遍历",children:[]},{level:3,title:"✅ 2. 网格最短路径：经典 BFS",slug:"✅-2-网格最短路径-经典-bfs",link:"#✅-2-网格最短路径-经典-bfs",children:[]},{level:3,title:"✅ 3. 字符串变换类",slug:"✅-3-字符串变换类",link:"#✅-3-字符串变换类",children:[]}]},{level:2,title:"💡 六、BFS 的典型变种",slug:"💡-六、bfs-的典型变种",link:"#💡-六、bfs-的典型变种",children:[]},{level:2,title:"🧠 七、常见错误 & 小技巧",slug:"🧠-七、常见错误-小技巧",link:"#🧠-七、常见错误-小技巧",children:[]},{level:2,title:"🔍 八、DFS vs BFS 对比",slug:"🔍-八、dfs-vs-bfs-对比",link:"#🔍-八、dfs-vs-bfs-对比",children:[]},{level:2,title:"📚 九、LeetCode 高频 BFS 题推荐",slug:"📚-九、leetcode-高频-bfs-题推荐",link:"#📚-九、leetcode-高频-bfs-题推荐",children:[]}],path:"/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 005 广度优先搜索（BFS，Breadth-First Search）",headers:[{level:2,title:"BFS 是什么",slug:"bfs-是什么",link:"#bfs-是什么",children:[{level:3,title:"广度优先搜索 (BFS) 介绍",slug:"广度优先搜索-bfs-介绍",link:"#广度优先搜索-bfs-介绍",children:[]},{level:3,title:"BFS 的应用场景：",slug:"bfs-的应用场景",link:"#bfs-的应用场景",children:[]},{level:3,title:"BFS 的常见数据结构：",slug:"bfs-的常见数据结构",link:"#bfs-的常见数据结构",children:[]},{level:3,title:"BFS 的模板方法（以图为例）",slug:"bfs-的模板方法-以图为例",link:"#bfs-的模板方法-以图为例",children:[]},{level:3,title:"解释：",slug:"解释",link:"#解释",children:[]},{level:3,title:"BFS 变种：",slug:"bfs-变种",link:"#bfs-变种",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro.html",pathLocale:"/",extraFields:[]},{title:"java 位运算介绍 bit operator base intro",headers:[{level:2,title:"计算机只有 0 和 1",slug:"计算机只有-0-和-1",link:"#计算机只有-0-和-1",children:[]},{level:2,title:"bit、byte、word",slug:"bit、byte、word",link:"#bit、byte、word",children:[]},{level:2,title:"32",slug:"_32",link:"#_32",children:[]},{level:2,title:"64",slug:"_64",link:"#_64",children:[]},{level:2,title:"符号位",slug:"符号位",link:"#符号位",children:[]},{level:2,title:"原码",slug:"原码",link:"#原码",children:[]},{level:2,title:"反码",slug:"反码",link:"#反码",children:[]},{level:2,title:"补码",slug:"补码",link:"#补码",children:[]},{level:2,title:"实例",slug:"实例",link:"#实例",children:[]},{level:2,title:"运算符",slug:"运算符",link:"#运算符",children:[]},{level:2,title:"& 与运算符",slug:"与运算符",link:"#与运算符",children:[]},{level:2,title:"| 或运算符",slug:"或运算符",link:"#或运算符",children:[]},{level:2,title:"~ 取反运算符",slug:"取反运算符",link:"#取反运算符",children:[]},{level:2,title:"^ 异或运算符",slug:"异或运算符",link:"#异或运算符",children:[]},{level:2,title:">> 右移运算符",slug:"右移运算符",link:"#右移运算符",children:[]},{level:2,title:"<< 左移运算符",slug:"左移运算符",link:"#左移运算符",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html",pathLocale:"/",extraFields:[]},{title:"java 位运算转换 bit operator convert",headers:[{level:2,title:"借助 BigInteger",slug:"借助-biginteger",link:"#借助-biginteger",children:[]},{level:2,title:"jdk1.8 的方法",slug:"jdk1-8-的方法",link:"#jdk1-8-的方法",children:[]},{level:2,title:"最大值问题",slug:"最大值问题",link:"#最大值问题",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"解释",slug:"解释",link:"#解释",children:[]},{level:2,title:"将int转换为byte[]：",slug:"将int转换为byte",link:"#将int转换为byte",children:[]},{level:2,title:"byteToInt64",slug:"bytetoint64",link:"#bytetoint64",children:[]},{level:2,title:"byte 与 int 互转",slug:"byte-与-int-互转",link:"#byte-与-int-互转",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert.html",pathLocale:"/",extraFields:[]},{title:"leetcode bit operator 位运算入门介绍",headers:[{level:2,title:"基本介绍",slug:"基本介绍",link:"#基本介绍",children:[{level:3,title:"1. 按位与 (&)",slug:"_1-按位与",link:"#_1-按位与",children:[]},{level:3,title:"2. 按位或 (|)",slug:"_2-按位或",link:"#_2-按位或",children:[]},{level:3,title:"3. 按位异或 (^)",slug:"_3-按位异或",link:"#_3-按位异或",children:[]},{level:3,title:"4. 按位取反 (~)",slug:"_4-按位取反",link:"#_4-按位取反",children:[]},{level:3,title:"5. 左移 (<<)",slug:"_5-左移",link:"#_5-左移",children:[]},{level:3,title:"6. 右移 (>>)",slug:"_6-右移",link:"#_6-右移",children:[]},{level:3,title:"7. 无符号右移 (>>>)",slug:"_7-无符号右移",link:"#_7-无符号右移",children:[]},{level:3,title:"8. 移位运算与溢出",slug:"_8-移位运算与溢出",link:"#_8-移位运算与溢出",children:[]}]},{level:2,title:"记忆的技巧",slug:"记忆的技巧",link:"#记忆的技巧",children:[{level:3,title:"1. 理解基本原理与运算性质",slug:"_1-理解基本原理与运算性质",link:"#_1-理解基本原理与运算性质",children:[]},{level:3,title:"2. 理解位运算在实际问题中的应用",slug:"_2-理解位运算在实际问题中的应用",link:"#_2-理解位运算在实际问题中的应用",children:[]},{level:3,title:"3. 记住一些常用模式",slug:"_3-记住一些常用模式",link:"#_3-记住一些常用模式",children:[]}]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 位运算",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"位运算",slug:"位运算",link:"#位运算",children:[]},{level:2,title:"异或",slug:"异或",link:"#异或",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II 位运算",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"算法实现",slug:"算法实现",link:"#算法实现",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"解释一下",slug:"解释一下",link:"#解释一下",children:[{level:3,title:"问题回顾",slug:"问题回顾",link:"#问题回顾",children:[]},{level:3,title:"解法思路",slug:"解法思路",link:"#解法思路",children:[]},{level:3,title:"位运算的作用",slug:"位运算的作用",link:"#位运算的作用",children:[]},{level:3,title:"步骤解析",slug:"步骤解析",link:"#步骤解析",children:[]}]},{level:2,title:"举个例子",slug:"举个例子",link:"#举个例子",children:[{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.260 single-number-iii 力扣.260 只出现一次的数字III",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"个人思路",slug:"个人思路",link:"#个人思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.287 find-the-duplicate-number 力扣.287 寻找重复数",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"思维",slug:"思维",link:"#思维",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number.html",pathLocale:"/",extraFields:[]},{title:"leetcode 002-leetcode.442 find-all-duplicates-in-an-array 力扣.442 数组中重复的数据",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"区别",slug:"区别",link:"#区别",children:[]},{level:2,title:"代码",slug:"代码",link:"#代码",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"代码",slug:"代码-1",link:"#代码-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"交换",slug:"交换",link:"#交换",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]}],path:"/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之单调栈 Monotonic Stack",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之 Monotonic Stack",slug:"详细介绍一下力扣数据结构之-monotonic-stack",link:"#详细介绍一下力扣数据结构之-monotonic-stack",children:[]},{level:2,title:"🧠 一句话理解什么是单调栈？",slug:"🧠-一句话理解什么是单调栈",link:"#🧠-一句话理解什么是单调栈",children:[]},{level:2,title:"🧱 单调栈的结构和分类",slug:"🧱-单调栈的结构和分类",link:"#🧱-单调栈的结构和分类",children:[]},{level:2,title:"👀 常见应用场景",slug:"👀-常见应用场景",link:"#👀-常见应用场景",children:[]},{level:2,title:"🔁 单调栈的通用模板（以单调递增栈为例）",slug:"🔁-单调栈的通用模板-以单调递增栈为例",link:"#🔁-单调栈的通用模板-以单调递增栈为例",children:[]},{level:2,title:"📘 示例题讲解：LeetCode 739. 每日温度",slug:"📘-示例题讲解-leetcode-739-每日温度",link:"#📘-示例题讲解-leetcode-739-每日温度",children:[{level:3,title:"✅ 理解点：",slug:"✅-理解点",link:"#✅-理解点",children:[]}]},{level:2,title:"🔍 单调栈 vs 普通栈",slug:"🔍-单调栈-vs-普通栈",link:"#🔍-单调栈-vs-普通栈",children:[]},{level:2,title:"🧠 单调栈常见变种",slug:"🧠-单调栈常见变种",link:"#🧠-单调栈常见变种",children:[]},{level:2,title:"🧪 小练习题推荐",slug:"🧪-小练习题推荐",link:"#🧪-小练习题推荐",children:[]},{level:2,title:"🔚 总结",slug:"🔚-总结",link:"#🔚-总结",children:[]},{level:2,title:"我日常使用 java 是不是可以用优先级队列替代",slug:"我日常使用-java-是不是可以用优先级队列替代",link:"#我日常使用-java-是不是可以用优先级队列替代",children:[]},{level:2,title:"🧾 简明结论：",slug:"🧾-简明结论",link:"#🧾-简明结论",children:[]},{level:2,title:"✅ 为什么不能替代？",slug:"✅-为什么不能替代",link:"#✅-为什么不能替代",children:[{level:3,title:"📌 1. 功能不同",slug:"📌-1-功能不同",link:"#📌-1-功能不同",children:[]},{level:3,title:"📌 2. 举例说明（用错就错）",slug:"📌-2-举例说明-用错就错",link:"#📌-2-举例说明-用错就错",children:[]}]},{level:2,title:"🔍 容易误用的场景对比",slug:"🔍-容易误用的场景对比",link:"#🔍-容易误用的场景对比",children:[]},{level:2,title:"🧠 什么时候用单调栈，什么时候用 PriorityQueue？",slug:"🧠-什么时候用单调栈-什么时候用-priorityqueue",link:"#🧠-什么时候用单调栈-什么时候用-priorityqueue",children:[]},{level:2,title:"🧪 实战建议",slug:"🧪-实战建议",link:"#🧪-实战建议",children:[{level:3,title:"❓“我想快速找到一个最大/最小值” → ✅ 用 PriorityQueue",slug:"❓-我想快速找到一个最大-最小值-→-✅-用-priorityqueue",link:"#❓-我想快速找到一个最大-最小值-→-✅-用-priorityqueue",children:[]},{level:3,title:"❓“我想找一个值的左边/右边第一个比它大/小的数” → ✅ 用单调栈",slug:"❓-我想找一个值的左边-右边第一个比它大-小的数-→-✅-用单调栈",link:"#❓-我想找一个值的左边-右边第一个比它大-小的数-→-✅-用单调栈",children:[]}]},{level:2,title:"🧭 总结一句话：",slug:"🧭-总结一句话",link:"#🧭-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之队列 queue 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之队列",slug:"详细介绍一下力扣数据结构之队列",link:"#详细介绍一下力扣数据结构之队列",children:[]},{level:2,title:"🧱 一、队列基础知识",slug:"🧱-一、队列基础知识",link:"#🧱-一、队列基础知识",children:[]},{level:2,title:"🛠️ 二、Java 中常见队列实现",slug:"🛠️-二、java-中常见队列实现",link:"#🛠️-二、java-中常见队列实现",children:[]},{level:2,title:"🔁 三、队列的常见应用场景",slug:"🔁-三、队列的常见应用场景",link:"#🔁-三、队列的常见应用场景",children:[]},{level:2,title:"📘 四、LeetCode 高频队列题型",slug:"📘-四、leetcode-高频队列题型",link:"#📘-四、leetcode-高频队列题型",children:[{level:3,title:"✅ 普通队列（BFS）",slug:"✅-普通队列-bfs",link:"#✅-普通队列-bfs",children:[]},{level:3,title:"🧮 优先队列（堆）",slug:"🧮-优先队列-堆",link:"#🧮-优先队列-堆",children:[]},{level:3,title:"📊 单调队列（滑动窗口）",slug:"📊-单调队列-滑动窗口",link:"#📊-单调队列-滑动窗口",children:[]}]},{level:2,title:"🧰 五、经典模板总结",slug:"🧰-五、经典模板总结",link:"#🧰-五、经典模板总结",children:[{level:3,title:"1️⃣ BFS 层序遍历（LC 102）",slug:"_1️⃣-bfs-层序遍历-lc-102",link:"#_1️⃣-bfs-层序遍历-lc-102",children:[]},{level:3,title:"2️⃣ 单调队列（LC 239）",slug:"_2️⃣-单调队列-lc-239",link:"#_2️⃣-单调队列-lc-239",children:[]},{level:3,title:"3️⃣ 优先队列（最小堆）",slug:"_3️⃣-优先队列-最小堆",link:"#_3️⃣-优先队列-最小堆",children:[]}]},{level:2,title:"⚠️ 六、注意事项",slug:"⚠️-六、注意事项",link:"#⚠️-六、注意事项",children:[]},{level:2,title:"🧭 七、刷题路线推荐（基础 → 进阶）",slug:"🧭-七、刷题路线推荐-基础-→-进阶",link:"#🧭-七、刷题路线推荐-基础-→-进阶",children:[{level:3,title:"🔹 基础（掌握基本操作）",slug:"🔹-基础-掌握基本操作",link:"#🔹-基础-掌握基本操作",children:[]},{level:3,title:"🔸 进阶（掌握单调队列/优先队列）",slug:"🔸-进阶-掌握单调队列-优先队列",link:"#🔸-进阶-掌握单调队列-优先队列",children:[]}]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之线段树 segment-tree 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之线段树",slug:"详细介绍一下力扣数据结构之线段树",link:"#详细介绍一下力扣数据结构之线段树",children:[]},{level:2,title:"🎯 一、线段树是什么？",slug:"🎯-一、线段树是什么",link:"#🎯-一、线段树是什么",children:[{level:3,title:"对比其他方法：",slug:"对比其他方法",link:"#对比其他方法",children:[]}]},{level:2,title:"📦 二、线段树结构（以求区间和为例）",slug:"📦-二、线段树结构-以求区间和为例",link:"#📦-二、线段树结构-以求区间和为例",children:[]},{level:2,title:"🧰 三、线段树支持的操作",slug:"🧰-三、线段树支持的操作",link:"#🧰-三、线段树支持的操作",children:[]},{level:2,title:"✅ 四、线段树的核心实现（以区间求和为例）",slug:"✅-四、线段树的核心实现-以区间求和为例",link:"#✅-四、线段树的核心实现-以区间求和为例",children:[{level:3,title:"Java 版本（数组实现）",slug:"java-版本-数组实现",link:"#java-版本-数组实现",children:[]}]},{level:2,title:"🧠 五、LeetCode 常见题型和应用",slug:"🧠-五、leetcode-常见题型和应用",link:"#🧠-五、leetcode-常见题型和应用",children:[]},{level:2,title:"🔍 六、线段树适合解决的问题",slug:"🔍-六、线段树适合解决的问题",link:"#🔍-六、线段树适合解决的问题",children:[]},{level:2,title:"💎 七、进阶功能：懒标记（Lazy Propagation）",slug:"💎-七、进阶功能-懒标记-lazy-propagation",link:"#💎-七、进阶功能-懒标记-lazy-propagation",children:[{level:3,title:"关键点：",slug:"关键点",link:"#关键点",children:[]}]},{level:2,title:"✨ 八、常见技巧",slug:"✨-八、常见技巧",link:"#✨-八、常见技巧",children:[]},{level:2,title:"📌 九、和其他数据结构比较",slug:"📌-九、和其他数据结构比较",link:"#📌-九、和其他数据结构比较",children:[]},{level:2,title:"✅ 十、总结",slug:"✅-十、总结",link:"#✅-十、总结",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之后缀数组 suffix-array 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之后缀数组",slug:"详细介绍一下力扣数据结构之后缀数组",link:"#详细介绍一下力扣数据结构之后缀数组",children:[]},{level:2,title:"一、什么是后缀数组？",slug:"一、什么是后缀数组",link:"#一、什么是后缀数组",children:[{level:3,title:"例如：",slug:"例如",link:"#例如",children:[]}]},{level:2,title:"二、后缀数组的作用",slug:"二、后缀数组的作用",link:"#二、后缀数组的作用",children:[]},{level:2,title:"三、后缀数组的构建方法",slug:"三、后缀数组的构建方法",link:"#三、后缀数组的构建方法",children:[{level:3,title:"1. 暴力排序（适合小数据）",slug:"_1-暴力排序-适合小数据",link:"#_1-暴力排序-适合小数据",children:[]},{level:3,title:"2. 基于倍增算法（O(n log² n)）",slug:"_2-基于倍增算法-o-n-log2-n",link:"#_2-基于倍增算法-o-n-log2-n",children:[]},{level:3,title:"3. DC3算法（线性时间构建，复杂）",slug:"_3-dc3算法-线性时间构建-复杂",link:"#_3-dc3算法-线性时间构建-复杂",children:[]}]},{level:2,title:"四、后缀数组构建示例（倍增算法Java简版）",slug:"四、后缀数组构建示例-倍增算法java简版",link:"#四、后缀数组构建示例-倍增算法java简版",children:[]},{level:2,title:"五、最长公共前缀数组（LCP）",slug:"五、最长公共前缀数组-lcp",link:"#五、最长公共前缀数组-lcp",children:[]},{level:2,title:"六、后缀数组的典型应用题（LeetCode）",slug:"六、后缀数组的典型应用题-leetcode",link:"#六、后缀数组的典型应用题-leetcode",children:[]},{level:2,title:"七、后缀数组优缺点",slug:"七、后缀数组优缺点",link:"#七、后缀数组优缺点",children:[]},{level:2,title:"八、总结",slug:"八、总结",link:"#八、总结",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之前缀树（Trie，又称字典树）01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之前缀树",slug:"详细介绍一下力扣数据结构之前缀树",link:"#详细介绍一下力扣数据结构之前缀树",children:[]},{level:2,title:"🧠 一、前缀树是什么？",slug:"🧠-一、前缀树是什么",link:"#🧠-一、前缀树是什么",children:[{level:3,title:"举例：",slug:"举例",link:"#举例",children:[]}]},{level:2,title:"📦 二、前缀树的基本操作",slug:"📦-二、前缀树的基本操作",link:"#📦-二、前缀树的基本操作",children:[]},{level:2,title:"🔧 三、Java 实现模板",slug:"🔧-三、java-实现模板",link:"#🔧-三、java-实现模板",children:[]},{level:2,title:"🚀 四、时间复杂度分析",slug:"🚀-四、时间复杂度分析",link:"#🚀-四、时间复杂度分析",children:[]},{level:2,title:"💡 五、前缀树适合解决的问题",slug:"💡-五、前缀树适合解决的问题",link:"#💡-五、前缀树适合解决的问题",children:[]},{level:2,title:"📚 六、变种 Trie",slug:"📚-六、变种-trie",link:"#📚-六、变种-trie",children:[]},{level:2,title:"✨ 七、常见应用场景总结",slug:"✨-七、常见应用场景总结",link:"#✨-七、常见应用场景总结",children:[]},{level:2,title:"📌 八、和其他数据结构对比",slug:"📌-八、和其他数据结构对比",link:"#📌-八、和其他数据结构对比",children:[]},{level:2,title:"✅ 九、总结",slug:"✅-九、总结",link:"#✅-九、总结",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之 并查集（Union-Find Set / Disjoint Set Union, DSU） 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之并查集",slug:"详细介绍一下力扣数据结构之并查集",link:"#详细介绍一下力扣数据结构之并查集",children:[]},{level:2,title:"🔧 一、并查集是什么？",slug:"🔧-一、并查集是什么",link:"#🔧-一、并查集是什么",children:[]},{level:2,title:"🧠 二、并查集的核心思想",slug:"🧠-二、并查集的核心思想",link:"#🧠-二、并查集的核心思想",children:[]},{level:2,title:"🚀 三、两大优化技巧（高频面试知识）",slug:"🚀-三、两大优化技巧-高频面试知识",link:"#🚀-三、两大优化技巧-高频面试知识",children:[{level:3,title:"✅ 1. 路径压缩（Path Compression）",slug:"✅-1-路径压缩-path-compression",link:"#✅-1-路径压缩-path-compression",children:[]},{level:3,title:"✅ 2. 按秩合并 / 按大小合并（Union by Rank/Size）",slug:"✅-2-按秩合并-按大小合并-union-by-rank-size",link:"#✅-2-按秩合并-按大小合并-union-by-rank-size",children:[]}]},{level:2,title:"📚 四、典型应用场景",slug:"📚-四、典型应用场景",link:"#📚-四、典型应用场景",children:[]},{level:2,title:"🧩 五、Java 并查集模板代码（推荐背熟）",slug:"🧩-五、java-并查集模板代码-推荐背熟",link:"#🧩-五、java-并查集模板代码-推荐背熟",children:[]},{level:2,title:"🔍 六、LeetCode 经典题型解析",slug:"🔍-六、leetcode-经典题型解析",link:"#🔍-六、leetcode-经典题型解析",children:[{level:3,title:"✅ 1. 547. 省份数量（等价于图中连通块）",slug:"✅-1-547-省份数量-等价于图中连通块",link:"#✅-1-547-省份数量-等价于图中连通块",children:[]}]},{level:2,title:"✨ 七、并查集 VS DFS/BFS",slug:"✨-七、并查集-vs-dfs-bfs",link:"#✨-七、并查集-vs-dfs-bfs",children:[]},{level:2,title:"🧠 八、进阶变种",slug:"🧠-八、进阶变种",link:"#🧠-八、进阶变种",children:[]},{level:2,title:"✅ 九、总结",slug:"✅-九、总结",link:"#✅-九、总结",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之计数 Counting 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣技巧之计数 counting",slug:"详细介绍一下力扣技巧之计数-counting",link:"#详细介绍一下力扣技巧之计数-counting",children:[]},{level:2,title:"🧠 一、核心思想",slug:"🧠-一、核心思想",link:"#🧠-一、核心思想",children:[]},{level:2,title:"🛠️ 二、常见实现方式",slug:"🛠️-二、常见实现方式",link:"#🛠️-二、常见实现方式",children:[]},{level:2,title:"📚 三、典型应用场景",slug:"📚-三、典型应用场景",link:"#📚-三、典型应用场景",children:[{level:3,title:"✅ 1. 出现次数统计（最经典）",slug:"✅-1-出现次数统计-最经典",link:"#✅-1-出现次数统计-最经典",children:[]},{level:3,title:"✅ 2. 判断是否为变位词",slug:"✅-2-判断是否为变位词",link:"#✅-2-判断是否为变位词",children:[]},{level:3,title:"✅ 3. 判断子数组是否满足某种计数关系",slug:"✅-3-判断子数组是否满足某种计数关系",link:"#✅-3-判断子数组是否满足某种计数关系",children:[]},{level:3,title:"✅ 4. 出现奇数次 or 只出现一次的元素",slug:"✅-4-出现奇数次-or-只出现一次的元素",link:"#✅-4-出现奇数次-or-只出现一次的元素",children:[]},{level:3,title:"✅ 5. 前缀计数、后缀计数、差分统计",slug:"✅-5-前缀计数、后缀计数、差分统计",link:"#✅-5-前缀计数、后缀计数、差分统计",children:[]}]},{level:2,title:"⚠️ 四、常见注意事项",slug:"⚠️-四、常见注意事项",link:"#⚠️-四、常见注意事项",children:[]},{level:2,title:"📌 五、计数技巧的变种/拓展",slug:"📌-五、计数技巧的变种-拓展",link:"#📌-五、计数技巧的变种-拓展",children:[]},{level:2,title:"🧾 总结一句话",slug:"🧾-总结一句话",link:"#🧾-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之深度优先遍历 DFS Depth-First Search 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之深度优先遍历",slug:"详细介绍一下力扣算法之深度优先遍历",link:"#详细介绍一下力扣算法之深度优先遍历",children:[]},{level:2,title:"🧠 一、什么是深度优先遍历（DFS）？",slug:"🧠-一、什么是深度优先遍历-dfs",link:"#🧠-一、什么是深度优先遍历-dfs",children:[]},{level:2,title:"🧩 二、DFS 的核心特性",slug:"🧩-二、dfs-的核心特性",link:"#🧩-二、dfs-的核心特性",children:[]},{level:2,title:"🔁 三、DFS 模板写法",slug:"🔁-三、dfs-模板写法",link:"#🔁-三、dfs-模板写法",children:[{level:3,title:"✅ 1. 图/网格搜索（二维方向）",slug:"✅-1-图-网格搜索-二维方向",link:"#✅-1-图-网格搜索-二维方向",children:[]},{level:3,title:"✅ 2. 回溯型 DFS（如排列、组合、子集）",slug:"✅-2-回溯型-dfs-如排列、组合、子集",link:"#✅-2-回溯型-dfs-如排列、组合、子集",children:[]}]},{level:2,title:"🧰 四、DFS 应用场景总结",slug:"🧰-四、dfs-应用场景总结",link:"#🧰-四、dfs-应用场景总结",children:[]},{level:2,title:"🌈 五、DFS 与其他算法的关系",slug:"🌈-五、dfs-与其他算法的关系",link:"#🌈-五、dfs-与其他算法的关系",children:[]},{level:2,title:"🎯 六、力扣经典 DFS 题型总结",slug:"🎯-六、力扣经典-dfs-题型总结",link:"#🎯-六、力扣经典-dfs-题型总结",children:[{level:3,title:"✅ 1. 树型 DFS",slug:"✅-1-树型-dfs",link:"#✅-1-树型-dfs",children:[]},{level:3,title:"✅ 2. 网格 DFS",slug:"✅-2-网格-dfs",link:"#✅-2-网格-dfs",children:[]},{level:3,title:"✅ 3. 回溯（DFS + 回退）",slug:"✅-3-回溯-dfs-回退",link:"#✅-3-回溯-dfs-回退",children:[]},{level:3,title:"✅ 4. 构造类 DFS",slug:"✅-4-构造类-dfs",link:"#✅-4-构造类-dfs",children:[]}]},{level:2,title:"🧪 七、DFS 技巧总结",slug:"🧪-七、dfs-技巧总结",link:"#🧪-七、dfs-技巧总结",children:[]},{level:2,title:"🚫 八、常见错误",slug:"🚫-八、常见错误",link:"#🚫-八、常见错误",children:[]},{level:2,title:"📌 九、DFS 和 BFS 对比",slug:"📌-九、dfs-和-bfs-对比",link:"#📌-九、dfs-和-bfs-对比",children:[]},{level:2,title:"📚 十、DFS 练习路线推荐（递进式）",slug:"📚-十、dfs-练习路线推荐-递进式",link:"#📚-十、dfs-练习路线推荐-递进式",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/dfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之分治 divide-and-conquer 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之分治",slug:"详细介绍一下力扣算法之分治",link:"#详细介绍一下力扣算法之分治",children:[]},{level:2,title:"🧠 一、什么是分治算法？",slug:"🧠-一、什么是分治算法",link:"#🧠-一、什么是分治算法",children:[{level:3,title:"通俗类比：",slug:"通俗类比",link:"#通俗类比",children:[]}]},{level:2,title:"🧩 二、分治算法的特征",slug:"🧩-二、分治算法的特征",link:"#🧩-二、分治算法的特征",children:[]},{level:2,title:"⚙️ 三、经典应用场景",slug:"⚙️-三、经典应用场景",link:"#⚙️-三、经典应用场景",children:[]},{level:2,title:"💡 四、和其他算法的对比",slug:"💡-四、和其他算法的对比",link:"#💡-四、和其他算法的对比",children:[]},{level:2,title:"🔨 五、力扣常见题型与模板",slug:"🔨-五、力扣常见题型与模板",link:"#🔨-五、力扣常见题型与模板",children:[{level:3,title:"✅ 1. 归并排序",slug:"✅-1-归并排序",link:"#✅-1-归并排序",children:[]},{level:3,title:"✅ 2. 求逆序对个数",slug:"✅-2-求逆序对个数",link:"#✅-2-求逆序对个数",children:[]},{level:3,title:"✅ 3. 二分查找",slug:"✅-3-二分查找",link:"#✅-3-二分查找",children:[]},{level:3,title:"✅ 4. 树结构的分治处理",slug:"✅-4-树结构的分治处理",link:"#✅-4-树结构的分治处理",children:[]},{level:3,title:"✅ 5. 大数快速幂",slug:"✅-5-大数快速幂",link:"#✅-5-大数快速幂",children:[]}]},{level:2,title:"🧱 六、分治的模板（递归通用框架）",slug:"🧱-六、分治的模板-递归通用框架",link:"#🧱-六、分治的模板-递归通用框架",children:[]},{level:2,title:"⚠️ 七、使用分治的注意事项",slug:"⚠️-七、使用分治的注意事项",link:"#⚠️-七、使用分治的注意事项",children:[]},{level:2,title:"📘 八、推荐刷题顺序",slug:"📘-八、推荐刷题顺序",link:"#📘-八、推荐刷题顺序",children:[]},{level:2,title:"✅ 九、总结一句话",slug:"✅-九、总结一句话",link:"#✅-九、总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/divide-and-conquer/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之动态规划",slug:"详细介绍一下力扣算法之动态规划",link:"#详细介绍一下力扣算法之动态规划",children:[]},{level:2,title:"🔍 一、什么是动态规划？",slug:"🔍-一、什么是动态规划",link:"#🔍-一、什么是动态规划",children:[{level:3,title:"✅ 具备以下几个特点的问题，适合用 DP：",slug:"✅-具备以下几个特点的问题-适合用-dp",link:"#✅-具备以下几个特点的问题-适合用-dp",children:[]}]},{level:2,title:"🎯 二、DP 问题的常见分类（按状态和结构）",slug:"🎯-二、dp-问题的常见分类-按状态和结构",link:"#🎯-二、dp-问题的常见分类-按状态和结构",children:[{level:3,title:"✅ 1. 按维度分类",slug:"✅-1-按维度分类",link:"#✅-1-按维度分类",children:[]},{level:3,title:"✅ 2. 按题型场景分类",slug:"✅-2-按题型场景分类",link:"#✅-2-按题型场景分类",children:[]}]},{level:2,title:"🧪 三、动态规划的五步通用套路（核心！）",slug:"🧪-三、动态规划的五步通用套路-核心",link:"#🧪-三、动态规划的五步通用套路-核心",children:[{level:3,title:"🧩 第一步：定义状态 dp[i] 或 dp[i][j]",slug:"🧩-第一步-定义状态-dp-i-或-dp-i-j",link:"#🧩-第一步-定义状态-dp-i-或-dp-i-j",children:[]},{level:3,title:"🧩 第二步：状态转移方程",slug:"🧩-第二步-状态转移方程",link:"#🧩-第二步-状态转移方程",children:[]},{level:3,title:"🧩 第三步：初始条件（base case）",slug:"🧩-第三步-初始条件-base-case",link:"#🧩-第三步-初始条件-base-case",children:[]},{level:3,title:"🧩 第四步：遍历顺序（从小到大？从后往前？）",slug:"🧩-第四步-遍历顺序-从小到大-从后往前",link:"#🧩-第四步-遍历顺序-从小到大-从后往前",children:[]},{level:3,title:"🧩 第五步：返回值",slug:"🧩-第五步-返回值",link:"#🧩-第五步-返回值",children:[]}]},{level:2,title:"🧭 四、几个经典题目讲解（快速理解 DP）",slug:"🧭-四、几个经典题目讲解-快速理解-dp",link:"#🧭-四、几个经典题目讲解-快速理解-dp",children:[{level:3,title:"🎯 例题一：70. 爬楼梯",slug:"🎯-例题一-70-爬楼梯",link:"#🎯-例题一-70-爬楼梯",children:[]},{level:3,title:"🎯 例题二：1143. 最长公共子序列",slug:"🎯-例题二-1143-最长公共子序列",link:"#🎯-例题二-1143-最长公共子序列",children:[]},{level:3,title:"🎯 例题三：198. 打家劫舍",slug:"🎯-例题三-198-打家劫舍",link:"#🎯-例题三-198-打家劫舍",children:[]}]},{level:2,title:"📦 五、动态规划常用优化技巧",slug:"📦-五、动态规划常用优化技巧",link:"#📦-五、动态规划常用优化技巧",children:[]},{level:2,title:"🗂 六、LeetCode 刷题路径推荐（从易到难）",slug:"🗂-六、leetcode-刷题路径推荐-从易到难",link:"#🗂-六、leetcode-刷题路径推荐-从易到难",children:[]},{level:2,title:"✅ 七、小结",slug:"✅-七、小结",link:"#✅-七、小结",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 02-解题 5 步的模板",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC70 爬楼梯 climbing-stairs",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC118 杨辉三角 pascals-triangle",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC198. 打家劫舍 house-robber",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC279. 完全平方数 perfect-squares",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"核心步骤",slug:"核心步骤",link:"#核心步骤",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC322. 零钱兑换 coin-change",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心步骤",slug:"核心步骤",link:"#核心步骤",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"优化1-倒序减法",slug:"优化1-倒序减法",link:"#优化1-倒序减法",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC139. 单词拆分 word-break",headers:[{level:2,title:"和 dp 的关系",slug:"和-dp-的关系",link:"#和-dp-的关系",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC674. 最长连续递增序列 longest-continuous-increasing-subsequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC300. 最长递增子序列 longest-increasing-subsequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC152. 乘积最大子数组 maximum-product-subarray",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"个人理解",slug:"个人理解",link:"#个人理解",children:[]},{level:2,title:"java",slug:"java",link:"#java",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 11-LC416. 分割等和子集  partition-equal-subset-sum",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"改进-排序",slug:"改进-排序",link:"#改进-排序",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}]},{level:2,title:"优化2-逆序",slug:"优化2-逆序",link:"#优化2-逆序",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:3,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}]},{level:2,title:"0-1背包问题",slug:"_0-1背包问题",link:"#_0-1背包问题",children:[{level:3,title:"1问题对比 0-1 背包",slug:"_1问题对比-0-1-背包",link:"#_1问题对比-0-1-背包",children:[]},{level:3,title:"2DP 状态定义（0-1 背包模板）",slug:"_2dp-状态定义-0-1-背包模板",link:"#_2dp-状态定义-0-1-背包模板",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 21-LC32. 最长有效括号 longest-valid-parentheses",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"isValid 改进",slug:"isvalid-改进",link:"#isvalid-改进",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]}]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-4",link:"#反思-4",children:[]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[{level:3,title:"1 dp 数组的确切含义",slug:"_1-dp-数组的确切含义",link:"#_1-dp-数组的确切含义",children:[]},{level:3,title:"2 转移方程",slug:"_2-转移方程",link:"#_2-转移方程",children:[]},{level:3,title:"疑问点",slug:"疑问点",link:"#疑问点",children:[]},{level:3,title:"初始条件",slug:"初始条件",link:"#初始条件",children:[]}]},{level:2,title:"代码实现",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"复杂度分析",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"反思",slug:"反思-5",link:"#反思-5",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 22-LC62 不同路径 unique-paths",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[{level:3,title:"特点",slug:"特点",link:"#特点",children:[]},{level:3,title:"步数统计",slug:"步数统计",link:"#步数统计",children:[]},{level:3,title:"问题转换",slug:"问题转换",link:"#问题转换",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 23-LC1143. 最长公共子序列 longest-common-subsequence",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 22-LC64. 最小路径和 minimum-path-sum",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"滚动数组",slug:"滚动数组",link:"#滚动数组",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"原地修改 grid",slug:"原地修改-grid",link:"#原地修改-grid",children:[{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:3,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 24-LC5. 最长回文子串 longest-palindromic-substring",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之动态规划 dynamic-programming 26-LC72. 编辑距离 edit-distance",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}],path:"/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之图",slug:"详细介绍一下力扣数据结构之图",link:"#详细介绍一下力扣数据结构之图",children:[]},{level:2,title:"🔧 一、图的基本定义",slug:"🔧-一、图的基本定义",link:"#🔧-一、图的基本定义",children:[{level:3,title:"图的分类：",slug:"图的分类",link:"#图的分类",children:[]}]},{level:2,title:"📦 二、图的存储方式",slug:"📦-二、图的存储方式",link:"#📦-二、图的存储方式",children:[{level:3,title:"1. 邻接表（最常用）",slug:"_1-邻接表-最常用",link:"#_1-邻接表-最常用",children:[]},{level:3,title:"2. 邻接矩阵（二维数组）",slug:"_2-邻接矩阵-二维数组",link:"#_2-邻接矩阵-二维数组",children:[]}]},{level:2,title:"🔍 三、图的遍历",slug:"🔍-三、图的遍历",link:"#🔍-三、图的遍历",children:[{level:3,title:"✅ 深度优先搜索（DFS）",slug:"✅-深度优先搜索-dfs",link:"#✅-深度优先搜索-dfs",children:[]},{level:3,title:"✅ 广度优先搜索（BFS）",slug:"✅-广度优先搜索-bfs",link:"#✅-广度优先搜索-bfs",children:[]}]},{level:2,title:"🧠 四、力扣常见题型",slug:"🧠-四、力扣常见题型",link:"#🧠-四、力扣常见题型",children:[]},{level:2,title:"✨ 五、高级算法（图相关）",slug:"✨-五、高级算法-图相关",link:"#✨-五、高级算法-图相关",children:[{level:3,title:"1. 拓扑排序",slug:"_1-拓扑排序",link:"#_1-拓扑排序",children:[]},{level:3,title:"2. 最短路径算法",slug:"_2-最短路径算法",link:"#_2-最短路径算法",children:[]},{level:3,title:"3. 并查集（Union Find）",slug:"_3-并查集-union-find",link:"#_3-并查集-union-find",children:[]}]},{level:2,title:"🔧 六、图建模常见技巧",slug:"🔧-六、图建模常见技巧",link:"#🔧-六、图建模常见技巧",children:[]},{level:2,title:"🔍 七、典型例题详解",slug:"🔍-七、典型例题详解",link:"#🔍-七、典型例题详解",children:[{level:3,title:"示例：力扣 207. 课程表（拓扑排序）",slug:"示例-力扣-207-课程表-拓扑排序",link:"#示例-力扣-207-课程表-拓扑排序",children:[]}]},{level:2,title:"📚 八、图题模板总结（Java）",slug:"📚-八、图题模板总结-java",link:"#📚-八、图题模板总结-java",children:[]},{level:2,title:"✅ 九、总结",slug:"✅-九、总结",link:"#✅-九、总结",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-一步步提升图的知识能力",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"知识碎片",slug:"知识碎片",link:"#知识碎片",children:[]},{level:2,title:"阶段 1：认识图和遍历方式",slug:"阶段-1-认识图和遍历方式",link:"#阶段-1-认识图和遍历方式",children:[]},{level:2,title:"阶段 2：把二维数组当成图来遍历",slug:"阶段-2-把二维数组当成图来遍历",link:"#阶段-2-把二维数组当成图来遍历",children:[]},{level:2,title:"阶段 3：连通分量的概念",slug:"阶段-3-连通分量的概念",link:"#阶段-3-连通分量的概念",children:[]},{level:2,title:"阶段 4：进阶与类比迁移",slug:"阶段-4-进阶与类比迁移",link:"#阶段-4-进阶与类比迁移",children:[{level:3,title:"推荐刷题顺序（直接能从 0 到 LC200）",slug:"推荐刷题顺序-直接能从-0-到-lc200",link:"#推荐刷题顺序-直接能从-0-到-lc200",children:[]}]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC208. 实现 Trie (前缀树) implement-trie-prefix-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC733 图像渲染 flood-fill",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"为什么不需要 visited",slug:"为什么不需要-visited",link:"#为什么不需要-visited",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC133 克隆图 clone-graph",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC463. 岛屿的周长 island-perimeter",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC200. 岛屿数量 number-of-islands",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC695. 岛屿的最大面积 max-area-of-island",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC547. 省份数量 number-of-provinces",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"错误解法",slug:"错误解法",link:"#错误解法",children:[{level:3,title:"错误原因",slug:"错误原因",link:"#错误原因",children:[]}]},{level:2,title:"修正",slug:"修正",link:"#修正",children:[{level:3,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:3,title:"解法",slug:"解法",link:"#解法",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]}]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC1020. 飞地的数量 number-of-enclaves",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC994 994. 腐烂的橘子 rotting-oranges",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC1254. 统计封闭岛屿的数目 number-of-closed-islands",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之图 graph 02-01-LC207 课程表 course-schedule",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思虑",slug:"思虑",link:"#思虑",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[{level:3,title:"变量解释",slug:"变量解释",link:"#变量解释",children:[]}]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"在线可视化体验",slug:"在线可视化体验",link:"#在线可视化体验",children:[]}],path:"/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之贪心",slug:"详细介绍一下力扣算法之贪心",link:"#详细介绍一下力扣算法之贪心",children:[]},{level:2,title:"🧠 一、什么是贪心算法？",slug:"🧠-一、什么是贪心算法",link:"#🧠-一、什么是贪心算法",children:[]},{level:2,title:"📌 二、贪心算法的核心思想",slug:"📌-二、贪心算法的核心思想",link:"#📌-二、贪心算法的核心思想",children:[]},{level:2,title:"⚙️ 三、贪心常见应用模型",slug:"⚙️-三、贪心常见应用模型",link:"#⚙️-三、贪心常见应用模型",children:[]},{level:2,title:"✨ 四、贪心算法常用套路",slug:"✨-四、贪心算法常用套路",link:"#✨-四、贪心算法常用套路",children:[{level:3,title:"1️⃣ 按关键属性排序",slug:"_1️⃣-按关键属性排序",link:"#_1️⃣-按关键属性排序",children:[]},{level:3,title:"2️⃣ 贪心选取或跳过",slug:"_2️⃣-贪心选取或跳过",link:"#_2️⃣-贪心选取或跳过",children:[]}]},{level:2,title:"💡 五、LeetCode 高频题型分类讲解",slug:"💡-五、leetcode-高频题型分类讲解",link:"#💡-五、leetcode-高频题型分类讲解",children:[{level:3,title:"✅ 1. 跳跃问题",slug:"✅-1-跳跃问题",link:"#✅-1-跳跃问题",children:[]},{level:3,title:"✅ 2. 区间问题",slug:"✅-2-区间问题",link:"#✅-2-区间问题",children:[]},{level:3,title:"✅ 3. 分配问题",slug:"✅-3-分配问题",link:"#✅-3-分配问题",children:[]},{level:3,title:"✅ 4. 构造类问题",slug:"✅-4-构造类问题",link:"#✅-4-构造类问题",children:[]}]},{level:2,title:"⚠️ 六、贪心算法使用时的注意事项",slug:"⚠️-六、贪心算法使用时的注意事项",link:"#⚠️-六、贪心算法使用时的注意事项",children:[]},{level:2,title:"🎯 七、总结一句话",slug:"🎯-七、总结一句话",link:"#🎯-七、总结一句话",children:[]},{level:2,title:"📘 八、推荐刷题顺序（由浅入深）",slug:"📘-八、推荐刷题顺序-由浅入深",link:"#📘-八、推荐刷题顺序-由浅入深",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 02-LC121. 买卖股票的最佳时机 best-time-to-buy-and-sell-stock",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 之合并区间 02-LC763. 划分字母区间",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"扫描线专题",slug:"扫描线专题",link:"#扫描线专题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 之合并区间 02-LC2405. 子字符串的最优划分 optimal-partition-of-string",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"扫描线专题",slug:"扫描线专题",link:"#扫描线专题",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 05-LC55 跳跃游戏 jump-game",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"核心逻辑",slug:"核心逻辑",link:"#核心逻辑",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之贪心 Greedy 之合并区间 06-LC45 跳跃游戏 II jump-game II",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"过程",slug:"过程",link:"#过程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"过程",slug:"过程-1",link:"#过程-1",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之哈希表 HashTable 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之哈希表",slug:"详细介绍一下力扣数据结构之哈希表",link:"#详细介绍一下力扣数据结构之哈希表",children:[]},{level:2,title:"🧱 一、哈希表基础概念",slug:"🧱-一、哈希表基础概念",link:"#🧱-一、哈希表基础概念",children:[]},{level:2,title:"🛠️ 二、Java 中常用哈希表类",slug:"🛠️-二、java-中常用哈希表类",link:"#🛠️-二、java-中常用哈希表类",children:[]},{level:2,title:"🔁 三、常见操作复杂度",slug:"🔁-三、常见操作复杂度",link:"#🔁-三、常见操作复杂度",children:[]},{level:2,title:"🧪 四、典型应用场景",slug:"🧪-四、典型应用场景",link:"#🧪-四、典型应用场景",children:[]},{level:2,title:"🧮 五、LeetCode 高频题举例",slug:"🧮-五、leetcode-高频题举例",link:"#🧮-五、leetcode-高频题举例",children:[{level:3,title:"✅ 入门级",slug:"✅-入门级",link:"#✅-入门级",children:[]},{level:3,title:"🟡 进阶题",slug:"🟡-进阶题",link:"#🟡-进阶题",children:[]},{level:3,title:"🔴 提升题",slug:"🔴-提升题",link:"#🔴-提升题",children:[]}]},{level:2,title:"🧰 六、常用模板总结",slug:"🧰-六、常用模板总结",link:"#🧰-六、常用模板总结",children:[{level:3,title:"1️⃣ 出现次数统计",slug:"_1️⃣-出现次数统计",link:"#_1️⃣-出现次数统计",children:[]},{level:3,title:"2️⃣ 判断是否存在重复元素",slug:"_2️⃣-判断是否存在重复元素",link:"#_2️⃣-判断是否存在重复元素",children:[]},{level:3,title:"3️⃣ 查找差值是否存在（如两数之和）",slug:"_3️⃣-查找差值是否存在-如两数之和",link:"#_3️⃣-查找差值是否存在-如两数之和",children:[]},{level:3,title:"4️⃣ 双向映射（如同构字符串）",slug:"_4️⃣-双向映射-如同构字符串",link:"#_4️⃣-双向映射-如同构字符串",children:[]}]},{level:2,title:"🔍 七、注意事项",slug:"🔍-七、注意事项",link:"#🔍-七、注意事项",children:[]},{level:2,title:"📚 八、推荐刷题顺序",slug:"📚-八、推荐刷题顺序",link:"#📚-八、推荐刷题顺序",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之有序集合 ordered set s01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之有序集合",slug:"详细介绍一下力扣数据结构之有序集合",link:"#详细介绍一下力扣数据结构之有序集合",children:[]},{level:2,title:"🧠 有序集合的定义",slug:"🧠-有序集合的定义",link:"#🧠-有序集合的定义",children:[]},{level:2,title:"🧰 不同语言的实现方式",slug:"🧰-不同语言的实现方式",link:"#🧰-不同语言的实现方式",children:[]},{level:2,title:"🧩 力扣常见题型场景",slug:"🧩-力扣常见题型场景",link:"#🧩-力扣常见题型场景",children:[{level:3,title:"1. 滑动窗口最大值 / 中位数",slug:"_1-滑动窗口最大值-中位数",link:"#_1-滑动窗口最大值-中位数",children:[]},{level:3,title:"2. 动态查找排名、第 k 大/小",slug:"_2-动态查找排名、第-k-大-小",link:"#_2-动态查找排名、第-k-大-小",children:[]},{level:3,title:"3. 区间内查找比某个数大的最小值/小的最大值",slug:"_3-区间内查找比某个数大的最小值-小的最大值",link:"#_3-区间内查找比某个数大的最小值-小的最大值",children:[]}]},{level:2,title:"🔨 示例代码",slug:"🔨-示例代码",link:"#🔨-示例代码",children:[{level:3,title:"Java 使用 TreeSet 实现有序集合",slug:"java-使用-treeset-实现有序集合",link:"#java-使用-treeset-实现有序集合",children:[]}]},{level:2,title:"🧠 有序集合常见操作复杂度",slug:"🧠-有序集合常见操作复杂度",link:"#🧠-有序集合常见操作复杂度",children:[]},{level:2,title:"🧠 力扣常用变种",slug:"🧠-力扣常用变种",link:"#🧠-力扣常用变种",children:[]},{level:2,title:"✨ 总结",slug:"✨-总结",link:"#✨-总结",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之哈希 Hashing 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣技巧之哈希",slug:"详细介绍一下力扣技巧之哈希",link:"#详细介绍一下力扣技巧之哈希",children:[]},{level:2,title:"一、哈希的基本概念",slug:"一、哈希的基本概念",link:"#一、哈希的基本概念",children:[]},{level:2,title:"二、哈希技巧常见用途",slug:"二、哈希技巧常见用途",link:"#二、哈希技巧常见用途",children:[{level:3,title:"1. 统计频率",slug:"_1-统计频率",link:"#_1-统计频率",children:[]},{level:3,title:"2. 哈希去重",slug:"_2-哈希去重",link:"#_2-哈希去重",children:[]},{level:3,title:"3. 前缀和 + 哈希",slug:"_3-前缀和-哈希",link:"#_3-前缀和-哈希",children:[]},{level:3,title:"4. 差值哈希 / 补数哈希",slug:"_4-差值哈希-补数哈希",link:"#_4-差值哈希-补数哈希",children:[]},{level:3,title:"5. 字符串哈希",slug:"_5-字符串哈希",link:"#_5-字符串哈希",children:[]},{level:3,title:"6. 哈希 + 滑动窗口",slug:"_6-哈希-滑动窗口",link:"#_6-哈希-滑动窗口",children:[]},{level:3,title:"7. 哈希映射（值 -> 下标）",slug:"_7-哈希映射-值-下标",link:"#_7-哈希映射-值-下标",children:[]}]},{level:2,title:"三、哈希题型总结",slug:"三、哈希题型总结",link:"#三、哈希题型总结",children:[]},{level:2,title:"四、哈希使用注意事项",slug:"四、哈希使用注意事项",link:"#四、哈希使用注意事项",children:[]},{level:2,title:"五、推荐刷题顺序（递进式）",slug:"五、推荐刷题顺序-递进式",link:"#五、推荐刷题顺序-递进式",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之哈希 Hashing 02-TOP100 1. 两数之和",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之哈希 Hashing 02-TOP100 128. 最长连续序列",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"算法的改进",slug:"算法的改进",link:"#算法的改进",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之哈希 Hashing 02-TOP100 49. 字母异位词分组",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"优化1-优化 key 的构建",slug:"优化1-优化-key-的构建",link:"#优化1-优化-key-的构建",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:3,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}]},{level:2,title:"优化2:避免集合的重复创建",slug:"优化2-避免集合的重复创建",link:"#优化2-避免集合的重复创建",children:[{level:3,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:3,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"反思",slug:"反思-4",link:"#反思-4",children:[]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-5",link:"#效果-5",children:[]},{level:2,title:"反思",slug:"反思-5",link:"#反思-5",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49.html",pathLocale:"/",extraFields:[]},{title:"技巧篇专题之滚动哈希 rolling-hash 01 入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣技巧之滚动哈希",slug:"详细介绍一下力扣技巧之滚动哈希",link:"#详细介绍一下力扣技巧之滚动哈希",children:[]},{level:2,title:"一、什么是滚动哈希？",slug:"一、什么是滚动哈希",link:"#一、什么是滚动哈希",children:[]},{level:2,title:"二、原理",slug:"二、原理",link:"#二、原理",children:[{level:3,title:"1. 哈希函数构造（以26进制为例）：",slug:"_1-哈希函数构造-以26进制为例",link:"#_1-哈希函数构造-以26进制为例",children:[]},{level:3,title:"2. 滚动更新公式（窗口右移）：",slug:"_2-滚动更新公式-窗口右移",link:"#_2-滚动更新公式-窗口右移",children:[]}]},{level:2,title:"三、应用场景（LeetCode 中常见）",slug:"三、应用场景-leetcode-中常见",link:"#三、应用场景-leetcode-中常见",children:[{level:3,title:"✅ 1. 判断重复的子字符串（力扣 T187）",slug:"✅-1-判断重复的子字符串-力扣-t187",link:"#✅-1-判断重复的子字符串-力扣-t187",children:[]},{level:3,title:"✅ 2. 最长重复子串（力扣 T1044）",slug:"✅-2-最长重复子串-力扣-t1044",link:"#✅-2-最长重复子串-力扣-t1044",children:[]}]},{level:2,title:"四、总结",slug:"四、总结",link:"#四、总结",children:[]},{level:2,title:"五、注意事项",slug:"五、注意事项",link:"#五、注意事项",children:[]}],path:"/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之堆 heap s01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之堆",slug:"详细介绍一下力扣数据结构之堆",link:"#详细介绍一下力扣数据结构之堆",children:[]},{level:2,title:"🎯 一、堆是什么？",slug:"🎯-一、堆是什么",link:"#🎯-一、堆是什么",children:[]},{level:2,title:"🧰 二、Java/Python/C++ 中的堆支持",slug:"🧰-二、java-python-c-中的堆支持",link:"#🧰-二、java-python-c-中的堆支持",children:[]},{level:2,title:"🔨 三、常见用法（以 Java 为例）",slug:"🔨-三、常见用法-以-java-为例",link:"#🔨-三、常见用法-以-java-为例",children:[{level:3,title:"1. 最小堆",slug:"_1-最小堆",link:"#_1-最小堆",children:[]},{level:3,title:"2. 最大堆（Java 需要自定义比较器）",slug:"_2-最大堆-java-需要自定义比较器",link:"#_2-最大堆-java-需要自定义比较器",children:[]}]},{level:2,title:"🧠 四、力扣常见题型和应用场景",slug:"🧠-四、力扣常见题型和应用场景",link:"#🧠-四、力扣常见题型和应用场景",children:[{level:3,title:"✅ 1. Top K 问题",slug:"✅-1-top-k-问题",link:"#✅-1-top-k-问题",children:[]},{level:3,title:"✅ 2. 滑动窗口最大值",slug:"✅-2-滑动窗口最大值",link:"#✅-2-滑动窗口最大值",children:[]},{level:3,title:"✅ 3. 合并 K 个有序链表",slug:"✅-3-合并-k-个有序链表",link:"#✅-3-合并-k-个有序链表",children:[]},{level:3,title:"✅ 4. 中位数维护",slug:"✅-4-中位数维护",link:"#✅-4-中位数维护",children:[]}]},{level:2,title:"⏱ 五、堆的时间复杂度",slug:"⏱-五、堆的时间复杂度",link:"#⏱-五、堆的时间复杂度",children:[]},{level:2,title:"🧩 六、堆和排序的结合",slug:"🧩-六、堆和排序的结合",link:"#🧩-六、堆和排序的结合",children:[]},{level:2,title:"🧠 七、力扣模拟题举例",slug:"🧠-七、力扣模拟题举例",link:"#🧠-七、力扣模拟题举例",children:[{level:3,title:"示例：力扣 215. 第 K 大元素",slug:"示例-力扣-215-第-k-大元素",link:"#示例-力扣-215-第-k-大元素",children:[]}]},{level:2,title:"🧩 八、堆的变种",slug:"🧩-八、堆的变种",link:"#🧩-八、堆的变种",children:[]},{level:2,title:"✨ 总结",slug:"✨-总结",link:"#✨-总结",children:[]}],path:"/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之堆 heap 02-LC295. 数据流的中位数 find-median-from-data-stream",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之堆 heap 12-LC215. 数组中的第K个最大元素 kth-largest-element-in-an-array",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"复杂度",slug:"复杂度-3",link:"#复杂度-3",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之堆 heap 12-LC347. 前 K 个高频元素 top-k-frequent-elements",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]}],path:"/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之链表 LinkedList",slug:"详细介绍一下力扣数据结构之链表-linkedlist",link:"#详细介绍一下力扣数据结构之链表-linkedlist",children:[]},{level:2,title:"🧠 一、什么是链表？",slug:"🧠-一、什么是链表",link:"#🧠-一、什么是链表",children:[{level:3,title:"✅ 单链表示意图：",slug:"✅-单链表示意图",link:"#✅-单链表示意图",children:[]},{level:3,title:"✅ 双向链表：",slug:"✅-双向链表",link:"#✅-双向链表",children:[]}]},{level:2,title:"🧩 二、链表的分类",slug:"🧩-二、链表的分类",link:"#🧩-二、链表的分类",children:[]},{level:2,title:"🛠️ 三、链表的常见操作（模板）",slug:"🛠️-三、链表的常见操作-模板",link:"#🛠️-三、链表的常见操作-模板",children:[{level:3,title:"1. 遍历链表",slug:"_1-遍历链表",link:"#_1-遍历链表",children:[]},{level:3,title:"2. 插入节点（在某个位置后插入）",slug:"_2-插入节点-在某个位置后插入",link:"#_2-插入节点-在某个位置后插入",children:[]},{level:3,title:"3. 删除节点（删除某个位置的节点）",slug:"_3-删除节点-删除某个位置的节点",link:"#_3-删除节点-删除某个位置的节点",children:[]}]},{level:2,title:"🧱 四、常见题型分类（按难度）",slug:"🧱-四、常见题型分类-按难度",link:"#🧱-四、常见题型分类-按难度",children:[{level:3,title:"✅ 简单题",slug:"✅-简单题",link:"#✅-简单题",children:[]},{level:3,title:"🟡 中等题",slug:"🟡-中等题",link:"#🟡-中等题",children:[]},{level:3,title:"🔴 困难题",slug:"🔴-困难题",link:"#🔴-困难题",children:[]}]},{level:2,title:"🧪 五、经典模板示例",slug:"🧪-五、经典模板示例",link:"#🧪-五、经典模板示例",children:[{level:3,title:"✅ 1. 反转链表（模板题）",slug:"✅-1-反转链表-模板题",link:"#✅-1-反转链表-模板题",children:[]},{level:3,title:"✅ 2. 快慢指针找中点",slug:"✅-2-快慢指针找中点",link:"#✅-2-快慢指针找中点",children:[]},{level:3,title:"✅ 3. 合并两个有序链表（用 dummy）",slug:"✅-3-合并两个有序链表-用-dummy",link:"#✅-3-合并两个有序链表-用-dummy",children:[]}]},{level:2,title:"⚠️ 六、链表相关技巧总结",slug:"⚠️-六、链表相关技巧总结",link:"#⚠️-六、链表相关技巧总结",children:[]},{level:2,title:"🧠 七、常见面试陷阱",slug:"🧠-七、常见面试陷阱",link:"#🧠-七、常见面试陷阱",children:[]},{level:2,title:"🧾 八、链表类题推荐刷题顺序",slug:"🧾-八、链表类题推荐刷题顺序",link:"#🧾-八、链表类题推荐刷题顺序",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC160. 相交链表 intersection-of-two-linked-lists",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"例子",slug:"例子",link:"#例子",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"在线可视化",slug:"在线可视化",link:"#在线可视化",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC206. 反转链表 reverse-linked-list",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC234. 回文链表 palindrome-linked-list",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC141. 环形链表 linked-list-cycle",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC142. 环形链表 II linked-list-cycle-ii",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC21. 合并两个有序链表 merge-two-sorted-lists",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC2 两数相加",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[]},{level:2,title:"疑问",slug:"疑问",link:"#疑问",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC19 删除链表的倒数第 N 个结点 remove-nth-node-from-end-of-list",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC24. 两两交换链表中的节点 swap-nodes-in-pairs",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC25. K 个一组翻转链表 reverse-nodes-in-k-group",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"T25 回顾",slug:"t25-回顾",link:"#t25-回顾",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"反转",slug:"反转",link:"#反转",children:[]},{level:2,title:"整体实现",slug:"整体实现",link:"#整体实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC138 随机链表的复制 copy-list-with-random-pointer",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"核心",slug:"核心",link:"#核心",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC148. 排序链表 sort-list",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"回顾",slug:"回顾",link:"#回顾",children:[]},{level:2,title:"实现流程",slug:"实现流程",link:"#实现流程",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"递归的理解",slug:"递归的理解",link:"#递归的理解",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"GAP 切割的思想",slug:"gap-切割的思想",link:"#gap-切割的思想",children:[{level:3,title:"希尔排序（Shell Sort）",slug:"希尔排序-shell-sort",link:"#希尔排序-shell-sort",children:[]},{level:3,title:"归并排序（Merge Sort）",slug:"归并排序-merge-sort",link:"#归并排序-merge-sort",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC23. 合并 K 个升序链表 merge-k-sorted-lists",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[{level:3,title:"顺序合并",slug:"顺序合并",link:"#顺序合并",children:[]},{level:3,title:"分治合并",slug:"分治合并",link:"#分治合并",children:[]},{level:3,title:"时间复杂度对比",slug:"时间复杂度对比",link:"#时间复杂度对比",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-3",link:"#反思-3",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之链表 Linkedlist 02-LC146. LRU 缓存  lru-cache",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"历史回顾",slug:"历史回顾",link:"#历史回顾",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化",headers:[{level:2,title:"离线查询优化 是什么？",slug:"离线查询优化-是什么",link:"#离线查询优化-是什么",children:[{level:3,title:"离线优化的核心思想",slug:"离线优化的核心思想",link:"#离线优化的核心思想",children:[]},{level:3,title:"适用场景",slug:"适用场景",link:"#适用场景",children:[]},{level:3,title:"常见离线优化方法",slug:"常见离线优化方法",link:"#常见离线优化方法",children:[]},{level:3,title:"示例案例：区间内大于某个数的元素个数",slug:"示例案例-区间内大于某个数的元素个数",link:"#示例案例-区间内大于某个数的元素个数",children:[]},{level:3,title:"离线优化的优缺点",slug:"离线优化的优缺点",link:"#离线优化的优缺点",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"实现难度",slug:"实现难度",link:"#实现难度",children:[{level:3,title:"1. 树状数组（Fenwick Tree）",slug:"_1-树状数组-fenwick-tree",link:"#_1-树状数组-fenwick-tree",children:[]},{level:3,title:"2. 线段树（Segment Tree）",slug:"_2-线段树-segment-tree",link:"#_2-线段树-segment-tree",children:[]},{level:3,title:"3. 差分约束",slug:"_3-差分约束",link:"#_3-差分约束",children:[]},{level:3,title:"总结：",slug:"总结-1",link:"#总结-1",children:[]}]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 离线查询优化-01-力扣.1906 查询绝对值差的最小值 7种解法 leetcode.1906 minimum-absolute-difference-queries",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"小结",slug:"小结",link:"#小结",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"小结",slug:"小结-1",link:"#小结-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"Tips",slug:"tips",link:"#tips",children:[]},{level:2,title:"前缀和思路",slug:"前缀和思路",link:"#前缀和思路",children:[{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}]},{level:2,title:"实现拆分",slug:"实现拆分",link:"#实现拆分",children:[{level:3,title:"前缀和数组如何构建？",slug:"前缀和数组如何构建",link:"#前缀和数组如何构建",children:[]},{level:3,title:"如何比较？",slug:"如何比较",link:"#如何比较",children:[]}]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"小结",slug:"小结-2",link:"#小结-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"树状数组解法",slug:"树状数组解法",link:"#树状数组解法",children:[]},{level:2,title:"实现拆分",slug:"实现拆分-1",link:"#实现拆分-1",children:[{level:3,title:"频次初始化",slug:"频次初始化",link:"#频次初始化",children:[]},{level:3,title:"循环处理",slug:"循环处理",link:"#循环处理",children:[]}]},{level:2,title:"代码实现：",slug:"代码实现",link:"#代码实现",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[{level:3,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]}]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"代码实现",slug:"代码实现-1",link:"#代码实现-1",children:[]},{level:2,title:"效果",slug:"效果-5",link:"#效果-5",children:[{level:3,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]}]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"莫斯算法",slug:"莫斯算法",link:"#莫斯算法",children:[{level:3,title:"莫队算法实现步骤",slug:"莫队算法实现步骤",link:"#莫队算法实现步骤",children:[]}]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-6",link:"#效果-6",children:[]},{level:2,title:"小结",slug:"小结-3",link:"#小结-3",children:[]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-02-莫队算法（Mo's Algorithm）",headers:[{level:2,title:"详细介绍一下 莫队算法（Mo's Algorithm）",slug:"详细介绍一下-莫队算法-mo-s-algorithm",link:"#详细介绍一下-莫队算法-mo-s-algorithm",children:[{level:3,title:"莫队算法（Mo's Algorithm）详解",slug:"莫队算法-mo-s-algorithm-详解",link:"#莫队算法-mo-s-algorithm-详解",children:[]},{level:3,title:"基本思想",slug:"基本思想",link:"#基本思想",children:[]},{level:3,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:3,title:"适用场景",slug:"适用场景",link:"#适用场景",children:[]},{level:3,title:"实现步骤",slug:"实现步骤",link:"#实现步骤",children:[]},{level:3,title:"示例：区间内不同数字的个数",slug:"示例-区间内不同数字的个数",link:"#示例-区间内不同数字的个数",children:[]},{level:3,title:"输入与输出",slug:"输入与输出",link:"#输入与输出",children:[]},{level:3,title:"实现分析",slug:"实现分析",link:"#实现分析",children:[]},{level:3,title:"优点与局限性",slug:"优点与局限性",link:"#优点与局限性",children:[]}]},{level:2,title:"莫队算法（Mo's Algorithm）的应用场景",slug:"莫队算法-mo-s-algorithm-的应用场景",link:"#莫队算法-mo-s-algorithm-的应用场景",children:[]},{level:2,title:"为什么莫斯算法可以提升这种查询性能呢？原理是什么？",slug:"为什么莫斯算法可以提升这种查询性能呢-原理是什么",link:"#为什么莫斯算法可以提升这种查询性能呢-原理是什么",children:[{level:3,title:"性能提升的关键点",slug:"性能提升的关键点",link:"#性能提升的关键点",children:[]},{level:3,title:"适用问题类型",slug:"适用问题类型",link:"#适用问题类型",children:[]},{level:3,title:"为什么区间排序有用？",slug:"为什么区间排序有用",link:"#为什么区间排序有用",children:[]},{level:3,title:"时间复杂度分析",slug:"时间复杂度分析",link:"#时间复杂度分析",children:[]}]},{level:2,title:"如何记忆？",slug:"如何记忆",link:"#如何记忆",children:[{level:3,title:"1. 问题类型",slug:"_1-问题类型",link:"#_1-问题类型",children:[]},{level:3,title:"2. 核心思想：",slug:"_2-核心思想",link:"#_2-核心思想",children:[]},{level:3,title:"3. 步骤记忆：",slug:"_3-步骤记忆",link:"#_3-步骤记忆",children:[]},{level:3,title:"4. 为什么使用排序：",slug:"_4-为什么使用排序",link:"#_4-为什么使用排序",children:[]},{level:3,title:"5. 时间复杂度：",slug:"_5-时间复杂度",link:"#_5-时间复杂度",children:[]},{level:3,title:"6. 记忆提示：",slug:"_6-记忆提示",link:"#_6-记忆提示",children:[]}]},{level:2,title:"leetcode 中莫队算法（Mo's Algorithm）相关的经典题目，包含链接",slug:"leetcode-中莫队算法-mo-s-algorithm-相关的经典题目-包含链接",link:"#leetcode-中莫队算法-mo-s-algorithm-相关的经典题目-包含链接",children:[]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-03-并查集（Disjoint Set Union, DSU）",headers:[{level:2,title:"详细介绍一下 并查集",slug:"详细介绍一下-并查集",link:"#详细介绍一下-并查集",children:[{level:3,title:"并查集（Disjoint Set Union, DSU）详解",slug:"并查集-disjoint-set-union-dsu-详解",link:"#并查集-disjoint-set-union-dsu-详解",children:[]},{level:3,title:"基本思想",slug:"基本思想",link:"#基本思想",children:[]},{level:3,title:"并查集的核心操作",slug:"并查集的核心操作",link:"#并查集的核心操作",children:[]},{level:3,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]},{level:3,title:"实现并查集的步骤",slug:"实现并查集的步骤",link:"#实现并查集的步骤",children:[]},{level:3,title:"Java 实现",slug:"java-实现",link:"#java-实现",children:[]},{level:3,title:"代码详解",slug:"代码详解",link:"#代码详解",children:[]},{level:3,title:"优化分析",slug:"优化分析",link:"#优化分析",children:[]},{level:3,title:"并查集的常见应用",slug:"并查集的常见应用",link:"#并查集的常见应用",children:[]},{level:3,title:"示例应用：判断图的连通性",slug:"示例应用-判断图的连通性",link:"#示例应用-判断图的连通性",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-04-逆序查询 reverse query",headers:[{level:2,title:"详细介绍一下逆序查询",slug:"详细介绍一下逆序查询",link:"#详细介绍一下逆序查询",children:[{level:3,title:"逆序查的定义",slug:"逆序查的定义",link:"#逆序查的定义",children:[]}]},{level:2,title:"📊 如何通过逆序对数量判断数组的排序状态？",slug:"📊-如何通过逆序对数量判断数组的排序状态",link:"#📊-如何通过逆序对数量判断数组的排序状态",children:[]},{level:2,title:"📚 能否解释归并排序算法的原理？",slug:"📚-能否解释归并排序算法的原理",link:"#📚-能否解释归并排序算法的原理",children:[{level:3,title:"1. 分解（Divide）",slug:"_1-分解-divide",link:"#_1-分解-divide",children:[]},{level:3,title:"2. 解决（Conquer）",slug:"_2-解决-conquer",link:"#_2-解决-conquer",children:[]},{level:3,title:"3. 合并（Combine）",slug:"_3-合并-combine",link:"#_3-合并-combine",children:[]},{level:3,title:"归并排序的合并过程",slug:"归并排序的合并过程",link:"#归并排序的合并过程",children:[]},{level:3,title:"算法特性",slug:"算法特性",link:"#算法特性",children:[]}]},{level:2,title:"🤔 除了完全升序和完全降序，还有其他类型的排序吗？",slug:"🤔-除了完全升序和完全降序-还有其他类型的排序吗",link:"#🤔-除了完全升序和完全降序-还有其他类型的排序吗",children:[]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-05-线段树 segment tree",headers:[{level:2,title:"详细介绍一下 线段树",slug:"详细介绍一下-线段树",link:"#详细介绍一下-线段树",children:[{level:3,title:"什么是线段树？",slug:"什么是线段树",link:"#什么是线段树",children:[]},{level:3,title:"线段树的特点",slug:"线段树的特点",link:"#线段树的特点",children:[]},{level:3,title:"线段树的操作",slug:"线段树的操作",link:"#线段树的操作",children:[]},{level:3,title:"示例运行",slug:"示例运行",link:"#示例运行",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"线段树应用场景",slug:"线段树应用场景",link:"#线段树应用场景",children:[]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组",headers:[{level:2,title:"详细介绍一下 BIT 树状数组",slug:"详细介绍一下-bit-树状数组",link:"#详细介绍一下-bit-树状数组",children:[{level:3,title:"什么是树状数组 (BIT)？",slug:"什么是树状数组-bit",link:"#什么是树状数组-bit",children:[]},{level:3,title:"树状数组的核心思想",slug:"树状数组的核心思想",link:"#树状数组的核心思想",children:[]},{level:3,title:"核心公式",slug:"核心公式",link:"#核心公式",children:[]},{level:3,title:"树状数组的实现",slug:"树状数组的实现",link:"#树状数组的实现",children:[]},{level:3,title:"示例运行",slug:"示例运行",link:"#示例运行",children:[]},{level:3,title:"树状数组的时间复杂度",slug:"树状数组的时间复杂度",link:"#树状数组的时间复杂度",children:[]},{level:3,title:"优点和局限性",slug:"优点和局限性",link:"#优点和局限性",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]},{level:2,title:"为什么 BIT 可以提升性能，核心原理是什么？",slug:"为什么-bit-可以提升性能-核心原理是什么",link:"#为什么-bit-可以提升性能-核心原理是什么",children:[{level:3,title:"1. 树状数组的结构",slug:"_1-树状数组的结构",link:"#_1-树状数组的结构",children:[]},{level:3,title:"2. 核心原理",slug:"_2-核心原理",link:"#_2-核心原理",children:[]},{level:3,title:"3. 树状数组如何提升性能",slug:"_3-树状数组如何提升性能",link:"#_3-树状数组如何提升性能",children:[]},{level:3,title:"4. 总结",slug:"_4-总结",link:"#_4-总结",children:[]}]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode offline-query-optimize 离线查询优化-07-difference-constraints 差分约束",headers:[{level:2,title:"详细介绍一下 差分约束",slug:"详细介绍一下-差分约束",link:"#详细介绍一下-差分约束",children:[{level:3,title:"什么是差分约束？",slug:"什么是差分约束",link:"#什么是差分约束",children:[]},{level:3,title:"常见应用场景",slug:"常见应用场景",link:"#常见应用场景",children:[]},{level:3,title:"差分约束的建模",slug:"差分约束的建模",link:"#差分约束的建模",children:[]},{level:3,title:"解决方法",slug:"解决方法",link:"#解决方法",children:[]},{level:3,title:"代码实现（Java）",slug:"代码实现-java",link:"#代码实现-java",children:[]},{level:3,title:"示例说明",slug:"示例说明",link:"#示例说明",children:[]},{level:3,title:"算法解析",slug:"算法解析",link:"#算法解析",children:[]},{level:3,title:"总结",slug:"总结",link:"#总结",children:[]}]}],path:"/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之递归 recursive 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣算法之递归",slug:"详细介绍一下力扣算法之递归",link:"#详细介绍一下力扣算法之递归",children:[]},{level:2,title:"🧠 一、什么是递归？",slug:"🧠-一、什么是递归",link:"#🧠-一、什么是递归",children:[]},{level:2,title:"🔁 二、递归三要素（核心）",slug:"🔁-二、递归三要素-核心",link:"#🔁-二、递归三要素-核心",children:[{level:3,title:"📌 举个例子：斐波那契数列",slug:"📌-举个例子-斐波那契数列",link:"#📌-举个例子-斐波那契数列",children:[]}]},{level:2,title:"🔧 三、递归常见写法模式",slug:"🔧-三、递归常见写法模式",link:"#🔧-三、递归常见写法模式",children:[{level:3,title:"✅ 1. 分治型（Divide & Conquer）",slug:"✅-1-分治型-divide-conquer",link:"#✅-1-分治型-divide-conquer",children:[]},{level:3,title:"✅ 2. 回溯型（Backtracking）",slug:"✅-2-回溯型-backtracking",link:"#✅-2-回溯型-backtracking",children:[]},{level:3,title:"✅ 3. 递归树型（树结构）",slug:"✅-3-递归树型-树结构",link:"#✅-3-递归树型-树结构",children:[]},{level:3,title:"✅ 4. 递归 + 记忆化（避免重复）",slug:"✅-4-递归-记忆化-避免重复",link:"#✅-4-递归-记忆化-避免重复",children:[]}]},{level:2,title:"🎯 四、递归常见题型总结",slug:"🎯-四、递归常见题型总结",link:"#🎯-四、递归常见题型总结",children:[]},{level:2,title:"🧪 五、递归的使用技巧 & 踩坑提示",slug:"🧪-五、递归的使用技巧-踩坑提示",link:"#🧪-五、递归的使用技巧-踩坑提示",children:[{level:3,title:"✅ 使用技巧",slug:"✅-使用技巧",link:"#✅-使用技巧",children:[]},{level:3,title:"❌ 常见错误",slug:"❌-常见错误",link:"#❌-常见错误",children:[]}]},{level:2,title:"📚 六、LeetCode 递归题目推荐（由易到难）",slug:"📚-六、leetcode-递归题目推荐-由易到难",link:"#📚-六、leetcode-递归题目推荐-由易到难",children:[]},{level:2,title:"📌 七、递归与其他技巧的关联",slug:"📌-七、递归与其他技巧的关联",link:"#📌-七、递归与其他技巧的关联",children:[]},{level:2,title:"✅ 八、小结",slug:"✅-八、小结",link:"#✅-八、小结",children:[]}],path:"/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode recursive 递归-01-递归基本概念介绍",headers:[{level:2,title:"一、递归的基本结构",slug:"一、递归的基本结构",link:"#一、递归的基本结构",children:[{level:3,title:"示例：阶乘（Factorial）",slug:"示例-阶乘-factorial",link:"#示例-阶乘-factorial",children:[]}]},{level:2,title:"二、递归的执行过程",slug:"二、递归的执行过程",link:"#二、递归的执行过程",children:[]},{level:2,title:"三、递归的应用场景",slug:"三、递归的应用场景",link:"#三、递归的应用场景",children:[]},{level:2,title:"四、递归与迭代的比较",slug:"四、递归与迭代的比较",link:"#四、递归与迭代的比较",children:[]},{level:2,title:"五、常见陷阱",slug:"五、常见陷阱",link:"#五、常见陷阱",children:[]},{level:2,title:"六、递归优化技巧",slug:"六、递归优化技巧",link:"#六、递归优化技巧",children:[]},{level:2,title:"七、Java 递归注意事项",slug:"七、java-递归注意事项",link:"#七、java-递归注意事项",children:[]},{level:2,title:"八、总结口诀：递归三问",slug:"八、总结口诀-递归三问",link:"#八、总结口诀-递归三问",children:[]}],path:"/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode recursive 递归-02-递归复杂度计算 Master Theorem（主定理）",headers:[{level:2,title:"一、Master Theorem（主定理）公式",slug:"一、master-theorem-主定理-公式",link:"#一、master-theorem-主定理-公式",children:[]},{level:2,title:"二、主定理的三种情况",slug:"二、主定理的三种情况",link:"#二、主定理的三种情况",children:[{level:3,title:"情况 1：f(n) 比 n^log_b(a) 小",slug:"情况-1-f-n-比-n-log-b-a-小",link:"#情况-1-f-n-比-n-log-b-a-小",children:[]},{level:3,title:"情况 2：f(n) 与 n^log_b(a) 相等",slug:"情况-2-f-n-与-n-log-b-a-相等",link:"#情况-2-f-n-与-n-log-b-a-相等",children:[]},{level:3,title:"情况 3：f(n) 比 n^log_b(a) 大",slug:"情况-3-f-n-比-n-log-b-a-大",link:"#情况-3-f-n-比-n-log-b-a-大",children:[]}]},{level:2,title:"三、几个经典例子",slug:"三、几个经典例子",link:"#三、几个经典例子",children:[{level:3,title:"✅ 示例 1：归并排序",slug:"✅-示例-1-归并排序",link:"#✅-示例-1-归并排序",children:[]},{level:3,title:"✅ 示例 2：二分查找",slug:"✅-示例-2-二分查找",link:"#✅-示例-2-二分查找",children:[]},{level:3,title:"✅ 示例 3：暴力斐波那契",slug:"✅-示例-3-暴力斐波那契",link:"#✅-示例-3-暴力斐波那契",children:[]}]},{level:2,title:"四、常见算法的递归关系",slug:"四、常见算法的递归关系",link:"#四、常见算法的递归关系",children:[]},{level:2,title:"五、小结口诀",slug:"五、小结口诀",link:"#五、小结口诀",children:[]}],path:"/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-01-基本概念介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"✅ 一、二分查找法是什么？",slug:"✅-一、二分查找法是什么",link:"#✅-一、二分查找法是什么",children:[{level:3,title:"原理简述：",slug:"原理简述",link:"#原理简述",children:[]}]},{level:2,title:"🧠 二、标准模板代码（迭代版本）",slug:"🧠-二、标准模板代码-迭代版本",link:"#🧠-二、标准模板代码-迭代版本",children:[]},{level:2,title:"🛠 三、二分查找的变种（边界查找）",slug:"🛠-三、二分查找的变种-边界查找",link:"#🛠-三、二分查找的变种-边界查找",children:[{level:3,title:"1️⃣ 查找左边界（第一个等于 target 的位置）",slug:"_1️⃣-查找左边界-第一个等于-target-的位置",link:"#_1️⃣-查找左边界-第一个等于-target-的位置",children:[]},{level:3,title:"2️⃣ 查找右边界（最后一个等于 target 的位置）",slug:"_2️⃣-查找右边界-最后一个等于-target-的位置",link:"#_2️⃣-查找右边界-最后一个等于-target-的位置",children:[]}]},{level:2,title:"🧩 四、适用场景总结",slug:"🧩-四、适用场景总结",link:"#🧩-四、适用场景总结",children:[]},{level:2,title:"💡 五、复杂度",slug:"💡-五、复杂度",link:"#💡-五、复杂度",children:[]},{level:2,title:"✅ 一、二分查找的本质：缩小区间、逼近答案",slug:"✅-一、二分查找的本质-缩小区间、逼近答案",link:"#✅-一、二分查找的本质-缩小区间、逼近答案",children:[]},{level:2,title:"🧭 二、二分查找的典型应用场景",slug:"🧭-二、二分查找的典型应用场景",link:"#🧭-二、二分查找的典型应用场景",children:[{level:3,title:"1️⃣ ✅ 查找元素是否存在（基础场景）",slug:"_1️⃣-✅-查找元素是否存在-基础场景",link:"#_1️⃣-✅-查找元素是否存在-基础场景",children:[]},{level:3,title:"2️⃣ ✅ 查找某个值的“左边界”或“右边界”",slug:"_2️⃣-✅-查找某个值的-左边界-或-右边界",link:"#_2️⃣-✅-查找某个值的-左边界-或-右边界",children:[]},{level:3,title:"3️⃣ ✅ “二分答案”问题（重点）",slug:"_3️⃣-✅-二分答案-问题-重点",link:"#_3️⃣-✅-二分答案-问题-重点",children:[]},{level:3,title:"📌 特征：",slug:"📌-特征",link:"#📌-特征",children:[]},{level:3,title:"4️⃣ ✅ 旋转数组、变形数组的搜索",slug:"_4️⃣-✅-旋转数组、变形数组的搜索",link:"#_4️⃣-✅-旋转数组、变形数组的搜索",children:[]},{level:3,title:"5️⃣ ✅ 数学与实用问题中的二分查找",slug:"_5️⃣-✅-数学与实用问题中的二分查找",link:"#_5️⃣-✅-数学与实用问题中的二分查找",children:[]}]},{level:2,title:"🔁 总结：二分查找能解决哪些实际问题？",slug:"🔁-总结-二分查找能解决哪些实际问题",link:"#🔁-总结-二分查找能解决哪些实际问题",children:[]},{level:2,title:"🧠 一句话总结：",slug:"🧠-一句话总结",link:"#🧠-一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 704 二分查找目标值是否存在",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 34 在排序数组中查找元素的第一个和最后一个位置 find-first-and-last-position-of-element-in-sorted-array",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 35. 搜索插入位置",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 34. 在排序数组中查找元素的第一个和最后一个位置",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"改进点",slug:"改进点",link:"#改进点",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 852. 山脉数组的峰顶索引",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"是什么？",slug:"是什么",link:"#是什么",children:[]},{level:2,title:"山形数组的特性",slug:"山形数组的特性",link:"#山形数组的特性",children:[]},{level:2,title:"个人理解",slug:"个人理解",link:"#个人理解",children:[]},{level:2,title:"终止条件",slug:"终止条件",link:"#终止条件",children:[]},{level:2,title:"⏱️ 时间复杂度分析",slug:"⏱️-时间复杂度分析",link:"#⏱️-时间复杂度分析",children:[]},{level:2,title:"解法",slug:"解法-2",link:"#解法-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"解法",slug:"解法-3",link:"#解法-3",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 875. 爱吃香蕉的珂珂",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"为什么错了？",slug:"为什么错了",link:"#为什么错了",children:[]},{level:2,title:"修正",slug:"修正",link:"#修正",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"v2-的一些优化",slug:"v2-的一些优化",link:"#v2-的一些优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"代码如下",slug:"代码如下",link:"#代码如下",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"其他优化思路",slug:"其他优化思路",link:"#其他优化思路",children:[{level:3,title:"实现",slug:"实现-1",link:"#实现-1",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 1011. 在 D 天内送达包裹的能力",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"这个上限要如何优化呢？",slug:"这个上限要如何优化呢",link:"#这个上限要如何优化呢",children:[{level:3,title:"实现",slug:"实现",link:"#实现",children:[]},{level:3,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 033. 搜索旋转排序数组 search-in-rotated-sorted-array",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"一点补充",slug:"一点补充",link:"#一点补充",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法-2",link:"#解法-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"举个例子",slug:"举个例子",link:"#举个例子",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 153. 寻找旋转排序数组中的最小值",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"和 T033 对比",slug:"和-t033-对比",link:"#和-t033-对比",children:[{level:3,title:"🔍 题目目标对比",slug:"🔍-题目目标对比",link:"#🔍-题目目标对比",children:[]},{level:3,title:"🎯 它们的本质区别",slug:"🎯-它们的本质区别",link:"#🎯-它们的本质区别",children:[]},{level:3,title:"🧠 更形象地理解",slug:"🧠-更形象地理解",link:"#🧠-更形象地理解",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode 154. 寻找旋转排序数组中的最小值 II",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"解释",slug:"解释",link:"#解释",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154.html",pathLocale:"/",extraFields:[]},{title:"二分查找法？binary-search-02-leetcode T4 寻找两个正序数组的中位数 median-of-two-sorted-arrays",headers:[{level:2,title:"解法汇总",slug:"解法汇总",link:"#解法汇总",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"复杂度",slug:"复杂度-2",link:"#复杂度-2",children:[]},{level:2,title:"思想",slug:"思想",link:"#思想",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"举个例子",slug:"举个例子",link:"#举个例子",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"时间复杂度",slug:"时间复杂度",link:"#时间复杂度",children:[]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4.html",pathLocale:"/",extraFields:[]},{title:"java 如何实现 binary search 二分查找法？",headers:[{level:2,title:"概念",slug:"概念",link:"#概念",children:[]},{level:2,title:"复杂度分析：",slug:"复杂度分析",link:"#复杂度分析",children:[]},{level:2,title:"java 代码实现",slug:"java-代码实现",link:"#java-代码实现",children:[]},{level:2,title:"java 改进版本",slug:"java-改进版本",link:"#java-改进版本",children:[{level:3,title:"接口定义",slug:"接口定义",link:"#接口定义",children:[]},{level:3,title:"遍历实现",slug:"遍历实现",link:"#遍历实现",children:[]}]},{level:2,title:"概念",slug:"概念-1",link:"#概念-1",children:[]},{level:2,title:"复杂度概览",slug:"复杂度概览",link:"#复杂度概览",children:[]},{level:2,title:"步骤",slug:"步骤",link:"#步骤",children:[]},{level:2,title:"java 代码实现",slug:"java-代码实现-1",link:"#java-代码实现-1",children:[{level:3,title:"递归实现",slug:"递归实现",link:"#递归实现",children:[]},{level:3,title:"循环实现",slug:"循环实现",link:"#循环实现",children:[]}]},{level:2,title:"java 改良版本",slug:"java-改良版本",link:"#java-改良版本",children:[]},{level:2,title:"maven 引入",slug:"maven-引入",link:"#maven-引入",children:[]},{level:2,title:"使用",slug:"使用",link:"#使用",children:[{level:3,title:"遍历查询",slug:"遍历查询",link:"#遍历查询",children:[]},{level:3,title:"折半查询",slug:"折半查询",link:"#折半查询",children:[]}]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit.html",pathLocale:"/",extraFields:[]},{title:"三分查找法 Ternary-search-01-基本概念介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"🔍 什么是三分查找（Ternary Search）？",slug:"🔍-什么是三分查找-ternary-search",link:"#🔍-什么是三分查找-ternary-search",children:[]},{level:2,title:"🧠 三分查找的适用条件",slug:"🧠-三分查找的适用条件",link:"#🧠-三分查找的适用条件",children:[{level:3,title:"✅ 场景一：一维单峰函数",slug:"✅-场景一-一维单峰函数",link:"#✅-场景一-一维单峰函数",children:[]},{level:3,title:"✅ 场景二：一维单谷函数（先减后增）",slug:"✅-场景二-一维单谷函数-先减后增",link:"#✅-场景二-一维单谷函数-先减后增",children:[]}]},{level:2,title:"🧮 三分查找的原理",slug:"🧮-三分查找的原理",link:"#🧮-三分查找的原理",children:[{level:3,title:"步骤如下：",slug:"步骤如下",link:"#步骤如下",children:[]}]},{level:2,title:"✅ 三分查找的 Java 模板",slug:"✅-三分查找的-java-模板",link:"#✅-三分查找的-java-模板",children:[]},{level:2,title:"🆚 与二分查找的对比",slug:"🆚-与二分查找的对比",link:"#🆚-与二分查找的对比",children:[]},{level:2,title:"📌 小结",slug:"📌-小结",link:"#📌-小结",children:[]},{level:2,title:"✅ 一、三分查找适用的核心场景",slug:"✅-一、三分查找适用的核心场景",link:"#✅-一、三分查找适用的核心场景",children:[]},{level:2,title:"📌 二、三分查找能解决的问题类型",slug:"📌-二、三分查找能解决的问题类型",link:"#📌-二、三分查找能解决的问题类型",children:[]},{level:2,title:"🚀 三、LeetCode 上经典题目",slug:"🚀-三、leetcode-上经典题目",link:"#🚀-三、leetcode-上经典题目",children:[]},{level:2,title:"✍️ 实战总结",slug:"✍️-实战总结",link:"#✍️-实战总结",children:[{level:3,title:"✅ 三分查找 > 用于「极值点查找」",slug:"✅-三分查找-用于「极值点查找」",link:"#✅-三分查找-用于「极值点查找」",children:[]},{level:3,title:"✅ 特别适合下列题型：",slug:"✅-特别适合下列题型",link:"#✅-特别适合下列题型",children:[]}]}],path:"/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-00-整体概览介绍",headers:[{level:3,title:"🧱 一、基础排序算法（适合入门）",slug:"🧱-一、基础排序算法-适合入门",link:"#🧱-一、基础排序算法-适合入门",children:[]},{level:3,title:"⚙️ 二、进阶排序算法（效率更高）",slug:"⚙️-二、进阶排序算法-效率更高",link:"#⚙️-二、进阶排序算法-效率更高",children:[]},{level:3,title:"🚀 三、线性排序算法（特定场景）",slug:"🚀-三、线性排序算法-特定场景",link:"#🚀-三、线性排序算法-特定场景",children:[]},{level:3,title:"📌 总结推荐（按使用场景）",slug:"📌-总结推荐-按使用场景",link:"#📌-总结推荐-按使用场景",children:[]},{level:3,title:"🧱 一、基础排序（核心是“模拟人工排序过程”）",slug:"🧱-一、基础排序-核心是-模拟人工排序过程",link:"#🧱-一、基础排序-核心是-模拟人工排序过程",children:[]},{level:3,title:"⚙️ 二、进阶排序（核心是“分治、结构控制”）",slug:"⚙️-二、进阶排序-核心是-分治、结构控制",link:"#⚙️-二、进阶排序-核心是-分治、结构控制",children:[]},{level:3,title:"🚀 三、线性排序（核心是“用空间换时间”）",slug:"🚀-三、线性排序-核心是-用空间换时间",link:"#🚀-三、线性排序-核心是-用空间换时间",children:[]},{level:3,title:"🧠 一句话记住它们的核心思想：",slug:"🧠-一句话记住它们的核心思想",link:"#🧠-一句话记住它们的核心思想",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-01-bubbleSort 冒泡排序入门介绍",headers:[{level:2,title:"🫧 一、什么是冒泡排序？",slug:"🫧-一、什么是冒泡排序",link:"#🫧-一、什么是冒泡排序",children:[]},{level:2,title:"🔧 二、算法原理（核心思想）",slug:"🔧-二、算法原理-核心思想",link:"#🔧-二、算法原理-核心思想",children:[{level:3,title:"举例：",slug:"举例",link:"#举例",children:[]}]},{level:2,title:"🧠 三、代码逻辑",slug:"🧠-三、代码逻辑",link:"#🧠-三、代码逻辑",children:[]},{level:2,title:"📈 四、复杂度分析",slug:"📈-四、复杂度分析",link:"#📈-四、复杂度分析",children:[]},{level:2,title:"🏷️ 五、特点总结",slug:"🏷️-五、特点总结",link:"#🏷️-五、特点总结",children:[]},{level:2,title:"✅ 六、冒泡排序的优点 & 缺点",slug:"✅-六、冒泡排序的优点-缺点",link:"#✅-六、冒泡排序的优点-缺点",children:[]},{level:2,title:"🧠 七、优化版冒泡排序",slug:"🧠-七、优化版冒泡排序",link:"#🧠-七、优化版冒泡排序",children:[]},{level:2,title:"✅ 八、冒泡排序适合的场景",slug:"✅-八、冒泡排序适合的场景",link:"#✅-八、冒泡排序适合的场景",children:[{level:3,title:"🔹 1. LeetCode 912. 排序数组",slug:"🔹-1-leetcode-912-排序数组",link:"#🔹-1-leetcode-912-排序数组",children:[]},{level:3,title:"🔹 2. LeetCode 283. 移动零",slug:"🔹-2-leetcode-283-移动零",link:"#🔹-2-leetcode-283-移动零",children:[]},{level:3,title:"🔹 3. LeetCode 75. 颜色分类（荷兰国旗问题）",slug:"🔹-3-leetcode-75-颜色分类-荷兰国旗问题",link:"#🔹-3-leetcode-75-颜色分类-荷兰国旗问题",children:[]},{level:3,title:"🔹 4. LeetCode 1470. 重新排列数组",slug:"🔹-4-leetcode-1470-重新排列数组",link:"#🔹-4-leetcode-1470-重新排列数组",children:[]}]},{level:2,title:"🧠 延伸思考：冒泡排序适合考察什么？",slug:"🧠-延伸思考-冒泡排序适合考察什么",link:"#🧠-延伸思考-冒泡排序适合考察什么",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-02-冒泡排序力扣 912. 排序数组",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"算法",slug:"算法",link:"#算法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"算法改进",slug:"算法改进",link:"#算法改进",children:[]},{level:2,title:"可视化",slug:"可视化",link:"#可视化",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"可视化",slug:"可视化-1",link:"#可视化-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"耗时",slug:"耗时",link:"#耗时",children:[]},{level:2,title:"可视化",slug:"可视化-2",link:"#可视化-2",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"可视化",slug:"可视化-3",link:"#可视化-3",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[{level:3,title:"递归排序拆分",slug:"递归排序拆分",link:"#递归排序拆分",children:[]},{level:3,title:"递归合并",slug:"递归合并",link:"#递归合并",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"优化1",slug:"优化1",link:"#优化1",children:[{level:3,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:3,title:"效果",slug:"效果-4",link:"#效果-4",children:[]}]},{level:2,title:"优化 2",slug:"优化-2",link:"#优化-2",children:[{level:3,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-5",link:"#效果-5",children:[]}]},{level:2,title:"优化3：merge 的优化",slug:"优化3-merge-的优化",link:"#优化3-merge-的优化",children:[{level:3,title:"思路",slug:"思路-6",link:"#思路-6",children:[]},{level:3,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:3,title:"效果",slug:"效果-6",link:"#效果-6",children:[]}]},{level:2,title:"可视化",slug:"可视化-4",link:"#可视化-4",children:[]},{level:2,title:"思路",slug:"思路-7",link:"#思路-7",children:[]},{level:2,title:"实现",slug:"实现-5",link:"#实现-5",children:[]},{level:2,title:"效果",slug:"效果-7",link:"#效果-7",children:[]},{level:2,title:"优化1",slug:"优化1-1",link:"#优化1-1",children:[{level:3,title:"思路",slug:"思路-8",link:"#思路-8",children:[]},{level:3,title:"实现",slug:"实现-6",link:"#实现-6",children:[]},{level:3,title:"效果",slug:"效果-8",link:"#效果-8",children:[]}]},{level:2,title:"可视化",slug:"可视化-5",link:"#可视化-5",children:[]},{level:2,title:"思路",slug:"思路-9",link:"#思路-9",children:[]},{level:2,title:"回顾插入排序",slug:"回顾插入排序",link:"#回顾插入排序",children:[]},{level:2,title:"实现",slug:"实现-7",link:"#实现-7",children:[]},{level:2,title:"效果",slug:"效果-9",link:"#效果-9",children:[]},{level:2,title:"可视化",slug:"可视化-6",link:"#可视化-6",children:[]},{level:2,title:"思路",slug:"思路-10",link:"#思路-10",children:[]},{level:2,title:"算法",slug:"算法-1",link:"#算法-1",children:[]},{level:2,title:"效果",slug:"效果-10",link:"#效果-10",children:[]},{level:2,title:"可视化",slug:"可视化-7",link:"#可视化-7",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-02-selectSort 选择排序入门介绍",headers:[{level:2,title:"🏷️ 一、选择排序是什么？",slug:"🏷️-一、选择排序是什么",link:"#🏷️-一、选择排序是什么",children:[]},{level:2,title:"🔧 二、算法核心思想",slug:"🔧-二、算法核心思想",link:"#🔧-二、算法核心思想",children:[]},{level:2,title:"🧠 三、伪代码逻辑",slug:"🧠-三、伪代码逻辑",link:"#🧠-三、伪代码逻辑",children:[]},{level:2,title:"✅ 四、Java 代码实现",slug:"✅-四、java-代码实现",link:"#✅-四、java-代码实现",children:[]},{level:2,title:"🎨 五、可视化示例（以 [3, 1, 4, 2] 为例）",slug:"🎨-五、可视化示例-以-3-1-4-2-为例",link:"#🎨-五、可视化示例-以-3-1-4-2-为例",children:[]},{level:2,title:"📈 六、复杂度分析",slug:"📈-六、复杂度分析",link:"#📈-六、复杂度分析",children:[]},{level:2,title:"📦 七、选择排序的特点总结",slug:"📦-七、选择排序的特点总结",link:"#📦-七、选择排序的特点总结",children:[]},{level:2,title:"⚖️ 八、优缺点对比",slug:"⚖️-八、优缺点对比",link:"#⚖️-八、优缺点对比",children:[]},{level:2,title:"📌 九、适用场景",slug:"📌-九、适用场景",link:"#📌-九、适用场景",children:[]},{level:2,title:"💡 十、LeetCode 上可用选择排序解的题目",slug:"💡-十、leetcode-上可用选择排序解的题目",link:"#💡-十、leetcode-上可用选择排序解的题目",children:[{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 215. 数组中的第K个最大元素",slug:"🔹-215-数组中的第k个最大元素",link:"#🔹-215-数组中的第k个最大元素",children:[]},{level:3,title:"🔹 面试题 10.01. 合并排序的数组",slug:"🔹-面试题-10-01-合并排序的数组",link:"#🔹-面试题-10-01-合并排序的数组",children:[]}]},{level:2,title:"🔚 十一、一句话总结",slug:"🔚-十一、一句话总结",link:"#🔚-十一、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-03-insertSort 插入排序入门介绍",headers:[{level:2,title:"📌 一、插入排序是什么？",slug:"📌-一、插入排序是什么",link:"#📌-一、插入排序是什么",children:[]},{level:2,title:"🧠 二、算法核心思想",slug:"🧠-二、算法核心思想",link:"#🧠-二、算法核心思想",children:[{level:3,title:"类比：",slug:"类比",link:"#类比",children:[]}]},{level:2,title:"🔧 三、算法逻辑（伪代码）",slug:"🔧-三、算法逻辑-伪代码",link:"#🔧-三、算法逻辑-伪代码",children:[]},{level:2,title:"✅ 四、Java 实现代码",slug:"✅-四、java-实现代码",link:"#✅-四、java-实现代码",children:[]},{level:2,title:"🎨 五、插入排序可视化示例（排序 [4, 2, 5, 1]）",slug:"🎨-五、插入排序可视化示例-排序-4-2-5-1",link:"#🎨-五、插入排序可视化示例-排序-4-2-5-1",children:[]},{level:2,title:"📈 六、时间和空间复杂度分析",slug:"📈-六、时间和空间复杂度分析",link:"#📈-六、时间和空间复杂度分析",children:[]},{level:2,title:"⚖️ 七、优点 & 缺点",slug:"⚖️-七、优点-缺点",link:"#⚖️-七、优点-缺点",children:[]},{level:2,title:"📦 八、适用场景",slug:"📦-八、适用场景",link:"#📦-八、适用场景",children:[]},{level:2,title:"💡 九、LeetCode 上可用插入排序解的题目",slug:"💡-九、leetcode-上可用插入排序解的题目",link:"#💡-九、leetcode-上可用插入排序解的题目",children:[{level:3,title:"🔹 147. 对链表进行插入排序",slug:"🔹-147-对链表进行插入排序",link:"#🔹-147-对链表进行插入排序",children:[]},{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 21. 合并两个有序链表",slug:"🔹-21-合并两个有序链表",link:"#🔹-21-合并两个有序链表",children:[]}]},{level:2,title:"🔚 十、一句话总结",slug:"🔚-十、一句话总结",link:"#🔚-十、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-04-mergeSort 归并排序入门介绍",headers:[{level:2,title:"📌 一、归并排序是什么？",slug:"📌-一、归并排序是什么",link:"#📌-一、归并排序是什么",children:[]},{level:2,title:"🧠 二、核心算法思想：分治（Divide and Conquer）",slug:"🧠-二、核心算法思想-分治-divide-and-conquer",link:"#🧠-二、核心算法思想-分治-divide-and-conquer",children:[{level:3,title:"分治过程分三步：",slug:"分治过程分三步",link:"#分治过程分三步",children:[]}]},{level:2,title:"🎯 三、图解流程",slug:"🎯-三、图解流程",link:"#🎯-三、图解流程",children:[]},{level:2,title:"✅ 四、Java 实现代码",slug:"✅-四、java-实现代码",link:"#✅-四、java-实现代码",children:[]},{level:2,title:"📈 五、时间 & 空间复杂度分析",slug:"📈-五、时间-空间复杂度分析",link:"#📈-五、时间-空间复杂度分析",children:[]},{level:2,title:"⚖️ 六、优点 & 缺点",slug:"⚖️-六、优点-缺点",link:"#⚖️-六、优点-缺点",children:[]},{level:2,title:"📦 七、适用场景",slug:"📦-七、适用场景",link:"#📦-七、适用场景",children:[]},{level:2,title:"💡 八、LeetCode 上推荐归并排序的题目",slug:"💡-八、leetcode-上推荐归并排序的题目",link:"#💡-八、leetcode-上推荐归并排序的题目",children:[{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 148. 排序链表",slug:"🔹-148-排序链表",link:"#🔹-148-排序链表",children:[]},{level:3,title:"🔹 23. 合并K个升序链表",slug:"🔹-23-合并k个升序链表",link:"#🔹-23-合并k个升序链表",children:[]},{level:3,title:"🔹 315. 计算右侧小于当前元素的个数",slug:"🔹-315-计算右侧小于当前元素的个数",link:"#🔹-315-计算右侧小于当前元素的个数",children:[]}]},{level:2,title:"🔚 九、一句话总结",slug:"🔚-九、一句话总结",link:"#🔚-九、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-04-quickSort 快速排序入门介绍",headers:[{level:2,title:"📌 一、快速排序简介",slug:"📌-一、快速排序简介",link:"#📌-一、快速排序简介",children:[]},{level:2,title:"🧠 二、核心算法思想：分治 + 原地划分",slug:"🧠-二、核心算法思想-分治-原地划分",link:"#🧠-二、核心算法思想-分治-原地划分",children:[]},{level:2,title:"🎯 三、图解流程（以 [3, 6, 1, 5, 2, 4] 为例）",slug:"🎯-三、图解流程-以-3-6-1-5-2-4-为例",link:"#🎯-三、图解流程-以-3-6-1-5-2-4-为例",children:[]},{level:2,title:"✅ 四、Java 代码实现（原地快速排序）",slug:"✅-四、java-代码实现-原地快速排序",link:"#✅-四、java-代码实现-原地快速排序",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景分析",slug:"🧰-七、适用场景分析",link:"#🧰-七、适用场景分析",children:[]},{level:2,title:"🧩 八、LeetCode 推荐题目",slug:"🧩-八、leetcode-推荐题目",link:"#🧩-八、leetcode-推荐题目",children:[{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 215. 数组中的第 K 个最大元素",slug:"🔹-215-数组中的第-k-个最大元素",link:"#🔹-215-数组中的第-k-个最大元素",children:[]},{level:3,title:"🔹 973. 最接近原点的 K 个点",slug:"🔹-973-最接近原点的-k-个点",link:"#🔹-973-最接近原点的-k-个点",children:[]}]},{level:2,title:"🆚 九、快速排序 vs 其他排序算法对比",slug:"🆚-九、快速排序-vs-其他排序算法对比",link:"#🆚-九、快速排序-vs-其他排序算法对比",children:[]},{level:2,title:"🔚 十、一句话总结",slug:"🔚-十、一句话总结",link:"#🔚-十、一句话总结",children:[]},{level:2,title:"为什么快速排序最后能让数组有序？",slug:"为什么快速排序最后能让数组有序",link:"#为什么快速排序最后能让数组有序",children:[]},{level:2,title:"为什么叫「快速排序」？它真的快吗？",slug:"为什么叫「快速排序」-它真的快吗",link:"#为什么叫「快速排序」-它真的快吗",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-06-shellSort 希尔排序入门介绍",headers:[{level:2,title:"📌 一、希尔排序简介",slug:"📌-一、希尔排序简介",link:"#📌-一、希尔排序简介",children:[]},{level:2,title:"🧠 二、核心算法思想",slug:"🧠-二、核心算法思想",link:"#🧠-二、核心算法思想",children:[]},{level:2,title:"🎯 三、流程图解（以 [8, 9, 1, 7, 2, 3, 5, 4, 6, 0] 为例）",slug:"🎯-三、流程图解-以-8-9-1-7-2-3-5-4-6-0-为例",link:"#🎯-三、流程图解-以-8-9-1-7-2-3-5-4-6-0-为例",children:[]},{level:2,title:"✅ 四、Java 代码实现（常用 gap 为 gap/2）",slug:"✅-四、java-代码实现-常用-gap-为-gap-2",link:"#✅-四、java-代码实现-常用-gap-为-gap-2",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景分析",slug:"🧰-七、适用场景分析",link:"#🧰-七、适用场景分析",children:[]},{level:2,title:"🧩 八、LeetCode 相关题目",slug:"🧩-八、leetcode-相关题目",link:"#🧩-八、leetcode-相关题目",children:[{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 147. 对链表进行插入排序",slug:"🔹-147-对链表进行插入排序",link:"#🔹-147-对链表进行插入排序",children:[]}]},{level:2,title:"🆚 九、与插入排序对比",slug:"🆚-九、与插入排序对比",link:"#🆚-九、与插入排序对比",children:[]},{level:2,title:"🔚 十、一句话总结",slug:"🔚-十、一句话总结",link:"#🔚-十、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-07-heapSort 堆排序入门介绍",headers:[{level:2,title:"📌 一、堆排序简介",slug:"📌-一、堆排序简介",link:"#📌-一、堆排序简介",children:[]},{level:2,title:"🧠 二、堆排序核心思想",slug:"🧠-二、堆排序核心思想",link:"#🧠-二、堆排序核心思想",children:[]},{level:2,title:"🎯 三、执行过程示意",slug:"🎯-三、执行过程示意",link:"#🎯-三、执行过程示意",children:[]},{level:2,title:"✅ 四、Java代码实现",slug:"✅-四、java代码实现",link:"#✅-四、java代码实现",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景",slug:"🧰-七、适用场景",link:"#🧰-七、适用场景",children:[]},{level:2,title:"🧩 八、LeetCode 推荐题目",slug:"🧩-八、leetcode-推荐题目",link:"#🧩-八、leetcode-推荐题目",children:[{level:3,title:"🔹 912. 排序数组",slug:"🔹-912-排序数组",link:"#🔹-912-排序数组",children:[]},{level:3,title:"🔹 703. 数据流中的第 K 大元素",slug:"🔹-703-数据流中的第-k-大元素",link:"#🔹-703-数据流中的第-k-大元素",children:[]},{level:3,title:"🔹 215. 数组中的第 K 个最大元素",slug:"🔹-215-数组中的第-k-个最大元素",link:"#🔹-215-数组中的第-k-个最大元素",children:[]}]},{level:2,title:"🔚 九、一句话总结",slug:"🔚-九、一句话总结",link:"#🔚-九、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序入门介绍",headers:[{level:2,title:"📌 一、计数排序简介",slug:"📌-一、计数排序简介",link:"#📌-一、计数排序简介",children:[]},{level:2,title:"🧠 二、核心算法思想",slug:"🧠-二、核心算法思想",link:"#🧠-二、核心算法思想",children:[]},{level:2,title:"🎯 三、计数排序步骤",slug:"🎯-三、计数排序步骤",link:"#🎯-三、计数排序步骤",children:[]},{level:2,title:"✅ 四、Java代码实现（稳定版本）",slug:"✅-四、java代码实现-稳定版本",link:"#✅-四、java代码实现-稳定版本",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景",slug:"🧰-七、适用场景",link:"#🧰-七、适用场景",children:[{level:3,title:"✅ 经典适用题目推荐",slug:"✅-经典适用题目推荐",link:"#✅-经典适用题目推荐",children:[]},{level:3,title:"✅ 进阶练习（计数排序或桶排序变种）",slug:"✅-进阶练习-计数排序或桶排序变种",link:"#✅-进阶练习-计数排序或桶排序变种",children:[]},{level:3,title:"🧠 总结：适合用计数排序的题目特征",slug:"🧠-总结-适合用计数排序的题目特征",link:"#🧠-总结-适合用计数排序的题目特征",children:[]}]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 T75 颜色分类",headers:[{level:2,title:"🧠 补充说明",slug:"🧠-补充说明",link:"#🧠-补充说明",children:[{level:3,title:"🟡 快速排序的“原地性”有个细节：",slug:"🟡-快速排序的-原地性-有个细节",link:"#🟡-快速排序的-原地性-有个细节",children:[]},{level:3,title:"🟡 归并排序的“原地变种”：",slug:"🟡-归并排序的-原地变种",link:"#🟡-归并排序的-原地变种",children:[]}]},{level:2,title:"✅ 总结表格",slug:"✅-总结表格",link:"#✅-总结表格",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 242. 有效的字母异位词与 JIT 编译的预热机制",headers:[{level:2,title:"字母异位词",slug:"字母异位词",link:"#字母异位词",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"猜一猜",slug:"猜一猜",link:"#猜一猜",children:[]},{level:2,title:"JIT 编译的预热机制",slug:"jit-编译的预热机制",link:"#jit-编译的预热机制",children:[]},{level:2,title:"static 代码块的核心目的：",slug:"static-代码块的核心目的",link:"#static-代码块的核心目的",children:[]},{level:2,title:"在 LeetCode 环境中，这段代码能带来什么？",slug:"在-leetcode-环境中-这段代码能带来什么",link:"#在-leetcode-环境中-这段代码能带来什么",children:[]},{level:2,title:"注意",slug:"注意",link:"#注意",children:[]},{level:2,title:"总结",slug:"总结",link:"#总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 299. 猜数字游戏",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 383. 赎金信",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 389. 找不同",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"JIT",slug:"jit",link:"#jit",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-08-countingSort 计数排序 2085. 统计出现过一次的公共字符串",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-09-bucketSort 桶排序入门介绍",headers:[{level:2,title:"📌 一、桶排序简介",slug:"📌-一、桶排序简介",link:"#📌-一、桶排序简介",children:[]},{level:2,title:"🧠 二、核心算法思想",slug:"🧠-二、核心算法思想",link:"#🧠-二、核心算法思想",children:[]},{level:2,title:"🎯 三、流程示例",slug:"🎯-三、流程示例",link:"#🎯-三、流程示例",children:[]},{level:2,title:"✅ 四、Java代码示例",slug:"✅-四、java代码示例",link:"#✅-四、java代码示例",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景",slug:"🧰-七、适用场景",link:"#🧰-七、适用场景",children:[]},{level:2,title:"🔚 八、一句话总结",slug:"🔚-八、一句话总结",link:"#🔚-八、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-09-bucket sort 桶排序 451. 根据字符出现频率排序",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"JIT",slug:"jit",link:"#jit",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-09-bucket sort 164. 最大间距",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"优化思路",slug:"优化思路",link:"#优化思路",children:[{level:3,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:3,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-4",link:"#实现-4",children:[]},{level:2,title:"效果",slug:"效果-4",link:"#效果-4",children:[]},{level:2,title:"JIT",slug:"jit",link:"#jit",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-10-radixSort 基数排序入门介绍",headers:[{level:2,title:"📌 一、基数排序简介",slug:"📌-一、基数排序简介",link:"#📌-一、基数排序简介",children:[]},{level:2,title:"🧠 二、核心算法思想",slug:"🧠-二、核心算法思想",link:"#🧠-二、核心算法思想",children:[]},{level:2,title:"🎯 三、执行流程示例（以十进制整数排序 [170, 45, 75, 90, 802, 24, 2, 66]）",slug:"🎯-三、执行流程示例-以十进制整数排序-170-45-75-90-802-24-2-66",link:"#🎯-三、执行流程示例-以十进制整数排序-170-45-75-90-802-24-2-66",children:[]},{level:2,title:"✅ 四、Java代码实现（基于计数排序）",slug:"✅-四、java代码实现-基于计数排序",link:"#✅-四、java代码实现-基于计数排序",children:[]},{level:2,title:"📈 五、复杂度分析",slug:"📈-五、复杂度分析",link:"#📈-五、复杂度分析",children:[]},{level:2,title:"⚖️ 六、优缺点总结",slug:"⚖️-六、优缺点总结",link:"#⚖️-六、优缺点总结",children:[]},{level:2,title:"🧰 七、适用场景",slug:"🧰-七、适用场景",link:"#🧰-七、适用场景",children:[]},{level:2,title:"🧩 八、LeetCode 相关题目",slug:"🧩-八、leetcode-相关题目",link:"#🧩-八、leetcode-相关题目",children:[{level:3,title:"🔹 164. 最大间距",slug:"🔹-164-最大间距",link:"#🔹-164-最大间距",children:[]},{level:3,title:"🔹 347. 前 K 个高频元素",slug:"🔹-347-前-k-个高频元素",link:"#🔹-347-前-k-个高频元素",children:[]}]},{level:2,title:"🔚 九、一句话总结",slug:"🔚-九、一句话总结",link:"#🔚-九、一句话总结",children:[]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode sort 排序-10-radixSort 基数排序力扣 T164. 最大间距",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"抽屉原理",slug:"抽屉原理",link:"#抽屉原理",children:[{level:3,title:"✅ 定义（基本形式）",slug:"✅-定义-基本形式",link:"#✅-定义-基本形式",children:[]},{level:3,title:"🧠 举个简单例子",slug:"🧠-举个简单例子",link:"#🧠-举个简单例子",children:[]}]},{level:2,title:"解法",slug:"解法-2",link:"#解法-2",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"可视化",slug:"可视化",link:"#可视化",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"可视化",slug:"可视化-1",link:"#可视化-1",children:[]},{level:2,title:"思路",slug:"思路-4",link:"#思路-4",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"思路",slug:"思路-5",link:"#思路-5",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"拆解",slug:"拆解",link:"#拆解",children:[{level:3,title:"🧮 第二步：前缀和求 digitPositions（每个数字写入 aux[] 的起始位置）",slug:"🧮-第二步-前缀和求-digitpositions-每个数字写入-aux-的起始位置",link:"#🧮-第二步-前缀和求-digitpositions-每个数字写入-aux-的起始位置",children:[]}]}],path:"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 01-入门介绍",headers:[{level:2,title:"详细介绍一下力扣数据结构之栈",slug:"详细介绍一下力扣数据结构之栈",link:"#详细介绍一下力扣数据结构之栈",children:[]},{level:2,title:"🧱 一、栈的基本概念",slug:"🧱-一、栈的基本概念",link:"#🧱-一、栈的基本概念",children:[]},{level:2,title:"🛠️ 二、Java 中的栈结构",slug:"🛠️-二、java-中的栈结构",link:"#🛠️-二、java-中的栈结构",children:[]},{level:2,title:"🔁 三、栈的常见应用场景",slug:"🔁-三、栈的常见应用场景",link:"#🔁-三、栈的常见应用场景",children:[]},{level:2,title:"📘 四、LeetCode 高频题型整理",slug:"📘-四、leetcode-高频题型整理",link:"#📘-四、leetcode-高频题型整理",children:[{level:3,title:"✅ 括号相关",slug:"✅-括号相关",link:"#✅-括号相关",children:[]},{level:3,title:"🧮 表达式相关",slug:"🧮-表达式相关",link:"#🧮-表达式相关",children:[]},{level:3,title:"📊 单调栈",slug:"📊-单调栈",link:"#📊-单调栈",children:[]},{level:3,title:"🧱 其他经典题",slug:"🧱-其他经典题",link:"#🧱-其他经典题",children:[]}]},{level:2,title:"🧰 五、常用模板总结",slug:"🧰-五、常用模板总结",link:"#🧰-五、常用模板总结",children:[{level:3,title:"1️⃣ 括号匹配（LC 20）",slug:"_1️⃣-括号匹配-lc-20",link:"#_1️⃣-括号匹配-lc-20",children:[]},{level:3,title:"2️⃣ 单调栈模板（找下一个更大元素）",slug:"_2️⃣-单调栈模板-找下一个更大元素",link:"#_2️⃣-单调栈模板-找下一个更大元素",children:[]},{level:3,title:"3️⃣ 表达式求值（LC 150）",slug:"_3️⃣-表达式求值-lc-150",link:"#_3️⃣-表达式求值-lc-150",children:[]}]},{level:2,title:"⚠️ 六、栈相关注意事项",slug:"⚠️-六、栈相关注意事项",link:"#⚠️-六、栈相关注意事项",children:[]},{level:2,title:"📚 七、刷题建议路线（由易到难）",slug:"📚-七、刷题建议路线-由易到难",link:"#📚-七、刷题建议路线-由易到难",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 02-LC20. 有效的括号 valid-parentheses",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 03-LC155. 最小栈 min-stack",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程-1",link:"#核心流程-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 03-LC394. 字符串解码 decode-string",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[{level:3,title:"疑问1：普通的字母和括号内的字母需要区分吗？",slug:"疑问1-普通的字母和括号内的字母需要区分吗",link:"#疑问1-普通的字母和括号内的字母需要区分吗",children:[]},{level:3,title:"例子",slug:"例子",link:"#例子",children:[]}]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"耗时",slug:"耗时",link:"#耗时",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 03-LC739. 每日温度 daily-temperatures",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"是什么？",slug:"是什么",link:"#是什么",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"单调性如何实现？",slug:"单调性如何实现",link:"#单调性如何实现",children:[{level:3,title:"如何保持单调的？",slug:"如何保持单调的",link:"#如何保持单调的",children:[]},{level:3,title:"栈里存的是什么？",slug:"栈里存的是什么",link:"#栈里存的是什么",children:[]},{level:3,title:"2入栈前为什么要 while (temperatures[i] > temperatures[stack.peek()])？",slug:"_2入栈前为什么要-while-temperatures-i-temperatures-stack-peek",link:"#_2入栈前为什么要-while-temperatures-i-temperatures-stack-peek",children:[]},{level:3,title:"3入栈逻辑",slug:"_3入栈逻辑",link:"#_3入栈逻辑",children:[]}]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"疑问",slug:"疑问",link:"#疑问",children:[{level:3,title:"为什么要逆序？",slug:"为什么要逆序",link:"#为什么要逆序",children:[]}]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之栈 stack 03-LC84. 柱状图中最大的矩形 largest-rectangle-in-histogram",headers:[{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[{level:3,title:"核心宽度",slug:"核心宽度",link:"#核心宽度",children:[]},{level:3,title:"宽度计算公式",slug:"宽度计算公式",link:"#宽度计算公式",children:[]},{level:3,title:"举个例子",slug:"举个例子",link:"#举个例子",children:[]}]},{level:2,title:"复杂度",slug:"复杂度-1",link:"#复杂度-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"逻辑优化",slug:"逻辑优化",link:"#逻辑优化",children:[{level:3,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:3,title:"实现",slug:"实现-2",link:"#实现-2",children:[]}]},{level:2,title:"核心思想",slug:"核心思想",link:"#核心思想",children:[]},{level:2,title:"流程",slug:"流程",link:"#流程",children:[{level:3,title:"leftMin 数组构建",slug:"leftmin-数组构建",link:"#leftmin-数组构建",children:[]},{level:3,title:"rightMin 数组构建",slug:"rightmin-数组构建",link:"#rightmin-数组构建",children:[]},{level:3,title:"计算面积",slug:"计算面积",link:"#计算面积",children:[]}]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram.html",pathLocale:"/",extraFields:[]},{title:"字符串匹配-01-BF 暴力匹配算法",headers:[{level:2,title:"简单描述",slug:"简单描述",link:"#简单描述",children:[]},{level:2,title:"统一接口定义",slug:"统一接口定义",link:"#统一接口定义",children:[]},{level:2,title:"BF 算法实现",slug:"bf-算法实现",link:"#bf-算法实现",children:[]},{level:2,title:"KMP",slug:"kmp",link:"#kmp",children:[]}],path:"/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-01-BF.html",pathLocale:"/",extraFields:[]},{title:"字符串匹配-KMP 算法",headers:[{level:2,title:"定义",slug:"定义",link:"#定义",children:[]},{level:2,title:"算法流程",slug:"算法流程",link:"#算法流程",children:[]},{level:2,title:"PMT 简介",slug:"pmt-简介",link:"#pmt-简介",children:[{level:3,title:"前缀",slug:"前缀",link:"#前缀",children:[]},{level:3,title:"后缀",slug:"后缀",link:"#后缀",children:[]}]},{level:2,title:"C 语言实现",slug:"c-语言实现",link:"#c-语言实现",children:[]},{level:2,title:"获取 next 数组代码",slug:"获取-next-数组代码",link:"#获取-next-数组代码",children:[]}],path:"/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-02-KMP.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之子串 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"介绍一下力扣中的子串",slug:"介绍一下力扣中的子串",link:"#介绍一下力扣中的子串",children:[]},{level:2,title:"一、子串的定义",slug:"一、子串的定义",link:"#一、子串的定义",children:[]},{level:2,title:"二、常见子串相关问题类型",slug:"二、常见子串相关问题类型",link:"#二、常见子串相关问题类型",children:[]},{level:2,title:"三、子串枚举方法",slug:"三、子串枚举方法",link:"#三、子串枚举方法",children:[{level:3,title:"1. 暴力法（双层循环）",slug:"_1-暴力法-双层循环",link:"#_1-暴力法-双层循环",children:[]},{level:3,title:"2. 滑动窗口法（常用于子串匹配、计数类问题）",slug:"_2-滑动窗口法-常用于子串匹配、计数类问题",link:"#_2-滑动窗口法-常用于子串匹配、计数类问题",children:[]}]},{level:2,title:"四、常用技巧总结",slug:"四、常用技巧总结",link:"#四、常用技巧总结",children:[]},{level:2,title:"五、面试/刷题中容易混淆的概念",slug:"五、面试-刷题中容易混淆的概念",link:"#五、面试-刷题中容易混淆的概念",children:[]},{level:2,title:"六、经典子串类力扣题推荐",slug:"六、经典子串类力扣题推荐",link:"#六、经典子串类力扣题推荐",children:[]},{level:2,title:"子串属于什么？",slug:"子串属于什么",link:"#子串属于什么",children:[]},{level:2,title:"✅ 子串属于字符串的一部分结构",slug:"✅-子串属于字符串的一部分结构",link:"#✅-子串属于字符串的一部分结构",children:[]},{level:2,title:"🧱 类比理解：",slug:"🧱-类比理解",link:"#🧱-类比理解",children:[]},{level:2,title:"✅ 编程/算法角度：",slug:"✅-编程-算法角度",link:"#✅-编程-算法角度",children:[]},{level:2,title:"🔁 总结一句话：",slug:"🔁-总结一句话",link:"#🔁-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之子串 LC239. 滑动窗口最大值",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"单调栈",slug:"单调栈",link:"#单调栈",children:[]},{level:2,title:"思路梳理",slug:"思路梳理",link:"#思路梳理",children:[]},{level:2,title:"解法",slug:"解法",link:"#解法",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"说明",slug:"说明",link:"#说明",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"解法",slug:"解法-1",link:"#解法-1",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239.html",pathLocale:"/",extraFields:[]},{title:"leetcode 数组专题之子串 LC560 和为 K 的子数组",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"结果",slug:"结果",link:"#结果",children:[]},{level:2,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"实现",slug:"实现-3",link:"#实现-3",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560.html",pathLocale:"/",extraFields:[]},{title:"leetcode 基础篇专题之字符串 string 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣基础之字符串",slug:"详细介绍一下力扣基础之字符串",link:"#详细介绍一下力扣基础之字符串",children:[]},{level:2,title:"一、字符串是什么？",slug:"一、字符串是什么",link:"#一、字符串是什么",children:[]},{level:2,title:"二、力扣中字符串题的常见考点分类",slug:"二、力扣中字符串题的常见考点分类",link:"#二、力扣中字符串题的常见考点分类",children:[{level:3,title:"1. ✅ 字符串基础操作类",slug:"_1-✅-字符串基础操作类",link:"#_1-✅-字符串基础操作类",children:[]},{level:3,title:"2. ✅ 双指针技巧类",slug:"_2-✅-双指针技巧类",link:"#_2-✅-双指针技巧类",children:[]},{level:3,title:"3. ✅ 模拟类（字符串变换）",slug:"_3-✅-模拟类-字符串变换",link:"#_3-✅-模拟类-字符串变换",children:[]},{level:3,title:"4. ✅ 哈希 / 频次数组类",slug:"_4-✅-哈希-频次数组类",link:"#_4-✅-哈希-频次数组类",children:[]},{level:3,title:"5. ✅ KMP / Rabin-Karp 等高级匹配算法",slug:"_5-✅-kmp-rabin-karp-等高级匹配算法",link:"#_5-✅-kmp-rabin-karp-等高级匹配算法",children:[]},{level:3,title:"6. ✅ 动态规划类",slug:"_6-✅-动态规划类",link:"#_6-✅-动态规划类",children:[]}]},{level:2,title:"三、字符串常用操作总结（Java 示例）",slug:"三、字符串常用操作总结-java-示例",link:"#三、字符串常用操作总结-java-示例",children:[]},{level:2,title:"四、字符串题常见技巧总结",slug:"四、字符串题常见技巧总结",link:"#四、字符串题常见技巧总结",children:[]},{level:2,title:"五、刷题推荐路线（基础 → 提升）",slug:"五、刷题推荐路线-基础-→-提升",link:"#五、刷题推荐路线-基础-→-提升",children:[{level:3,title:"✅ 入门（操作类）：",slug:"✅-入门-操作类",link:"#✅-入门-操作类",children:[]},{level:3,title:"✅ 进阶（滑动/哈希）：",slug:"✅-进阶-滑动-哈希",link:"#✅-进阶-滑动-哈希",children:[]},{level:3,title:"✅ 高阶（模拟 / 动态规划）：",slug:"✅-高阶-模拟-动态规划",link:"#✅-高阶-模拟-动态规划",children:[]}]},{level:2,title:"六、常见面试问题",slug:"六、常见面试问题",link:"#六、常见面试问题",children:[]},{level:2,title:"七、小结",slug:"七、小结",link:"#七、小结",children:[]}],path:"/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html",pathLocale:"/",extraFields:[]},{title:"leetcode 基础篇专题之字符串匹配 string-matching 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"详细介绍一下力扣基础之字符串匹配",slug:"详细介绍一下力扣基础之字符串匹配",link:"#详细介绍一下力扣基础之字符串匹配",children:[]},{level:2,title:"🧩 一、什么是字符串匹配？",slug:"🧩-一、什么是字符串匹配",link:"#🧩-一、什么是字符串匹配",children:[]},{level:2,title:"🧠 二、常见字符串匹配相关问题（力扣题型）",slug:"🧠-二、常见字符串匹配相关问题-力扣题型",link:"#🧠-二、常见字符串匹配相关问题-力扣题型",children:[{level:3,title:"1. ✅ 匹配一个子串",slug:"_1-✅-匹配一个子串",link:"#_1-✅-匹配一个子串",children:[]},{level:3,title:"2. ✅ 通配符 / 正则匹配",slug:"_2-✅-通配符-正则匹配",link:"#_2-✅-通配符-正则匹配",children:[]},{level:3,title:"3. ✅ 多个字符串匹配",slug:"_3-✅-多个字符串匹配",link:"#_3-✅-多个字符串匹配",children:[]}]},{level:2,title:"🛠 三、常见字符串匹配算法",slug:"🛠-三、常见字符串匹配算法",link:"#🛠-三、常见字符串匹配算法",children:[{level:3,title:"✅ 1. 暴力匹配法（Brute Force）",slug:"✅-1-暴力匹配法-brute-force",link:"#✅-1-暴力匹配法-brute-force",children:[]},{level:3,title:"✅ 2. KMP 算法（Knuth–Morris–Pratt）",slug:"✅-2-kmp-算法-knuth–morris–pratt",link:"#✅-2-kmp-算法-knuth–morris–pratt",children:[]},{level:3,title:"✅ 3. Rabin-Karp 算法（滚动哈希）",slug:"✅-3-rabin-karp-算法-滚动哈希",link:"#✅-3-rabin-karp-算法-滚动哈希",children:[]},{level:3,title:"✅ 4. 字典树 + Aho-Corasick（多模式匹配）",slug:"✅-4-字典树-aho-corasick-多模式匹配",link:"#✅-4-字典树-aho-corasick-多模式匹配",children:[]}]},{level:2,title:"🔍 四、字符串匹配的应用技巧",slug:"🔍-四、字符串匹配的应用技巧",link:"#🔍-四、字符串匹配的应用技巧",children:[]},{level:2,title:"📌 五、面试高频题精选",slug:"📌-五、面试高频题精选",link:"#📌-五、面试高频题精选",children:[]},{level:2,title:"🚀 六、刷题顺序推荐",slug:"🚀-六、刷题顺序推荐",link:"#🚀-六、刷题顺序推荐",children:[{level:3,title:"✅ 入门",slug:"✅-入门",link:"#✅-入门",children:[]},{level:3,title:"✅ 进阶匹配",slug:"✅-进阶匹配",link:"#✅-进阶匹配",children:[]},{level:3,title:"✅ 高阶技巧",slug:"✅-高阶技巧",link:"#✅-高阶技巧",children:[]}]},{level:2,title:"✅ 七、总结回顾",slug:"✅-七、总结回顾",link:"#✅-七、总结回顾",children:[]}],path:"/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之树",slug:"详细介绍一下力扣数据结构之树",link:"#详细介绍一下力扣数据结构之树",children:[]},{level:2,title:"🌳 一、什么是树？",slug:"🌳-一、什么是树",link:"#🌳-一、什么是树",children:[{level:3,title:"🧩 常见术语：",slug:"🧩-常见术语",link:"#🧩-常见术语",children:[]}]},{level:2,title:"🛠️ 二、常见树的类型",slug:"🛠️-二、常见树的类型",link:"#🛠️-二、常见树的类型",children:[]},{level:2,title:"🧪 三、树的常见操作（Java 模板）",slug:"🧪-三、树的常见操作-java-模板",link:"#🧪-三、树的常见操作-java-模板",children:[]},{level:2,title:"🔁 四、树的遍历方式（超重要）",slug:"🔁-四、树的遍历方式-超重要",link:"#🔁-四、树的遍历方式-超重要",children:[{level:3,title:"✅ 1. 递归方式（最常用）",slug:"✅-1-递归方式-最常用",link:"#✅-1-递归方式-最常用",children:[]},{level:3,title:"✅ 2. 层序遍历（Level-order）",slug:"✅-2-层序遍历-level-order",link:"#✅-2-层序遍历-level-order",children:[]}]},{level:2,title:"🧱 五、经典题型分类（LeetCode 热门）",slug:"🧱-五、经典题型分类-leetcode-热门",link:"#🧱-五、经典题型分类-leetcode-热门",children:[{level:3,title:"✅ 简单题",slug:"✅-简单题",link:"#✅-简单题",children:[]},{level:3,title:"🟡 中等题",slug:"🟡-中等题",link:"#🟡-中等题",children:[]},{level:3,title:"🔴 困难题",slug:"🔴-困难题",link:"#🔴-困难题",children:[]}]},{level:2,title:"🧰 六、核心解题技巧（面试必备）",slug:"🧰-六、核心解题技巧-面试必备",link:"#🧰-六、核心解题技巧-面试必备",children:[]},{level:2,title:"🧠 七、二叉搜索树（BST）专题技巧",slug:"🧠-七、二叉搜索树-bst-专题技巧",link:"#🧠-七、二叉搜索树-bst-专题技巧",children:[]},{level:2,title:"✨ 八、手写题模板（例：验证对称）",slug:"✨-八、手写题模板-例-验证对称",link:"#✨-八、手写题模板-例-验证对称",children:[]},{level:2,title:"🧾 九、推荐刷题路径（树专项）",slug:"🧾-九、推荐刷题路径-树专项",link:"#🧾-九、推荐刷题路径-树专项",children:[]},{level:2,title:"✅ 总结一句话",slug:"✅-总结一句话",link:"#✅-总结一句话",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC102 二叉树的层序遍历 binary-tree-level-order-traversal",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC104. 二叉树的最大深度  maximum-depth-of-binary-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC226. 翻转二叉树 invert-binary-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]},{level:2,title:"思路",slug:"思路-3",link:"#思路-3",children:[]},{level:2,title:"是什么？",slug:"是什么",link:"#是什么",children:[{level:3,title:"关键思路",slug:"关键思路",link:"#关键思路",children:[]},{level:3,title:"复杂度",slug:"复杂度",link:"#复杂度",children:[]},{level:3,title:"Morris遍历示意伪代码（中序）",slug:"morris遍历示意伪代码-中序",link:"#morris遍历示意伪代码-中序",children:[]}]},{level:2,title:"本题实现",slug:"本题实现",link:"#本题实现",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-94. 二叉树的中序遍历 binary-tree-inorder-traversal",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC101. 对称二叉树 symmetric-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-2",link:"#实现-2",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"反思",slug:"反思-2",link:"#反思-2",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC543. 二叉树的直径 diameter-of-binary-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC108. 将有序数组转换为二叉搜索树 convert-sorted-array-to-binary-search-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心实现",slug:"核心实现",link:"#核心实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC98. 验证二叉搜索树 validate-binary-search-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"修正版本",slug:"修正版本",link:"#修正版本",children:[{level:3,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心实现",slug:"核心实现",link:"#核心实现",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]},{level:2,title:"思路",slug:"思路-2",link:"#思路-2",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-3",link:"#效果-3",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC230. 二叉搜索树中第 K 小的元素 kth-smallest-element-in-a-bst",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"中序遍历",slug:"中序遍历",link:"#中序遍历",children:[{level:3,title:"流程",slug:"流程",link:"#流程",children:[]},{level:3,title:"模板",slug:"模板",link:"#模板",children:[]}]},{level:2,title:"核心实现",slug:"核心实现",link:"#核心实现",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC199. 二叉树的右视图 binary-tree-right-side-view",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC114. 二叉树展开为链表 flatten-binary-tree-to-linked-list",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"前序遍历",slug:"前序遍历",link:"#前序遍历",children:[]},{level:2,title:"stack 模拟实现",slug:"stack-模拟实现",link:"#stack-模拟实现",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思-1",link:"#反思-1",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"Morris 前序遍历模板",slug:"morris-前序遍历模板",link:"#morris-前序遍历模板",children:[{level:3,title:"思路要点",slug:"思路要点",link:"#思路要点",children:[]},{level:3,title:"前序 Morris 遍历顺序演示",slug:"前序-morris-遍历顺序演示",link:"#前序-morris-遍历顺序演示",children:[]}]},{level:2,title:"本题实现",slug:"本题实现",link:"#本题实现",children:[]},{level:2,title:"效果",slug:"效果-2",link:"#效果-2",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC105. 从前序与中序遍历序列构造二叉树 construct-binary-tree-from-preorder-and-inorder-traversal",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"步骤拆分",slug:"步骤拆分",link:"#步骤拆分",children:[{level:3,title:"1. 推导过程图（递归拆分）",slug:"_1-推导过程图-递归拆分",link:"#_1-推导过程图-递归拆分",children:[]},{level:3,title:"2. 最终 ASCII 树图",slug:"_2-最终-ascii-树图",link:"#_2-最终-ascii-树图",children:[]}]},{level:2,title:"在线可视化",slug:"在线可视化",link:"#在线可视化",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"解释",slug:"解释",link:"#解释",children:[{level:3,title:"详细解释",slug:"详细解释",link:"#详细解释",children:[]},{level:3,title:"举个简单例子",slug:"举个简单例子",link:"#举个简单例子",children:[]}]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC437. 路径总和 III path-sum-iii",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[{level:3,title:"核心代码",slug:"核心代码",link:"#核心代码",children:[]}]},{level:2,title:"调整",slug:"调整",link:"#调整",children:[{level:3,title:"实现",slug:"实现",link:"#实现",children:[]},{level:3,title:"效果",slug:"效果",link:"#效果",children:[]},{level:3,title:"修正",slug:"修正",link:"#修正",children:[]}]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC124. 二叉树中的最大路径和 binary-tree-maximum-path-sum",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"思路",slug:"思路",link:"#思路",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"思路",slug:"思路-1",link:"#思路-1",children:[]},{level:2,title:"实现",slug:"实现-1",link:"#实现-1",children:[]},{level:2,title:"效果",slug:"效果-1",link:"#效果-1",children:[]},{level:2,title:"反思",slug:"反思",link:"#反思",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124.html",pathLocale:"/",extraFields:[]},{title:"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"核心流程",slug:"核心流程",link:"#核心流程",children:[]},{level:2,title:"实现",slug:"实现",link:"#实现",children:[]},{level:2,title:"效果",slug:"效果",link:"#效果",children:[]},{level:2,title:"为什么这么做是对的？",slug:"为什么这么做是对的",link:"#为什么这么做是对的",children:[{level:3,title:"为什么递归向下找，最终返回的就是最近公共祖先？",slug:"为什么递归向下找-最终返回的就是最近公共祖先",link:"#为什么递归向下找-最终返回的就是最近公共祖先",children:[]}]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html",pathLocale:"/",extraFields:[]},{title:"进阶数据结构篇专题之树状数组 fenwick-tree 01-入门介绍",headers:[{level:2,title:"主要知识",slug:"主要知识",link:"#主要知识",children:[]},{level:2,title:"通用基础",slug:"通用基础",link:"#通用基础",children:[]},{level:2,title:"进阶",slug:"进阶",link:"#进阶",children:[]},{level:2,title:"详细介绍一下力扣数据结构之树状数组",slug:"详细介绍一下力扣数据结构之树状数组",link:"#详细介绍一下力扣数据结构之树状数组",children:[]},{level:2,title:"🎯 一、什么是树状数组？",slug:"🎯-一、什么是树状数组",link:"#🎯-一、什么是树状数组",children:[]},{level:2,title:"📦 二、树状数组的结构和原理",slug:"📦-二、树状数组的结构和原理",link:"#📦-二、树状数组的结构和原理",children:[]},{level:2,title:"🔍 三、核心操作",slug:"🔍-三、核心操作",link:"#🔍-三、核心操作",children:[{level:3,title:"1. 求前缀和 sum(i) ：计算原数组从 1 到 i 的累积和",slug:"_1-求前缀和-sum-i-计算原数组从-1-到-i-的累积和",link:"#_1-求前缀和-sum-i-计算原数组从-1-到-i-的累积和",children:[]},{level:3,title:"2. 更新 add(i, delta) ：将原数组第 i 个元素加上 delta",slug:"_2-更新-add-i-delta-将原数组第-i-个元素加上-delta",link:"#_2-更新-add-i-delta-将原数组第-i-个元素加上-delta",children:[]}]},{level:2,title:"🧰 四、Java 树状数组模板代码",slug:"🧰-四、java-树状数组模板代码",link:"#🧰-四、java-树状数组模板代码",children:[]},{level:2,title:"🧠 五、树状数组的时间复杂度",slug:"🧠-五、树状数组的时间复杂度",link:"#🧠-五、树状数组的时间复杂度",children:[]},{level:2,title:"💡 六、力扣常见题型应用",slug:"💡-六、力扣常见题型应用",link:"#💡-六、力扣常见题型应用",children:[]},{level:2,title:"📚 七、树状数组的进阶技巧",slug:"📚-七、树状数组的进阶技巧",link:"#📚-七、树状数组的进阶技巧",children:[{level:3,title:"1. 离散化",slug:"_1-离散化",link:"#_1-离散化",children:[]},{level:3,title:"2. 区间更新 + 单点查询 / 单点更新 + 区间查询",slug:"_2-区间更新-单点查询-单点更新-区间查询",link:"#_2-区间更新-单点查询-单点更新-区间查询",children:[]},{level:3,title:"3. 多维树状数组",slug:"_3-多维树状数组",link:"#_3-多维树状数组",children:[]}]},{level:2,title:"🧩 八、树状数组和线段树对比",slug:"🧩-八、树状数组和线段树对比",link:"#🧩-八、树状数组和线段树对比",children:[]},{level:2,title:"✅ 九、总结",slug:"✅-九、总结",link:"#✅-九、总结",children:[]}],path:"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"Algorithm",headers:[],path:"/posts/algorithm/",pathLocale:"/",extraFields:[]},{title:"Posts",headers:[],path:"/posts/",pathLocale:"/",extraFields:[]},{title:"Data Struct",headers:[],path:"/posts/data-struct/",pathLocale:"/",extraFields:[]},{title:"Compress",headers:[],path:"/posts/algorithm/compress/",pathLocale:"/",extraFields:[]},{title:"Cropto",headers:[],path:"/posts/algorithm/cropto/",pathLocale:"/",extraFields:[]},{title:"Hash",headers:[],path:"/posts/algorithm/hash/",pathLocale:"/",extraFields:[]},{title:"Load Balance",headers:[],path:"/posts/algorithm/load-balance/",pathLocale:"/",extraFields:[]},{title:"Search",headers:[],path:"/posts/algorithm/search/",pathLocale:"/",extraFields:[]},{title:"Datastruct",headers:[],path:"/posts/leetcode/datastruct/",pathLocale:"/",extraFields:[]},{title:"Leetcode",headers:[],path:"/posts/leetcode/",pathLocale:"/",extraFields:[]},{title:"History1",headers:[],path:"/posts/leetcode/history1/",pathLocale:"/",extraFields:[]},{title:"History2",headers:[],path:"/posts/leetcode/history2/",pathLocale:"/",extraFields:[]},{title:"Index",headers:[],path:"/posts/leetcode/index/",pathLocale:"/",extraFields:[]},{title:"Leetcode 75",headers:[],path:"/posts/leetcode/leetcode-75/",pathLocale:"/",extraFields:[]},{title:"Sorts",headers:[],path:"/posts/leetcode/sorts/",pathLocale:"/",extraFields:[]},{title:"Topinterview 150",headers:[],path:"/posts/leetcode/topinterview-150/",pathLocale:"/",extraFields:[]},{title:"Backtracking",headers:[],path:"/posts/leetcode/topliked-100/backtracking/",pathLocale:"/",extraFields:[]},{title:"Topliked 100",headers:[],path:"/posts/leetcode/topliked-100/",pathLocale:"/",extraFields:[]},{title:"Basic",headers:[],path:"/posts/leetcode/topliked-100/basic/",pathLocale:"/",extraFields:[]},{title:"Array",headers:[],path:"/posts/leetcode/topliked-100/array/",pathLocale:"/",extraFields:[]},{title:"Bfs",headers:[],path:"/posts/leetcode/topliked-100/bfs/",pathLocale:"/",extraFields:[]},{title:"Bit Operation",headers:[],path:"/posts/leetcode/topliked-100/bit-operation/",pathLocale:"/",extraFields:[]},{title:"Data Struct",headers:[],path:"/posts/leetcode/topliked-100/data-struct/",pathLocale:"/",extraFields:[]},{title:"Dfs",headers:[],path:"/posts/leetcode/topliked-100/dfs/",pathLocale:"/",extraFields:[]},{title:"Divide and Conquer",headers:[],path:"/posts/leetcode/topliked-100/divide-and-conquer/",pathLocale:"/",extraFields:[]},{title:"Dp",headers:[],path:"/posts/leetcode/topliked-100/dp/",pathLocale:"/",extraFields:[]},{title:"Graph",headers:[],path:"/posts/leetcode/topliked-100/graph/",pathLocale:"/",extraFields:[]},{title:"Greedy",headers:[],path:"/posts/leetcode/topliked-100/greedy/",pathLocale:"/",extraFields:[]},{title:"Hash",headers:[],path:"/posts/leetcode/topliked-100/hash/",pathLocale:"/",extraFields:[]},{title:"Heap",headers:[],path:"/posts/leetcode/topliked-100/heap/",pathLocale:"/",extraFields:[]},{title:"List",headers:[],path:"/posts/leetcode/topliked-100/list/",pathLocale:"/",extraFields:[]},{title:"Offline Query Opt",headers:[],path:"/posts/leetcode/topliked-100/offline-query-opt/",pathLocale:"/",extraFields:[]},{title:"Recursive",headers:[],path:"/posts/leetcode/topliked-100/recursive/",pathLocale:"/",extraFields:[]},{title:"Search",headers:[],path:"/posts/leetcode/topliked-100/search/",pathLocale:"/",extraFields:[]},{title:"Sort",headers:[],path:"/posts/leetcode/topliked-100/sort/",pathLocale:"/",extraFields:[]},{title:"Stack",headers:[],path:"/posts/leetcode/topliked-100/stack/",pathLocale:"/",extraFields:[]},{title:"String",headers:[],path:"/posts/leetcode/topliked-100/string/",pathLocale:"/",extraFields:[]},{title:"Tree",headers:[],path:"/posts/leetcode/topliked-100/tree/",pathLocale:"/",extraFields:[]},{title:"分类",headers:[],path:"/category/",pathLocale:"/",extraFields:[]},{title:"Algorithm 分类",headers:[],path:"/category/algorithm/",pathLocale:"/",extraFields:[]},{title:"Althgorim 分类",headers:[],path:"/category/althgorim/",pathLocale:"/",extraFields:[]},{title:"Data Struct 分类",headers:[],path:"/category/data-struct/",pathLocale:"/",extraFields:[]},{title:"Data-Struct 分类",headers:[],path:"/category/data-struct/",pathLocale:"/",extraFields:[]},{title:"Index 分类",headers:[],path:"/category/index/",pathLocale:"/",extraFields:[]},{title:"Leetcode-75 分类",headers:[],path:"/category/leetcode-75/",pathLocale:"/",extraFields:[]},{title:"TopInterview150 分类",headers:[],path:"/category/topinterview150/",pathLocale:"/",extraFields:[]},{title:"标签",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"标签: algorithm",headers:[],path:"/tag/algorithm/",pathLocale:"/",extraFields:[]},{title:"标签: althgorim",headers:[],path:"/tag/althgorim/",pathLocale:"/",extraFields:[]},{title:"标签: sh",headers:[],path:"/tag/sh/",pathLocale:"/",extraFields:[]},{title:"标签: distributed",headers:[],path:"/tag/distributed/",pathLocale:"/",extraFields:[]},{title:"标签: paper",headers:[],path:"/tag/paper/",pathLocale:"/",extraFields:[]},{title:"标签: TODO",headers:[],path:"/tag/todo/",pathLocale:"/",extraFields:[]},{title:"标签: data struct",headers:[],path:"/tag/data-struct/",pathLocale:"/",extraFields:[]},{title:"标签: data-struct",headers:[],path:"/tag/data-struct/",pathLocale:"/",extraFields:[]},{title:"标签: compress",headers:[],path:"/tag/compress/",pathLocale:"/",extraFields:[]},{title:"标签: bitmap",headers:[],path:"/tag/bitmap/",pathLocale:"/",extraFields:[]},{title:"标签: croptograph",headers:[],path:"/tag/croptograph/",pathLocale:"/",extraFields:[]},{title:"标签: secret",headers:[],path:"/tag/secret/",pathLocale:"/",extraFields:[]},{title:"标签: hash",headers:[],path:"/tag/hash/",pathLocale:"/",extraFields:[]},{title:"标签: hashing",headers:[],path:"/tag/hashing/",pathLocale:"/",extraFields:[]},{title:"标签: tree",headers:[],path:"/tag/tree/",pathLocale:"/",extraFields:[]},{title:"标签: load-balance",headers:[],path:"/tag/load-balance/",pathLocale:"/",extraFields:[]},{title:"标签: search",headers:[],path:"/tag/search/",pathLocale:"/",extraFields:[]},{title:"标签: index",headers:[],path:"/tag/index/",pathLocale:"/",extraFields:[]},{title:"标签: java",headers:[],path:"/tag/java/",pathLocale:"/",extraFields:[]},{title:"标签: map",headers:[],path:"/tag/map/",pathLocale:"/",extraFields:[]},{title:"标签: bit",headers:[],path:"/tag/bit/",pathLocale:"/",extraFields:[]},{title:"标签: overview",headers:[],path:"/tag/overview/",pathLocale:"/",extraFields:[]},{title:"标签: topics",headers:[],path:"/tag/topics/",pathLocale:"/",extraFields:[]},{title:"标签: source-code",headers:[],path:"/tag/source-code/",pathLocale:"/",extraFields:[]},{title:"标签: jdk",headers:[],path:"/tag/jdk/",pathLocale:"/",extraFields:[]},{title:"标签: cache",headers:[],path:"/tag/cache/",pathLocale:"/",extraFields:[]},{title:"标签: list",headers:[],path:"/tag/list/",pathLocale:"/",extraFields:[]},{title:"标签: dag",headers:[],path:"/tag/dag/",pathLocale:"/",extraFields:[]},{title:"标签: schedule",headers:[],path:"/tag/schedule/",pathLocale:"/",extraFields:[]},{title:"标签: graph",headers:[],path:"/tag/graph/",pathLocale:"/",extraFields:[]},{title:"标签: sf",headers:[],path:"/tag/sf/",pathLocale:"/",extraFields:[]},{title:"标签: mysql",headers:[],path:"/tag/mysql/",pathLocale:"/",extraFields:[]},{title:"标签: leetcode",headers:[],path:"/tag/leetcode/",pathLocale:"/",extraFields:[]},{title:"标签: dp",headers:[],path:"/tag/dp/",pathLocale:"/",extraFields:[]},{title:"标签: Algorithm",headers:[],path:"/tag/algorithm/",pathLocale:"/",extraFields:[]},{title:"标签: backtrack",headers:[],path:"/tag/backtrack/",pathLocale:"/",extraFields:[]},{title:"标签: binary-search",headers:[],path:"/tag/binary-search/",pathLocale:"/",extraFields:[]},{title:"标签: prefix-sum",headers:[],path:"/tag/prefix-sum/",pathLocale:"/",extraFields:[]},{title:"标签: dynamic-programming",headers:[],path:"/tag/dynamic-programming/",pathLocale:"/",extraFields:[]},{title:"标签: greedy",headers:[],path:"/tag/greedy/",pathLocale:"/",extraFields:[]},{title:"标签: tips",headers:[],path:"/tag/tips/",pathLocale:"/",extraFields:[]},{title:"标签: backtracking",headers:[],path:"/tag/backtracking/",pathLocale:"/",extraFields:[]},{title:"标签: block-chain",headers:[],path:"/tag/block-chain/",pathLocale:"/",extraFields:[]},{title:"标签: binary-tree",headers:[],path:"/tag/binary-tree/",pathLocale:"/",extraFields:[]},{title:"标签: stack",headers:[],path:"/tag/stack/",pathLocale:"/",extraFields:[]},{title:"标签: math",headers:[],path:"/tag/math/",pathLocale:"/",extraFields:[]},{title:"标签: dfs",headers:[],path:"/tag/dfs/",pathLocale:"/",extraFields:[]},{title:"标签: bfs",headers:[],path:"/tag/bfs/",pathLocale:"/",extraFields:[]},{title:"标签: sort",headers:[],path:"/tag/sort/",pathLocale:"/",extraFields:[]},{title:"标签: Leetcode-75",headers:[],path:"/tag/leetcode-75/",pathLocale:"/",extraFields:[]},{title:"标签: string",headers:[],path:"/tag/string/",pathLocale:"/",extraFields:[]},{title:"标签: two-pointer",headers:[],path:"/tag/two-pointer/",pathLocale:"/",extraFields:[]},{title:"标签: sliding-window",headers:[],path:"/tag/sliding-window/",pathLocale:"/",extraFields:[]},{title:"标签: exchange-sorts",headers:[],path:"/tag/exchange-sorts/",pathLocale:"/",extraFields:[]},{title:"标签: topInterview150",headers:[],path:"/tag/topinterview150/",pathLocale:"/",extraFields:[]},{title:"标签: enumration",headers:[],path:"/tag/enumration/",pathLocale:"/",extraFields:[]},{title:"标签: simulation",headers:[],path:"/tag/simulation/",pathLocale:"/",extraFields:[]},{title:"标签: array",headers:[],path:"/tag/array/",pathLocale:"/",extraFields:[]},{title:"标签: sweep-line",headers:[],path:"/tag/sweep-line/",pathLocale:"/",extraFields:[]},{title:"标签: top100",headers:[],path:"/tag/top100/",pathLocale:"/",extraFields:[]},{title:"标签: difference-array",headers:[],path:"/tag/difference-array/",pathLocale:"/",extraFields:[]},{title:"标签: matrix",headers:[],path:"/tag/matrix/",pathLocale:"/",extraFields:[]},{title:"标签: prefix-sum-matrix",headers:[],path:"/tag/prefix-sum-matrix/",pathLocale:"/",extraFields:[]},{title:"标签: traverse",headers:[],path:"/tag/traverse/",pathLocale:"/",extraFields:[]},{title:"标签: bit-operator",headers:[],path:"/tag/bit-operator/",pathLocale:"/",extraFields:[]},{title:"标签: fenwick-tree",headers:[],path:"/tag/fenwick-tree/",pathLocale:"/",extraFields:[]},{title:"标签: queue",headers:[],path:"/tag/queue/",pathLocale:"/",extraFields:[]},{title:"标签: segment-tree",headers:[],path:"/tag/segment-tree/",pathLocale:"/",extraFields:[]},{title:"标签: suffix-array",headers:[],path:"/tag/suffix-array/",pathLocale:"/",extraFields:[]},{title:"标签: union-find-set",headers:[],path:"/tag/union-find-set/",pathLocale:"/",extraFields:[]},{title:"标签: counting",headers:[],path:"/tag/counting/",pathLocale:"/",extraFields:[]},{title:"标签: divide-and-conquer",headers:[],path:"/tag/divide-and-conquer/",pathLocale:"/",extraFields:[]},{title:"标签: ordered-set",headers:[],path:"/tag/ordered-set/",pathLocale:"/",extraFields:[]},{title:"标签: rolling-hash",headers:[],path:"/tag/rolling-hash/",pathLocale:"/",extraFields:[]},{title:"标签: heap",headers:[],path:"/tag/heap/",pathLocale:"/",extraFields:[]},{title:"标签: linkedlist",headers:[],path:"/tag/linkedlist/",pathLocale:"/",extraFields:[]},{title:"标签: offline-query-optimize",headers:[],path:"/tag/offline-query-optimize/",pathLocale:"/",extraFields:[]},{title:"标签: recursive",headers:[],path:"/tag/recursive/",pathLocale:"/",extraFields:[]},{title:"标签: ternary-search",headers:[],path:"/tag/ternary-search/",pathLocale:"/",extraFields:[]},{title:"标签: substring",headers:[],path:"/tag/substring/",pathLocale:"/",extraFields:[]},{title:"标签: string-matching",headers:[],path:"/tag/string-matching/",pathLocale:"/",extraFields:[]},{title:"文章",headers:[],path:"/article/",pathLocale:"/",extraFields:[]},{title:"星标",headers:[],path:"/star/",pathLocale:"/",extraFields:[]},{title:"时间轴",headers:[],path:"/timeline/",pathLocale:"/",extraFields:[]}],kv=ee(vv),fv=()=>kv,bv=/[^\x00-\x7F]/,yv=e=>e.split(/\s+/g).map(l=>l.trim()).filter(l=>!!l),ko=e=>e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),fo=(e,l)=>{const t=l.join(" "),i=yv(e);if(bv.test(e))return i.some(r=>t.toLowerCase().includes(r));const n=e.endsWith(" ");return new RegExp(`${i.map((r,s)=>i.length===s+1&&!n?`(?=.*\\b${ko(r)})`:`(?=.*\\b${ko(r)}\\b)`).join("")}.+`,"gi").test(t)},_v=({searchIndex:e,routeLocale:l,query:t,maxSuggestions:i})=>{const n=L(()=>e.value.filter(r=>r.pathLocale===l.value));return L(()=>{const r=t.value.trim().toLowerCase();if(!r)return[];const s=[],a=(c,d)=>{fo(r,[d.title])&&s.push({link:`${c.path}#${d.slug}`,title:c.title,header:d.title});for(const p of d.children){if(s.length>=i.value)return;a(c,p)}};for(const c of n.value){if(s.length>=i.value)break;if(fo(r,[c.title,...c.extraFields])){s.push({link:c.path,title:c.title});continue}for(const d of c.headers){if(s.length>=i.value)break;a(c,d)}}return s})},xv=e=>{const l=ee(0);return{focusIndex:l,focusNext:()=>{l.value<e.value.length-1?l.value+=1:l.value=0},focusPrev:()=>{l.value>0?l.value-=1:l.value=e.value.length-1}}},Lv=V({name:"SearchBox",props:{locales:{type:Object,default:()=>({})},hotKeys:Array,maxSuggestions:{type:Number,default:5}},setup(e){const{locales:l,hotKeys:t,maxSuggestions:i}=qh(e),n=St(l),r=Ul(),s=Al(),a=fv(),c=ee(null),d=ee(!1),p=ee(""),u=_v({searchIndex:a,routeLocale:s,query:p,maxSuggestions:i}),{focusIndex:g,focusNext:m,focusPrev:k}=xv(u);A1(t,()=>{var f;(f=c.value)==null||f.focus()});const y=L(()=>d.value&&!!u.value.length),x=()=>{y.value&&k()},E=()=>{y.value&&m()},_=f=>{if(!y.value)return;const A=u.value[f];A&&r.push(A.link).then(()=>{p.value="",g.value=0})};return()=>o("form",{class:"search-box",role:"search"},[o("input",{ref:c,type:"search",placeholder:n.value.placeholder,autocomplete:"off",spellcheck:!1,value:p.value,onFocus:()=>{d.value=!0},onBlur:()=>{d.value=!1},onInput:f=>{p.value=f.target.value},onKeydown:f=>{switch(f.key){case"ArrowUp":{x();break}case"ArrowDown":{E();break}case"Enter":{f.preventDefault(),_(g.value);break}}}}),y.value&&o("ul",{class:"suggestions",onMouseleave:()=>{g.value=-1}},u.value.map(({link:f,title:A,header:I},M)=>o("li",{class:["suggestion",{focus:g.value===M}],onMouseenter:()=>{g.value=M},onMousedown:()=>{_(M)}},o("a",{href:f,onClick:T=>{T.preventDefault()}},[o("span",{class:"page-title"},A),I&&o("span",{class:"page-header"},`> ${I}`)]))))])}});var Av=["s","/"],Ev={"/":{placeholder:"搜索"}};const wv=Ev,Tv=Av,Cv=5;var Dv=Pl({enhance({app:e}){e.component("SearchBox",l=>o(Lv,{locales:wv,hotKeys:Tv,maxSuggestions:Cv,...l}))}});const Fv=Object.freeze(Object.defineProperty({__proto__:null,default:Dv},Symbol.toStringTag,{value:"Module"})),Md="VUEPRESS_REDIRECT_STATUS",bo=Wg(Md,{}),yo=Cs(Md,{}),Sv=e=>{const l=Kg(),t=Al(),i=ni(e.config);return L(()=>{if(i.some(([n])=>t.value===n)){for(const n of l.value)for(const[r,s]of i)if(s.includes(n))return r===t.value?null:{lang:n,localePath:r}}return null})};var Iv=V({name:"RedirectModal",props:{config:{type:Object,required:!0},locales:{type:Object,required:!0}},setup(e){const l=Ul(),t=$i(),i=Al(),n=Sv(e.config),r=ee(),s=Ts(r),a=ee(!1),c=L(()=>{if(!n.value)return null;const{lang:p,localePath:u}=n.value,g=[e.locales[u],e.locales[i.value]];return{hint:g.map(({hint:m})=>m.replace("$1",p)),switch:g.map(({switch:m})=>m.replace("$1",p)).join(" / "),cancel:g.map(({cancel:m})=>m).join(" / "),remember:g.map(({remember:m})=>m).join(" / ")}}),d=()=>{yo.value[i.value]=!0,a.value&&(bo.value[i.value]=!0),s.value=!1};return Ie(t,()=>{s.value=!1}),Ee(async()=>{r.value=document.body,await ct(),n.value&&!yo.value[i.value]&&!bo.value[i.value]&&(s.value=!0)}),us(()=>{s.value=!1}),()=>o(Nc,{name:"redirect-modal-fade"},()=>{var p,u,g,m;return s.value?o("div",{key:"mask",class:"redirect-modal-mask"},o("div",{key:"popup",class:"redirect-modal-wrapper"},[o("div",{class:"redirect-modal-content"},(p=c.value)==null?void 0:p.hint.map(k=>o("p",k))),o("div",{class:"redirect-modal-hint"},[o("input",{id:"remember-redirect",type:"checkbox",value:a.value,onChange:()=>{a.value=!a.value}}),o("label",{for:"remember-redirect"},(u=c.value)==null?void 0:u.remember)]),o("button",{type:"button",class:"redirect-modal-action primary",onClick:()=>{d(),l.replace(t.value.replace(i.value,n.value.localePath))}},(g=c.value)==null?void 0:g.switch),o("button",{type:"button",class:"redirect-modal-action",onClick:()=>{d()}},(m=c.value)==null?void 0:m.cancel)])):null})}}),Ov={config:{"/":["zh-CN"]},autoLocale:!1,defaultLocale:"/",localeFallback:!0,defaultBehavior:"defaultLocale"},Pv={"/":{name:"简体中文",hint:"您的首选语言是 $1，是否切换到该语言？",switch:"切换到 $1",cancel:"取消",remember:"记住我的选择"}};const $d=Ov;var jv=Pl({setup(){},rootComponents:[()=>o(Iv,{config:$d,locales:Pv})]});const Rv=Object.freeze(Object.defineProperty({__proto__:null,config:$d,default:jv},Symbol.toStringTag,{value:"Module"})),_e=({name:e="",color:l="currentColor",ariaLabel:t},{attrs:i,slots:n})=>o("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${e}-icon`],viewBox:"0 0 1024 1024",fill:l,"aria-label":t??`${e} icon`,...i},n.default());_e.displayName="IconBase";const Hn=(e,{slots:l})=>l.default(),Vv=e=>li(e)?e:`https://github.com/${e}`,Ss=(e="")=>!li(e)||e.includes("github.com")?"GitHub":e.includes("bitbucket.org")?"Bitbucket":e.includes("gitlab.com")?"GitLab":e.includes("gitee.com")?"Gitee":null,Hd=()=>o(_e,{name:"github"},()=>o("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));Hd.displayName="GitHubIcon";const Nd=()=>o(_e,{name:"gitee"},()=>o("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));Nd.displayName="GiteeIcon";const Ud=()=>o(_e,{name:"bitbucket"},()=>o("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));Ud.displayName="BitbucketIcon";const Gd=()=>o(_e,{name:"source"},()=>o("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));Gd.displayName="SourceIcon";const Bv=({link:e,type:l=Ss(e??"")})=>{if(!l)return null;const t=l.toLowerCase();return o(t==="bitbucket"?Ud:t==="github"?Hd:t==="gitlab"?"GitLab":t==="gitee"?Nd:Gd)},zv=(e,l=0)=>{let t=3735928559^l,i=1103547991^l;for(let n=0,r;n<e.length;n++)r=e.charCodeAt(n),t=Math.imul(t^r,2654435761),i=Math.imul(i^r,1597334677);return t=Math.imul(t^t>>>16,2246822507),t^=Math.imul(i^i>>>13,3266489909),i=Math.imul(i^i>>>16,2246822507),i^=Math.imul(t^t>>>13,3266489909),4294967296*(2097151&i)+(t>>>0)},Gi=(e,l)=>zv(e)%l;let qv=class{constructor(){Wn(this,"containerElement");Wn(this,"messageElements",{});const l="message-container",t=document.getElementById(l);t?this.containerElement=t:(this.containerElement=document.createElement("div"),this.containerElement.id=l,document.body.appendChild(this.containerElement))}pop(l,t=2e3){const i=document.createElement("div"),n=Date.now();return i.className="message move-in",i.innerHTML=l,this.containerElement.appendChild(i),this.messageElements[n]=i,t>0&&setTimeout(()=>{this.close(n)},t),n}close(l){if(l){const t=this.messageElements[l];t.classList.remove("move-in"),t.classList.add("move-out"),t.addEventListener("animationend",()=>{t.remove(),delete this.messageElements[l]})}else Hl(this.messageElements).forEach(t=>{this.close(Number(t))})}destroy(){document.body.removeChild(this.containerElement)}};const Wd=/#.*$/u,Mv=e=>{const l=Wd.exec(e);return l?l[0]:""},_o=e=>decodeURI(e).replace(Wd,"").replace(/\/index\.html$/iu,"/").replace(/\/(README|index)\.md$/iu,"/").replace(/\.(?:html|md)$/iu,""),Kd=(e,l)=>{if(!wd(l))return!1;const t=_o(e.path),i=_o(l),n=Mv(l);return n?n===e.hash&&(!i||t===i):t===i};var $v=e=>Object.prototype.toString.call(e)==="[object Object]",Oi=e=>typeof e=="string";const{isArray:Jd}=Array,xo=e=>$v(e)&&Oi(e.name),Pi=(e,l=!1)=>e?Jd(e)?e.map(t=>Oi(t)?{name:t}:xo(t)?t:null).filter(t=>t!==null):Oi(e)?[{name:e}]:xo(e)?[e]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${l?"":"| false"} | undefined\`, but got`,e),[]):[],Qd=(e,l)=>{if(e){if(Jd(e)&&e.every(Oi))return e;if(Oi(e))return[e];console.error(`Expect ${l} to be \`string[] | string | undefined\`, but got`,e)}return[]},Yd=e=>Qd(e,"category"),Xd=e=>Qd(e,"tag");var Lo={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const Zd=()=>{const e=Ne();return L(()=>e.value.readingTime??null)},e0=(e,l)=>{const{minutes:t,words:i}=e,{less1Minute:n,word:r,time:s}=l;return{time:t<1?n:s.replace("$time",Math.round(t).toString()),words:r.replace("$word",i.toString())}},Ao={words:"",time:""},zr=typeof Lo>"u"?null:Lo,l0=()=>zr?St(zr):L(()=>null),Hv=()=>{if(typeof zr>"u")return L(()=>Ao);const e=Zd(),l=l0();return L(()=>e.value&&l.value?e0(e.value,l.value):Ao)},fn=()=>null,Nv="719px",Uv="1440px",Gv="9",ri={mobileBreakPoint:Nv,pcBreakPoint:Uv,colorNumber:Gv},t0=()=>{const e=ue();return L(()=>e.value.author)},Wv="http://.",Kl=()=>{const e=Ul(),l=Gl();return t=>{if(!t)return;if(Mi(t))return window.open(t);if($n(t))return l.fullPath===t?void 0:void e.push(t);const i=l.path.slice(0,l.path.lastIndexOf("/"));return void e.push(new URL(`${i}/${encodeURI(t)}`,Wv).pathname)}},El=()=>Od(),ue=()=>fm(),i0=()=>{const e=pe(),l=t0();return L(()=>{const{author:t}=e.value;return t?Pi(t):t===!1?[]:Pi(l.value,!1)})},Kv=()=>{const e=pe(),l=Te(Symbol.for("categoryMap"));return L(()=>Yd(e.value.category??e.value.categories).map(t=>{var i;return{name:t,path:((i=l==null?void 0:l.value.map[t])==null?void 0:i.path)??""}}))},Jv=()=>{const e=pe(),l=Te(Symbol.for("tagMap"));return L(()=>Xd(e.value.tag??e.value.tags).map(t=>{var i;return{name:t,path:((i=l==null?void 0:l.value.map[t])==null?void 0:i.path)??""}}))},Qv=()=>{const e=pe(),l=Ne();return L(()=>{const t=Ds(e.value.date);if(t)return t;const{createdTime:i}=l.value.git??{};return i?new Date(i):null})},Yv=()=>{const e=ue(),l=Ne(),t=pe(),i=i0(),n=Kv(),r=Jv(),s=Qv(),a=Zd(),c=Hv(),d=L(()=>({author:i.value,category:n.value,date:s.value,localizedDate:l.value.localizedDate,tag:r.value,isOriginal:t.value.isOriginal??!1,readingTime:a.value,readingTimeLocale:c.value,pageview:t.value.pageview??!0})),p=L(()=>t.value.pageInfo??e.value.pageInfo??null);return{info:d,items:p}},Qe=()=>{const e=El();return L(()=>!!e.value.pure)},n0=()=>o(_e,{name:"author"},()=>o("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));n0.displayName="AuthorIcon";const r0=()=>o(_e,{name:"calendar"},()=>o("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));r0.displayName="CalendarIcon";const s0=()=>o(_e,{name:"category"},()=>o("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));s0.displayName="CategoryIcon";const a0=()=>o(_e,{name:"print"},()=>o("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));a0.displayName="PrintIcon";const o0=()=>o(_e,{name:"tag"},()=>o("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));o0.displayName="TagIcon";const c0=()=>o(_e,{name:"timer"},()=>o("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));c0.displayName="TimerIcon";const d0=()=>o(_e,{name:"word"},()=>[o("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),o("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);d0.displayName="WordIcon";const dt=()=>{const e=ue();return L(()=>e.value.metaLocales)};var Xv=V({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0}},setup(e){const l=dt(),t=Qe();return()=>e.author.length?o("span",{class:"page-author-info","aria-label":`${l.value.author}${t.value?"":"🖊"}`,...t.value?{}:{"data-balloon-pos":"up"}},[o(n0),o("span",e.author.map(i=>i.url?o("a",{class:"page-author-item",href:i.url,target:"_blank",rel:"noopener noreferrer"},i.name):o("span",{class:"page-author-item"},i.name))),o("span",{property:"author",content:e.author.map(i=>i.name).join(", ")})]):null}}),Zv=V({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0}},setup(e){const l=dt(),t=Kl(),i=Qe();return()=>e.category.length?o("span",{class:"page-category-info","aria-label":`${l.value.category}${i.value?"":"🌈"}`,...i.value?{}:{"data-balloon-pos":"up"}},[o(s0),e.category.map(({name:n,path:r})=>o("span",{class:["page-category-item",{[`color${Gi(n,Number(ri.colorNumber))}`]:!i.value,clickable:r}],role:r?"navigation":"",onClick:()=>{r&&t(r)}},n)),o("meta",{property:"articleSection",content:e.category.map(({name:n})=>n).join(",")})]):null}}),ek=V({name:"DateInfo",inheritAttrs:!1,props:{date:Object,localizedDate:String},setup(e){const l=zn(),t=dt(),i=Qe();return()=>e.date?o("span",{class:"page-date-info","aria-label":`${t.value.date}${i.value?"":"📅"}`,...i.value?{}:{"data-balloon-pos":"up"}},[o(r0),o("span",{"data-allow-mismatch":"text"},e.localizedDate??e.date.toLocaleDateString(l.value)),o("meta",{property:"datePublished",content:e.date.toISOString()||""})]):null}}),lk=V({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(e){const l=dt();return()=>e.isOriginal?o("span",{class:"page-original-info"},l.value.origin):null}}),tk=V({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:Object,readingTimeLocale:Object},setup(e){const l=dt(),t=Qe(),i=L(()=>{if(!e.readingTime)return null;const{minutes:n}=e.readingTime;return n<1?"PT1M":`PT${Math.round(n)}M`});return()=>{var n;return(n=e.readingTimeLocale)!=null&&n.time?o("span",{class:"page-reading-time-info","aria-label":`${l.value.readingTime}${t.value?"":"⌛"}`,...t.value?{}:{"data-balloon-pos":"up"}},[o(c0),o("span",e.readingTimeLocale.time),o("meta",{property:"timeRequired",content:i.value})]):null}}}),ik=V({name:"TagInfo",inheritAttrs:!1,props:{tag:Array},setup(e){const l=dt(),t=Kl(),i=Qe();return()=>{var n;return(n=e.tag)!=null&&n.length?o("span",{class:"page-tag-info","aria-label":`${l.value.tag}${i.value?"":"🏷"}`,...i.value?{}:{"data-balloon-pos":"up"}},[o(o0),e.tag.map(({name:r,path:s})=>o("span",{class:["page-tag-item",{[`color${Gi(r,Number(ri.colorNumber))}`]:!i.value,clickable:s}],role:s?"navigation":"",onClick:()=>{s&&t(s)}},r)),o("meta",{property:"keywords",content:e.tag.map(({name:r})=>r).join(",")})]):null}}}),nk=V({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:Object,readingTimeLocale:Object},setup(e){const l=dt(),t=Qe();return()=>{var i,n;return(i=e.readingTimeLocale)!=null&&i.words?o("span",{class:"page-word-info","aria-label":`${l.value.words}${t.value?"":"🔠"}`,...t.value?{}:{"data-balloon-pos":"up"}},[o(d0),o("span",e.readingTimeLocale.words),o("meta",{property:"wordCount",content:(n=e.readingTime)==null?void 0:n.words})]):null}}}),h0=V({name:"PageInfo",components:{AuthorInfo:Xv,CategoryInfo:Zv,DateInfo:ek,OriginalInfo:lk,PageViewInfo:fn,ReadingTimeInfo:tk,TagInfo:ik,WordInfo:nk},props:{items:[Boolean,Array],info:{type:Object,required:!0}},setup(e){const l=Qe();return()=>{const t=e.items??["Author","Original","Date","PageView","ReadingTime","Category","Tag"];return t?o("div",{class:"page-info"},t.map(i=>o(Ce(`${i}Info`),{...e.info,isPure:l.value}))):null}}});const Is={"/":["",{text:"Posts",prefix:"posts/",collapsible:!0,children:[{text:"Algorithm",prefix:"algorithm/",collapsible:!0,children:["2018-05-30-algorithm-analysis","2018-12-05-bloom-filter",{text:"Compress",prefix:"compress/",collapsible:!0,children:["2018-11-09-althgorim-compress-01-overview","2018-11-09-althgorim-compress-02-althgorim-zip","2018-11-09-althgorim-compress-03-apache-compress-overview","2018-11-09-althgorim-compress-04-apache-compress-notes","2018-11-09-althgorim-compress-05-apache-compress-archivers","2018-11-09-althgorim-compress-06-apache-compress-compressor","2018-11-09-althgorim-compress-07-apache-compress-extend","2018-11-09-althgorim-compress-08-framework-compress-bit"]},{text:"Cropto",prefix:"cropto/",collapsible:!0,children:["2021-07-09-althgorim-cryptograph-06-3des","2021-07-09-althgorim-cryptograph-07-aes","2021-07-09-althgorim-cryptograph-03-base64","2021-07-09-althgorim-cryptograph-05-des","2021-07-09-althgorim-cryptograph-09-rsa","2021-07-09-althgorim-cryptograph-09-rsa2","2021-07-09-althgorim-cryptograph-04-sm4","2021-07-09-althgorim-cryptograph-02-common-02","2021-07-09-althgorim-cryptograph-01-overview-01","2021-07-09-althgorim-cryptograph-08-symmetry"]},"2019-04-05-althgorim-gifford",{text:"Hash",prefix:"hash/",collapsible:!0,children:["2018-05-30-hash-conflict","2018-05-30-hash-impl","2018-05-30-hash","2018-05-30-hash-10-chat-intro","2018-05-30-hash-11-chat-hash-functional","2018-05-30-hash-12-chat-hash-data-struct-hashmap","2018-05-30-hash-14-chat-hash-data-struct-bloom-filter","2018-05-30-hash-13-chat-hash-data-struct-hashset","2018-05-30-hash-15-chat-hash-data-struct-merkle-tree","2018-05-30-hash-15-chat-hash-load-balance-consist-hash","2018-05-30-hash-perfect"]},{text:"Load Balance",prefix:"load-balance/",collapsible:!0,children:["2018-09-10-algorithm-load-balance"]},{text:"Search",prefix:"search/",collapsible:!0,children:["2018-07-26-search"]},"2019-01-04-prority-queue","2019-01-03-many-number-sort","2019-01-08-althgorim-min-max"]},{text:"Data Struct",prefix:"data-struct/",collapsible:!0,children:["2018-11-07-data-struct-binary-heap","2018-11-07-data-struct-binary-tree","2018-06-19-data-struct-dynamic-array"]},{text:"Leetcode",prefix:"leetcode/",collapsible:!0,children:[{text:"Datastruct",prefix:"datastruct/",collapsible:!0,children:["2018-11-07-data-struct-binary-heap","2018-11-07-data-struct-binary-tree","2020-01-23-data-struct-learn-03-dag-topological-sorting","2020-01-23-data-struct-learn-03-dag","2018-06-19-data-struct-dynamic-array","2020-01-23-data-struct-learn-08-dfs-bfs","2020-01-23-data-struct-learn-03-direct-graph","2018-09-10-index-lsm","2018-09-10-index-slimtrie","2020-11-24-data-struct-tree-00-overview","2020-11-24-data-struct-tree-01-binary-tree","2020-11-24-data-struct-tree-02-binary-search-tree","2020-11-24-data-struct-tree-03-avl-tree","2020-11-24-data-struct-tree-04-red-black-tree","2020-11-24-data-struct-tree-05-spaly-tree","2020-11-24-data-struct-tree-06-2-3-tree","2020-11-24-data-struct-tree-08-b-tree","2020-11-24-data-struct-tree-09-bplus-tree","2020-11-24-data-struct-tree-10-bstar-tree","2020-11-24-data-struct-tree-11-database-index","2020-01-23-data-struct-learn-06-vertibi","2020-01-23-data-struct-learn-07-base-divided","2020-01-23-data-struct-learn-07-base-dp","2020-01-23-data-struct-learn-07-base-backtracking","2020-01-23-data-struct-learn-07-base-enum","2020-01-23-data-struct-learn-07-base-greedy","2020-01-23-data-struct-learn-07-base","2020-01-23-data-struct-learn-03-dag-schedule","2020-01-23-data-struct-learn-03-graph-floyd","2020-01-23-data-struct-learn-03-graph-dijkstra","2019-02-19-data-struct-00-overview","2019-02-19-data-struct-01-identify-hash-map","2019-02-19-data-struct-02-arraylist-source-code","2019-02-19-data-struct-03-linkedlist-source-code","2019-02-19-data-struct-04-stack-source-code","2019-02-19-data-struct-05-hashset","2019-02-19-data-struct-06-treeset","2020-01-23-data-struct-learn-01-book-algorithm-index","2020-01-23-data-struct-learn-00-index","2018-09-12-b-tree","2018-12-25-bitmap","2018-09-12-data-struct-red-black-tree","2020-01-23-data-struct-learn-02-base-type","2019-02-13-datastruct-skiplist","2020-01-23-data-struct-learn-05-gene","2020-01-23-data-struct-learn-07-base-dp-fib"]},{text:"History1",prefix:"history1/",collapsible:!0,children:["2020-06-06-algorithm-001-leetcode-01-ksum","2020-06-06-algorithm-002-leetcode-02-add-two-numbers","2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters","2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays","2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring","2020-06-06-algorithm-006-leetcode-06-zigzag-conversion","2020-06-06-algorithm-007-leetcode-07-reverse-integer","2020-06-06-algorithm-008-leetcode-10-regex-match","2020-06-06-algorithm-009-leetcode-11-container-with-most-water","2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list","2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists","2020-06-06-algorithm-012-leetcode-22-generate-parentheses","2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group","2020-06-06-algorithm-014-leetcode-29-divide-two-integers","2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words","2020-06-06-algorithm-016-leetcode-31-next-permutation","2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array","2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array","2020-06-06-algorithm-019-leetcode-36-valid-suduku","2020-06-06-algorithm-020-leetcode-39-combination-sum","2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock","2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii","2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii","2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv","2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown","2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee","2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro","2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum","2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724","2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self","2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable","2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable","2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array","2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval","2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum","2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum","2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array","2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k","2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k","2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts","2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber","2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii","2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii","2020-06-06-algorithm-020-leetcode-70-greedy-overview","2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight","2020-06-06-algorithm-020-leetcode-73-3195_dfs","2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty","2020-06-06-algorithm-020-leetcode-80-recursive-overview","2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo","2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color","2020-06-06-algorithm-098-time-complex-intro","2020-06-06-algorithm-098-time-complex-fast-table","2020-06-06-algorithm-098-space-complex-intro","2020-06-06-algorithm-099-tips-duishuqi-01-intro","2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise"]},{text:"History2",prefix:"history2/",collapsible:!0,children:["2020-06-08-algorithm-11-leetcode-039-combine-sum","2020-06-08-algorithm-11-leetcode-126-word-ladder-ii","2020-06-08-algorithm-01-Manacher-Algorithm","2020-06-08-algorithm-32-leetcode-032-valid-parentheses","2020-06-08-algorithm-34-leetcode-permutation","2020-06-08-algorithm-41-leetcode-lru-cache","2020-06-08-algorithm-42-leetcode-reverse-polish-notation","2020-06-08-algorithm-33-leetcode-042-trapping-rain-water","2020-06-08-algorithm-43-leetcode-maximum-product-subarray","2020-06-08-algorithm-44-leetcode-largest-number","2020-06-08-algorithm-45-leetcode-house-robber","2020-06-08-algorithm-46-leetcode-count-primes","2020-06-08-algorithm-47-leetcode-course-schedule","2020-06-08-algorithm-48-leetcode-trie-tree","2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum","2020-06-08-algorithm-50-leecode-shortest-palindrome","2020-06-08-algorithm-51-leecode-217-duplicate-nums","2020-06-08-algorithm-51-leecode-218-skyline","2020-06-08-algorithm-36-leetcode-edit-distance","2020-06-08-algorithm-37-leetcode-minimum-window-substring","2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram","2020-06-08-algorithm-39-leetcode-maximal-rectangle","2020-06-08-algorithm-40-leetcode-scramble-string","2020-06-08-algorithm-27-leetcode-115-distinct-sequences","2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii","2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning","2020-06-08-algorithm-29-leetcode-135-candy","2020-06-08-algorithm-30-leetcode-139-word-break","2020-06-08-algorithm-31-leetcode-141-linked-list-cycle","2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii","2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii","2020-06-08-algorithm-52-leecode-253-min-room","2020-06-08-algorithm-52-leecode-681-closest-next-time","2020-06-08-algorithm-52-leecode-681-closest-next-time copy 2","2020-06-08-algorithm-52-leecode-716-max-stack","2020-06-08-algorithm-52-leecode-253-move","2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list","2020-06-08-algorithm-16-binary-tree-travel","2020-06-08-algorithm-16-binary-tree-travel-pic","2020-06-08-algorithm-18-binary-tree-path-sum","2020-06-08-algorithm-26-topk-freq","2020-06-08-algorithm-22-gas-station","2020-06-08-algorithm-21-dp-minest-path","2020-06-08-algorithm-23-single-number","2020-06-08-algorithm-20-binary-tree-next-pointer","2020-06-08-algorithm-25-major-element","2020-06-08-algorithm-17-construct-binray-tree","2020-06-08-algorithm-24-number-of-digit-one","2020-06-08-algorithm-14-bst-best-solve","2020-06-08-algorithm-14-bst-solves","2020-06-08-algorithm-13-bst-nums","2020-06-08-algorithm-15-bst-valid"]},{text:"Index",prefix:"index/",collapsible:!0,children:["2020-06-06-algorithm-000-index-01-overview","2020-06-06-algorithm-000-index-03-topics","2020-06-06-algorithm-000-index-02-how-to-learn","2025-08-22-how-to-cross-leetcodes"]},{text:"Leetcode 75",prefix:"leetcode-75/",collapsible:!0,children:["2025-08-31-two-pointer-03-LC11-container-with-most-water","2025-08-31-array-string-06-LC151-reverse-words-in-a-string","2025-08-31-two-pointer-01-LC283-move-zeros","2025-08-31-array-string-08-LC334-increasing-triplet-subsequence","2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string","2025-08-31-two-pointer-02-LC392-is-subsequence","2025-09-18-stack-03-LC394-decode-string","2025-09-18-stack-03-LC394-decode-string copy","2025-08-31-array-string-09-LC443-string-compression","2025-08-31-array-string-04-LC605-can-place-flowers","2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i","2025-09-09-prefixsum-02-LC724-find-pivot-index","2025-09-18-stack-02-LC735-asteroid-collision","2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii","2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings","2025-09-09-hash-02-LC1207-unique-number-of-occurrences","2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies","2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length","2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element","2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close","2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs","2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude","2025-08-31-array-string-01-LC1768-merge-strings-alternately","2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays","2025-09-09-hash-04-LC2352-equal-row-and-column-pairs","2025-09-18-stack-01-LC2390-removing-stars-from-a-string"]},{text:"Sorts",prefix:"sorts/",collapsible:!0,children:["2016-07-14-sort-00-overview-sort","2016-07-14-sort-01-bubble-sort","2016-07-14-sort-02-quick-sort","2016-07-14-sort-03-select-sort","2016-07-14-sort-04-heap-sort","2016-07-14-sort-05-insert-sort","2016-07-14-sort-06-shell-sort","2016-07-14-sort-07-merge-sort","2016-07-14-sort-08-counting-sort","2016-07-14-sort-09-bucket-sort","2016-07-14-sort-10-bigfile-sort","2018-07-26-timesort"]},{text:"Topinterview 150",prefix:"topinterview-150/",collapsible:!0,children:["2025-08-22-dp-01-LC70-climbing-stairs"]},{text:"Topliked 100",prefix:"topliked-100/",collapsible:!0,children:[{text:"Array",prefix:"array/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109","2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate","2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii","2020-06-06-algorithm-000-leetcode-data-struct-000-index","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum","2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv","2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray","2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence","2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum","2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest","2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller","2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num","2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline","2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak","2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro"]},{text:"Backtracking",prefix:"backtracking/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs"]},{text:"Basic",prefix:"basic/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro"]},{text:"Bfs",prefix:"bfs/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro"]},{text:"Bit Operation",prefix:"bit-operation/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array","2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro"]},{text:"Data Struct",prefix:"data-struct/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro"]},{text:"Dfs",prefix:"dfs/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro"]},{text:"Divide and Conquer",prefix:"divide-and-conquer/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro"]},{text:"Dp",prefix:"dp/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance"]},{text:"Graph",prefix:"graph/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step"]},{text:"Greedy",prefix:"greedy/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii"]},{text:"Hash",prefix:"hash/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro"]},{text:"Heap",prefix:"heap/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro"]},{text:"List",prefix:"list/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234"]},{text:"Offline Query Opt",prefix:"offline-query-opt/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro","2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-"]},{text:"Recursive",prefix:"recursive/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro"]},{text:"Search",prefix:"search/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011","2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4"]},{text:"Sort",prefix:"sort/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164"]},{text:"Stack",prefix:"stack/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures"]},{text:"String",prefix:"string/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239","2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560","2019-03-11-algorithm-string-match-01-BF","2019-03-11-algorithm-string-match-02-KMP"]},{text:"Tree",prefix:"tree/",collapsible:!0,children:["2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543","2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro"]}]}]}]},"intro"]},Os=(e,l)=>l.activeMatch?new RegExp(l.activeMatch,"u").test(e.path):Kd(e,l.link),Ps=(e,l)=>"children"in l?!!l.prefix&&Kd(e,l.prefix)||l.children.some(t=>Ps(e,t)):Os(e,l),qr=e=>!Mi(e)&&!Rn(e),Dn=(e,l=!1,t)=>{const{meta:i,path:n,notFound:r}=ml(e,t);return r?{text:n,link:n}:{text:!l&&i.shortTitle?i.shortTitle:i.title||n,link:n,icon:i.icon}},kt=(e="",l="")=>Mi(l)||$n(l)?l:`${Gc(e)}${l}`,p0=(e,l)=>{const t=De(e)?Dn(kt(l,e)):e.link?{...e,link:qr(e.link)?ml(kt(l,e.link)).path:e.link}:e;if("children"in t){const i=kt(l,t.prefix),n=t.children==="structure"?Is[i]:t.children;return{...t,prefix:i,children:n.map(r=>p0(r,i))}}return{...t}},Mr=({config:e,prefix:l=""})=>e.map(t=>p0(t,l)),rk=({config:e,routePath:l,headerDepth:t})=>{const i=Hl(e).sort((n,r)=>r.length-n.length);for(const n of i)if(Ii(decodeURI(l),n)){const r=e[n];return Mr({config:r==="structure"?Is[n]:r||[],prefix:n})}return console.warn(`${decodeURI(l)} is missing it's sidebar config.`),[]},sk=({config:e,headerDepth:l,routeLocale:t,routePath:i})=>e==="structure"?Mr({config:Is[t],prefix:t}):Cn(e)?Mr({config:e}):ti(e)?rk({config:e,routePath:i,headerDepth:l}):[],u0=Symbol(""),ak=()=>{const e=pe(),l=ue(),t=Al(),i=$i(),n=L(()=>e.value.home?!1:e.value.sidebar??l.value.sidebar??"structure"),r=L(()=>e.value.headerDepth??l.value.headerDepth??2),s=L(()=>sk({config:n.value,headerDepth:r.value,routeLocale:t.value,routePath:i.value}));yl(u0,s)},js=()=>{const e=Te(u0);if(!e)throw new Error("useSidebarItems() is called without provider.");return e},{mobileBreakPoint:ok,pcBreakPoint:ck}=ri,Eo=e=>e.endsWith("px")?Number(e.slice(0,-2)):null,Wi=()=>{const e=ee(!1),l=ee(!1),t=()=>{e.value=window.innerWidth<=(Eo(ok)??719),l.value=window.innerWidth>=(Eo(ck)??1440)};return he("resize",t,!1),he("orientationchange",t,!1),Ee(()=>{t()}),{isMobile:e,isPC:l}},g0=Symbol(""),Ki=()=>{const e=Te(g0);if(!e)throw new Error("useDarkMode() is called without provider.");return e},dk=e=>{const l=qg(),t=El(),i=L(()=>t.value.darkmode??"switch"),n=Ft("vuepress-theme-hope-scheme","auto"),r=L(()=>{const a=i.value;return a==="disable"?!1:a==="enable"?!0:a==="auto"?l.value:a==="toggle"?n.value==="dark":n.value==="dark"||n.value==="auto"&&l.value}),s=L(()=>{const a=i.value;return a==="switch"||a==="toggle"});e.provide(g0,{canToggle:s,config:i,isDarkMode:r,status:n}),Object.defineProperties(e.config.globalProperties,{$isDarkMode:{get:()=>r.value}})},hk=()=>{const{config:e,isDarkMode:l,status:t}=Ki();ms(()=>{e.value==="disable"?t.value="light":e.value==="enable"?t.value="dark":e.value==="toggle"&&t.value==="auto"&&(t.value="light")}),he("beforeprint",()=>{l.value&&document.documentElement.setAttribute("data-theme","light")}),he("afterprint",()=>{l.value&&document.documentElement.setAttribute("data-theme","dark")}),Ee(()=>{Ol(l,i=>{document.documentElement.setAttribute("data-theme",i?"dark":"light")})})};var pk=V({name:"PageFooter",setup(){const e=El(),l=ue(),t=pe(),i=i0(),n=L(()=>{const{copyright:d,footer:p}=t.value;return p!==!1&&!!(d||p||l.value.displayFooter)}),r=L(()=>{const{footer:d}=t.value;return De(d)?d:l.value.footer??""}),s=L(()=>i.value.map(({name:d})=>d).join(", ")),a=d=>`Copyright © ${new Date().getFullYear()} ${s.value} ${d?`${d} Licensed`:""}`,c=L(()=>{const{copyright:d,license:p=""}=t.value,{license:u}=e.value,{copyright:g}=l.value;return d??(p?a(p):g??(s.value||u?a(u):!1))});return()=>n.value?o("footer",{class:"vp-footer-wrapper","vp-footer":""},[r.value?o("div",{class:"vp-footer",innerHTML:r.value}):null,c.value?o("div",{class:"vp-copyright",innerHTML:c.value}):null]):null}}),Ye=V({name:"AutoLink",props:{config:{type:Object,required:!0},iconSizing:{type:String,default:"both"}},emits:["focusout"],slots:Object,setup(e,{emit:l,slots:t}){return()=>{const{icon:i}=e.config;return o(ag,{...e,onFocusout:()=>{l("focusout")}},{default:t.default,before:t.before??(i?()=>o(Ce("VPIcon"),{icon:i,sizing:e.iconSizing}):null),after:t.after})}}}),uk=V({name:"NavbarDropdown",props:{config:{type:Object,required:!0}},slots:Object,setup(e,{slots:l}){const t=wt(e,"config"),i=L(()=>t.value.ariaLabel??t.value.text),n=ee(!1),r=s=>{s.detail===0&&(n.value=!n.value)};return Wl(()=>{n.value=!1}),()=>{var s;return o("div",{class:["vp-dropdown-wrapper",{open:n.value}]},[o("button",{type:"button",class:"vp-dropdown-title","aria-label":i.value,onClick:r},[((s=l.title)==null?void 0:s.call(l))??[o(Ce("VPIcon"),{icon:t.value.icon}),e.config.text],o("span",{class:"arrow"}),o("ul",{class:"vp-dropdown"},t.value.children.map((a,c)=>{const d=c===t.value.children.length-1;return o("li",{class:"vp-dropdown-item"},"children"in a?[o("h4",{class:"vp-dropdown-subtitle"},a.link?o(Ye,{config:a,onFocusout:()=>{a.children.length===0&&d&&(n.value=!1)}}):a.text),o("ul",{class:"vp-dropdown-subitems"},a.children.map((p,u)=>o("li",{class:"vp-dropdown-subitem"},o(Ye,{config:p,onFocusout:()=>{u===a.children.length-1&&d&&(n.value=!1)}}))))]:o(Ye,{config:a,onFocusout:()=>{d&&(n.value=!1)}}))}))])])}}});const m0=(e,l="")=>De(e)?Dn(kt(l,e)):"children"in e?{...e,...e.link&&qr(e.link)?{link:ml(kt(l,e.link)).path}:{},children:e.children.map(t=>m0(t,kt(l,e.prefix)))}:{...e,link:qr(e.link)?ml(kt(l,e.link)).path:e.link},v0=()=>{const e=ue();return L(()=>(e.value.navbar||[]).map(l=>m0(l)))},gk=()=>{const e=ue(),l=L(()=>e.value.repo),t=L(()=>l.value?Vv(l.value):null),i=L(()=>l.value?Ss(l.value):null),n=L(()=>t.value?e.value.repoLabel??i.value??"Source":null);return L(()=>!t.value||!n.value||e.value.repoDisplay===!1?null:{type:i.value??"Source",label:n.value,link:t.value})};var mk=V({name:"NavScreenMenu",props:{config:{type:Object,required:!0}},setup(e){const l=wt(e,"config"),t=L(()=>l.value.ariaLabel??l.value.text),i=ee(!1),n=(r,s)=>s[s.length-1]===r;return Wl(()=>{i.value=!1}),()=>[o("button",{type:"button",class:["vp-nav-screen-menu-title",{active:i.value}],"aria-label":t.value,onClick:()=>{i.value=!i.value}},[o("span",{class:"text"},[o(Ce("VPIcon"),{icon:l.value.icon,sizing:"both"}),e.config.text]),o("span",{class:["arrow",i.value?"down":"end"]})]),o("ul",{class:["vp-nav-screen-menu",{hide:!i.value}]},l.value.children.map(r=>o("li",{class:"vp-nav-screen-menu-item"},"children"in r?[o("h4",{class:"vp-nav-screen-menu-subtitle"},r.link?o(Ye,{config:r,onFocusout:()=>{n(r,l.value.children)&&r.children.length===0&&(i.value=!1)}}):r.text),o("ul",{class:"vp-nav-screen-menu-subitems"},r.children.map(s=>o("li",{class:"vp-nav-screen-menu-subitem"},o(Ye,{config:s,onFocusout:()=>{n(s,r.children)&&n(r,l.value.children)&&(i.value=!1)}}))))]:o(Ye,{config:r,onFocusout:()=>{n(r,l.value.children)&&(i.value=!1)}}))))]}}),vk=V({name:"NavScreenLinks",setup(){const e=v0();return()=>e.value.length?o("nav",{class:"nav-screen-links"},e.value.map(l=>o("div",{class:"navbar-links-item"},"children"in l?o(mk,{config:l}):o(Ye,{config:l})))):null}});const k0=()=>o(_e,{name:"dark"},()=>o("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));k0.displayName="DarkIcon";const f0=()=>o(_e,{name:"light"},()=>o("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));f0.displayName="LightIcon";const b0=()=>o(_e,{name:"auto"},()=>o("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));b0.displayName="AutoIcon";const y0=()=>o(_e,{name:"enter-fullscreen"},()=>o("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));y0.displayName="EnterFullScreenIcon";const _0=()=>o(_e,{name:"cancel-fullscreen"},()=>o("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));_0.displayName="CancelFullScreenIcon";const x0=()=>o(_e,{name:"outlook"},()=>[o("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);x0.displayName="OutlookIcon";var L0=V({name:"ColorModeSwitch",setup(){const{config:e,isDarkMode:l,status:t}=Ki(),i=Qe(),n=()=>{e.value==="switch"?t.value={light:"dark",dark:"auto",auto:"light"}[t.value]:t.value=t.value==="light"?"dark":"light"},r=async s=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!i.value)){n();return}const a=s.clientX,c=s.clientY,d=Math.hypot(Math.max(a,innerWidth-a),Math.max(c,innerHeight-c)),p=l.value;await document.startViewTransition(async()=>{n(),await ct()}).ready,l.value!==p&&document.documentElement.animate({clipPath:l.value?[`circle(${d}px at ${a}px ${c}px)`,`circle(0px at ${a}px ${c}px)`]:[`circle(0px at ${a}px ${c}px)`,`circle(${d}px at ${a}px ${c}px)`]},{duration:400,pseudoElement:l.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>o("button",{type:"button",class:"vp-color-mode-switch",id:"color-mode-switch",onClick:r},[o(b0,{style:{display:t.value==="auto"?"block":"none"}}),o(k0,{style:{display:t.value==="dark"?"block":"none"}}),o(f0,{style:{display:t.value==="light"?"block":"none"}})])}}),kk=V({name:"ColorMode",setup(){const e=ue(),{canToggle:l}=Ki(),t=L(()=>e.value.outlookLocales.darkmode);return()=>l.value?o("div",{class:"vp-color-mode"},[o("label",{class:"vp-color-mode-title",for:"color-mode-switch"},t.value),o(L0)]):null}}),fk=V({name:"ToggleFullScreenButton",setup(){const{isSupported:e,isFullscreen:l,toggle:t}=Mn();return()=>e.value?o("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:l.value,onClick:()=>t()},l.value?o(_0):o(y0)):null}}),A0=V({name:"ToggleFullScreenButton",setup(){const e=ue(),{isSupported:l}=Mn(),t=L(()=>e.value.outlookLocales.fullscreen);return()=>l.value?o("div",{class:"full-screen-wrapper"},[o("label",{class:"full-screen-title",for:"full-screen-switch"},t.value),o(fk)]):null}}),E0=V({name:"OutlookSettings",setup(){const e=El(),l=Qe(),t=L(()=>!l.value&&e.value.fullscreen);return()=>o(Ls,()=>[null,o(kk),t.value?o(A0):null])}}),bk=V({name:"NavScreen",props:{show:Boolean},slots:Object,setup(e,{slots:l}){const{isMobile:t}=Wi(),i=ne(),n=Ts(i);return Wl(()=>{n.value=!1}),Ie(t,r=>{!r&&e.show&&(n.value=!1)}),Ee(()=>{i.value=document.body}),Tt(()=>{n.value=!1}),()=>o(Qt,{name:"fade",onEnter:()=>{n.value=!0},onAfterLeave:()=>{n.value=!1}},()=>{var r,s;return e.show?o("div",{id:"nav-screen",class:"vp-nav-screen"},o("div",{class:"vp-nav-screen-container"},[(r=l.before)==null?void 0:r.call(l),o(vk),o("div",{class:"vp-outlook-wrapper"},o(E0)),(s=l.after)==null?void 0:s.call(l)])):null})}}),yk=V({name:"NavbarBrand",setup(){const e=Al(),l=qn(),t=ue(),i=L(()=>t.value.home??e.value),n=L(()=>l.value.title),r=L(()=>t.value.navbarTitle??n.value),s=L(()=>t.value.logo?ye(t.value.logo):null),a=L(()=>t.value.logoDark?ye(t.value.logoDark):null);return()=>o(Oe,{to:i.value,class:"vp-brand","aria-label":t.value.routeLocales.home},()=>[s.value?o("img",{class:["vp-nav-logo",{light:!!a.value}],src:s.value,alt:""}):null,a.value?o("img",{class:["vp-nav-logo dark"],src:a.value,alt:""}):null,r.value?o("span",{class:["vp-site-name",{"hide-in-pad":s.value&&(t.value.hideSiteNameOnMobile??!0)}]},r.value):null])}}),_k=V({name:"NavbarLinks",setup(){const e=v0();return()=>e.value.length?o("nav",{class:"vp-nav-links"},e.value.map(l=>o("div",{class:"vp-nav-item hide-in-mobile"},"children"in l?o(uk,{config:l}):o(Ye,{config:l,iconSizing:"height"})))):null}}),xk=V({name:"RepoLink",setup(){const e=gk();return()=>e.value?o("div",{class:"vp-nav-item vp-action"},o("a",{class:"vp-action-link",href:e.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":e.value.label},o(Bv,{type:e.value.type,style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const w0=({active:e=!1},{emit:l})=>o("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":e}],"aria-label":"Toggle Navbar","aria-expanded":e,"aria-controls":"nav-screen",onClick:()=>{l("toggle")}},o("span",[o("span",{class:"vp-top"}),o("span",{class:"vp-middle"}),o("span",{class:"vp-bottom"})]));w0.displayName="ToggleNavbarButton";const $r=(e,{emit:l})=>o("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>{l("toggle")}},o("span",{class:"icon"}));$r.displayName="ToggleSidebarButton",$r.emits=["toggle"];var Lk=V({name:"OutlookButton",setup(){const e=El(),{canToggle:l}=Ki(),{isSupported:t}=Mn(),i=Qe(),n=ee(!1),r=L(()=>!i.value&&e.value.fullscreen&&t),s=L(()=>l.value||r.value);return Wl(()=>{n.value=!1}),()=>s.value?o("div",{class:"vp-nav-item hide-in-mobile"},l.value&&!r.value?o(L0):r.value&&!l.value?o(A0):o("button",{type:"button",class:["vp-outlook-button",{open:n.value}],tabindex:"-1","aria-hidden":!0},[o(x0),o("div",{class:"vp-outlook-dropdown"},o(E0))])):null}}),Ak=V({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(e,{emit:l,slots:t}){const i=ue(),{isMobile:n}=Wi(),r=ee(!1),s=L(()=>{const{navbarAutoHide:p="mobile"}=i.value;return p!=="none"&&(p==="always"||n.value)}),a=L(()=>i.value.navbarLayout??{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),c={Brand:yk,Language:fn,Links:_k,Repo:xk,Outlook:Lk,Search:cl("SearchBox")?Ce("SearchBox"):fn},d=p=>c[p]??(cl(p)?Ce(p):fn);return Wl(()=>{r.value=!1}),Ie(n,p=>{p||(r.value=!1)}),()=>{var p,u,g;return[o("header",{key:"navbar",id:"navbar",class:["vp-navbar",{"auto-hide":s.value}],"vp-navbar":""},[o("div",{class:"vp-navbar-start"},[o($r,{onToggle:()=>{r.value&&(r.value=!1),l("toggleSidebar")}}),(p=a.value.start)==null?void 0:p.map(m=>o(d(m)))]),o("div",{class:"vp-navbar-center"},[(u=a.value.center)==null?void 0:u.map(m=>o(d(m)))]),o("div",{class:"vp-navbar-end"},[(g=a.value.end)==null?void 0:g.map(m=>o(d(m))),o(w0,{active:r.value,onToggle:()=>{r.value=!r.value}})])]),o(bk,{show:r.value},{before:t.screenTop,after:t.screenBottom})]}}}),Ek=V({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(e){const l=Gl();return()=>De(e.config.link)?o(Ye,{class:["vp-sidebar-link",{active:Os(l,e.config)}],config:{...e.config,exact:!0}}):o("p",e,[o(Ce("VPIcon"),{icon:e.config.icon,sizing:"both"}),e.config.text])}}),wk=V({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(e,{emit:l}){const t=Gl(),i=ee(!1),n=L(()=>Ps(t,e.config)),r=L(()=>Os(t,e.config)),s=L(()=>e.open||e.config.expanded&&!i.value);return()=>{const{collapsible:a,children:c=[],icon:d,prefix:p,link:u,text:g}=e.config;return o("section",{class:"vp-sidebar-group"},[o(a?"button":"p",{class:["vp-sidebar-header",{clickable:a||u,exact:r.value,active:n.value}],...a?{type:"button",onClick:()=>{i.value=!0,l("toggle")}}:{}},[o(Ce("VPIcon"),{icon:d,sizing:"both"}),u?o(Ye,{class:"vp-sidebar-title no-external-link-icon",config:{text:g,link:u}}):o("span",{class:"vp-sidebar-title"},g),a?o("span",{class:["vp-arrow",s.value?"down":"end"]}):null]),s.value||!a?o(T0,{key:p,config:c}):null])}}}),T0=V({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(e){const l=Gl(),t=$i(),i=ee(-1),n=r=>{i.value=r===i.value?-1:r};return Ol(t,()=>{const r=e.config.findIndex(s=>Ps(l,s));i.value=r},{flush:"post"}),()=>o("ul",{class:"vp-sidebar-links"},e.config.map((r,s)=>o("li","children"in r?o(wk,{config:r,open:s===i.value,onToggle:()=>{n(s)}}):o(Ek,{config:r}))))}}),Tk=V({name:"SideBar",slots:Object,setup(e,{slots:l}){const t=Gl(),i=js(),n=ne();return Ee(()=>{Ol(()=>t.hash,r=>{const s=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${t.path}${r}"]`);if(!s)return;const{top:a,height:c}=n.value.getBoundingClientRect(),{top:d,height:p}=s.getBoundingClientRect();d<a?s.scrollIntoView(!0):d+p>a+c&&s.scrollIntoView(!1)})}),()=>{var r,s,a;return o("aside",{ref:n,key:"sidebar",id:"sidebar",class:"vp-sidebar","vp-sidebar":""},[(r=l.top)==null?void 0:r.call(l),((s=l.default)==null?void 0:s.call(l))??o(T0,{config:i.value}),(a=l.bottom)==null?void 0:a.call(l)])}}}),Rs=V({name:"CommonWrapper",props:{containerClass:String,noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(e,{slots:l}){const t=pe(),i=El(),n=ue(),{isMobile:r,isPC:s}=Wi(),a=Qe(),[c,d]=Si(!1),[p,u]=Si(!1),g=js(),m=ne(),k=Ts(m),y=ee(!1),x=L(()=>e.noNavbar||t.value.navbar===!1||n.value.navbar===!1?!1:!!(n.value.logo??n.value.repo??n.value.navbar)),E=L(()=>e.noSidebar?!1:(t.value.sidebar??!0)&&g.value.length!==0&&!t.value.home),_=L(()=>t.value.externalLinkIcon??i.value.externalLinkIcon??!0),f=L(()=>!e.noToc&&!t.value.home&&(t.value.toc??n.value.toc??!0)),A={x:0,y:0},I=N=>{A.x=N.changedTouches[0].clientX,A.y=N.changedTouches[0].clientY},M=N=>{const F=N.changedTouches[0].clientX-A.x,B=N.changedTouches[0].clientY-A.y;Math.abs(F)>Math.abs(B)*1.5&&Math.abs(F)>40&&(F>0&&A.x<=80?d(!0):d(!1))};let T=0;return he("scroll",gd(()=>{const N=window.scrollY;N<=58||N<T?y.value=!1:T+200<N&&!c.value&&(y.value=!0),T=N},300,!0)),Wl(()=>{d(!1)}),Ie(r,N=>{N||d(!1)}),Ie(c,N=>{k.value=N}),Ee(()=>{m.value=document.body}),Tt(()=>{k.value=!1}),()=>o(cl("GlobalEncrypt")?Ce("GlobalEncrypt"):Hn,()=>o("div",{class:["theme-container",{"hide-navbar":y.value,"no-navbar":!x.value,"sidebar-collapsed":!r.value&&!s.value&&p.value,"sidebar-open":r.value&&c.value,"no-sidebar":!E.value&&!l.sidebar&&!l.sidebarTop&&!l.sidebarBottom,"external-link-icon":_.value,pure:a.value,"has-toc":f.value},e.containerClass??"",t.value.containerClass??""],"vp-container":"",onTouchStart:I,onTouchEnd:M},[x.value?o(Ak,{onToggleSidebar:()=>d()},{screenTop:l.navScreenTop,screenBottom:l.navScreenBottom}):null,o(Qt,{name:"fade"},()=>c.value?o("div",{class:"vp-sidebar-mask",onClick:()=>d(!1)}):null),o(Qt,{name:"fade"},()=>r.value?null:o("div",{class:"toggle-sidebar-wrapper",onClick:()=>u()},o("span",{class:["arrow",p.value?"end":"start"]}))),o(Tk,{},{default:l.sidebar,top:l.sidebarTop,bottom:l.sidebarBottom}),l.default(),o(pk)]))}});const se=V({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(e,{slots:l}){const t=n=>{n.style.transition=`transform ${e.duration}s ease-in-out ${e.delay}s, opacity ${e.duration}s ease-in-out ${e.delay}s`,n.style.transform="translateY(-20px)",n.style.opacity="0"},i=n=>{n.style.transform="translateY(0)",n.style.opacity="1"};return()=>{const n={name:"drop",appear:e.appear,onAppear:t,onAfterAppear:i,onEnter:t,onAfterEnter:i,onBeforeLeave:t},r=()=>l.default();return e.type==="group"?o(Nc,n,r):o(Qt,n,r)}}});var Nn=V({name:"MarkdownContent",props:{custom:Boolean},slots:Object,setup(e,{slots:l}){const t=pe(),i=El(),n=ue(),r=ee(),s=Ng(r,{delayEnter:kn(i.value.focus)?i.value.focus:1500,delayLeave:0}),a=L(()=>!!(i.value.focus??i.value.pure)&&s.value),c=L(()=>t.value.changelog??((n.value.changelog??!1)&&!t.value.home)),d=L(()=>t.value.contributors??((n.value.contributors??!0)&&!t.value.home));return Ee(()=>{const p=document.documentElement;Ol(a,u=>{u?p.classList.add("is-focusing"):p.classList.remove("is-focusing")})}),()=>{var p,u;return o("div",{class:{custom:e.custom},"vp-content":""},[(p=l.before)==null?void 0:p.call(l),o(od,{ref:r,id:"markdown-content"}),(u=l.after)==null?void 0:u.call(l),c.value&&cl("GitChangelog")?o(Ce("GitChangelog")):null,d.value&&cl("GitContributors")?o(Ce("GitContributors")):null])}}}),Ck=V({name:"PrintButton",setup(){const e=El(),l=ue();return()=>e.value.print===!1?null:o("button",{type:"button",class:"print-button",title:l.value.metaLocales.print,onClick:()=>{window.print()}},o(a0))}}),C0=V({name:"TOC",props:{items:Array,options:Object},slots:Object,setup(e,{slots:l}){const t=wt(e,"options"),i=L1(t),n=Gl(),r=dt(),[s,a]=Si(),c=ne(),d=ee("-2rem"),p=k=>{var y;(y=c.value)==null||y.scrollTo({top:k,behavior:"smooth"})},u=()=>{if(c.value){const k=document.querySelector(".vp-toc-item.active");k?d.value=`${k.getBoundingClientRect().top-c.value.getBoundingClientRect().top+c.value.scrollTop}px`:d.value="-2rem"}else d.value="-2rem"};Ee(()=>{Ol(()=>n.hash,k=>{if(c.value){const y=document.querySelector(`#toc a.vp-toc-link[href$="${k}"]`);if(!y)return;const{top:x,height:E}=c.value.getBoundingClientRect(),{top:_,height:f}=y.getBoundingClientRect();_<x?p(c.value.scrollTop+_-x):_+f>x+E&&p(c.value.scrollTop+_+f-x-E)}},{flush:"post"}),Ol(()=>n.fullPath,u,{flush:"post"})});const g=({title:k,level:y,slug:x})=>o(Oe,{to:`#${x}`,class:["vp-toc-link",`level${y}`],onClick:()=>{a()}},()=>k),m=k=>k.length?o("ul",{class:"vp-toc-list"},k.map(y=>{const x=m(y.children);return[o("li",{class:["vp-toc-item",{active:n.hash===`#${y.slug}`}]},g(y)),x?o("li",x):null]})):null;return()=>{var E,_,f;const k=(E=e.items)!=null&&E.length?m(e.items):m(i.value),y=(_=l.before)==null?void 0:_.call(l),x=(f=l.after)==null?void 0:f.call(l);return o(Ls,()=>k||y||x?o("div",{class:"vp-toc-placeholder"},[o("aside",{id:"toc","vp-toc":""},[y,k?[o("div",{class:"vp-toc-header",onClick:()=>{a()}},[r.value.toc,o(Ck),o("div",{class:["arrow",s.value?"down":"end"]})]),o("div",{class:["vp-toc-wrapper",s.value?"open":""],ref:c},[k,o("div",{class:"vp-toc-marker",style:{top:d.value}})])]:null,x])]):null)}}}),Vs=V({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(e){const l=ue(),t=ne(),i=({target:n})=>{const r=document.querySelector(n.hash);if(r){const s=()=>{r.removeAttribute("tabindex"),r.removeEventListener("blur",s)};r.setAttribute("tabindex","-1"),r.addEventListener("blur",s),r.focus(),window.scrollTo(0,0)}};return Wl(()=>{var n;(n=t.value)==null||n.focus()}),()=>[o("span",{ref:t,tabindex:"-1"}),o("a",{href:`#${e.content}`,class:"vp-skip-link sr-only",onClick:i},l.value.routeLocales.skipToContent)]}});let br=null,di=null;const Hr={wait:()=>br,pending:()=>{br=new Promise(e=>{di=e})},resolve:()=>{di==null||di(),br=null,di=null}},Bs=(e,{slots:l})=>o(Qt,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:Hr.resolve,onBeforeLeave:Hr.pending},()=>l.default());Bs.displayName="FadeSlideY";var D0=V({name:"PageTitle",setup(){const e=Ne(),l=pe(),t=ue(),{info:i,items:n}=Yv();return()=>o("div",{class:"vp-page-title"},[o("h1",[t.value.titleIcon===!1?null:o(Ce("VPIcon"),{icon:l.value.icon}),e.value.title]),o(h0,{info:i.value,items:n.value}),o("hr")])}});const Dk=(e,l)=>{const t=e.replace(l,"/").split("/"),i=[];let n=bs(l);return t.forEach((r,s)=>{s!==t.length-1?(n+=`${r}/`,i.push({link:n,name:r||"Home"})):r!==""&&(n+=r,i.push({link:n,name:r}))}),i},wo=(e,l)=>e===!1?e:ti(e)?{...e,link:Dn(e.link,!0,l).link}:De(e)?Dn(e,!0,l):null,Nr=(e,l,t)=>{const i=e.findIndex(r=>r.link===l);if(i!==-1){if(!e[i+t])return null;const r=e[i+t];return r.link?r:"prefix"in r&&!ml(r.prefix).notFound?{...r,link:r.prefix}:null}for(const r of e)if("children"in r){const s=Nr(r.children,l,t);if(s)return s}const n=e.findIndex(r=>"prefix"in r&&r.prefix===l);if(n!==-1){if(!e[n+t])return null;const r=e[n+t];return r.link?r:"prefix"in r&&!ml(r.prefix).notFound?{...r,link:r.prefix}:null}return null},Fk=()=>{const e=pe(),l=ue(),t=js(),i=$i(),n=L(()=>{const s=wo(e.value.prev,i.value);return s===!1?null:s??(l.value.prevLink===!1?null:Nr(t.value,i.value,-1))}),r=L(()=>{const s=wo(e.value.next,i.value);return s===!1?null:s??(l.value.nextLink===!1?null:Nr(t.value,i.value,1))});return{prevLink:n,nextLink:r}},Ur=(e,{slots:l})=>{var u,g;const{bgImage:t,bgImageDark:i,bgImageStyle:n,color:r,description:s,image:a,imageDark:c,header:d,features:p=[]}=e;return o("div",{class:"vp-feature-wrapper"},[t?o("div",{class:["vp-feature-bg",{light:i}],style:[{"background-image":`url(${t})`},n]}):null,i?o("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${i})`},n]}):null,o("div",{class:"vp-feature",style:r?{color:r}:{}},[((u=l.image)==null?void 0:u.call(l,e))??[a?o("img",{class:["vp-feature-image",{light:c}],src:ye(a),alt:""}):null,c?o("img",{class:"vp-feature-image dark",src:ye(c),alt:""}):null],((g=l.info)==null?void 0:g.call(l,e))??[d?o("h2",{class:"vp-feature-header"},d):null,s?o("p",{class:"vp-feature-description",innerHTML:s}):null],p.length?o("div",{class:"vp-features"},p.map(({icon:m,title:k,details:y,link:x})=>{const E=[o("h3",{class:"vp-feature-title"},[o(Ce("VPIcon"),{icon:m}),o("span",{innerHTML:k})]),o("p",{class:"vp-feature-details",innerHTML:y})];return x?Rn(x)?o("a",{class:"vp-feature-item link",href:x,"aria-label":k,target:"_blank"},E):o(Oe,{class:"vp-feature-item link",to:x,"aria-label":k},()=>E):o("div",{class:"vp-feature-item"},E)})):null])])};Ur.displayName="FeaturePanel";var Sk=V({name:"HeroInfo",slots:Object,setup(e,{slots:l}){const t=pe(),i=qn(),n=L(()=>t.value.heroFullScreen??!1),r=L(()=>{const{heroText:d,tagline:p}=t.value;return{text:d??(i.value.title||"Hello"),tagline:p??i.value.description,isFullScreen:n.value}}),s=L(()=>{const{heroText:d,heroImage:p,heroImageDark:u,heroAlt:g,heroImageStyle:m}=t.value;return{image:p?ye(p):null,imageDark:u?ye(u):null,imageStyle:m,alt:g??d??"",isFullScreen:n.value}}),a=L(()=>{const{bgImage:d,bgImageDark:p,bgImageStyle:u}=t.value;return{image:De(d)?ye(d):null,imageDark:De(p)?ye(p):null,bgStyle:u,isFullScreen:n.value}}),c=L(()=>t.value.actions??[]);return()=>{var d,p,u;return o("header",{class:["vp-hero-info-wrapper",{fullscreen:n.value}]},[((d=l.bg)==null?void 0:d.call(l,a.value))??[a.value.image?o("div",{class:["vp-hero-mask",{light:a.value.imageDark}],style:[{"background-image":`url(${a.value.image})`},a.value.bgStyle]}):null,a.value.imageDark?o("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${a.value.imageDark})`},a.value.bgStyle]}):null],o("div",{class:"vp-hero-info"},[((p=l.logo)==null?void 0:p.call(l,s.value))??o(se,{appear:!0,type:"group"},()=>{const{image:g,imageDark:m,imageStyle:k,alt:y}=s.value;return[g?o("img",{key:"light",class:["vp-hero-image",{light:m}],style:k,src:g,alt:y}):null,m?o("img",{key:"dark",class:"vp-hero-image dark",style:k,src:m,alt:y}):null]}),((u=l.info)==null?void 0:u.call(l,r.value))??o("div",{class:"vp-hero-infos"},[r.value.text?o(se,{appear:!0,delay:.04},()=>o("h1",{id:"main-title",class:"vp-hero-title"},r.value.text)):null,r.value.tagline?o(se,{appear:!0,delay:.08},()=>o("p",{id:"main-description",innerHTML:r.value.tagline})):null,c.value.length?o(se,{appear:!0,delay:.12},()=>o("p",{class:"vp-hero-actions"},c.value.map(g=>o(Ye,{class:["vp-hero-action",g.type??"default","no-external-link-icon"],config:g})))):null])])])}}});const F0=(e,{slots:l})=>{var g,m,k;const{bgImage:t,bgImageDark:i,bgImageStyle:n,color:r,description:s,image:a,imageDark:c,header:d,highlights:p=[],type:u="un-order"}=e;return o("div",{class:"vp-highlight-wrapper",style:r?{color:r}:{}},[t?o("div",{class:["vp-highlight-bg",{light:i}],style:[{"background-image":`url(${t})`},n]}):null,i?o("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${i})`},n]}):null,o("div",{class:"vp-highlight"},[((g=l.image)==null?void 0:g.call(l,e))??[a?o("img",{class:["vp-highlight-image",{light:c}],src:ye(a),alt:""}):null,c?o("img",{class:"vp-highlight-image dark",src:ye(c),alt:""}):null],((m=l.info)==null?void 0:m.call(l,e))??[o("div",{class:"vp-highlight-info-wrapper"},o("div",{class:"vp-highlight-info"},[d?o("h2",{class:"vp-highlight-header",innerHTML:d}):null,s?o("p",{class:"vp-highlight-description",innerHTML:s}):null,((k=l.highlights)==null?void 0:k.call(l,p))??o(u==="order"?"ol":u==="no-order"?"dl":"ul",{class:"vp-highlights"},p.map(({icon:y,title:x,details:E,link:_})=>{const f=[o(u==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[y?o(Ce("VPIcon"),{class:"vp-highlight-icon",icon:y}):null,o("span",{innerHTML:x})]),E?o(u==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:E}):null];return o(u==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:_}]},_?Rn(_)?o("a",{class:"vp-highlight-item link",href:_,"aria-label":x,target:"_blank"},f):o(Oe,{class:"vp-highlight-item link",to:_,"aria-label":x},()=>f):o("div",{class:"vp-highlight-item"},f))}))]))]])])};F0.displayName="HighlightPanel";var Ik=V({name:"HomePage",slots:Object,setup(e,{slots:l}){const t=pe(),i=L(()=>{const{features:r}=t.value;return Cn(r)?r:null}),n=L(()=>{const{highlights:r}=t.value;return Cn(r)?r:null});return()=>{var r,s,a,c;return o("main",{id:"main-content",class:"vp-page vp-project-home","aria-labelledby":t.value.heroText===""?"":"main-title"},[(r=l.top)==null?void 0:r.call(l),o(Sk),((s=n.value)==null?void 0:s.map(d=>"features"in d?o(Ur,d):o(F0,d)))??(i.value?o(se,{appear:!0,delay:.24},()=>o(Ur,{features:i.value})):null),(a=l.center)==null?void 0:a.call(l),o(se,{appear:!0,delay:.32},()=>o(Nn)),(c=l.bottom)==null?void 0:c.call(l)])}}}),Ok=V({name:"BreadCrumb",setup(){const e=Ne(),l=Al(),t=$i(),i=pe(),n=ue(),r=ne([]),s=L(()=>(i.value.breadcrumb??n.value.breadcrumb??!0)&&r.value.length>1),a=L(()=>i.value.breadcrumbIcon??n.value.breadcrumbIcon??!0),c=()=>{const d=Dk(e.value.path,l.value).map(({link:p,name:u})=>{const{path:g,meta:m,notFound:k}=ml(p);return k||m.breadcrumbExclude?null:{title:m.shortTitle||m.title||u,icon:m.icon,path:g}}).filter(p=>p!==null);d.length>1&&(r.value=d)};return Ee(()=>{Ol(t,c)}),()=>o("nav",{class:["vp-breadcrumb",{disable:!s.value}]},s.value?o("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},r.value.map((d,p)=>o("li",{class:{"is-active":r.value.length-1===p},property:"itemListElement",typeof:"ListItem"},[o(Oe,{to:d.path,property:"item",typeof:"WebPage"},()=>[a.value?o(Ce("VPIcon"),{icon:d.icon}):null,o("span",{property:"name"},d.title||"Unknown")]),o("meta",{property:"position",content:p+1})]))):[])}}),Pk=V({name:"PageNav",setup(){const e=ue(),l=Kl(),{prevLink:t,nextLink:i}=Fk();return he("keydown",n=>{n.altKey&&(n.key==="ArrowRight"?i.value&&(l(i.value.link),n.preventDefault()):n.key==="ArrowLeft"&&t.value&&(l(t.value.link),n.preventDefault()))}),()=>t.value||i.value?o("nav",{class:"vp-page-nav"},[t.value?o(Ye,{class:"prev",config:t.value},()=>{var n,r;return[o("div",{class:"hint"},[o("span",{class:"arrow start"}),e.value.metaLocales.prev]),o("div",{class:"link"},[o(Ce("VPIcon"),{icon:(n=t.value)==null?void 0:n.icon}),(r=t.value)==null?void 0:r.text])]}):null,i.value?o(Ye,{class:"next",config:i.value},()=>{var n,r;return[o("div",{class:"hint"},[e.value.metaLocales.next,o("span",{class:"arrow end"})]),o("div",{class:"link"},[(n=i.value)==null?void 0:n.text,o(Ce("VPIcon"),{icon:(r=i.value)==null?void 0:r.icon})])]}):null]):null}});const jk={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},Rk=({docsRepo:e,docsBranch:l,docsDir:t,filePathRelative:i,editLinkPattern:n})=>{if(!i)return null;const r=Ss(e);let s;return n?s=n:r!==null&&(s=jk[r]),s?s.replace(/:repo/u,li(e)?e:`https://github.com/${e}`).replace(/:branch/u,l).replace(/:path/u,Wc(`${bs(t)}/${i}`)):null},Vk=()=>{const e=ue(),l=Ne(),t=pe();return L(()=>{const{repo:i,docsRepo:n=i,docsBranch:r="main",docsDir:s="",editLink:a,editLinkPattern:c=""}=e.value;if(!(t.value.editLink??a??!0)||!n)return null;const d=Rk({docsRepo:n,docsBranch:r,docsDir:s,editLinkPattern:c,filePathRelative:l.value.filePathRelative});return d?{text:e.value.metaLocales.editLink,link:d}:null})},S0=()=>o(_e,{name:"edit"},()=>[o("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),o("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);S0.displayName="EditIcon";var Bk=V({name:"PageMeta",setup(){const e=pe(),l=ue(),t=Vk(),i=T1(()=>e.value.lastUpdated??l.value.lastUpdated??!0);return()=>{const n=(e.value.changelog??l.value.changelog??!0)&&cl("GitChangelog");return o("footer",{class:"vp-page-meta"},[t.value?o("div",{class:"vp-meta-item edit-link"},o(Ye,{class:"vp-meta-label",config:t.value},{before:()=>o(S0)})):null,o("div",{class:"vp-meta-item git-info"},!n&&i.value?o("div",{class:"update-time"},[o("span",{class:"vp-meta-label"},i.value.locale),o("time",{class:"vp-meta-info",datetime:i.value.iso,"data-allow-mismatch":""},i.value.text)]):[])])}}}),zk=V({name:"NormalPage",slots:Object,setup(e,{slots:l}){const t=pe(),{isDarkMode:i}=Ki(),n=ue(),r=L(()=>t.value.toc??n.value.toc??!0),s=L(()=>[2,(t.value.headerDepth??n.value.headerDepth??2)+1]);return()=>o("main",{id:"main-content",class:"vp-page"},o(cl("LocalEncrypt")?Ce("LocalEncrypt"):Hn,()=>{var a,c;return[(a=l.top)==null?void 0:a.call(l),t.value.cover?o("div",{class:"page-cover"},o("img",{src:ye(t.value.cover),alt:"","no-view":""})):null,o(Ok),o(D0),r.value?o(C0,{options:{levels:s.value,ignore:[".vp-badge"]}},{before:l.tocBefore,after:l.tocAfter}):null,o(Nn,{},{before:l.contentBefore,after:l.contentAfter}),o(Bk),o(Pk),cl("CommentService")?o(Ce("CommentService"),{darkmode:i.value}):null,(c=l.bottom)==null?void 0:c.call(l)]}))}}),qk=V({name:"PortfolioHero",slots:Object,setup(e,{slots:l}){const t=t0(),i=pe(),n=ee(0),r=L(()=>{var g;return((g=i.value.titles)==null?void 0:g[n.value])??""}),s=ee(""),a=L(()=>{const{name:g,avatar:m,avatarDark:k,avatarAlt:y,avatarStyle:x}=i.value;return{name:g??t.value.name,avatar:m?ye(m):null,avatarDark:k?ye(k):null,avatarStyle:x,alt:(y||g)??""}}),c=L(()=>{const{bgImage:g,bgImageDark:m,bgImageStyle:k}=i.value;return{image:De(g)?ye(g):null,imageDark:De(m)?ye(m):null,bgStyle:k}}),d=L(()=>{const{welcome:g,name:m,titles:k=[],medias:y}=i.value;return{name:m??t.value.name,welcome:g??"👋 Hi There, I'm",title:s.value,titles:k,medias:y??null}}),p=()=>{s.value="";let g=0,m=!1;const k=async()=>{if(!m)if(s.value+=r.value[g],g+=1,await ct(),g<r.value.length)setTimeout(()=>{k()},150);else{const y=d.value.titles.length;setTimeout(()=>{n.value=y<=1||n.value===d.value.titles.length-1?0:n.value+1},1e3)}};return k(),()=>{m=!0}};let u;return Ee(()=>{Ol(r,()=>{u==null||u(),u=p()})}),()=>{var g,m,k;return o("section",{id:"portfolio",class:["vp-portfolio",{bg:c.value.image}]},[((g=l.bg)==null?void 0:g.call(l,c.value))??[c.value.image?o("div",{class:["vp-portfolio-mask",{light:c.value.imageDark}],style:[{background:`url(${c.value.image}) center/cover no-repeat`},c.value.bgStyle]}):null,c.value.imageDark?o("div",{class:"vp-portfolio-mask dark",style:[{background:`url(${c.value.imageDark}) center/cover no-repeat`},c.value.bgStyle]}):null],((m=l.avatar)==null?void 0:m.call(l,a.value))??o("div",{class:"vp-portfolio-avatar"},[o(se,{delay:.04},()=>{const{avatar:y,avatarDark:x,name:E,alt:_,avatarStyle:f}=a.value;return[y?o("img",{key:"light",class:{light:x},src:y,title:E,alt:_,style:f}):null,x?o("img",{key:"dark",class:"dark",src:x,title:E,alt:_,style:f}):null]})]),o("div",{class:"vp-portfolio-container"},((k=l.info)==null?void 0:k.call(l,d.value))??o("div",{class:"vp-portfolio-info"},[o(se,{appear:!0,delay:.08},()=>o("h6",{class:"vp-portfolio-welcome"},d.value.welcome)),o(se,{appear:!0,delay:.12},()=>o("h1",{class:"vp-portfolio-name",id:"main-title"},d.value.name)),o(se,{appear:!0,delay:.16},()=>o("h2",{class:"vp-portfolio-title"},s.value)),o(se,{appear:!0,delay:.2},()=>d.value.medias?o("div",{class:"vp-portfolio-medias"},d.value.medias.map(({name:y,url:x,icon:E})=>o("a",{class:"vp-portfolio-media",href:x,rel:"noopener noreferrer",target:"_blank",title:y},o(Ce("VPIcon"),{icon:E,sizing:"both"})))):cl("SocialMedias")?o(Ce("SocialMedias")):null)]))])}}}),Mk=V({name:"PortfolioHome",setup(){const e=pe(),l=L(()=>e.value.content??"portfolio");return()=>o("main",{id:"main-content",class:"vp-page vp-portfolio-home","aria-labelledby":"main-title"},[o(qk),l.value==="none"?null:o("div",o(se,{appear:!0,delay:.24},()=>o(Nn,{class:{"vp-portfolio-content":l.value==="portfolio"}})))])}}),$k=V({name:"Layout",slots:Object,setup(e,{slots:l}){const t=El(),i=ue(),n=Ne(),r=pe(),s=Qe(),{isMobile:a}=Wi(),c=L(()=>{var d,p;return((d=i.value.blog)==null?void 0:d.sidebarDisplay)??((p=t.value.blog)==null?void 0:p.sidebarDisplay)??"mobile"});return()=>[o(Vs),o(Rs,{},{default:()=>{var d;return((d=l.default)==null?void 0:d.call(l))??(r.value.portfolio?o(Mk):r.value.home?o(Ik):o(s.value?Hn:Bs,()=>o(zk,{key:n.value.path},{top:l.top,bottom:l.bottom,contentBefore:l.contentBefore,contentAfter:l.contentAfter,tocBefore:l.tocBefore,tocAfter:l.tocAfter})))},navScreenBottom:c.value==="none"&&cl("BloggerInfo")?()=>o(Ce("BloggerInfo")):null,sidebar:!a.value&&c.value==="always"&&cl("BloggerInfo")?()=>o(Ce("BloggerInfo")):null})]}}),Hk=V({name:"NotFoundHint",setup(){const e=ue(),l=()=>{const t=e.value.routeLocales.notFoundMsg;return t[Math.floor(Math.random()*t.length)]};return()=>o("div",{class:"not-found-hint"},[o("p",{class:"error-code"},"404"),o("h1",{class:"error-title"},e.value.routeLocales.notFoundTitle),o("p",{class:"error-hint"},l())])}}),Nk=V({name:"NotFound",slots:Object,setup(e,{slots:l}){const t=Ul(),i=Al(),n=ue();return()=>[o(Vs),o(Rs,{noSidebar:!0},()=>{var r;return o("main",{id:"main-content",class:"vp-page not-found"},((r=l.default)==null?void 0:r.call(l))??[o(Hk),o("div",{class:"actions"},[o("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},n.value.routeLocales.back),o("button",{type:"button",class:"action-button",onClick:()=>{t.push(n.value.home??i.value)}},n.value.routeLocales.home)])])})]}});const Uk={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',Gitlab:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gitlab-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E8F0FF"/><path fill="#E24329" d="m512 808 110-340H402z"/><path fill="#FC6D26" d="M512 808 402 468H247z"/><path fill="#E24329" d="M247 468h155l-67-204c-4-11-19-11-22 0z"/><path fill="#FC6D26" d="m512 808 110-340h156z"/><path fill="#FCA326" d="m778 468 33 104c3 10-1 19-9 25L512 808z"/><path fill="#E24329" d="M778 468H622l68-204c3-11 18-11 21 0z"/><path fill="#FCA326" d="M512 808 222 597c-8-5-12-16-9-25l34-104z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2AAE67"/><path fill="#FFF" d="M501 417c-14 0-25-12-25-26s11-26 25-26 26 12 26 26-12 26-26 26m-144 0c-15 0-26-12-26-26s11-26 26-26 25 12 25 26-11 26-25 26m72-150c-120 0-217 82-217 183 0 55 29 104 75 138a15 15 0 0 1 6 11l-1 5-9 37-2 5c0 4 4 8 8 8l4-2 47-27c4-3 8-4 12-4l6 1a255 255 0 0 0 83 10c-5-14-7-29-7-45 0-92 88-166 197-166h9c-16-87-103-154-211-154"/><path fill="#FFF" d="M692 561c-13 0-23-10-23-23 0-12 10-22 23-22 12 0 22 10 22 22 0 13-10 23-22 23m-121 0c-12 0-23-10-23-23 0-12 11-22 23-22s23 10 23 22c0 13-11 23-23 23m179 141c38-28 62-69 62-115 0-84-81-152-181-152s-180 68-180 152 80 152 180 152a212 212 0 0 0 65-9l9 3 40 23 3 1a6 6 0 0 0 6-6l-1-5-8-30v-4c0-4 2-8 5-10"/></svg>'},Gk=JSON.parse('{"category":{"/":{"path":"/category/","map":{"Algorithm":{"path":"/category/algorithm/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361]},"Althgorim":{"path":"/category/althgorim/","indexes":[362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379]},"Data Struct":{"path":"/category/data-struct/","indexes":[380,381,382,383,384,385]},"Data-Struct":{"path":"/category/data-struct/","indexes":[386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440]},"Index":{"path":"/category/index/","indexes":[441,442,443]},"Leetcode-75":{"path":"/category/leetcode-75/","indexes":[444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469]},"TopInterview150":{"path":"/category/topinterview150/","indexes":[470]}}}},"tag":{"/":{"path":"/tag/","map":{"algorithm":{"path":"/tag/algorithm/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,398,402,406,407,408,409,410,411,412,413,414,415,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,364,365,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350]},"althgorim":{"path":"/tag/althgorim/","indexes":[362,363,366,367,368,369,370,371,372,373,374,375,376,377,378,379]},"sh":{"path":"/tag/sh/","indexes":[390,391,392,393,394,395,396,0,1,2,3,4,5,6,7,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,363,428,429,430,431,432,433,434,435,366,367,368,436,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,437,438,336,439,440,349]},"distributed":{"path":"/tag/distributed/","indexes":[363]},"paper":{"path":"/tag/paper/","indexes":[363]},"TODO":{"path":"/tag/todo/","indexes":[363]},"data struct":{"path":"/tag/data-struct/","indexes":[384,385]},"data-struct":{"path":"/tag/data-struct/","indexes":[386,387,388,389,390,391,392,393,394,395,396,8,9,10,11,12,13,14,19,21,22,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,122,123,124,125,126,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,241,242,243,244,245,246,247,248,249,250,251,252,253,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,324,428,429,430,431,432,433,434,435,436,380,381,382,383,437,438,439,440]},"compress":{"path":"/tag/compress/","indexes":[370,371,372,373,374,375,376,377]},"bitmap":{"path":"/tag/bitmap/","indexes":[377]},"croptograph":{"path":"/tag/croptograph/","indexes":[378,379]},"secret":{"path":"/tag/secret/","indexes":[0,1,2,3,4,5,6,7,378,379]},"hash":{"path":"/tag/hash/","indexes":[203,327,328,329,330,331,332,333,334,335,433,340,341,342,343,344,345,346,347,348,349,350]},"hashing":{"path":"/tag/hashing/","indexes":[205,206,207,208,340,341,342,343,344,345,346,348,350]},"tree":{"path":"/tag/tree/","indexes":[386,387,388,389,90,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,324,325,434,345]},"load-balance":{"path":"/tag/load-balance/","indexes":[346]},"search":{"path":"/tag/search/","indexes":[66,67,68,69,240,253,337]},"index":{"path":"/tag/index/","indexes":[396,441,442,443,397,435,439,440,351]},"java":{"path":"/tag/java/","indexes":[390,391,392,393,394,395,403,404,405,437,438]},"map":{"path":"/tag/map/","indexes":[436]},"bit":{"path":"/tag/bit/","indexes":[327,328,329,330,331,332,333,334,335,436]},"overview":{"path":"/tag/overview/","indexes":[386,428]},"topics":{"path":"/tag/topics/","indexes":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,237,241,242,243,244,245,246,247,248,249,250,251,252,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,428]},"source-code":{"path":"/tag/source-code/","indexes":[429,430,431,432,433,434]},"jdk":{"path":"/tag/jdk/","indexes":[429]},"cache":{"path":"/tag/cache/","indexes":[429]},"list":{"path":"/tag/list/","indexes":[17,18,20,24,308,430,431]},"dag":{"path":"/tag/dag/","indexes":[400]},"schedule":{"path":"/tag/schedule/","indexes":[400]},"graph":{"path":"/tag/graph/","indexes":[184,185,186,187,188,189,190,191,192,193,194,195,196,401]},"sf":{"path":"/tag/sf/","indexes":[386,387,388,389,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,63,64,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,244,245,246,247,248,249,250,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,364,365]},"mysql":{"path":"/tag/mysql/","indexes":[396]},"leetcode":{"path":"/tag/leetcode/","indexes":[444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,237,241,242,243,244,245,246,247,248,249,250,251,252,256,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,416,417,418,419,420,421,422,423,424,425,426,427,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335]},"dp":{"path":"/tag/dp/","indexes":[470,15,16,49,50,51,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,303,304,305,306,307,309,316,319,321,322]},"Algorithm":{"path":"/tag/algorithm/","indexes":[17,18,19,20,21,22,23,24]},"backtrack":{"path":"/tag/backtrack/","indexes":[23,28,29,30,31,32,33,34,305,307,311,312,313]},"binary-search":{"path":"/tag/binary-search/","indexes":[25,27,87,88,89,90,91,92,93,94,95,126,240,241,242,243,244,245,246,247,248,249,250,251,252]},"prefix-sum":{"path":"/tag/prefix-sum/","indexes":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,116,117,118,119,120,127,128,129,130,131,142,143,144,145]},"dynamic-programming":{"path":"/tag/dynamic-programming/","indexes":[49,50,51,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183]},"greedy":{"path":"/tag/greedy/","indexes":[52,53,54,55,56,57,115,197,198,199,200,201,202]},"tips":{"path":"/tag/tips/","indexes":[58,59,60,61,62]},"backtracking":{"path":"/tag/backtracking/","indexes":[64,65,70,71,72,73,74,75,76,77,78,79,80]},"block-chain":{"path":"/tag/block-chain/","indexes":[416,417,418]},"binary-tree":{"path":"/tag/binary-tree/","indexes":[90,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,419,420,421,422,423,424,425,426,427]},"stack":{"path":"/tag/stack/","indexes":[466,467,468,469,275,276,277,278,279,280,309,314,315]},"math":{"path":"/tag/math/","indexes":[320]},"dfs":{"path":"/tag/dfs/","indexes":[164,323]},"bfs":{"path":"/tag/bfs/","indexes":[147,148,323]},"sort":{"path":"/tag/sort/","indexes":[107,108,109,238,239,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,327,328,329,330,331,332,333,334,335,338,351,352,353,354,355,356,357,358,359,360,361]},"Leetcode-75":{"path":"/tag/leetcode-75/","indexes":[444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469]},"string":{"path":"/tag/string/","indexes":[444,445,446,447,448,449,450,451,281,282,283,284]},"two-pointer":{"path":"/tag/two-pointer/","indexes":[451,452,453,454,455,88,89,90,134,135,136,137,138,139,140,142]},"sliding-window":{"path":"/tag/sliding-window/","indexes":[456,457,458,459,460,461,462,463,464,465,142,143,144,145,281,282,283]},"exchange-sorts":{"path":"/tag/exchange-sorts/","indexes":[352,353,354,355,356,357]},"topInterview150":{"path":"/tag/topinterview150/","indexes":[470]},"enumration":{"path":"/tag/enumration/","indexes":[81]},"simulation":{"path":"/tag/simulation/","indexes":[82]},"array":{"path":"/tag/array/","indexes":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,253]},"sweep-line":{"path":"/tag/sweep-line/","indexes":[96,97,98,99,100,101,102,103,104,105,106]},"top100":{"path":"/tag/top100/","indexes":[112,113,134,135,138,140,142,143,145,206,207,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,251,276,277,278,279,280]},"difference-array":{"path":"/tag/difference-array/","indexes":[116,117,118,119,120]},"matrix":{"path":"/tag/matrix/","indexes":[121,122,123,124,125,126,127,146]},"prefix-sum-matrix":{"path":"/tag/prefix-sum-matrix/","indexes":[127,128,129,130,131]},"traverse":{"path":"/tag/traverse/","indexes":[132,133,134,135,136,137,138,139,140,141,142,143,144,145]},"bit-operator":{"path":"/tag/bit-operator/","indexes":[149,150,151,152,153,154,155,156]},"fenwick-tree":{"path":"/tag/fenwick-tree/","indexes":[157,302]},"queue":{"path":"/tag/queue/","indexes":[158]},"segment-tree":{"path":"/tag/segment-tree/","indexes":[159]},"suffix-array":{"path":"/tag/suffix-array/","indexes":[160]},"union-find-set":{"path":"/tag/union-find-set/","indexes":[161,162]},"counting":{"path":"/tag/counting/","indexes":[163]},"divide-and-conquer":{"path":"/tag/divide-and-conquer/","indexes":[165]},"ordered-set":{"path":"/tag/ordered-set/","indexes":[204]},"rolling-hash":{"path":"/tag/rolling-hash/","indexes":[209]},"heap":{"path":"/tag/heap/","indexes":[210,211,212,213]},"linkedlist":{"path":"/tag/linkedlist/","indexes":[214,215,216,217,218,219,220,221,222,223,224,225,226,227,228]},"offline-query-optimize":{"path":"/tag/offline-query-optimize/","indexes":[229,230,231,232,233,234,235,236]},"recursive":{"path":"/tag/recursive/","indexes":[237]},"ternary-search":{"path":"/tag/ternary-search/","indexes":[253]},"substring":{"path":"/tag/substring/","indexes":[281,282,283]},"string-matching":{"path":"/tag/string-matching/","indexes":[285]}}}}}'),I0=JSON.parse('["/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-03-base64.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-04-sm4.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-05-des.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-06-3des.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-07-aes.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-08-symmetry.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-09-rsa2.html","/posts/leetcode/history1/2020-06-06-algorithm-001-leetcode-01-ksum.html","/posts/leetcode/history1/2020-06-06-algorithm-002-leetcode-02-add-two-numbers.html","/posts/leetcode/history1/2020-06-06-algorithm-003-leetcode-03-longest-substring-without-repeating-characters.html","/posts/leetcode/history1/2020-06-06-algorithm-004-leetcode-04-median-of-two-sorted-arrays.html","/posts/leetcode/history1/2020-06-06-algorithm-005-leetcode-05-longest-palindromic-substring.html","/posts/leetcode/history1/2020-06-06-algorithm-006-leetcode-06-zigzag-conversion.html","/posts/leetcode/history1/2020-06-06-algorithm-007-leetcode-07-reverse-integer.html","/posts/leetcode/history1/2020-06-06-algorithm-008-leetcode-10-regex-match.html","/posts/leetcode/history1/2020-06-06-algorithm-009-leetcode-11-container-with-most-water.html","/posts/leetcode/history1/2020-06-06-algorithm-010-leetcode-19-remove-nth-node-from-end-of-list.html","/posts/leetcode/history1/2020-06-06-algorithm-011-leetcode-21-merge-k-sorted-lists.html","/posts/leetcode/history1/2020-06-06-algorithm-012-leetcode-22-generate-parentheses.html","/posts/leetcode/history1/2020-06-06-algorithm-013-leetcode-25-reverse-nodes-in-k-group.html","/posts/leetcode/history1/2020-06-06-algorithm-014-leetcode-29-divide-two-integers.html","/posts/leetcode/history1/2020-06-06-algorithm-015-leetcode-30-substring-with-concatenation-of-all-words.html","/posts/leetcode/history1/2020-06-06-algorithm-016-leetcode-31-next-permutation.html","/posts/leetcode/history1/2020-06-06-algorithm-017-leetcode-33-search-in-rotated-sorted-array.html","/posts/leetcode/history1/2020-06-06-algorithm-018-leetcode-34-find-first-and-last-position-of-element-in-sorted-array.html","/posts/leetcode/history1/2020-06-06-algorithm-019-leetcode-36-valid-suduku.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-1882-minest-len-of-color.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-39-combination-sum.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-40-leetcode-121-best-time-to-buy-and-sell-stock.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-41-leetcode-122-best-time-to-buy-and-sell-stock-ii.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-42-leetcode-123-best-time-to-buy-and-sell-stock-iii.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-43-leetcode-188-best-time-to-buy-and-sell-stock-iv.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-44-leetcode-309-best-time-to-buy-and-sell-stock-with-cooldown.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-45-leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-47-prefix-sum-leetcode-02-LC724.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-50-prefix-sum-tree-array.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-55-prefix-sum-525-contiguous-array.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-61-dp-198-house-robber.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-62-dp-213-house-robber-ii.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-63-dp-337-house-robber-iii.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-70-greedy-overview.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-72-greedy-max-bag-prices-weight.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-2459-move-to-empty.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-73-3195_dfs.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-80-recursive-overview.html","/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-81-recursive-tower-of-hannuo.html","/posts/leetcode/history1/2020-06-06-algorithm-098-space-complex-intro.html","/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-fast-table.html","/posts/leetcode/history1/2020-06-06-algorithm-098-time-complex-intro.html","/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html","/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-02-how-to-practise.html","/posts/leetcode/history2/2020-06-08-algorithm-01-Manacher-Algorithm.html","/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-039-combine-sum.html","/posts/leetcode/history2/2020-06-08-algorithm-11-leetcode-126-word-ladder-ii.html","/posts/leetcode/history2/2020-06-08-algorithm-13-bst-nums.html","/posts/leetcode/history2/2020-06-08-algorithm-14-bst-best-solve.html","/posts/leetcode/history2/2020-06-08-algorithm-14-bst-solves.html","/posts/leetcode/history2/2020-06-08-algorithm-15-bst-valid.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-01-intro.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-02-compare-with-dfs.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-11-leecode-LC46-permutations.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-12-leecode-LC77-combinations.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-13-leecode-LC78-subsets.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-14-leecode-LC17-letter-combinations-of-a-phone-number.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-15-leecode-LC39-combination-sum.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-16-leecode-LC22-generate-parentheses.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-17-leecode-LC79-word-search.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-18-leecode-LC131-palindrome-partitioning.html","/posts/leetcode/topliked-100/backtracking/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-backtracking-19-leecode-LC51-n-queens.html","/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-enumration-01-intro.html","/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-00-overview.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-01-51-maximum-subarray.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-02-128-longest-consecutive-sequence.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-001-two-sum.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-167-two-sum-ii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-170-two-sum-iii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-03-653-two-sum-iv.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-015-three-sum.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-016-three-sum-closest.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-04-259-three-sum-smaller.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-018-four-num.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-05-454-four-num-ii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-perferct-rectangle-bak.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-217-cotains-duplicate.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-219-cotains-duplicate-ii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-07-220-cotains-duplicate-iii.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC189.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC238.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC41.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC53.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-02-leetcode-LC56.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-01-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-02-LC1854.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-03-LC370.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-04-LC1109.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-difference-array-02-leetcode-05-LC1094.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC240.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC48.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC54.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC73.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-02-leetcode-LC74.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC1314.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-02-LC304.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-03-LC1732.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-02-leetcode-04-LC1277.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-01-traverse-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T1089.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T11.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T15.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T26.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T27.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T283.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T31.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-02-traverse-two-pointer-leetcode-T42.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-intro.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T3.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T438.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T643.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-traverse-03-traverse-sliding-window-leetcode-T76.html","/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-array-matrix-01-intro.html","/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-bfs-01-intro.html","/posts/leetcode/topliked-100/bfs/2020-06-06-algorithm-000-leetcode-data-struct-005-bfs-intro.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-convert.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-intro.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-07-287-find-the-duplicate-number.html","/posts/leetcode/topliked-100/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-08-442-find-all-duplicates-in-an-array.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-monotonic-stack-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-queue-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-segment-tree-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-suffix-array-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-trie-tree-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-union-find-set-01-intro.html","/posts/leetcode/topliked-100/data-struct/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-counting-01-intro.html","/posts/leetcode/topliked-100/dfs/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dfs-01-intro.html","/posts/leetcode/topliked-100/divide-and-conquer/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-divide-and-conquer-01-intro.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-01-intro.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-02-template.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-11-leetcode-LC70-climbing-stairs.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-12-leetcode-LC118-pascals-triangle.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-13-leetcode-LC198-house-robber.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-14-leetcode-LC279-perfect-squares.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-15-leetcode-LC323-coin-change.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-16-leetcode-LC139-word-break.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-17-leetcode-LC674-longest-continuous-increasing-subsequence.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-18-leetcode-LC300-longest-increasing-subsequence.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-19-leetcode-LC152-maximum-product-subarray.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-20-leetcode-LC416-partition-equal-subset-sum.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-21-leetcode-LC32-longest-valid-parentheses.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-22-leetcode-LC62-unique-paths.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC1143-longest-common-subsequence.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-23-leetcode-LC64-minimum-path-sum.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-24-leetcode-LC5-longest-palindromic-substring.html","/posts/leetcode/topliked-100/dp/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-dp-25-leetcode-LC72-edit-distance.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-01-intro.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-02-step-by-step.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-01-LC208-trie-tree.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-02-LC733-flood-fill.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-03-LC133-clone-graph.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-04-LC463-island-perimeter.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-05-LC200-number-of-islands.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-06-LC695-max-area-of-island.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-07-LC547-number-of-provinces.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-08-LC1020-number-of-enclaves.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-09-LC994-rotting-oranges.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-10-LC1254-number-of-closed-islands.html","/posts/leetcode/topliked-100/graph/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-graph-02-leetcode-11-LC207-course-schedule.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-01-intro.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-02-leetcode-LC121-best-time-to-buy-and-sell-stock.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-03-leetcode-LC763-partition-labels.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-04-leetcode-LC2405-optimal-partition-of-string.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-05-leetcode-LC55-jump-game.html","/posts/leetcode/topliked-100/greedy/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-greedy-06-leetcode-LC45-jump-game-ii.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-hashtable-01-intro.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-01-intro.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC01.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC128.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-hash-02-leetcode-top100-LC49.html","/posts/leetcode/topliked-100/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-techniques-rolling-hash-01-intro.html","/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-01-intro.html","/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-11-leetcode-LC295-find-median-from-data-stream.html","/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC215-kth-largest-element-in-an-array.html","/posts/leetcode/topliked-100/heap/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-heap-12-leetcode-LC347-top-k-frequent-elements.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-01-intro.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-01-LC160.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-02-LC206.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-03-LC234.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-04-LC141.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-05-LC142.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-06-LC21.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-07-LC2.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-08-LC19.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-09-LC24.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-10-LC25.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-11-LC138.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-12-LC148.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-13-LC23.html","/posts/leetcode/topliked-100/list/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-linkedlist-02-leetcode-14-LC146.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-01-leetcode-1906-minimum-absolute-difference-queries-.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-02-mos-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-03-union-found-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-04-reverse-query-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-05-segment-tree-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html","/posts/leetcode/topliked-100/offline-query-opt/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-07-difference-contrainst-intro.html","/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-algorithms-recursive-01-intro.html","/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-01-intro.html","/posts/leetcode/topliked-100/recursive/2020-06-06-algorithm-000-leetcode-data-struct-007-recursive-02-master-theorem-intro.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-01-T704.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T034.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-02-T035.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-03-T034.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-04-T852.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-05-T875.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-06-T1011.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-07-T033.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-08-T153.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-09-T154.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-02-leetcode-10-T4.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-03-toolkit.html","/posts/leetcode/topliked-100/search/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-01-bubble-sort-02-leetcode-01-T912.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-02-select-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-04-merge-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-05-quick-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-07-heap-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-01-T75.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-02-T242.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-03-T299.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-04-T383.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-05-T389.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-08-counting-sort-02-leecode-07-T2085.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-01-T451.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-09-bucket-sort-02-leetcode-02-T164.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-01-intro.html","/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-10-radix-sort-02-leetcode-01-T164.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-01-intro.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-02-leetcode-T20.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC155-min-stack.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-03-leetcode-LC394-decode-string.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-04-leetcode-LC739-daily-temperatures.html","/posts/leetcode/topliked-100/stack/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-stack-05-leetcode-LC84-largest-rectangle-in-histogram.html","/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html","/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC239.html","/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-02-leetcode-01-LC560.html","/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-01-intro.html","/posts/leetcode/topliked-100/string/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-string-match-01-intro.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-01-intro.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC102.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC104.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC226.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-02-LC94.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-03-LC101.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-04-LC543.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-05-LC108.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-06-LC98.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-07-LC230.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-08-LC199.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-09-LC114.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-10-LC105.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-11-LC437.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-12-LC124.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html","/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-fenwick-tree-01-intro.html","/posts/leetcode/history2/2020-06-08-algorithm-27-leetcode-115-distinct-sequences.html","/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-123-best-time-to-buy-and-sell-stock-iii.html","/posts/leetcode/history2/2020-06-08-algorithm-28-leetcode-131-palindrome-partitioning.html","/posts/leetcode/history2/2020-06-08-algorithm-29-leetcode-135-candy.html","/posts/leetcode/history2/2020-06-08-algorithm-30-leetcode-139-word-break.html","/posts/leetcode/history2/2020-06-08-algorithm-31-leetcode-141-linked-list-cycle.html","/posts/leetcode/history2/2020-06-08-algorithm-32-leetcode-032-valid-parentheses.html","/posts/leetcode/history2/2020-06-08-algorithm-33-leetcode-042-trapping-rain-water.html","/posts/leetcode/history2/2020-06-08-algorithm-34-leetcode-permutation.html","/posts/leetcode/history2/2020-06-08-algorithm-36-leetcode-edit-distance.html","/posts/leetcode/history2/2020-06-08-algorithm-37-leetcode-minimum-window-substring.html","/posts/leetcode/history2/2020-06-08-algorithm-38-leetcode-largest-rectangle-in-histogram.html","/posts/leetcode/history2/2020-06-08-algorithm-39-leetcode-maximal-rectangle.html","/posts/leetcode/history2/2020-06-08-algorithm-40-leetcode-scramble-string.html","/posts/leetcode/history2/2020-06-08-algorithm-41-leetcode-lru-cache.html","/posts/leetcode/history2/2020-06-08-algorithm-42-leetcode-reverse-polish-notation.html","/posts/leetcode/history2/2020-06-08-algorithm-43-leetcode-maximum-product-subarray.html","/posts/leetcode/history2/2020-06-08-algorithm-44-leetcode-largest-number.html","/posts/leetcode/history2/2020-06-08-algorithm-45-leetcode-house-robber.html","/posts/leetcode/history2/2020-06-08-algorithm-46-leetcode-count-primes.html","/posts/leetcode/history2/2020-06-08-algorithm-47-leetcode-course-schedule.html","/posts/leetcode/history2/2020-06-08-algorithm-48-leetcode-trie-tree.html","/posts/leetcode/history2/2020-06-08-algorithm-49-leetcode-minimum-size-subarray-sum.html","/posts/leetcode/history2/2020-06-08-algorithm-50-leecode-shortest-palindrome.html","/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-217-duplicate-nums.html","/posts/leetcode/history2/2020-06-08-algorithm-51-leecode-218-skyline.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-219-duplicate-nums-ii.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-220-duplicate-nums-iii.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-min-room.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-253-move.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time%20copy%202.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-681-closest-next-time.html","/posts/leetcode/history2/2020-06-08-algorithm-52-leecode-716-max-stack.html","/posts/algorithm/load-balance/2018-09-10-algorithm-load-balance.html","/posts/algorithm/search/2018-07-26-search.html","/posts/leetcode/sorts/2018-07-26-timesort.html","/posts/algorithm/2018-05-30-algorithm-analysis.html","/posts/algorithm/hash/2018-05-30-hash-10-chat-intro.html","/posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.html","/posts/algorithm/hash/2018-05-30-hash-12-chat-hash-data-struct-hashmap.html","/posts/algorithm/hash/2018-05-30-hash-13-chat-hash-data-struct-hashset.html","/posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html","/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-data-struct-merkle-tree.html","/posts/algorithm/hash/2018-05-30-hash-15-chat-hash-load-balance-consist-hash.html","/posts/algorithm/hash/2018-05-30-hash-conflict.html","/posts/algorithm/hash/2018-05-30-hash-impl.html","/posts/algorithm/hash/2018-05-30-hash-perfect.html","/posts/algorithm/hash/2018-05-30-hash.html","/posts/leetcode/sorts/2016-07-14-sort-00-overview-sort.html","/posts/leetcode/sorts/2016-07-14-sort-01-bubble-sort.html","/posts/leetcode/sorts/2016-07-14-sort-02-quick-sort.html","/posts/leetcode/sorts/2016-07-14-sort-03-select-sort.html","/posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.html","/posts/leetcode/sorts/2016-07-14-sort-05-insert-sort.html","/posts/leetcode/sorts/2016-07-14-sort-06-shell-sort.html","/posts/leetcode/sorts/2016-07-14-sort-07-merge-sort.html","/posts/leetcode/sorts/2016-07-14-sort-08-counting-sort.html","/posts/leetcode/sorts/2016-07-14-sort-09-bucket-sort.html","/posts/leetcode/sorts/2016-07-14-sort-10-bigfile-sort.html","/posts/leetcode/index/2025-08-22-how-to-cross-leetcodes.html","/posts/algorithm/2019-04-05-althgorim-gifford.html","/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-01-BF.html","/posts/leetcode/topliked-100/string/2019-03-11-algorithm-string-match-02-KMP.html","/posts/algorithm/2019-01-08-althgorim-min-max.html","/posts/algorithm/2019-01-04-prority-queue.html","/posts/algorithm/2019-01-03-many-number-sort.html","/posts/algorithm/2018-12-05-bloom-filter.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-01-overview.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-02-althgorim-zip.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-03-apache-compress-overview.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-04-apache-compress-notes.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-05-apache-compress-archivers.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-06-apache-compress-compressor.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-07-apache-compress-extend.html","/posts/algorithm/compress/2018-11-09-althgorim-compress-08-framework-compress-bit.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-01-overview-01.html","/posts/algorithm/cropto/2021-07-09-althgorim-cryptograph-02-common-02.html","/posts/data-struct/2018-11-07-data-struct-binary-heap.html","/posts/data-struct/2018-11-07-data-struct-binary-tree.html","/posts/leetcode/datastruct/2018-11-07-data-struct-binary-heap.html","/posts/leetcode/datastruct/2018-11-07-data-struct-binary-tree.html","/posts/data-struct/2018-06-19-data-struct-dynamic-array.html","/posts/leetcode/datastruct/2018-06-19-data-struct-dynamic-array.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-01-binary-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-02-binary-search-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-03-avl-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-04-red-black-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-05-spaly-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-06-2-3-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-08-b-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-09-bplus-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-10-bstar-tree.html","/posts/leetcode/datastruct/2020-11-24-data-struct-tree-11-database-index.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-00-index.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-01-book-algorithm-index.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-02-base-type.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-schedule.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag-topological-sorting.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-dag.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-direct-graph.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-dijkstra.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-03-graph-floyd.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-05-gene.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-06-vertibi.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-backtracking.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-divided.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp-fib.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-dp.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-enum.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base-greedy.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-07-base.html","/posts/leetcode/datastruct/2020-01-23-data-struct-learn-08-dfs-bfs.html","/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel-pic.html","/posts/leetcode/history2/2020-06-08-algorithm-16-binary-tree-travel.html","/posts/leetcode/history2/2020-06-08-algorithm-17-construct-binray-tree.html","/posts/leetcode/history2/2020-06-08-algorithm-18-binary-tree-path-sum.html","/posts/leetcode/history2/2020-06-08-algorithm-19-flatten-binary-tree-to-linked-list.html","/posts/leetcode/history2/2020-06-08-algorithm-20-binary-tree-next-pointer.html","/posts/leetcode/history2/2020-06-08-algorithm-21-dp-minest-path.html","/posts/leetcode/history2/2020-06-08-algorithm-22-gas-station.html","/posts/leetcode/history2/2020-06-08-algorithm-23-single-number.html","/posts/leetcode/history2/2020-06-08-algorithm-24-number-of-digit-one.html","/posts/leetcode/history2/2020-06-08-algorithm-25-major-element.html","/posts/leetcode/history2/2020-06-08-algorithm-26-topk-freq.html","/posts/leetcode/datastruct/2019-02-19-data-struct-00-overview.html","/posts/leetcode/datastruct/2019-02-19-data-struct-01-identify-hash-map.html","/posts/leetcode/datastruct/2019-02-19-data-struct-02-arraylist-source-code.html","/posts/leetcode/datastruct/2019-02-19-data-struct-03-linkedlist-source-code.html","/posts/leetcode/datastruct/2019-02-19-data-struct-04-stack-source-code.html","/posts/leetcode/datastruct/2019-02-19-data-struct-05-hashset.html","/posts/leetcode/datastruct/2019-02-19-data-struct-06-treeset.html","/posts/leetcode/datastruct/2019-02-13-datastruct-skiplist.html","/posts/leetcode/datastruct/2018-12-25-bitmap.html","/posts/leetcode/datastruct/2018-09-12-b-tree.html","/posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.html","/posts/leetcode/datastruct/2018-09-10-index-lsm.html","/posts/leetcode/datastruct/2018-09-10-index-slimtrie.html","/posts/leetcode/index/2020-06-06-algorithm-000-index-01-overview.html","/posts/leetcode/index/2020-06-06-algorithm-000-index-02-how-to-learn.html","/posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-01-LC1768-merge-strings-alternately.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-02-LC1071-greatest-common-divisor-of-strings.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-03-LC1431-kids-with-the-greatest-number-of-candies.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-04-LC605-can-place-flowers.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-05-LC345-reverse-vowels-of-a-string.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-06-LC151-reverse-words-in-a-string.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-08-LC334-increasing-triplet-subsequence.html","/posts/leetcode/leetcode-75/2025-08-31-array-string-09-LC443-string-compression.html","/posts/leetcode/leetcode-75/2025-08-31-two-pointer-01-LC283-move-zeros.html","/posts/leetcode/leetcode-75/2025-08-31-two-pointer-02-LC392-is-subsequence.html","/posts/leetcode/leetcode-75/2025-08-31-two-pointer-03-LC11-container-with-most-water.html","/posts/leetcode/leetcode-75/2025-08-31-two-pointer-04-LC1679-max-number-of-k-sum-pairs.html","/posts/leetcode/leetcode-75/2025-09-08-sliding-window-01-LC643-maximum-average-subarray-i.html","/posts/leetcode/leetcode-75/2025-09-08-sliding-window-02-LC1456-maximum-number-of-vowels-in-a-substring-of-given-length.html","/posts/leetcode/leetcode-75/2025-09-08-sliding-window-03-LC1004-max-consecutive-ones-iii.html","/posts/leetcode/leetcode-75/2025-09-08-sliding-window-04-LC1493-longest-subarray-of-1s-after-deleting-one-element.html","/posts/leetcode/leetcode-75/2025-09-09-hash-01-LC2215-find-the-difference-of-two-arrays.html","/posts/leetcode/leetcode-75/2025-09-09-hash-02-LC1207-unique-number-of-occurrences.html","/posts/leetcode/leetcode-75/2025-09-09-hash-03-LC1657-determine-if-two-strings-are-close.html","/posts/leetcode/leetcode-75/2025-09-09-hash-04-LC2352-equal-row-and-column-pairs.html","/posts/leetcode/leetcode-75/2025-09-09-prefixsum-01-LC1732-find-the-highest-altitude.html","/posts/leetcode/leetcode-75/2025-09-09-prefixsum-02-LC724-find-pivot-index.html","/posts/leetcode/leetcode-75/2025-09-18-stack-01-LC2390-removing-stars-from-a-string.html","/posts/leetcode/leetcode-75/2025-09-18-stack-02-LC735-asteroid-collision.html","/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string%20copy.html","/posts/leetcode/leetcode-75/2025-09-18-stack-03-LC394-decode-string.html","/posts/leetcode/topinterview-150/2025-08-22-dp-01-LC70-climbing-stairs.html","/intro.html"]'),Wk=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[471,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,362,470,386,387,388,389,390,391,392,393,394,395,396,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,441,442,443,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,363,364,365,428,429,430,431,432,433,434,435,366,367,368,436,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,437,438,336,439,440,337,338,384,385,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361]}},"star":{"/":{"path":"/star/","indexes":[471]}},"timeline":{"/":{"path":"/timeline/","indexes":[444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,362,470,471,386,387,388,389,390,391,392,393,394,395,396,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,441,442,443,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,363,364,365,428,429,430,431,432,433,434,435,366,367,368,436,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,437,438,336,439,440,337,338,384,385,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361]}}}'),Gr=ne(Gk);Et(Gr);const O0=e=>{const l=Ne(),t=pe(),i=Al();return L(()=>{var a;const n=e??((a=t.value.blog)==null?void 0:a.key)??"";if(!n)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};if(!(n in Gr.value))throw new Error(`useBlogCategory: key ${n} is invalid`);const r=Gr.value[n][i.value],s={path:r.path,map:{}};for(const c in r.map){const d=r.map[c];s.map[c]={path:d.path,items:[]};for(const p of d.indexes){const{path:u,meta:g}=ml(I0[p]);s.map[c].items.push({path:u,info:g})}l.value.path===d.path&&(s.currentItems=s.map[c].items)}return s})},Wr=ne(Wk);Et(Wr);const Un=e=>{const l=pe(),t=Al();return L(()=>{var s;const i=e??((s=l.value.blog)==null?void 0:s.key)??"";if(!i)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!(i in Wr.value))throw new Error(`useBlogType: key ${e} is invalid`);const n=Wr.value[i][t.value],r={path:n.path,items:[]};for(const a of n.indexes){const{path:c,meta:d}=ml(I0[a]);r.items.push({path:c,info:d})}return r})},zs=()=>o(_e,{name:"lock"},()=>o("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));zs.displayName="LockIcon";var Kk=[];const P0=Symbol(""),qs=()=>{const e=Te(P0);if(!e)throw new Error("useTimeline() is called without provider.");return e},Jk=()=>{const e=Un("timeline"),l=zn(),t=L(()=>{const i=[];return e.value.items.forEach(({info:n,path:r})=>{const s=Ds(n.date);if(s){const a=s.getFullYear();(!i[0]||i[0].year!==a)&&i.unshift({year:a,items:[]}),i[0].items.push({date:s.toLocaleDateString(l.value,{month:"numeric",day:"numeric"}),info:n,path:r})}}),{...e.value,config:i.reverse()}});yl(P0,t)},j0=Symbol(""),Ji=()=>{const e=Te(j0);if(!e)throw new Error("useArticles() is called without provider.");return e},Qk=()=>{const e=Un("article");yl(j0,e)},R0=Symbol.for("categoryMap"),Qi=()=>{const e=Te(R0);if(!e)throw new Error("useCategoryMap() is called without provider.");return e},Yk=()=>{const e=O0("category");yl(R0,e)},V0=Symbol(""),Ms=()=>{const e=Te(V0);if(!e)throw new Error("useStars() is called without provider.");return e},Xk=()=>{const e=Un("star");yl(V0,e)},B0=Symbol.for("tagMap"),Yi=()=>{const e=Te(B0);if(!e)throw new Error("useTagMap() is called without provider.");return e},Zk=()=>{const e=O0("tag");yl(B0,e)},e3=()=>{Qk(),Yk(),Xk(),Zk(),Jk()},Xi=()=>{const e=El(),l=ue();return L(()=>({...e.value.blog,...l.value.blog}))},l3=e=>{const l=ue();return L(()=>{const{["author"]:t}=e.value;return t?Pi(t):t===!1?[]:Pi(l.value.author,!1)})},t3=e=>{const l=Qi();return L(()=>Yd(e.value.category).map(t=>({name:t,path:l.value.map[t].path})))},i3=e=>{const l=Yi();return L(()=>Xd(e.value.tag).map(t=>({name:t,path:l.value.map[t].path})))},n3=e=>L(()=>{const{["date"]:l}=e.value;return Ds(l)}),r3=e=>{const l=wt(e,"info"),t=Xi(),i=l3(l),n=t3(l),r=i3(l),s=n3(l),a=l0(),c=L(()=>({author:i.value,category:n.value,date:s.value,localizedDate:l.value.localizedDate??"",tag:r.value,isOriginal:l.value.isOriginal??!1,readingTime:l.value.readingTime??null,readingTimeLocale:l.value.readingTime&&a.value?e0(l.value.readingTime,a.value):null,pageview:e.path})),d=L(()=>t.value.articleInfo??null);return{info:c,items:d}},ht=()=>{const e=ue();return L(()=>e.value.blogLocales)};var z0=V({name:"SocialMedias",setup(){const e=Xi(),l=Qe(),t=L(()=>ni(e.value.medias??{}).map(([i,n])=>typeof n=="string"?{name:i,icon:Uk[i],link:n}:{name:i,...n}));return()=>t.value.length?o("div",{class:"vp-social-medias"},t.value.map(({name:i,icon:n,link:r})=>o("a",{class:"vp-social-media",href:r,rel:"noopener noreferrer",target:"_blank","aria-label":i||"",...l.value?{}:{"data-balloon-pos":"up"},innerHTML:li(n)?`<img class="vp-social-media-icon ${i}-icon" src="${n}">`:n}))):null}}),$s=V({name:"BloggerInfo",setup(){const e=ht(),l=Xi(),t=qn(),i=ue(),n=Ji(),r=Qi(),s=Yi(),a=qs(),c=Kl(),d=L(()=>{var g;return l.value.name??((g=Pi(i.value.author)[0])==null?void 0:g.name)??t.value.title}),p=L(()=>l.value.avatar??i.value.logo),u=L(()=>l.value.intro);return()=>{const{article:g,category:m,tag:k,timeline:y}=e.value,x=[[n.value.path,n.value.items.length,g],[r.value.path,Hl(r.value.map).length,m],[s.value.path,Hl(s.value.map).length,k],[a.value.path,a.value.items.length,y]];return o("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[o("div",{class:"vp-blogger",...u.value?{"aria-label":e.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>{c(u.value)}}:{}},[p.value?o("img",{class:"vp-blogger-avatar",src:ye(p.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,d.value?o("div",{class:"vp-blogger-name",property:"name"},d.value):null,l.value.description?o("div",{class:"vp-blogger-description",innerHTML:l.value.description}):null,u.value?o("meta",{property:"url",content:ye(u.value)}):null]),o("div",{class:"vp-blog-counts"},x.map(([E,_,f])=>o(Oe,{class:"vp-blog-count",to:E},()=>[o("div",{class:"count"},_),o("div",f)]))),o(z0)])}}});const Hs=()=>o(_e,{name:"category"},()=>o("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));Hs.displayName="CategoryIcon";const Ns=()=>o(_e,{name:"tag"},()=>o("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));Ns.displayName="TagIcon";const Us=()=>o(_e,{name:"timeline"},()=>o("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));Us.displayName="TimelineIcon";const q0=()=>o(_e,{name:"slides"},()=>o("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));q0.displayName="SlideIcon";const M0=()=>o(_e,{name:"sticky"},()=>[o("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);M0.displayName="StickyIcon";const Gs=()=>o(_e,{name:"article"},()=>o("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));Gs.displayName="ArticleIcon";const Kr=()=>o(_e,{name:"slide-down"},()=>o("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));Kr.displayName="SlideDownIcon";var s3=V({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(e,{slots:l}){const t=wt(e,"info"),{info:i,items:n}=r3(e),r=Ul();return()=>{var m,k,y;const{title:s,type:a,isEncrypted:c=!1,cover:d,excerpt:p,sticky:u}=t.value,g=i.value;return o("div",{class:"vp-article-wrapper",onClick:x=>{var E;(E=x.target)!=null&&E.matches("summary")||(x.preventDefault(),r.push(e.path))}},o("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((m=l.cover)==null?void 0:m.call(l,{cover:d}))??(d?[o("img",{class:"vp-article-cover",src:ye(d),alt:"",loading:"lazy"}),o("meta",{property:"image",content:ye(d)})]:[]),u?o(M0):null,o(Oe,{to:e.path},()=>{var x;return((x=l.title)==null?void 0:x.call(l,{title:s,isEncrypted:c,type:a}))??o("header",{class:"vp-article-title"},[c?o(zs):null,a==="slide"?o(q0):null,o("span",{property:"headline"},s)])}),((k=l.excerpt)==null?void 0:k.call(l,{excerpt:p}))??(p?o("div",{class:"vp-article-excerpt",innerHTML:p}):null),o("hr",{class:"vp-article-hr"}),((y=l.info)==null?void 0:y.call(l,{info:g}))??o(h0,{info:g,items:n.value})]))}}});const a3='<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>';var o3=V({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(e,{emit:l}){let t;const i=ue(),n=ee(""),r=L(()=>i.value.paginationLocales),s=L(()=>Math.ceil(e.total/e.perPage)),a=L(()=>!!s.value&&s.value!==1),c=L(()=>s.value<7?!1:e.current>4),d=L(()=>s.value<7?!1:e.current<s.value-3),p=L(()=>{const{current:m}=e;let k=1,y=s.value;const x=[];s.value>=7&&(m<=4&&m<s.value-3?(k=1,y=5):m>4&&m>=s.value-3?(y=s.value,k=s.value-4):s.value>7&&(k=m-2,y=m+2));for(let E=k;E<=y;E++)x.push(E);return x}),u=m=>{l("updateCurrentPage",m)},g=m=>{const k=parseInt(m,10);k<=s.value&&k>0?u(k):t.pop(`${a3}${r.value.errorText.replace(/\$page/gu,s.value.toString())}`)};return Ee(()=>{t=new qv}),()=>o("div",{class:"vp-pagination"},a.value?o("nav",{class:"vp-pagination-list"},[o("div",{class:"vp-pagination-number "},[e.current>1?o("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>{u(e.current-1)}},r.value.prev):null,c.value?[o("div",{role:"navigation",onClick:()=>{u(1)}},1),o("div",{class:"ellipsis"},"...")]:null,p.value.map(m=>o("div",{key:m,class:{active:e.current===m},role:"navigation",onClick:()=>{u(m)}},m)),d.value?[o("div",{class:"ellipsis"},"..."),o("div",{role:"navigation",onClick:()=>{u(s.value)}},s.value)]:null,e.current<s.value?o("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>{u(e.current+1)}},r.value.next):null]),o("div",{class:"vp-pagination-nav"},[o("label",{for:"navigation-text"},`${r.value.navigate}: `),o("input",{id:"navigation-text",value:n.value,onInput:({target:m})=>{n.value=m.value},onKeydown:m=>{m.key==="Enter"&&(m.preventDefault(),g(n.value))}}),o("button",{class:"vp-pagination-button",type:"button",role:"navigation",title:r.value.action,onClick:()=>{g(n.value)}},r.value.action)])]):[])}}),Ws=V({name:"ArticleList",props:{items:{type:Array,required:!0}},setup(e){const l=Gl(),t=Ul(),i=ht(),n=Xi(),r=ee(1),s=L(()=>n.value.articlePerPage??10),a=L(()=>e.items.slice((r.value-1)*s.value,r.value*s.value)),c=async d=>{r.value=d;const p={...l.query};!(p.page===d.toString()||d===1&&!p.page)&&(d===1?delete p.page:p.page=d.toString(),await t.push({path:l.path,query:p}))};return Ee(()=>{const{page:d}=l.query;c(d?Number(d):1),Ie(r,()=>{const p=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,p)},100)})}),()=>o("div",{id:"article-list",class:"vp-article-list",role:"feed"},a.value.length?[...a.value.map(({info:d,path:p},u)=>o(se,{appear:!0,delay:u*.04},()=>o(s3,{key:p,info:d,path:p}))),o(o3,{current:r.value,perPage:s.value,total:e.items.length,onUpdateCurrentPage:c})]:o("h2",{class:"vp-empty-hint"},i.value.empty))}}),c3=V({name:"ArticlesInfo",setup(){const e=Ji(),l=ht(),t=Ms(),i=Kl(),n=L(()=>e.value.items.length),r=L(()=>t.value.items);return()=>o(se,()=>o("div",{class:"vp-star-article-wrapper"},[o("div",{class:"title",onClick:()=>{i(e.value.path)}},[o(Gs),o("span",{class:"num"},n.value),l.value.article]),o("hr"),r.value.length?o("ul",{class:"vp-star-articles"},r.value.map(({info:s,path:a},c)=>o(se,{appear:!0,delay:.08*(c+1)},()=>o("li",{class:"vp-star-article"},o(Oe,{to:a},()=>s.title))))):o("div",{class:"vp-star-article-empty"},l.value.empty.replace("$text",l.value.star))]))}}),$0=V({name:"CategoryList",setup(){const e=Ne(),l=Qi();return()=>o("ul",{class:"vp-category-list"},ni(l.value.map).sort(([,t],[,i])=>i.items.length-t.items.length).map(([t,{path:i,items:n}])=>o("li",{class:"vp-category-item"},o(Oe,{class:["vp-category",`color${Gi(t,Number(ri.colorNumber))}`,{active:i===e.value.path}],to:i},()=>[t,o("span",{class:"vp-category-count"},n.length)]))))}}),d3=V({name:"CategoriesInfo",setup(){const e=ht(),l=Qi(),t=Kl(),i=L(()=>Hl(l.value.map).length);return()=>o("div",{class:"vp-category-wrapper"},[i.value?[o("div",{class:"title",onClick:()=>{t(l.value.path)}},[o(Hs),o("span",{class:"num"},i.value),e.value.category]),o("hr"),o(se,{delay:.04},()=>o($0))]:o("div",{class:"vp-category-empty"},e.value.empty.replace("$text",e.value.category))])}}),H0=V({name:"TagList",setup(){const e=pe(),l=Yi(),t=i=>{var n;return i===((n=e.value.blog)==null?void 0:n.name)};return()=>o("ul",{class:"vp-tag-list"},ni(l.value.map).sort(([,i],[,n])=>n.items.length-i.items.length).map(([i,{path:n,items:r}])=>o("li",{class:"vp-tag-item"},o(Oe,{class:["vp-tag",`color${Gi(i,Number(ri.colorNumber))}`,{active:t(i)}],to:n},()=>[i,o("span",{class:"vp-tag-count"},r.length)]))))}}),h3=V({name:"TagsInfo",setup(){const e=ht(),l=Yi(),t=Kl(),i=L(()=>Hl(l.value.map).length);return()=>o("div",{class:"vp-tag-wrapper"},[i.value?[o("div",{class:"title",onClick:()=>{t(l.value.path)}},[o(Ns),o("span",{class:"num"},i.value),e.value.tag]),o("hr"),o(se,{delay:.04},()=>o(H0))]:o("div",{class:"vp-tag-empty"},e.value.empty.replace("$text",e.value.tag))])}}),p3=V({name:"TimelineList",setup(){const e=ht(),l=qs(),t=Kl();return()=>o("div",{class:"timeline-list-wrapper"},[o("div",{class:"timeline-list-title",onClick:()=>{t(l.value.path)}},[o(Us),o("span",{class:"num"},l.value.items.length),e.value.timeline]),o("hr"),o("div",{class:"timeline-content"},o("ul",{class:"timeline-list"},l.value.config.map(({year:i,items:n},r)=>o(se,{appear:!0,delay:.08*(r+1)},()=>o("li",[o("h3",{class:"timeline-year"},i),o("ul",{class:"timeline-year-wrapper"},n.map(({date:s,info:a,path:c})=>o("li",{class:"timeline-item"},[o("span",{class:"timeline-date"},s),o(Oe,{class:"timeline-title",to:c},()=>a.title)])))])))))])}});const u3={article:Gs,category:Hs,tag:Ns,timeline:Us};var N0=V({name:"InfoList",setup(){const e=ht(),l=ee("article");return()=>o("div",{class:"vp-blog-infos"},[o("div",{class:"vp-blog-type-switcher"},ni(u3).map(([t,i])=>o("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{l.value=t}},o("div",{class:["vp-blog-type-icon-wrapper",{active:l.value===t}],"aria-label":e.value[t],"data-balloon-pos":"up"},o(i))))),o(se,()=>l.value==="article"?o(c3):l.value==="category"?o(d3):l.value==="tag"?o(h3):o(p3))])}}),Gn=V({name:"BlogWrapper",slots:Object,setup(e,{slots:l}){const{isMobile:t}=Wi();return()=>[o(Vs),o(Rs,{noSidebar:!0,noToc:!0},{default:()=>l.default(),navScreenBottom:()=>o($s),sidebar:t.value?()=>o(N0):null})]}});const Zi=()=>o("aside",{class:"vp-blog-info-wrapper"},[o(se,()=>o($s)),o(se,{delay:.04},()=>o(N0))]);Zi.displayName="InfoPanel";var g3=V({name:"BlogCategory",setup(){const e=Ne(),l=pe(),t=Qi(),i=Yi(),n=L(()=>l.value.blog),r=L(()=>{var c;if(((c=n.value)==null?void 0:c.type)!=="category")return null;const{name:s,key:a}=n.value;return s?a==="category"?t.value.map[s].items:a==="tag"?i.value.map[s].items:null:null});return()=>o(Gn,()=>o("div",{class:"vp-page vp-blog"},o("div",{class:"blog-page-wrapper"},[o("main",{id:"main-content",class:"vp-blog-main"},[o(se,()=>{var s,a;return((s=n.value)==null?void 0:s.key)==="category"?o($0):((a=n.value)==null?void 0:a.key)==="tag"?o(H0):null}),r.value?o(se,{appear:!0,delay:.24},()=>o(Ws,{key:e.value.path,items:r.value})):null]),o(se,{delay:.16},()=>o(Zi,{key:"blog"}))])))}});const m3="//theme-hope-assets.vuejs.press/hero/default.jpg";var v3=V({name:"BlogHero",slots:Object,setup(e,{slots:l}){const t=pe(),i=qn(),n=ne(),r=L(()=>t.value.heroFullScreen??!1),s=L(()=>{const{heroText:c,heroImage:d,heroImageDark:p,heroAlt:u,heroImageStyle:g,tagline:m}=t.value;return{text:c??(i.value.title||"Hello"),tagline:m??"",image:d?ye(d):null,imageDark:p?ye(p):null,alt:u??c??"",imageStyle:g,isFullScreen:r.value}}),a=L(()=>{const{bgImage:c,bgImageDark:d,bgImageStyle:p}=t.value;return{image:De(c)?ye(c):c===!1?null:m3,imageDark:De(d)?ye(d):null,bgStyle:p,isFullScreen:r.value}});return()=>{var c,d;return t.value.hero===!1?null:o("div",{ref:n,class:["vp-blog-hero",{fullscreen:r.value,"no-bg":!a.value.image}]},[((c=l.bg)==null?void 0:c.call(l,a.value))??[a.value.image?o("div",{class:["vp-blog-mask",{light:a.value.imageDark}],style:[{background:`url(${a.value.image}) center/cover no-repeat`},a.value.bgStyle]}):null,a.value.imageDark?o("div",{class:"vp-blog-mask dark",style:[{background:`url(${a.value.imageDark}) center/cover no-repeat`},a.value.bgStyle]}):null],((d=l.info)==null?void 0:d.call(l,s.value))??[o(se,{appear:!0,type:"group",delay:.04},()=>{const{image:p,imageDark:u,imageStyle:g,alt:m}=s.value;return[p?o("img",{key:"light",class:["vp-blog-hero-image",{light:u}],style:g,src:p,alt:m}):null,u?o("img",{key:"dark",class:"vp-blog-hero-image dark",style:g,src:u,alt:m}):null]}),o(se,{appear:!0,delay:.08},()=>s.value.text?o("h1",{class:"vp-blog-hero-title"},s.value.text):null),o(se,{appear:!0,delay:.12},()=>s.value.tagline?o("p",{class:"vp-blog-hero-description",innerHTML:s.value.tagline}):null)],s.value.isFullScreen?o("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:n.value.clientHeight,behavior:"smooth"})}},[o(Kr),o(Kr)]):null])}}}),k3=V({name:"ProjectPanel",props:{items:{type:Array,required:!0}},setup(e){const l=Qe(),t=Kl();return()=>o("div",{class:"vp-project-panel"},e.items.map(({icon:i,link:n,name:r,desc:s,background:a})=>o("a",{class:["vp-project-card",{[`color${Gi(r,Number(ri.colorNumber))}`]:!l.value&&!a}],...a?{style:a}:{},href:$n(n)?ye(n):n,onClick:c=>{t(n),c.preventDefault()}},[i?o(Ce("VPIcon"),{class:"vp-project-icon",icon:i}):null,o("div",{class:"vp-project-name"},r),o("div",{class:"vp-project-desc"},s)])))}}),f3=V({name:"BlogHomePage",setup(){const e=Ji(),l=pe(),t=L(()=>l.value.projects??[]);return()=>o("div",{class:"vp-page vp-blog-home"},[o(v3),o("div",{class:"blog-page-wrapper"},[o("main",{id:"main-content",class:"vp-blog-main"},[t.value.length?o(se,{appear:!0,delay:.16},()=>o(k3,{items:t.value})):null,o(se,{appear:!0,delay:.24},()=>o(Ws,{items:e.value.items}))]),o(se,{appear:!0,delay:.16},()=>o(Zi,{key:"blog"}))]),o(se,{appear:!0,delay:.28},()=>o(Nn))])}});const U0=()=>o(Gn,()=>o(f3));U0.displayName="BlogHome";var b3=V({name:"ArticleType",setup(){const e=Ne(),l=Al(),t=Ji(),i=Ms(),n=ht(),r=L(()=>[{text:n.value.all,path:t.value.path},{text:n.value.star,path:i.value.path},...Kk.map(({key:s,path:a})=>{const c=a.replace(/^\//,l.value);return{text:n.value[s]??ml(c).meta.title??s,path:c}})]);return()=>o("ul",{class:"vp-article-type-wrapper"},r.value.map(s=>o("li",{class:["vp-article-type",{active:s.path===e.value.path}]},o(Oe,{to:s.path},()=>s.text))))}}),y3=V({name:"BlogType",setup(){const e=Un(),l=pe(),t=Ne(),i=Ji(),n=Ms(),r=L(()=>{const s=l.value.blog;return(s==null?void 0:s.type)!=="type"||!s.key?i.value.items:s.key==="star"?n.value.items:e.value.items});return()=>o(Gn,()=>o("div",{class:"vp-page vp-blog"},o("div",{class:"blog-page-wrapper"},[o("main",{id:"main-content",class:"vp-blog-main"},[o(se,()=>o(b3)),o(se,{appear:!0,delay:.24},()=>o(Ws,{key:t.value.path,items:r.value}))]),o(se,{delay:.16},()=>o(Zi,{key:"blog"}))])))}}),_3=V({name:"TimelineItems",setup(){const e=Xi(),l=ue(),t=qs(),i=L(()=>e.value.timeline??l.value.blogLocales.timelineTitle),n=L(()=>t.value.config.map(({year:r})=>({title:r.toString(),level:2,slug:r.toString(),children:[]})));return()=>o("div",{class:"timeline-wrapper"},o("ul",{class:"timeline-content"},[o(se,()=>o("li",{class:"motto"},i.value)),o(C0,{items:n.value}),t.value.config.map(({year:r,items:s},a)=>o(se,{appear:!0,delay:.08*(a+1),type:"group"},()=>[o("h3",{key:"title",id:r,class:"timeline-year-title"},o("span",r)),o("li",{key:"content",class:"timeline-year-list"},[o("ul",{class:"timeline-year-wrapper"},s.map(({date:c,info:d,path:p})=>o("li",{class:"timeline-item"},[o("span",{class:"timeline-date"},c),o(Oe,{class:"timeline-title",to:p},()=>d.title)])))])]))]))}});const G0=()=>o(Gn,()=>o("div",{class:"vp-page vp-blog"},o("div",{class:"blog-page-wrapper"},[o("main",{id:"main-content",class:"vp-blog-main"},[o(se,{appear:!0,delay:.24},()=>o(_3))]),o(se,{delay:.16},()=>o(Zi,{key:"blog"}))])));G0.displayName="Timeline";var x3={};const Pt="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),yr=Array.from({length:64},(e,l)=>l),pn=e=>Array(e).fill(-1),Yl=[...pn(46),0,1,...yr.slice(54,64),...pn(7),...yr.slice(2,28),...pn(6),...yr.slice(28,54),...pn(5)],L3=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],A3=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],W0=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],Jr=(e,l)=>{if(l<=0||l>e.length)throw Error(`Illegal length: ${l}`);let t=0,i,n;const r=[];for(;t<l;){if(i=e[t++]&255,r.push(Pt[i>>2&63]),i=(i&3)<<4,t>=l){r.push(Pt[i&63]);break}if(n=e[t++]&255,i|=n>>4&15,r.push(Pt[i&63]),i=(n&15)<<2,t>=l){r.push(Pt[i&63]);break}n=e[t++]&255,i|=n>>6&3,r.push(Pt[i&63]),r.push(Pt[n&63])}return r.join("")},E3=(e,l)=>{const t=e.length;let i=0,n=0,r,s,a,c,d,p;const u=[];for(;i<t-1&&n<l&&(p=e.charCodeAt(i++),r=p<Yl.length?Yl[p]:-1,p=e.charCodeAt(i++),s=p<Yl.length?Yl[p]:-1,!(r==-1||s==-1||(d=r<<2>>>0,d|=(s&48)>>4,u.push(String.fromCharCode(d)),++n>=l||i>=t)||(p=e.charCodeAt(i++),a=p<Yl.length?Yl[p]:-1,a==-1)||(d=(s&15)<<4>>>0,d|=(a&60)>>2,u.push(String.fromCharCode(d)),++n>=l||i>=t)));)p=e.charCodeAt(i++),c=p<Yl.length?Yl[p]:-1,d=(a&3)<<6>>>0,d|=c,u.push(String.fromCharCode(d)),++n;return u.map(g=>g.charCodeAt(0))};typeof process=="object"&&x3.NEXT_RUNTIME==="edge"||(typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"&&process.nextTick);const K0=(...e)=>new Error(`Illegal arguments: ${e.map(l=>typeof l).join(", ")}`),ji=(e,l,t,i)=>{let n,r=e[l],s=e[l+1];return r^=t[0],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[1],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[2],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[3],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[4],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[5],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[6],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[7],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[8],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[9],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[10],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[11],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[12],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[13],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[14],n=i[r>>>24],n+=i[256|r>>16&255],n^=i[512|r>>8&255],n+=i[768|r&255],s^=n^t[15],n=i[s>>>24],n+=i[256|s>>16&255],n^=i[512|s>>8&255],n+=i[768|s&255],r^=n^t[16],e[l]=s^t[17],e[l+1]=r,e},Vt=(e,l)=>{let t=0;for(let i=0;i<4;++i)t=t<<8|e[l]&255,l=(l+1)%e.length;return{key:t,offp:l}},To=(e,l,t)=>{const i=l.length,n=t.length;let r=0,s=new Int32Array([0,0]),a;for(let c=0;c<i;c++)a=Vt(e,r),r=a.offp,l[c]=l[c]^a.key;for(let c=0;c<i;c+=2)s=ji(s,0,l,t),l[c]=s[0],l[c+1]=s[1];for(let c=0;c<n;c+=2)s=ji(s,0,l,t),t[c]=s[0],t[c+1]=s[1]},w3=(e,l,t,i)=>{const n=t.length,r=i.length;let s=0,a=new Int32Array([0,0]),c;for(let d=0;d<n;d++)c=Vt(l,s),s=c.offp,t[d]=t[d]^c.key;s=0;for(let d=0;d<n;d+=2)c=Vt(e,s),s=c.offp,a[0]^=c.key,c=Vt(e,s),s=c.offp,a[1]^=c.key,a=ji(a,0,t,i),t[d]=a[0],t[d+1]=a[1];for(let d=0;d<r;d+=2)c=Vt(e,s),s=c.offp,a[0]^=c.key,c=Vt(e,s),s=c.offp,a[1]^=c.key,a=ji(a,0,t,i),i[d]=a[0],i[d+1]=a[1]},T3=(e,l,t,i,n)=>{const r=new Int32Array(W0),s=r.length;if(t<4||t>31)throw new Error(`Illegal number of rounds (4-31): ${t}`);if(l.length!==16)throw new Error(`Illegal salt length: ${l.length} != 16`);t=1<<t>>>0;const a=new Int32Array(L3),c=new Int32Array(A3);w3(l,e,a,c);let d=0;const p=()=>{if(d<t){const g=Date.now();for(;d<t&&(d+=1,To(e,a,c),To(l,a,c),!(Date.now()-g>100)););}else{for(let m=0;m<64;m++)for(let k=0;k<s>>1;k++)ji(r,k<<1,a,c);const g=[];for(let m=0;m<s;m++)g.push((r[m]>>24&255)>>>0),g.push((r[m]>>16&255)>>>0),g.push((r[m]>>8&255)>>>0),g.push((r[m]&255)>>>0);return g}};let u;do u=p();while(!u);return u},C3=e=>{try{const l=typeof window<"u"?window.crypto:globalThis.crypto,t=new Uint32Array(e);return l.getRandomValues(t),Array.from(t)}catch{throw Error("WebCryptoAPI is not available")}},D3=(e=10)=>{if(typeof e!="number")throw K0(e);e<4?e=4:e>31&&(e=31);const l=[];return l.push("$2b$"),e<10&&l.push("0"),l.push(e.toString()),l.push("$"),l.push(Jr(C3(16),16)),l.join("")},F3=e=>{let l=0,t=0;for(let i=0;i<e.length;++i)t=e.charCodeAt(i),t<128?l+=1:t<2048?l+=2:(t&64512)===55296&&(e.charCodeAt(i+1)&64512)===56320?(i++,l+=4):l+=3;return l},S3=e=>{let l=0,t,i;const n=new Array(F3(e));for(let r=0,s=e.length;r<s;++r)t=e.charCodeAt(r),t<128?n[l++]=t:t<2048?(n[l++]=t>>6|192,n[l++]=t&63|128):(t&64512)===55296&&((i=e.charCodeAt(r+1))&64512)===56320?(t=65536+((t&1023)<<10)+(i&1023),++r,n[l++]=t>>18|240,n[l++]=t>>12&63|128,n[l++]=t>>6&63|128,n[l++]=t&63|128):(n[l++]=t>>12|224,n[l++]=t>>6&63|128,n[l++]=t&63|128);return n},I3=(e,l,t,i)=>{if(typeof e!="string"||typeof l!="string")throw new Error("Invalid content / salt: Not a string");let n,r;if(l.charAt(0)!=="$"||l.charAt(1)!=="2")throw new Error("Invalid salt version: "+l.substring(0,2));if(l.charAt(2)==="$")n="\0",r=3;else{if(n=l.charAt(2),n!=="a"&&n!=="b"&&n!=="y"||l.charAt(3)!=="$")throw Error("Invalid salt revision: "+l.substring(2,4));r=4}if(l.charAt(r+2)>"$")throw new Error("Missing salt rounds");const s=parseInt(l.substring(r,r+1),10)*10,a=parseInt(l.substring(r+1,r+2),10),c=s+a,d=l.substring(r+3,r+25);e+=n>="a"?"\0":"";const p=S3(e),u=E3(d,16);return(m=>{const k=[];return k.push("$2"),n>="a"&&k.push(n),k.push("$"),c<10&&k.push("0"),k.push(c.toString()),k.push("$"),k.push(Jr(u,u.length)),k.push(Jr(m,W0.length*4-1)),k.join("")})(T3(p,u,c))},O3=(e,l=10)=>{if(typeof l=="number"&&(l=D3(l)),typeof e!="string"||typeof l!="string")throw Error("Illegal arguments: "+typeof e+", "+typeof l);return I3(e,l)},Qr=(e,l)=>{if(typeof e!="string"||typeof l!="string")throw K0(e,l);return l.length!==60?!1:O3(e,l.substring(0,l.length-31))===l};var J0=V({name:"PasswordModal",props:{hint:String,full:Boolean,showTitle:Boolean},emits:["verify"],setup(e,{emit:l}){const t=pe(),i=ue(),n=ee(""),r=ee(!1),s=ee(!1),a=L(()=>i.value.encryptLocales);let c=null;const d=()=>{c&&clearTimeout(c),r.value=!1,l("verify",n.value,s.value),ct().then(()=>{r.value=!0,c=setTimeout(()=>{r.value=!1},1e3)})};return()=>o("div",{class:["vp-decrypt-layer",{expand:e.full||t.value.home}]},[e.showTitle?o(D0):null,o("div",{class:"vp-decrypt-modal"},[o("div",{class:["vp-decrypt-hint",{tried:r.value}]},r.value?a.value.errorHint:o(zs,{"aria-label":a.value.iconLabel})),e.hint?o("div",{class:"vp-decrypt-hint"},e.hint):null,o("div",{class:"vp-decrypt-input"},[o("input",{type:"password",value:n.value,placeholder:a.value.placeholder,onInput:({target:p})=>{n.value=p.value},onKeydown:({key:p})=>{p==="Enter"&&d()}})]),o("div",{class:"vp-remember-password"},[o("input",{id:"remember-password",type:"checkbox",value:s.value,onChange:()=>{s.value=!s.value}}),o("label",{for:"remember-password"},a.value.remember)]),o("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>{d()}},"OK")])])}});const Q0=()=>{const e=El();return L(()=>e.value.encrypt)},Co="VUEPRESS_HOPE_GLOBAL_TOKEN",P3=()=>{const e=Q0(),l=Ft(Co,""),t=Cs(Co,"");return{status:L(()=>{const{global:i=!1,admin:n}=e.value,r=i&&!!(n!=null&&n.tokens.length),s=r?l.value?e.value.admin.tokens.every(a=>!Qr(l.value,a)):e.value.admin.tokens.every(a=>!Qr(t.value,a)):!1;return{isEncrypted:r,isLocked:s,hint:(n==null?void 0:n.hint)??""}}),validate:(i,n=!1)=>{(n?l:t).value=i}}},_r=(e="",l)=>!!e&&Qr(e,l),Do="VUEPRESS_HOPE_PATH_TOKEN",j3=()=>{const e=Ne(),l=Q0(),t=Ft(Do,{}),i=Cs(Do,{}),n=s=>ti(l.value.config)?Hl(l.value.config).filter(a=>Ii(decodeURI(s),a)).sort((a,c)=>c.length-a.length):[],r=s=>{const{config:a={}}=l.value,c=n(s);if(c.length>0){const d=c.find(p=>a[p].hint);return{isEncrypted:!0,isLocked:c.some(p=>(t.value[p]?a[p].tokens.every(u=>!_r(t.value[p],u)):!0)&&(i.value[p]?a[p].tokens.every(u=>!_r(i.value[p],u)):!0)),hint:d?a[d].hint:""}}return{isEncrypted:!1,isLocked:!1,hint:""}};return{status:L(()=>r(e.value.path)),getStatus:r,validate:(s,a=!1)=>{const{config:c={}}=l.value,d=n(e.value.path);for(const p of d)if(c[p].tokens.some(u=>_r(s,u))){(a?t:i).value[p]=s;break}}}};var R3=V({name:"GlobalEncrypt",slots:Object,setup(e,{slots:l}){const{status:t,validate:i}=P3(),n=Qe(),r=ee(!1);return Ee(()=>{r.value=!0}),()=>{const{isEncrypted:s,isLocked:a,hint:c}=t.value;return o(n.value?Hn:Bs,()=>s?r.value?a?o(J0,{full:!0,hint:c,onVerify:i}):l.default():null:l.default())}}}),V3=V({name:"LocalEncrypt",slots:Object,setup(e,{slots:l}){const{status:t,validate:i}=j3(),n=ee(!1);return Ee(()=>{n.value=!0}),()=>{const{isEncrypted:r,isLocked:s,hint:a}=t.value;return r?n.value?s?o(J0,{showTitle:!0,full:!0,hint:a,onVerify:i}):l.default():null:l.default()}}});iv(e=>{const l=e.title,t=e.index??!0,i=e.icon;return t?{title:l,content:i?()=>[o(Ce("VPIcon"),{icon:i}),l]:null,order:e.order,index:e.index}:null});const B3={enhance:({app:e,router:l})=>{const{scrollBehavior:t}=l.options;l.options.scrollBehavior=async(...i)=>(await Hr.wait(),t(...i)),dk(e),e.component("BloggerInfo",$s),e.component("SocialMedias",z0),e.component("GlobalEncrypt",R3),e.component("LocalEncrypt",V3)},setup:()=>{hk(),ak(),e3()},layouts:{Layout:$k,NotFound:Nk,BlogCategory:g3,BlogHome:U0,BlogType:y3,Timeline:G0}},z3=Object.freeze(Object.defineProperty({__proto__:null,default:B3},Symbol.toStringTag,{value:"Module"})),un=[I1,O1,P1,j1,V1,H1,um,gm,mm,_m,Em,Fm,Om,Wm,Jm,tv,cv,mv,Fv,Rv,z3].map(e=>e.default).filter(Boolean),q3=JSON.parse('{"base":"/leetcode-notes/","lang":"en-US","title":"","description":"","head":[],"locales":{"/":{"lang":"zh-CN","title":"老马啸西风","description":"老马啸西风的技术博客"}}}');var pi=ne(q3),M3=Tu,$3=()=>{const e=Xu({history:M3(bs("/leetcode-notes/")),routes:[{name:"vuepress-route",path:"/:catchAll(.*)",components:{}}],scrollBehavior:(l,t,i)=>i||(l.hash?{el:l.hash}:{top:0})});return e.beforeResolve(async(l,t)=>{if(l.path!==t.path||t===zl){const i=ml(l.fullPath);if(i.path!==l.fullPath)return i.path;const n=await i.loader();l.meta={...i.meta,_pageChunk:n}}else l.path===t.path&&(l.meta=t.meta)}),e},H3=e=>{e.component("ClientOnly",Ls),e.component("Content",od),e.component("RouteLink",Oe)},N3=(e,l,t)=>{const i=L(()=>l.currentRoute.value.path),n=Yo((x,E)=>({get(){return x(),l.currentRoute.value.meta._pageChunk},set(_){l.currentRoute.value.meta._pageChunk=_,E()}})),r=L(()=>gt.resolveLayouts(t)),s=L(()=>gt.resolveRouteLocale(pi.value.locales,i.value)),a=L(()=>gt.resolveSiteLocaleData(pi.value,s.value)),c=L(()=>n.value.comp),d=L(()=>n.value.data),p=L(()=>d.value.frontmatter),u=L(()=>gt.resolvePageHeadTitle(d.value,a.value)),g=L(()=>gt.resolvePageHead(u.value,p.value,a.value)),m=L(()=>gt.resolvePageLang(d.value,a.value)),k=L(()=>gt.resolvePageLayout(d.value,r.value)),y={layouts:r,pageData:d,pageComponent:c,pageFrontmatter:p,pageHead:g,pageHeadTitle:u,pageLang:m,pageLayout:k,redirects:Rr,routeLocale:s,routePath:i,routes:Ut,siteData:pi,siteLocaleData:a};return e.provide(xs,y),Object.defineProperties(e.config.globalProperties,{$frontmatter:{get:()=>p.value},$head:{get:()=>g.value},$headTitle:{get:()=>u.value},$lang:{get:()=>m.value},$page:{get:()=>d.value},$routeLocale:{get:()=>s.value},$site:{get:()=>pi.value},$siteLocale:{get:()=>a.value},$withBase:{get:()=>ye}}),y},U3=([e,l,t=""])=>{const i=Object.entries(l).map(([a,c])=>De(c)?`[${a}=${JSON.stringify(c)}]`:c?`[${a}]`:"").join(""),n=`head > ${e}${i}`;return Array.from(document.querySelectorAll(n)).find(a=>a.innerText===t)??null},G3=([e,l,t])=>{if(!De(e))return null;const i=document.createElement(e);return ti(l)&&Object.entries(l).forEach(([n,r])=>{De(r)?i.setAttribute(n,r):r&&i.setAttribute(n,"")}),De(t)&&i.appendChild(document.createTextNode(t)),i},W3=()=>{const e=lg(),l=zn();let t=[];const i=()=>{e.value.forEach(s=>{const a=U3(s);a&&t.push(a)})},n=()=>{const s=[];return e.value.forEach(a=>{const c=G3(a);c&&s.push(c)}),s},r=()=>{document.documentElement.lang=l.value;const s=n();t.forEach((a,c)=>{const d=s.findIndex(p=>a.isEqualNode(p));d===-1?(a.remove(),delete t[c]):s.splice(d,1)}),s.forEach(a=>document.head.appendChild(a)),t=[...t.filter(a=>!!a),...s]};yl(ng,r),Ee(()=>{i(),Ie(e,r,{immediate:!1})})},K3=P2,J3=async()=>{var t;const e=K3({name:"Vuepress",setup(){var r;W3();for(const s of un)(r=s.setup)==null||r.call(s);const i=un.flatMap(({rootComponents:s=[]})=>s.map(a=>o(a))),n=tg();return()=>[o(n.value),i]}}),l=$3();H3(e),N3(e,l,un);for(const i of un)await((t=i.enhance)==null?void 0:t.call(i,{app:e,router:l,siteData:pi}));return e.use(l),{app:e,router:l}};J3().then(({app:e,router:l})=>{l.isReady().then(()=>{e.mount("#app")})});export{Z3 as a,Oc as b,X3 as c,J3 as createVueApp,Re as d,Y3 as o,Ce as r};
