import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as h}from"./app-DNaAVvYv.js";const n={};function e(l,s){return h(),a("div",null,s[0]||(s[0]=[t(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p><p><a href="https://houbb.github.io/2018/12/05/bloom-filter" target="_blank" rel="noopener noreferrer">bloom filter</a></p><p><a href="https://houbb.github.io/2019/04/01/BloomFilter-best-practice" target="_blank" rel="noopener noreferrer">bloom filter 使用最佳实践，让你少采坑！</a></p><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>todo</span></a></h1><p>sdk 包的封装+文档</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h1 id="详细介绍一下哈希函数" tabindex="-1"><a class="header-anchor" href="#详细介绍一下哈希函数"><span>详细介绍一下哈希函数</span></a></h1><p>当然可以！下面我们系统性、通俗地来讲讲哈希的灵魂——<strong>哈希函数（Hash Function）</strong>。</p><hr><h2 id="🧠-什么是哈希函数" tabindex="-1"><a class="header-anchor" href="#🧠-什么是哈希函数"><span>🧠 什么是哈希函数？</span></a></h2><p>哈希函数就是一种<strong>将输入数据（任意长度）压缩成固定长度输出</strong>的函数。</p><p>你可以把它想象成：</p><blockquote><p>✨ 一个信息“粉碎机”，不管给它多大的数据，它都能“咔咔咔”处理成固定长度的“信息指纹”。</p></blockquote><hr><h2 id="📌-哈希函数的基本特性" tabindex="-1"><a class="header-anchor" href="#📌-哈希函数的基本特性"><span>📌 哈希函数的基本特性</span></a></h2><p>一个<strong>理想的哈希函数</strong>通常具备以下特性：</p><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td><strong>确定性</strong></td><td>相同的输入一定产生相同的输出。</td></tr><tr><td><strong>均匀性</strong></td><td>输入分布均匀，输出结果也要尽量均匀分布在哈希空间里。</td></tr><tr><td><strong>快速计算</strong></td><td>计算哈希值要足够快，不能拖慢整个系统。</td></tr><tr><td><strong>抗碰撞性（可选）</strong></td><td>不同的输入尽可能产生不同的哈希值，减少冲突（特别在安全领域尤为重要）。</td></tr><tr><td><strong>不可逆性（可选）</strong></td><td>安全哈希函数要满足：不能从输出推断输入。（如 MD5、SHA 系列）</td></tr></tbody></table><hr><h2 id="🎯-哈希函数的常见应用场景-不同类型" tabindex="-1"><a class="header-anchor" href="#🎯-哈希函数的常见应用场景-不同类型"><span>🎯 哈希函数的常见应用场景 &amp; 不同类型</span></a></h2><table><thead><tr><th>应用场景</th><th>对应的哈希函数类型</th><th>举例</th></tr></thead><tbody><tr><td>哈希表 / Map</td><td>快速、均匀分布</td><td>Java 中的 <code>hashCode()</code></td></tr><tr><td>加密</td><td>不可逆、安全</td><td><code>MD5</code>、<code>SHA-256</code></td></tr><tr><td>数据完整性校验</td><td>快速、抗碰撞</td><td><code>CRC32</code></td></tr><tr><td>图像/音频识别</td><td>相似性敏感、容错性强</td><td>感知哈希（Perceptual Hash）</td></tr><tr><td>分布式系统路由</td><td>快速、分布均匀</td><td>MurmurHash、CityHash</td></tr></tbody></table><hr><h2 id="🔬-哈希函数分类详解" tabindex="-1"><a class="header-anchor" href="#🔬-哈希函数分类详解"><span>🔬 哈希函数分类详解</span></a></h2><h3 id="_1-普通哈希函数-适合哈希表等通用用途" tabindex="-1"><a class="header-anchor" href="#_1-普通哈希函数-适合哈希表等通用用途"><span>1. <strong>普通哈希函数</strong>（适合哈希表等通用用途）</span></a></h3><ul><li><p>只追求快速、均匀分布，<strong>不需要安全性</strong>。</p></li><li><p>示例：</p><ul><li>Java 中的 <code>Object.hashCode()</code></li><li>Python 的 <code>hash()</code></li><li><code>MurmurHash</code>（高性能，适用于大数据）</li><li><code>CityHash</code>（Google 出品）</li></ul></li></ul><p>🔧 MurmurHash 核心思想：对字节流进行分段操作+混合+位运算，追求 <strong>“快”+“散得开”</strong>。</p><hr><h3 id="_2-加密哈希函数-密码学哈希" tabindex="-1"><a class="header-anchor" href="#_2-加密哈希函数-密码学哈希"><span>2. <strong>加密哈希函数（密码学哈希）</strong></span></a></h3><ul><li><p>主要用于加密、签名、密码保护。</p></li><li><p>需要满足：</p><ul><li><strong>不可逆性</strong></li><li><strong>抗碰撞</strong></li><li><strong>雪崩效应</strong>（输入变化一位，输出变化巨大）</li></ul></li></ul><p>常见算法：</p><table><thead><tr><th>算法</th><th>长度</th><th>应用领域</th></tr></thead><tbody><tr><td><strong>MD5</strong></td><td>128位</td><td>密码摘要、校验码，已不再安全</td></tr><tr><td><strong>SHA-1</strong></td><td>160位</td><td>也不再安全</td></tr><tr><td><strong>SHA-256/512</strong></td><td>更安全，应用在区块链等</td><td></td></tr><tr><td><strong>HMAC</strong></td><td>可加密</td><td>用于加密传输中的消息认证</td></tr></tbody></table><hr><h3 id="_3-感知哈希-perceptual-hash" tabindex="-1"><a class="header-anchor" href="#_3-感知哈希-perceptual-hash"><span>3. <strong>感知哈希（Perceptual Hash）</strong></span></a></h3><ul><li>应用于图像/音频指纹识别。</li><li>输入相似的内容，输出的哈希值也“接近”。</li><li>用于判断两个内容“是否近似”。</li></ul><hr><h2 id="🧮-常见哈希函数示意" tabindex="-1"><a class="header-anchor" href="#🧮-常见哈希函数示意"><span>🧮 常见哈希函数示意</span></a></h2><p>比如：我们对字符串 <code>hello</code> 求哈希：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Java 中 Object.hashCode()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: 99162322</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 MD5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">md5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: 5d41402abc4b2a76b9719d911017c592</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 SHA-256</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sha256</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出: 2cf24dba5fb0a...（很长）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="⚠️-哈希冲突-哈希空间" tabindex="-1"><a class="header-anchor" href="#⚠️-哈希冲突-哈希空间"><span>⚠️ 哈希冲突 &amp; 哈希空间</span></a></h2><ul><li><p><strong>哈希冲突（Collision）</strong>：</p><ul><li>不同的输入，产生了相同的哈希值。</li><li>哈希空间有限 → 鸽笼原理：冲突是不可避免的。</li></ul></li><li><p>如何缓解？</p><ul><li>使用更大的哈希空间（例如 64 位、128 位）</li><li>优化哈希函数的分布性</li><li>对冲突做处理（如链表法、开放寻址法）</li></ul></li></ul><hr><h2 id="🧪-java-中的-hashcode-示例拆解" tabindex="-1"><a class="header-anchor" href="#🧪-java-中的-hashcode-示例拆解"><span>🧪 Java 中的 hashCode 示例拆解</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, age);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>背后其实调用了这样的逻辑：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简化版哈希函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 17</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 31</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 31</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(age);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乘以质数（如 31）是为了 <strong>打散分布，减少冲突</strong>。</p><hr><h2 id="📦-常用哈希函数库" tabindex="-1"><a class="header-anchor" href="#📦-常用哈希函数库"><span>📦 常用哈希函数库</span></a></h2><table><thead><tr><th>名称</th><th>语言/库</th><th>说明</th></tr></thead><tbody><tr><td>Guava Hashing</td><td>Java</td><td>提供 MurmurHash、SHA 等</td></tr><tr><td>hashlib</td><td>Python</td><td>提供 MD5、SHA 系列</td></tr><tr><td>Crypto</td><td>Node.js</td><td>加密用哈希库</td></tr><tr><td>OpenSSL</td><td>C/C++</td><td>强大的加解密哈希工具</td></tr></tbody></table><hr><h2 id="🎯-总结-一图读懂哈希函数" tabindex="-1"><a class="header-anchor" href="#🎯-总结-一图读懂哈希函数"><span>🎯 总结：一图读懂哈希函数</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>            ┌─────────────────────────────┐</span></span>
<span class="line"><span>            │        哈希函数 Hash        │</span></span>
<span class="line"><span>            └─────────────────────────────┘</span></span>
<span class="line"><span>                        ↓</span></span>
<span class="line"><span>       ┌────────────────────────────────────┐</span></span>
<span class="line"><span>       │             应用领域               │</span></span>
<span class="line"><span>       └────────────────────────────────────┘</span></span>
<span class="line"><span>  ┌─────────────┬────────────┬────────────┬─────────────┐</span></span>
<span class="line"><span>  │ 哈希表/Map  │ 加密验证   │ 去重/校验   │ 路由分片     │</span></span>
<span class="line"><span>  │ MD5/SHA     │ Bloom Filter │ 区块链Merkle │ LRU 缓存   │</span></span>
<span class="line"><span>  └─────────────┴────────────┴────────────┴─────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>如果你想我带你手撸一个哈希函数，或者对比几种常用哈希函数的优缺点，或看 Java、Python 中的实现源码，我可以继续展开。需要继续吗？</p><h1 id="给出-java-top10-的哈希函数-给出使用场景-优缺点" tabindex="-1"><a class="header-anchor" href="#给出-java-top10-的哈希函数-给出使用场景-优缺点"><span>给出 java top10 的哈希函数，给出使用场景+优缺点</span></a></h1><p>以下是 Java 中常用的 <strong>Top 10 哈希函数/工具</strong>，结合使用场景、优缺点和代码示例进行说明：</p><hr><h3 id="_1-object-hashcode" tabindex="-1"><a class="header-anchor" href="#_1-object-hashcode"><span>1. <strong><code>Object.hashCode()</code></strong></span></a></h3><p><strong>场景</strong>：默认对象哈希码，用于 <code>HashMap</code>、<code>HashSet</code> 等集合。<br><strong>优点</strong>：</p><ul><li>简单高效，JVM 内置支持。</li><li>默认基于内存地址，保证对象唯一性。<br><strong>缺点</strong>：</li><li>未重写时可能导致哈希冲突（如内容相同的不同对象哈希码不同）。</li><li>直接使用内存地址，不适合按内容比较的场景。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认内存地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-objects-hash-object" tabindex="-1"><a class="header-anchor" href="#_2-objects-hash-object"><span>2. <strong><code>Objects.hash(Object...)</code></strong></span></a></h3><p><strong>场景</strong>：快速生成多字段组合的哈希码（重写 <code>hashCode()</code>）。<br><strong>优点</strong>：</p><ul><li>一行代码解决多字段哈希组合。</li><li>自动处理 <code>null</code> 值。<br><strong>缺点</strong>：</li><li>基于数组创建，轻微性能开销。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, age, email);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 多字段哈希</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-string-hashcode" tabindex="-1"><a class="header-anchor" href="#_3-string-hashcode"><span>3. <strong><code>String.hashCode()</code></strong></span></a></h3><p><strong>场景</strong>：字符串哈希（<code>HashMap</code> 键值、缓存键）。<br><strong>优点</strong>：</p><ul><li>算法高效（多项式哈希）。</li><li>Java 字符串缓存哈希值（首次计算后复用）。<br><strong>缺点</strong>：</li><li>可能发生哈希碰撞（如 <code>&quot;Aa&quot;</code> 和 <code>&quot;BB&quot;</code> 的哈希相同）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 99162322</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-arrays-hashcode" tabindex="-1"><a class="header-anchor" href="#_4-arrays-hashcode"><span>4. <strong><code>Arrays.hashCode()</code></strong></span></a></h3><p><strong>场景</strong>：数组内容哈希（如 <code>byte[]</code>、<code>int[]</code>）。<br><strong>优点</strong>：</p><ul><li>深度哈希（基于元素内容而非数组地址）。</li><li>支持基本类型和对象数组。<br><strong>缺点</strong>：</li><li>嵌套数组需手动递归处理。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 30817</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-messagedigest-md5-sha" tabindex="-1"><a class="header-anchor" href="#_5-messagedigest-md5-sha"><span>5. <strong><code>MessageDigest</code> (MD5/SHA)</strong></span></a></h3><p><strong>场景</strong>：加密哈希（密码存储、数据完整性校验）。<br><strong>优点</strong>：</p><ul><li>高安全性（SHA-256 抗碰撞性强）。</li><li>标准加密算法支持。<br><strong>缺点</strong>：</li><li>性能开销大（不适合高频非加密场景）。</li><li>MD5/SHA-1 已不安全。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MessageDigest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> md </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> MessageDigest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SHA-256&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> md</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-crc32" tabindex="-1"><a class="header-anchor" href="#_6-crc32"><span>6. <strong><code>CRC32</code></strong></span></a></h3><p><strong>场景</strong>：数据校验（网络传输、文件校验）。<br><strong>优点</strong>：</p><ul><li>计算极快，低资源消耗。</li><li>高效检测数据传输错误。<br><strong>缺点</strong>：</li><li>非加密哈希，易碰撞（不适用于安全场景）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CRC32</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> crc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CRC32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">crc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> checksum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> crc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-guava-hashing-murmur3" tabindex="-1"><a class="header-anchor" href="#_7-guava-hashing-murmur3"><span>7. <strong>Guava <code>Hashing</code> (Murmur3)</strong></span></a></h3><p><strong>场景</strong>：高性能非加密哈希（布隆过滤器、分布式系统）。<br><strong>优点</strong>：</p><ul><li>速度快，碰撞率低。</li><li>提供多种哈希工具（一致性哈希等）。<br><strong>缺点</strong>：</li><li>需引入 Guava 库。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashFunction</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hashFunc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Hashing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">murmur3_32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> hashFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StandardCharsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_8-java-util-zip-adler32" tabindex="-1"><a class="header-anchor" href="#_8-java-util-zip-adler32"><span>8. <strong><code>java.util.zip.Adler32</code></strong></span></a></h3><p><strong>场景</strong>：快速数据校验（替代 CRC32）。<br><strong>优点</strong>：</p><ul><li>比 CRC32 更快。</li><li>适合实时校验。<br><strong>缺点</strong>：</li><li>可靠性低于 CRC32（长数据时）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Adler32</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> adler </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Adler32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">adler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> checksum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> adler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_9-identityhashmap-的-system-identityhashcode" tabindex="-1"><a class="header-anchor" href="#_9-identityhashmap-的-system-identityhashcode"><span>9. <strong><code>IdentityHashMap</code> 的 <code>System.identityHashCode()</code></strong></span></a></h3><p><strong>场景</strong>：基于内存地址的哈希（对象实例级唯一性）。<br><strong>优点</strong>：</p><ul><li>严格区分不同对象实例。</li><li>无重写问题。<br><strong>缺点</strong>：</li><li>忽略对象内容，仅限特殊场景。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IdentityHashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IdentityHashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user1, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 基于内存地址哈希</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_10-long-hashcode-double-hashcode" tabindex="-1"><a class="header-anchor" href="#_10-long-hashcode-double-hashcode"><span>10. <strong><code>Long.hashCode()</code> / <code>Double.hashCode()</code></strong></span></a></h3><p><strong>场景</strong>：基本类型包装类的哈希（避免装箱）。<br><strong>优点</strong>：</p><ul><li>直接计算基本类型值哈希。</li><li>效率高于 <code>new Long(value).hashCode()</code>。<br><strong>缺点</strong>：</li><li>仅限包装类型。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="总结对比表" tabindex="-1"><a class="header-anchor" href="#总结对比表"><span>总结对比表</span></a></h3><table><thead><tr><th><strong>哈希函数</strong></th><th><strong>最佳场景</strong></th><th><strong>性能</strong></th><th><strong>碰撞率</strong></th><th><strong>安全性</strong></th></tr></thead><tbody><tr><td><code>Object.hashCode()</code></td><td>默认对象标识</td><td>⚡️⚡️⚡️</td><td>高</td><td>❌</td></tr><tr><td><code>Objects.hash()</code></td><td>POJO 多字段哈希</td><td>⚡️⚡️</td><td>中</td><td>❌</td></tr><tr><td><code>String.hashCode()</code></td><td>字符串键值</td><td>⚡️⚡️⚡️</td><td>中</td><td>❌</td></tr><tr><td><code>Arrays.hashCode()</code></td><td>数组内容哈希</td><td>⚡️⚡️</td><td>中</td><td>❌</td></tr><tr><td><code>MessageDigest</code></td><td>密码/数据安全</td><td>⚡️</td><td>极低</td><td>✅</td></tr><tr><td><code>CRC32</code></td><td>数据校验</td><td>⚡️⚡️⚡️</td><td>高</td><td>❌</td></tr><tr><td>Guava <code>Murmur3</code></td><td>高性能分布式系统</td><td>⚡️⚡️⚡️</td><td>低</td><td>❌</td></tr><tr><td><code>Adler32</code></td><td>快速实时校验</td><td>⚡️⚡️⚡️⚡️</td><td>中高</td><td>❌</td></tr><tr><td><code>System.identityHashCode()</code></td><td>实例级唯一性</td><td>⚡️⚡️⚡️</td><td>低</td><td>❌</td></tr><tr><td><code>Long.hashCode()</code></td><td>基本类型哈希</td><td>⚡️⚡️⚡️⚡️</td><td>低</td><td>❌</td></tr></tbody></table><blockquote><p>💡 <strong>选择原则</strong>：</p><ul><li><strong>安全性需求</strong> → <code>SHA-256</code> (MessageDigest)。</li><li><strong>高性能非加密</strong> → <code>Murmur3</code> (Guava) 或 <code>String.hashCode()</code>。</li><li><strong>对象内容哈希</strong> → <code>Objects.hash()</code>。</li><li><strong>数据校验</strong> → <code>CRC32</code> 或 <code>Adler32</code>。</li><li><strong>基本类型</strong> → 直接调用包装类的 <code>hashCode()</code>。</li></ul></blockquote>`,113)]))}const k=i(n,[["render",e]]),p=JSON.parse('{"path":"/posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.html","title":"Hash-11-聊一聊哈希函数 Hash Function","lang":"zh-CN","frontmatter":{"title":"Hash-11-聊一聊哈希函数 Hash Function","date":"2018-05-30T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","hash","hashing"],"published":true,"description":"拓展阅读 一致性 hash 算法 java hash 实现 hash 冲突处理 bloom filter bloom filter 使用最佳实践，让你少采坑！ todo sdk 包的封装+文档 chat 详细介绍一下哈希函数 当然可以！下面我们系统性、通俗地来讲讲哈希的灵魂——哈希函数（Hash Function）。 🧠 什么是哈希函数？ 哈希函数就...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Hash-11-聊一聊哈希函数 Hash Function"}],["meta",{"property":"og:description","content":"拓展阅读 一致性 hash 算法 java hash 实现 hash 冲突处理 bloom filter bloom filter 使用最佳实践，让你少采坑！ todo sdk 包的封装+文档 chat 详细介绍一下哈希函数 当然可以！下面我们系统性、通俗地来讲讲哈希的灵魂——哈希函数（Hash Function）。 🧠 什么是哈希函数？ 哈希函数就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T04:59:26.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"hash"}],["meta",{"property":"article:tag","content":"hashing"}],["meta",{"property":"article:published_time","content":"2018-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T04:59:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hash-11-聊一聊哈希函数 Hash Function\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T04:59:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755925166000,"updatedTime":1755925166000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":6.64,"words":1993},"filePathRelative":"posts/algorithm/hash/2018-05-30-hash-11-chat-hash-functional.md","localizedDate":"2018年5月30日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/08/13/consistent-hash\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一致性 hash 算法</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/05/30/hash-impl\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">java hash 实现</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/05/30/hash-conflict\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">hash 冲突处理</a></p>","autoDesc":true}');export{k as comp,p as data};
