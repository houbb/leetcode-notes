import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as t}from"./app-DkVS2K2o.js";const r={};function n(s,e){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="算法介绍" tabindex="-1"><a class="header-anchor" href="#算法介绍"><span>算法介绍</span></a></h1><p>分布式计算机系统的要求刺激了将相同信息的副本保存在计算机网络中的不同节点的兴趣。</p><p>数据复制允许信息位于其使用点附近，可以通过在高使用区域中静态定位副本，也可以根据需要动态创建临时副本。</p><p>通过允许许多节点并行处理对相同信息的请求，数据复制也增加了数据的可用性，并掩盖部分系统故障。</p><p>因此，在某些情况下，维护副本的成本会被复制数据所提供的性能，通信成本和可靠性优势所抵消。</p><h2 id="新算法" tabindex="-1"><a class="header-anchor" href="#新算法"><span>新算法</span></a></h2><p>我们提出了一种维护复制文件的新算法。</p><p>该算法可以通过以下描述简要表征：</p><ul><li><p>为复制文件的每个副本分配一定数量的投票。</p></li><li><p>每个事务收集读取法定数量的r票数以读取文件，以及写入法定数量的w票数以写入文件，使得r + w大于分配给文件的总票数。</p></li><li><p>这可确保每个读取仲裁与每个写入仲裁之间存在非空交集。 总是有一个文件代表的子集，其总票数为w当前。</p></li><li><p>因此，所收集的任何读取法定数量都保证具有当前副本。</p></li><li><p>版本号可以确定哪些副本是最新的。</p></li></ul><p>该算法具有许多理想的属性：</p><ul><li><p>它继续正确运行，具有不可访问的副本。</p></li><li><p>它由少量额外的机器组成，运行在事务文件系统之上。 虽然“投票”的发生将在本文后面发现，但是不需要基于复杂消息的协调机制。</p></li><li><p>它提供了串行一致性。 换句话说，每个事务似乎都在运行它。始终向用户提供最新版本的数据。</p></li><li><p>通过操纵r，w和复制文件的投票结构，系统管理员可以更改文件的性能和可靠性特征。</p></li><li><p>创建的所有文件的额外副本（包括用户本地磁盘上的临时副本）都可以合并到我们的框架中。</p></li></ul><p>本文的其余部分“分为五个部分。</p><p>第2部分描述了相关工作，以及该算法与以前的解决方案有何不同。</p><p>算法的环境，接口和基本结构在第3节中介绍。</p><p>第4节提供了改进，包括引入临时副本和新的锁定技术。</p><p>Violet 系统包含此提案的实现，以及一些性能考虑因素，将在第5节中讨论。</p><p>最后一节是一个简短的结论。附录说明我们的算法保持了串行一致性。</p><p>本文中的想法在Mesa中得到了说明，Mesa是在Xerox Palo Alto研究中心开发的一种编程语言。</p><p>Mesa非常适合这项任务，因为它包含对进程，监视器和条件变量的集成支持。</p><p>为了简化此演示，Mesa示例中省略了一些不必要的细节。</p><h1 id="相关工作" tabindex="-1"><a class="header-anchor" href="#相关工作"><span>相关工作</span></a></h1><p>以前用于维护复制数据的算法分为两类。</p><p>有些人坚持认为每个对象都有一个主要站点，负责更新仲裁。</p><p>分布式INGRES就是这样一个系统。 这种技术很简单，但相对不灵活。</p><p>其他人不使用对象的区分站点，并且比主站点算法更复杂。</p><p>SDD-1通过通过通信系统发送更新来保持对象的所有副本是最新的，该通信系统将通过机器崩溃来缓冲消息。</p><p>托马斯的提议只要求更新对象的大部分副本，并包括投票。</p><p>虽然我们分享投票的概念，但很难直接将我们的算法与Thomas&#39;进行比较，因为这两者提供了不同的服务。</p><p>值得注意的是：</p><ul><li><p>我们<strong>保证查询的串行一致性（只读事务）</strong>，而Thomas的算法则不然。</p></li><li><p>我们不会坚持要更新对象的大部分副本。</p></li><li><p>Thomas的算法不使用加权选民，这限制了它的灵活性。</p></li><li><p>托马斯的算法更复杂，因为它解决了一致性问题以及复制问题。 我们将两者分开，从而产生一种更容易推理和实现的算法。</p></li><li><p>我们的结构允许包含临时副本。</p></li></ul><h1 id="_3-基本算法" tabindex="-1"><a class="header-anchor" href="#_3-基本算法"><span>3. 基本算法</span></a></h1><h2 id="_3-1-环境" tabindex="-1"><a class="header-anchor" href="#_3-1-环境"><span>3.1 环境</span></a></h2><p>实现我们的算法所需的概念在下面被建模为稳定的文件系统。</p><p>在3.3节中，假设存在这样的系统，我们为复制数据构建算法。</p><p>我们的博览会使用两种对象，文件和容器。 文件是字节数组，通过读写操作寻址，如下所述。</p><p>容器是文件的存储库; 它们旨在表示存储设备，例如磁盘驱动器。 这些对象以及本文稍后介绍的其他对象具有唯一的名称。</p><p>即使它们位于不同的计算机上，也不会为两个对象分配相同的名称。</p><p>我们不会进一步关注程序如何获取名称，但会假设容器名称和感兴趣的文件即将到来。</p><p>逻辑上，文件是可以创建，删除，读取和写入的字节数组。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>File.Create：PROCEDURE [container：Container.ID] RETURNS [file：File.ID]，</span></span>
<span class="line"><span>File.Delete：PROCEDURE [file：File.ID];</span></span>
<span class="line"><span>File.Read: PROCEDURE [file：File.ID，startByte，count：INTEGER，Buffer：Pointer]</span></span>
<span class="line"><span>File.Write：PROCEDURE [file：File.ID，startByte，count：INTEGER，Buffer：Pointer]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化讨论，我们假设文件系统原语在远程和本地文件上运行。</p><p>这可以通过将文件的位置或容器编码为其唯一标识符，或者通过维护远程文件的位置提示来实现。</p><p>这些细节将不再进一步考虑。</p><p>事务用于定义并发控制和故障恢复的范围。</p><p>事务是由开始事务调用和提交事务调用括起来的一组相关文件操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Transaction.Begin：PROCEDURE，</span></span>
<span class="line"><span>Transaction.Commit：PROCEDURE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>事务通过使其在文件操作中看起来不是系统中的其他活动（称为串行一致性的属性）来隐藏并发性。</p><p>事务隐藏了可以从中恢复的不良事件，例如检测到的磁盘读取错误或服务器崩溃。</p><p>事务还保证执行其所有写操作，或者不执行任何操作。</p><p>此外，一旦事务提交，其效果必须适应硬件故障，例如服务器崩溃。</p><p>每个进程都有一个当前事务。</p><p>因此，对于使用两个事务的应用程序，它必须创建至少两个进程。</p><p>分叉进程可以通过调用以下方式加入其父进程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Transaction.JoinParentsTransaction：PROCEDURE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果文件所在的服务器已关闭，或者存在通信故障，则该文件可能不可用。</p><p>如果将读取操作定向到不可用的文件，则使用相应的文件。</p><p>读请求永远不会返回。我们的算法使用多个进程来允许它在这种情况下继续进行。</p><p>未完成的未完成读取，因为它们从未发生过，不会影响事务提交的能力。</p><p>事务系统仅保证在提交事务时实际完成的读取的串行一致性。</p><p>同样，如果写操作指向不可用的文件，相应的文件。</p><p>写请求永远不会返回。但是，尝试省略未完成写入的事务将保持未提交状态，直到其所有写入完成。</p><p>用户可能想要中止正在进行的事务。事务中止（可由用户启动，如下所示）将丢弃所有事务的写入，并终止事务。</p><p>Transaction.Abort：PROCEDURE，</p><p>由于服务器崩溃，通信故障或锁定冲突，文件系统也可能会自动中止事务。</p><p>这结束了我们的原始对象和操作的模型集。 该模型将合作计算机的联盟抽象为具有统一命名和分布式事务文件系统的结构。</p><p>正如我们将在后面的章节中看到的，这里介绍的抽象使复制算法直接解释。</p><p>当然，我们相信我们所描述的模型是可实现的和实用的; 事实上，实施所需的思想受到了极大的关注。</p><p>Gray提供了对两阶段提交协议，锁定和同步原语的精彩讨论。 Lampson和Sturgis描述了一个具有我们所有属性的已实现系统<br> 模型要求。</p><p>TODO...</p><h1 id="个人得失" tabindex="-1"><a class="header-anchor" href="#个人得失"><span>个人得失</span></a></h1><ol><li><p>英文能力非常重要。否则感觉找不到自己想要的东西。</p></li><li><p>查找过程</p></li></ol><p>根据关键词 <code>Gifford, 1979</code> 搜索到 <a href="https://en.wikipedia.org/wiki/Quorum_%28distributed_computing%29#cite_note-3" target="_blank" rel="noopener noreferrer">wiki</a></p><p>根据脚注，找到论文：<a href="https://www.cs.swarthmore.edu/~newhall/readings/gifford79.pdf" target="_blank" rel="noopener noreferrer">Weighted Voting for Replicated Data</a></p><ol start="3"><li>论文</li></ol><p>论文作为一手的信息资料，虽然花费的时间会比看一个简短的文章时间多，但这是一种学习的方式。</p><p>下午需要将这个论文全部翻译一遍。</p><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2019/04/05/distributed-tx-02-nwr-02" target="_blank" rel="noopener noreferrer">WRN 算法</a></p><p><a href="https://houbb.github.io/2018/10/30/paxos" target="_blank" rel="noopener noreferrer">Paxos 算法</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><h2 id="论文" tabindex="-1"><a class="header-anchor" href="#论文"><span>论文</span></a></h2><p><a href="https://www.cs.swarthmore.edu/~newhall/readings/gifford79.pdf" target="_blank" rel="noopener noreferrer">Weighted Voting for Replicated Data</a></p><p><a href="https://stackoverflow.com/questions/12156517/whats-the-difference-between-paxos-and-wr-n-in-cassandra" target="_blank" rel="noopener noreferrer">Paxos 和 WRN 算法的区别</a></p><p><a href="https://en.wikipedia.org/wiki/Quorum_%28distributed_computing%29" target="_blank" rel="noopener noreferrer">Quorum (distributed computing)</a></p>`,84)]))}const h=p(r,[["render",n]]),d=JSON.parse('{"path":"/posts/algorithm/2019-04-05-althgorim-gifford.html","title":"Gifford 算法","lang":"zh-CN","frontmatter":{"title":"Gifford 算法","date":"2019-04-05T00:00:00.000Z","categories":["Althgorim"],"tags":["althgorim","distributed","paper","TODO","sh"],"published":true,"description":"算法介绍 分布式计算机系统的要求刺激了将相同信息的副本保存在计算机网络中的不同节点的兴趣。 数据复制允许信息位于其使用点附近，可以通过在高使用区域中静态定位副本，也可以根据需要动态创建临时副本。 通过允许许多节点并行处理对相同信息的请求，数据复制也增加了数据的可用性，并掩盖部分系统故障。 因此，在某些情况下，维护副本的成本会被复制数据所提供的性能，通信...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/2019-04-05-althgorim-gifford.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Gifford 算法"}],["meta",{"property":"og:description","content":"算法介绍 分布式计算机系统的要求刺激了将相同信息的副本保存在计算机网络中的不同节点的兴趣。 数据复制允许信息位于其使用点附近，可以通过在高使用区域中静态定位副本，也可以根据需要动态创建临时副本。 通过允许许多节点并行处理对相同信息的请求，数据复制也增加了数据的可用性，并掩盖部分系统故障。 因此，在某些情况下，维护副本的成本会被复制数据所提供的性能，通信..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-18T03:07:34.000Z"}],["meta",{"property":"article:tag","content":"althgorim"}],["meta",{"property":"article:tag","content":"distributed"}],["meta",{"property":"article:tag","content":"paper"}],["meta",{"property":"article:tag","content":"TODO"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2019-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-18T03:07:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gifford 算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-18T03:07:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755706130000,"updatedTime":1758164854000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"},{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":7.82,"words":2345},"filePathRelative":"posts/algorithm/2019-04-05-althgorim-gifford.md","localizedDate":"2019年4月5日","excerpt":"\\n<p>分布式计算机系统的要求刺激了将相同信息的副本保存在计算机网络中的不同节点的兴趣。</p>\\n<p>数据复制允许信息位于其使用点附近，可以通过在高使用区域中静态定位副本，也可以根据需要动态创建临时副本。</p>\\n<p>通过允许许多节点并行处理对相同信息的请求，数据复制也增加了数据的可用性，并掩盖部分系统故障。</p>\\n<p>因此，在某些情况下，维护副本的成本会被复制数据所提供的性能，通信成本和可靠性优势所抵消。</p>\\n<h2>新算法</h2>\\n<p>我们提出了一种维护复制文件的新算法。</p>\\n<p>该算法可以通过以下描述简要表征：</p>\\n<ul>\\n<li>\\n<p>为复制文件的每个副本分配一定数量的投票。</p>\\n</li>\\n<li>\\n<p>每个事务收集读取法定数量的r票数以读取文件，以及写入法定数量的w票数以写入文件，使得r + w大于分配给文件的总票数。</p>\\n</li>\\n<li>\\n<p>这可确保每个读取仲裁与每个写入仲裁之间存在非空交集。 总是有一个文件代表的子集，其总票数为w当前。</p>\\n</li>\\n<li>\\n<p>因此，所收集的任何读取法定数量都保证具有当前副本。</p>\\n</li>\\n<li>\\n<p>版本号可以确定哪些副本是最新的。</p>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
