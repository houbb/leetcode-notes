import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as n}from"./app-DOxIOlLN.js";const h={};function t(e,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h2 id="什么是对数器" tabindex="-1"><a class="header-anchor" href="#什么是对数器"><span>什么是对数器？</span></a></h2><p>对数器，本质上是一种用于验证算法正确性的测试工具和调试方法。</p><p>它的核心思想是：</p><ol><li>有一个你想测试的目标算法 <code>A</code>：这个算法通常是你新设计的、优化的、或者相对复杂、你对其正确性没有十足把握的算法（比如一个高效的排序算法、一个巧妙的动态规划解法）。</li><li>有一个绝对正确（但可能低效、简单、暴力）的算法 <code>B</code>：这个算法是作为“标杆”或“正确答案生成器”存在的。它的正确性很容易被验证，或者本身就是公认正确的（比如使用系统库函数 <code>sort()</code> 进行排序，或者一个显而易见的暴力解法）。</li><li>生成大量随机测试数据：编写一个函数，能够产生各种可能情况下的随机输入数据（包括边界条件、极端情况）。</li><li>用算法 A 和算法 B 分别处理同一份随机输入数据。</li><li>比较两个算法的输出结果：如果对于大量的随机输入，算法 A 和算法 B 的输出结果都完全一致，那么我们就可以在很高的置信度下认为算法 A 是正确的。</li></ol><h3 id="为什么叫-对数器" tabindex="-1"><a class="header-anchor" href="#为什么叫-对数器"><span>为什么叫“对数器”？</span></a></h3><p>“对数”在这里的含义是 “对比”、“校验”。它不直接涉及数学上的对数运算，而是强调通过对比两个算法（目标算法和基准算法） 的输出结果来验证正确性。你可以把它理解为一个“结果对比器”或“正确性校验器”。</p><h2 id="为什么需要对数器-解决的问题" tabindex="-1"><a class="header-anchor" href="#为什么需要对数器-解决的问题"><span>为什么需要对数器？（解决的问题）</span></a></h2><ol><li>验证复杂算法的正确性： 对于逻辑复杂、边界条件多的算法（如动态规划、贪心、高级数据结构操作），仅靠有限的几个测试用例（手写的或题目给定的）很难覆盖所有情况，容易遗漏边界 Bug。对数器通过海量随机测试大大提高覆盖率。</li><li>调试困难： 当算法在某个复杂输入下出错时，定位 Bug 非常困难。对数器可以： <ul><li>自动缩小问题规模：通过记录导致出错的随机输入，你可以获得一个（可能很小的）复现用例，极大方便调试。</li><li>提供“正确答案”：你知道对于这个出错的输入，基准算法 <code>B</code> 的输出是什么，这为调试提供了明确的目标。</li></ul></li><li>测试“黑盒”算法： 如果你在实现一个算法，但对其内部原理不是很清晰（比如根据论文或思路实现），对数器是验证其正确性的可靠手段。</li><li>替代 OJ（在线判题系统）的本地测试： 在提交代码到 OJ 前，先用对数器进行充分测试，避免多次“Wrong Answer”罚时。特别是当 OJ 不返回具体出错用例时，对数器是本地调试的唯一有效手段。</li><li>验证算法优化后的正确性： 当你对一个已有算法进行优化（如空间优化、剪枝）时，对数器可以确保优化没有引入新的错误，结果与原算法一致。</li></ol><h2 id="对数器的实现步骤-核心流程" tabindex="-1"><a class="header-anchor" href="#对数器的实现步骤-核心流程"><span>对数器的实现步骤（核心流程）</span></a></h2><ol><li>实现目标算法 <code>A</code>： 你需要验证正确性的那个算法。</li><li>实现绝对正确的基准算法 <code>B</code>： <ul><li>可以是暴力解法（Brute Force）。</li><li>可以是调用语言内置的、公认正确的库函数（如 <code>Arrays.sort()</code>, <code>Math.max()</code> 等）。</li><li>可以是一个逻辑极其简单、易于验证正确性的简单实现。</li><li>关键： 你必须对 <code>B</code> 的正确性有 100% 的信心。</li></ul></li><li>实现随机测试数据生成器： <ul><li>使用随机数生成器（如 <code>Random</code>）。</li><li>生成的测试数据需要覆盖各种情况： <ul><li>一般情况： 普通、常见的输入。</li><li>边界情况： 空输入、最小规模输入、最大规模输入（如果可行）、临界值。</li><li>极端情况： 数据全相同、数据完全逆序、数据范围极大/极小、包含特殊值（如负数、零）。</li><li>随机多样： 数据规模、数据值随机变化。</li></ul></li><li>关键： 数据生成器要尽可能模拟真实或可能遇到的所有输入模式。</li></ul></li><li>实现测试主逻辑： <ul><li>循环多次（例如几万、几十万次，取决于算法复杂度和数据规模）。</li><li>在每次循环中： <ol><li>调用数据生成器，生成一份随机输入数据 <code>input</code>。</li><li>复制 <code>input</code> (如果需要，避免 <code>A</code> 和 <code>B</code> 修改原始输入影响对方)。</li><li>用算法 <code>A</code> 处理一份 <code>input</code>，得到结果 <code>resultA</code>。</li><li>用算法 <code>B</code> 处理另一份（或复制后的）<code>input</code>，得到结果 <code>resultB</code>。</li><li>比较 <code>resultA</code> 和 <code>resultB</code>。 <ul><li>如果一致，继续下一次循环。</li><li>如果不一致！ <ul><li>立即打印或记录出错的输入数据 <code>input</code>。</li><li>打印 <code>resultA</code> 和 <code>resultB</code>。</li><li>终止测试（或根据需求记录错误并继续测试更多用例）。</li></ul></li></ul></li></ol></li></ul></li><li>分析结果： <ul><li>如果跑了大量测试（比如 10 万次）都没有出错，基本可以认为 <code>A</code> 正确。</li><li>如果出现不一致，恭喜你找到了 Bug！利用打印出的错误输入 <code>input</code>、<code>resultA</code>、<code>resultB</code>，开始调试算法 <code>A</code>。</li></ul></li></ol><h2 id="关键要素与注意事项" tabindex="-1"><a class="header-anchor" href="#关键要素与注意事项"><span>关键要素与注意事项</span></a></h2><ol><li>基准算法 <code>B</code> 的正确性是基石： 如果 <code>B</code> 本身有错，那么所有测试都是无效的。选择最简单、最可靠的实现作为 <code>B</code>。</li><li>随机数据生成器的质量至关重要： <ul><li>它决定了测试的覆盖率和发现 Bug 的能力。</li><li>一定要包含各种边界和极端情况。不能只生成“友好”的数据。</li><li>考虑数据规模：小规模用于快速测试和调试，大规模用于压力测试和发现隐藏问题。</li></ul></li><li>比较结果的逻辑要严谨： 比较 <code>resultA</code> 和 <code>resultB</code> 时，要根据算法功能决定是比单个值、整个数组、还是复杂对象。确保比较逻辑本身正确无误（例如，比较数组是否相等要用 <code>Arrays.equals()</code> 而不是 <code>==</code>）。</li><li>复制输入数据（如果需要）： 如果算法 <code>A</code> 或 <code>B</code> 会修改输入数据（如原地排序），那么在将同一份输入传给 <code>A</code> 和 <code>B</code> 之前，必须先复制一份，确保它们处理的是初始状态相同的独立数据。</li><li>大量测试： 次数太少不足以暴露概率性 Bug 或只在特定模式输入下出现的 Bug。通常需要成千上万次测试才能有较高置信度。</li><li>自动化： 整个过程（生成数据、运行 A/B、比较结果）必须完全自动化，才能高效地进行海量测试。</li></ol><h2 id="一个简单示例-验证自定义排序算法" tabindex="-1"><a class="header-anchor" href="#一个简单示例-验证自定义排序算法"><span>一个简单示例（验证自定义排序算法）</span></a></h2><p>假设你实现了一个自定义的快速排序 <code>myQuickSort(int[] arr)</code>。</p><ol><li>目标算法 <code>A</code>： <code>myQuickSort(int[] arr)</code> (你的快速排序实现，可能包含 Bug)。</li><li>基准算法 <code>B</code>： <code>Arrays.sort(int[] arr)</code> (JDK 提供的、公认正确的排序)。</li><li>随机数据生成器：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">generateRandomArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxValue) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Random</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rand </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(maxSize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // [0, maxSize]</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[size]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 生成正负随机数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        arr[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(maxValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(maxValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>测试主逻辑：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> testTimes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maxSize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maxValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> succeed </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> testTimes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generateRandomArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(maxSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxValue)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr1, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arr1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 复制一份原始数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        myQuickSort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(arr1)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 用你的算法排序</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // 用正确算法排序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 比较两个排序结果是否完全相同</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr1, arr2)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            succeed </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 打印出错的信息以便调试</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Error Case:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Original: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr2));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // arr2 是原始数据的拷贝，但被 Arrays.sort 排序了？这里逻辑有点歧义</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 更清晰的打印：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;My Sorted: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr1));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Correct Sorted: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr2));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 发现错误立即退出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(succeed </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Nice! Algorithm A seems correct.&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Fucking Bug Found!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><em>注意：上面注释处指出了一个小歧义。<code>arr2</code> 是原始数据的拷贝，但紧接着就被 <code>Arrays.sort(arr2)</code> 修改了。所以打印 &quot;Original&quot; 时其实打印的是排序后的 <code>arr2</code>。为了清晰打印原始输入，应该在复制后立即保存一份原始数据的拷贝用于打印：</em><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arrOriginal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr1, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arr1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 保存原始数据用于打印</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 排序 arr1 和 arr2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr1, arr2)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Original: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arrOriginal));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>对数器是算法学习和工程实践中极其重要且实用的技巧。</p><p>它利用随机测试和结果对比，极大地提高了验证算法正确性的效率和可靠性，是定位和修复算法 Bug 的利器。</p><p>掌握并习惯使用对数器，将显著提升你的算法开发效率和代码质量。</p><p>务必在你实现每一个非平凡算法时，都使用对数器进行验证！</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://leetcode.cn/problems/hanota-lcci/description/?envType=problem-list-v2&amp;envId=recursion" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/hanota-lcci/description/?envType=problem-list-v2&amp;envId=recursion</a></p>`,22)]))}const r=s(h,[["render",t]]),d=JSON.parse('{"path":"/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html","title":"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性","lang":"zh-CN","frontmatter":{"title":"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","tips","leetcode"],"published":true,"description":"什么是对数器？ 对数器，本质上是一种用于验证算法正确性的测试工具和调试方法。 它的核心思想是： 有一个你想测试的目标算法 A：这个算法通常是你新设计的、优化的、或者相对复杂、你对其正确性没有十足把握的算法（比如一个高效的排序算法、一个巧妙的动态规划解法）。 有一个绝对正确（但可能低效、简单、暴力）的算法 B：这个算法是作为“标杆”或“正确答案生成器”存...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性"}],["meta",{"property":"og:description","content":"什么是对数器？ 对数器，本质上是一种用于验证算法正确性的测试工具和调试方法。 它的核心思想是： 有一个你想测试的目标算法 A：这个算法通常是你新设计的、优化的、或者相对复杂、你对其正确性没有十足把握的算法（比如一个高效的排序算法、一个巧妙的动态规划解法）。 有一个绝对正确（但可能低效、简单、暴力）的算法 B：这个算法是作为“标杆”或“正确答案生成器”存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T12:19:07.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"tips"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T12:19:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"力扣刷题技巧之对数器，如果没有OJ（在线判题系统）怎么办？如何保障本地代码的正确性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T12:19:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755865147000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":7.74,"words":2323},"filePathRelative":"posts/leetcode/history1/2020-06-06-algorithm-099-tips-duishuqi-01-intro.md","localizedDate":"2020年6月8日","excerpt":"<h2>什么是对数器？</h2>\\n<p>对数器，本质上是一种用于验证算法正确性的测试工具和调试方法。</p>\\n<p>它的核心思想是：</p>\\n<ol>\\n<li>有一个你想测试的目标算法 <code>A</code>：这个算法通常是你新设计的、优化的、或者相对复杂、你对其正确性没有十足把握的算法（比如一个高效的排序算法、一个巧妙的动态规划解法）。</li>\\n<li>有一个绝对正确（但可能低效、简单、暴力）的算法 <code>B</code>：这个算法是作为“标杆”或“正确答案生成器”存在的。它的正确性很容易被验证，或者本身就是公认正确的（比如使用系统库函数 <code>sort()</code> 进行排序，或者一个显而易见的暴力解法）。</li>\\n<li>生成大量随机测试数据：编写一个函数，能够产生各种可能情况下的随机输入数据（包括边界条件、极端情况）。</li>\\n<li>用算法 A 和算法 B 分别处理同一份随机输入数据。</li>\\n<li>比较两个算法的输出结果：如果对于大量的随机输入，算法 A 和算法 B 的输出结果都完全一致，那么我们就可以在很高的置信度下认为算法 A 是正确的。</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
