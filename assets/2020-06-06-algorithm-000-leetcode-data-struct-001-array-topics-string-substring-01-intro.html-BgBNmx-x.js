import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,b as s,o as e}from"./app-w9iUkALj.js";const l={};function r(h,i){return e(),n("div",null,i[0]||(i[0]=[t(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="介绍一下力扣中的子串" tabindex="-1"><a class="header-anchor" href="#介绍一下力扣中的子串"><span>介绍一下力扣中的子串</span></a></h2><p>在力扣（LeetCode）中，“<strong>子串（Substring）</strong>”是一个非常常见的概念，几乎在字符串相关的题目中都会出现。理解清楚子串的定义、分类和常用技巧，对于刷题非常关键。</p><hr><h2 id="一、子串的定义" tabindex="-1"><a class="header-anchor" href="#一、子串的定义"><span>一、子串的定义</span></a></h2><blockquote><p>子串是一个字符串中 <strong>连续的一段字符</strong>。</p></blockquote><p>比如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>字符串 s = &quot;abcde&quot;</span></span>
<span class="line"><span>它的子串包括：</span></span>
<span class="line"><span>- &quot;a&quot;</span></span>
<span class="line"><span>- &quot;ab&quot;</span></span>
<span class="line"><span>- &quot;abc&quot;</span></span>
<span class="line"><span>- &quot;bcd&quot;</span></span>
<span class="line"><span>- &quot;de&quot;</span></span>
<span class="line"><span>- &quot;abcde&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：像 <code>&quot;ace&quot;</code> 这种 <strong>跳着选的不是子串</strong>，它叫子序列（Subsequence）。</p><hr><h2 id="二、常见子串相关问题类型" tabindex="-1"><a class="header-anchor" href="#二、常见子串相关问题类型"><span>二、常见子串相关问题类型</span></a></h2><table><thead><tr><th>问题类型</th><th>举例题目</th><th>简要说明</th></tr></thead><tbody><tr><td>枚举所有子串</td><td>暴力枚举、回溯等</td><td>主要考察循环结构，时间复杂度 O(n²)</td></tr><tr><td>最长子串</td><td><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">3. 无重复字符的最长子串</a></td><td>多用滑动窗口优化</td></tr><tr><td>最小子串</td><td><a href="https://leetcode.cn/problems/minimum-window-substring/" target="_blank" rel="noopener noreferrer">76. 最小覆盖子串</a></td><td>滑动窗口 + 计数数组或 HashMap</td></tr><tr><td>固定/变动长度子串</td><td><a href="https://leetcode.cn/problems/permutation-in-string/" target="_blank" rel="noopener noreferrer">567. 字符串的排列</a></td><td>通常配合滑动窗口技巧</td></tr><tr><td>回文子串</td><td><a href="https://leetcode.cn/problems/longest-palindromic-substring/" target="_blank" rel="noopener noreferrer">5. 最长回文子串</a>、<a href="https://leetcode.cn/problems/palindromic-substrings/" target="_blank" rel="noopener noreferrer">647. 回文子串</a></td><td>动态规划或中心扩展法</td></tr><tr><td>字符串匹配</td><td><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/" target="_blank" rel="noopener noreferrer">28. 找出字符串中第一个匹配项的下标</a></td><td>KMP、Rabin-Karp 等字符串算法</td></tr></tbody></table><hr><h2 id="三、子串枚举方法" tabindex="-1"><a class="header-anchor" href="#三、子串枚举方法"><span>三、子串枚举方法</span></a></h2><h3 id="_1-暴力法-双层循环" tabindex="-1"><a class="header-anchor" href="#_1-暴力法-双层循环"><span>1. 暴力法（双层循环）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sub </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i, j);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // sub 是 [i,j) 的子串</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：O(n²)</li><li>空间复杂度：O(1)（不算子串存储）</li></ul><h3 id="_2-滑动窗口法-常用于子串匹配、计数类问题" tabindex="-1"><a class="header-anchor" href="#_2-滑动窗口法-常用于子串匹配、计数类问题"><span>2. 滑动窗口法（常用于子串匹配、计数类问题）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 扩展右边界</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(right);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 满足某种条件后移动左边界</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (满足某条件) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 统计答案</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>滑动窗口适合求“最长”、“最短”、“包含哪些字符”的子串问题。</p><hr><h2 id="四、常用技巧总结" tabindex="-1"><a class="header-anchor" href="#四、常用技巧总结"><span>四、常用技巧总结</span></a></h2><table><thead><tr><th>技巧</th><th>说明</th></tr></thead><tbody><tr><td>滑动窗口</td><td>高效处理动态长度子串问题</td></tr><tr><td>哈希表 / 计数数组</td><td>跟踪窗口内的字符频率</td></tr><tr><td>前缀和 / 差分数组</td><td>适用于子串数值计算类问题</td></tr><tr><td>动态规划</td><td>回文、最长公共子串等</td></tr><tr><td>双指针</td><td>与滑动窗口配合使用</td></tr><tr><td>字符映射</td><td>快速判断两个子串是否匹配</td></tr></tbody></table><hr><h2 id="五、面试-刷题中容易混淆的概念" tabindex="-1"><a class="header-anchor" href="#五、面试-刷题中容易混淆的概念"><span>五、面试/刷题中容易混淆的概念</span></a></h2>`,34),s("table",{"1,2":""},[s("thead",null,[s("tr",null,[s("th",null,"概念"),s("th",null,"是否连续"),s("th",null,'示例（s="abcde"）')])]),s("tbody",null,[s("tr",null,[s("td",null,"子串 substring"),s("td",null,"✅ 是连续的"),s("td",null,'"bcd"、"a"')]),s("tr",null,[s("td",null,"子序列 subsequence"),s("td",null,"❌ 可不连续"),s("td",null,'"ace"、"bd"')]),s("tr",null,[s("td",null,"子数组 subarray"),s("td",null,"✅ 数组的子串"),s("td",null,"[1,2,3] 中的 [2,3]")]),s("tr",null,[s("td",null,"子集 subset"),s("td",null,"❌ 任何组合都行"),s("td",null,"集合 {1,2} 的子集有 {}, {1}, {2},")])])],-1),t('<hr><h2 id="六、经典子串类力扣题推荐" tabindex="-1"><a class="header-anchor" href="#六、经典子串类力扣题推荐"><span>六、经典子串类力扣题推荐</span></a></h2><table><thead><tr><th>难度</th><th>题目</th></tr></thead><tbody><tr><td>🌟 简单</td><td><a href="https://leetcode.cn/problems/longest-common-prefix/" target="_blank" rel="noopener noreferrer">14. 最长公共前缀</a>、<a href="https://leetcode.cn/problems/length-of-last-word/" target="_blank" rel="noopener noreferrer">58. 最后一个单词的长度</a></td></tr><tr><td>🌟🌟 中等</td><td><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreferrer">3. 无重复字符的最长子串</a>、<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener noreferrer">438. 找到字符串中所有字母异位词</a></td></tr><tr><td>🌟🌟🌟 困难</td><td><a href="https://leetcode.cn/problems/minimum-window-substring/" target="_blank" rel="noopener noreferrer">76. 最小覆盖子串</a>、<a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/" target="_blank" rel="noopener noreferrer">30. 串联所有单词的子串</a></td></tr></tbody></table><h2 id="子串属于什么" tabindex="-1"><a class="header-anchor" href="#子串属于什么"><span>子串属于什么？</span></a></h2><p><strong>子串</strong>确实是<strong>字符串这个数据结构的一部分</strong>或一种“派生结构”。</p><h2 id="✅-子串属于字符串的一部分结构" tabindex="-1"><a class="header-anchor" href="#✅-子串属于字符串的一部分结构"><span>✅ 子串属于字符串的一部分结构</span></a></h2><p>可以这样理解：</p><ul><li><strong>字符串</strong> 是一种<strong>线性数据结构</strong>，由一系列字符按顺序排列组成。</li><li><strong>子串（Substring）</strong> 是字符串中<strong>连续的一段字符</strong>，所以它<strong>依附于字符串存在</strong>，是字符串上的一个操作对象或者子结构。</li></ul><hr><h2 id="🧱-类比理解" tabindex="-1"><a class="header-anchor" href="#🧱-类比理解"><span>🧱 类比理解：</span></a></h2><table><thead><tr><th>概念</th><th>结构</th><th>类比说明</th></tr></thead><tbody><tr><td>字符串</td><td>数据结构</td><td>就像一条有序的珠子项链</td></tr><tr><td>子串</td><td>字符串的部分</td><td>就像从这条项链上剪出一小段珠子</td></tr></tbody></table><hr><h2 id="✅-编程-算法角度" tabindex="-1"><a class="header-anchor" href="#✅-编程-算法角度"><span>✅ 编程/算法角度：</span></a></h2><ul><li>子串是基于字符串的<strong>一种操作目标</strong>，不是独立数据结构。</li><li>所有子串问题（匹配、查找、比较、回文判断等）都属于字符串处理问题的范畴。</li></ul><hr><h2 id="🔁-总结一句话" tabindex="-1"><a class="header-anchor" href="#🔁-总结一句话"><span>🔁 总结一句话：</span></a></h2><blockquote><p><strong>子串隶属于字符串，它不是一种独立数据结构，而是字符串上的连续片段，是对字符串的子结构操作。</strong></p></blockquote><hr><p>如果你想知道在算法分类中子串相关的题属于哪个方向，也可以归类为：</p><ul><li>字符串处理（String Manipulation）</li><li>滑动窗口算法</li><li>动态规划（部分子串问题）</li><li>字符串匹配算法</li></ul><p>需要我详细整理一下“子串类题目的算法知识图谱”也可以说一声。</p>',21)]))}const o=a(l,[["render",r]]),k=JSON.parse('{"path":"/posts/leetcode/top-100-liked/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html","title":"leetcode 数组专题之子串 01-入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode 数组专题之子串 01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","topics","leetcode","string","sliding-window","substring","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 数组专题之子串 01-入门介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"string"}],["meta",{"property":"article:tag","content":"sliding-window"}],["meta",{"property":"article:tag","content":"substring"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 数组专题之子串 01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.47,"words":1341},"filePathRelative":"posts/leetcode/top-100-liked/string/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-string-substring-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{o as comp,k as data};
