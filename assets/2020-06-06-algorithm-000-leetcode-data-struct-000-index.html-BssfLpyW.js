import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as o,o as n}from"./app-DkzaaseD.js";const r={};function p(l,t){return n(),i("div",null,t[0]||(t[0]=[o('<h1 id="数据结构-算法" tabindex="-1"><a class="header-anchor" href="#数据结构-算法"><span>数据结构+算法</span></a></h1><p>一般而言，二者是相辅相成的。</p><p>所以需要结合起来学习。</p><h2 id="创作目的" tabindex="-1"><a class="header-anchor" href="#创作目的"><span>创作目的</span></a></h2><p>知行合一。</p><p>系统的学习+练习一下数据结构+算法。</p><p>修炼一下内力。</p><h1 id="数据结构专题" tabindex="-1"><a class="header-anchor" href="#数据结构专题"><span>数据结构专题</span></a></h1><p>大概分为几个类别：</p><ol><li><p>理论知识</p></li><li><p>源码学习</p></li><li><p>数据结构实现</p></li><li><p>题目练习</p></li><li><p>项目应用</p></li></ol><h2 id="理论" tabindex="-1"><a class="header-anchor" href="#理论"><span>理论</span></a></h2><p>其中 1/2 非常偏理论，会导致很枯燥。</p><p>主要见：<a href="https://houbb.github.io/2019/02/19/data-struct-00-overview" target="_blank" rel="noopener noreferrer">数据结构 00 概览 数据结构专题汇总</a></p><h2 id="理论-编码" tabindex="-1"><a class="header-anchor" href="#理论-编码"><span>理论+编码</span></a></h2><p>2+3 构成了源码的实现部分，类似于 jdk 中的各种数据结构。当然 jdk 中只是常见的，我们可以整理一些常用的：</p><p><a href="https://github.com/houbb/data-struct" target="_blank" rel="noopener noreferrer">数据结构源码实现</a></p><h2 id="编码-练习" tabindex="-1"><a class="header-anchor" href="#编码-练习"><span>编码+练习</span></a></h2><p>这个主要对应我们这个部分。这个系列主要事件做一下一下 leetcode 中的各种数据结构</p><p>知行合一</p><h2 id="实践应用" tabindex="-1"><a class="header-anchor" href="#实践应用"><span>实践应用</span></a></h2><p>这个是最后一个部分，各种数据结构的应用。</p><p>这个贯穿到我们日常的项目开发的方方面面，暂时不做展开。</p><p>当然，自己的一些项目其实用到了这些基础的知识，后面可以结合起来说一说。</p><h1 id="leetcode-分类" tabindex="-1"><a class="header-anchor" href="#leetcode-分类"><span>leetcode 分类</span></a></h1><p>leetcode 中的常见算法题，按照数据结构和算法分类的话：</p><p>我们后续的学习将把理论+题目+实践结合起来。</p><p>希望做一个不一样的专题，而不是题目刷完就忘记，理论学完不知道有什么用的割裂的常态。</p><h3 id="按数据结构分类" tabindex="-1"><a class="header-anchor" href="#按数据结构分类"><span><strong>按数据结构分类</strong></span></a></h3><ol><li><p><strong>数组 (Array)</strong></p></li><li><p><strong>字符串 (String)</strong></p></li><li><p><strong>哈希表 (Hash Table)</strong></p></li><li><p><strong>树 (Tree)</strong></p><ul><li>二叉搜索树</li><li>线段树</li><li>树状数组</li><li>字典树</li></ul></li><li><p><strong>堆（优先队列） (Heap/Priority Queue)</strong></p></li><li><p><strong>栈 (Stack)</strong></p><ul><li>单调栈</li></ul></li><li><p><strong>队列 (Queue)</strong></p></li><li><p><strong>链表 (Linked List)</strong></p></li><li><p><strong>图 (Graph)</strong></p><ul><li>拓扑排序</li><li>最小生成树</li><li>欧拉回路</li><li>强连通分量</li><li>双连通分量</li></ul></li><li><p><strong>单调队列 (Monotonic Queue)</strong></p></li><li><p><strong>双向链表 (Doubly Linked List)</strong></p></li><li><p><strong>数据流 (Data Stream)</strong></p></li><li><p><strong>迭代器 (Iterator)</strong></p></li></ol><h3 id="按算法分类" tabindex="-1"><a class="header-anchor" href="#按算法分类"><span><strong>按算法分类</strong></span></a></h3><ol start="0"><li><p><strong>双指针 (Two Pointers)</strong></p></li><li><p><strong>动态规划 (Dynamic Programming)</strong></p></li><li><p><strong>数学 (Mathematics)</strong></p><ul><li>博弈</li></ul></li><li><p><strong>排序 (Sorting)</strong></p><ul><li>快速选择</li><li>基数排序</li><li>Shell 排序</li><li>归并排序</li><li>桶排序</li></ul></li><li><p><strong>贪心算法 (Greedy Algorithm)</strong></p></li><li><p><strong>深度优先搜索 (DFS)</strong></p></li><li><p><strong>二分查找 (Binary Search)</strong></p></li><li><p><strong>回溯算法 (Backtracking)</strong></p></li><li><p><strong>滑动窗口 (Sliding Window)</strong></p></li><li><p><strong>分治法 (Divide and Conquer)</strong></p></li><li><p><strong>计数 (Counting)</strong></p></li><li><p><strong>组合数学 (Combinatorial Mathematics)</strong></p></li><li><p><strong>递归 (Recursion)</strong></p></li><li><p><strong>前缀和 (Prefix Sum)</strong></p></li><li><p><strong>模拟 (Simulation)</strong></p></li><li><p><strong>设计 (Design)</strong></p></li><li><p><strong>记忆化搜索 (Memoization)</strong></p></li><li><p><strong>状态压缩 (State Compression)</strong></p></li><li><p><strong>拓扑排序 (Topological Sorting)</strong></p></li><li><p><strong>字符串匹配 (String Matching)</strong></p></li><li><p><strong>最短路 (Shortest Path)</strong></p></li><li><p><strong>滚动哈希 (Rolling Hash)</strong></p></li><li><p><strong>概率与统计 (Probability and Statistics)</strong></p></li><li><p><strong>多线程 (Multithreading)</strong></p></li><li><p><strong>随机化 (Randomization)</strong></p></li><li><p><strong>扫描线 (Sweep Line)</strong></p></li><li><p><strong>水塘抽样 (Reservoir Sampling)</strong></p></li><li><p><strong>计数排序 (Counting Sort)</strong></p></li><li><p><strong>拒绝采样 (Rejection Sampling)</strong></p></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>上述分类将 <strong>LeetCode</strong> 问题按照数据结构和算法进行细分。</p><p>不同的数据结构（如数组、链表、堆、图等）和算法（如动态规划、贪心算法、深度优先搜索等）各自处理特定类型的计算任务。</p>',34)]))}const g=e(r,[["render",p]]),c=JSON.parse('{"path":"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html","title":"leetcode data-struct-000-力扣数据结构练习篇概览","lang":"zh-CN","frontmatter":{"title":"leetcode data-struct-000-力扣数据结构练习篇概览","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","topics","leetcode","sf"],"published":true,"description":"数据结构+算法 一般而言，二者是相辅相成的。 所以需要结合起来学习。 创作目的 知行合一。 系统的学习+练习一下数据结构+算法。 修炼一下内力。 数据结构专题 大概分为几个类别： 理论知识 源码学习 数据结构实现 题目练习 项目应用 理论 其中 1/2 非常偏理论，会导致很枯燥。 主要见：数据结构 00 概览 数据结构专题汇总 理论+编码 2+3 构成...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode data-struct-000-力扣数据结构练习篇概览"}],["meta",{"property":"og:description","content":"数据结构+算法 一般而言，二者是相辅相成的。 所以需要结合起来学习。 创作目的 知行合一。 系统的学习+练习一下数据结构+算法。 修炼一下内力。 数据结构专题 大概分为几个类别： 理论知识 源码学习 数据结构实现 题目练习 项目应用 理论 其中 1/2 非常偏理论，会导致很枯燥。 主要见：数据结构 00 概览 数据结构专题汇总 理论+编码 2+3 构成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode data-struct-000-力扣数据结构练习篇概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.73,"words":819},"filePathRelative":"posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-000-index.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>一般而言，二者是相辅相成的。</p>\\n<p>所以需要结合起来学习。</p>\\n<h2>创作目的</h2>\\n<p>知行合一。</p>\\n<p>系统的学习+练习一下数据结构+算法。</p>\\n<p>修炼一下内力。</p>\\n<h1>数据结构专题</h1>\\n<p>大概分为几个类别：</p>\\n<ol>\\n<li>\\n<p>理论知识</p>\\n</li>\\n<li>\\n<p>源码学习</p>\\n</li>\\n<li>\\n<p>数据结构实现</p>\\n</li>\\n<li>\\n<p>题目练习</p>\\n</li>\\n<li>\\n<p>项目应用</p>\\n</li>\\n</ol>\\n<h2>理论</h2>\\n<p>其中 1/2 非常偏理论，会导致很枯燥。</p>","autoDesc":true}');export{g as comp,c as data};
