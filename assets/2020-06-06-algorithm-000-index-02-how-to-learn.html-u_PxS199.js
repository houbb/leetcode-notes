import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as r,o as i}from"./app-2lGmy4IW.js";const l={};function a(o,t){return i(),s("div",null,t[0]||(t[0]=[r(`<h1 id="一、思维的转变-刷题不是目的" tabindex="-1"><a class="header-anchor" href="#一、思维的转变-刷题不是目的"><span>一、思维的转变，刷题不是目的</span></a></h1><table><thead><tr><th>常见刷题思维</th><th>高效刷题思维</th></tr></thead><tbody><tr><td>追求刷题数量</td><td>追求“知识模型”的构建</td></tr><tr><td>题型记不住、技巧忘了</td><td>把题归类、构建知识图谱</td></tr><tr><td>做过就忘、感觉无序</td><td>有计划、有归档、有复盘</td></tr></tbody></table><h1 id="二、对知识系统的分类" tabindex="-1"><a class="header-anchor" href="#二、对知识系统的分类"><span>二、对知识系统的分类</span></a></h1><p><strong>推荐专题划分顺序：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 数组 / 双指针 / 滑动窗口</span></span>
<span class="line"><span>2. 栈与队列（括号匹配、单调栈）</span></span>
<span class="line"><span>3. 哈希表（Two Sum, 频次统计）</span></span>
<span class="line"><span>4. 字符串处理（KMP，字符串哈希）</span></span>
<span class="line"><span>5. 二分查找（左闭右开/开闭边界）</span></span>
<span class="line"><span>6. 链表（反转、环检测）</span></span>
<span class="line"><span>7. 树（前中后序 + DFS / BFS）</span></span>
<span class="line"><span>8. 回溯算法（组合、排列、数独）</span></span>
<span class="line"><span>9. 动态规划（01背包、区间DP、状态压缩）</span></span>
<span class="line"><span>10. 贪心策略（区间调度、跳跃游戏）</span></span>
<span class="line"><span>11. 并查集、图论（DFS/BFS/Dijkstra/Kruskal）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、每个专题该怎么学习" tabindex="-1"><a class="header-anchor" href="#三、每个专题该怎么学习"><span>三、每个专题该怎么学习？</span></a></h1><h2 id="_1-建立模式卡片" tabindex="-1"><a class="header-anchor" href="#_1-建立模式卡片"><span>1. <strong>建立模式卡片</strong>：</span></a></h2><p>为每个模式创建一张知识卡片，包含：<br> * <strong>核心思想</strong>（用一句话概括）<br> * <strong>适用场景</strong>（什么问题能用它？）<br> * <strong>经典模板代码</strong>（精简版）<br> * <strong>关键变种/难点</strong>（如 DP 的状态定义、初始化）<br> * <strong>关联模式</strong>（如 BFS 和最短路径问题）</p><ul><li><strong>可视化连接</strong>：用思维导图/XMind 连接相关模式（如：看到“子数组和” -&gt; 想到前缀和、滑动窗口）。</li></ul><h2 id="_2-深度优先-而非广度优先" tabindex="-1"><a class="header-anchor" href="#_2-深度优先-而非广度优先"><span>2. <strong>深度优先，而非广度优先</strong>：</span></a></h2><ul><li><strong>选定一个模式</strong>（如滑动窗口），<strong>集中火力刷透</strong>（10-15题）。</li><li><strong>刷题步骤</strong>： <ul><li>先做<strong>最经典题</strong>（力扣官方/高频题）。</li><li>再做<strong>变种题</strong>（条件变化、限制变化）。</li><li>最后做<strong>融合题</strong>（结合其他模式，如滑动窗口+哈希）。</li></ul></li><li><strong>目标</strong>：彻底理解该模式的边界、陷阱和适用性。</li></ul><h1 id="四、学以致用-连接理论与价值-提升价值感" tabindex="-1"><a class="header-anchor" href="#四、学以致用-连接理论与价值-提升价值感"><span>四、学以致用：连接理论与价值 （提升价值感）</span></a></h1><ol><li><p><strong>关联实际应用场景</strong>（解决“学这有什么用？”）：</p><ul><li><strong>滑动窗口</strong>：实时监控系统（如1分钟请求数限制）、网络流量控制。</li><li><strong>Trie树</strong>：搜索引擎自动补全、输入法候选词。</li><li><strong>并查集</strong>：社交网络好友关系、游戏地图连通性检测。</li><li><strong>拓扑排序</strong>：任务调度、课程安排、依赖管理（如npm包安装）。</li><li><strong>LRU Cache</strong>：数据库缓存、浏览器缓存策略。</li><li><strong>布隆过滤器</strong>：Redis防止缓存穿透、邮件垃圾过滤。</li><li><strong>学习资源</strong>：《编程珠玑》《算法设计手册》中的案例，或直接看<strong>Redis/LevelDB等开源项目源码</strong>。</li></ul></li><li><p><strong>参与能落地的项目</strong>：</p><ul><li><strong>用算法解决实际问题</strong>：如： <ul><li>写个小工具自动整理文档（字符串算法）。</li><li>优化个人网站的图片加载策略（缓存算法）。</li><li>分析股票数据（动态规划解最佳买卖时机）。</li></ul></li><li><strong>贡献开源项目</strong>：参与需要算法优化的项目（如Apache基金会项目）。</li></ul></li><li><p><strong>参加有意义的竞赛/活动</strong>：</p><ul><li><strong>Kaggle（数据科学）</strong>：大量真实数据集，需优化算法。</li><li><strong>Google Hash Code（团队编程赛）</strong>：解决接近工业界规模的问题。</li><li><strong>公司内部黑客马拉松</strong>：用算法解决业务痛点（如路径优化、推荐策略）。</li></ul></li></ol><h1 id="五-输出作品集-输出倒逼输入" tabindex="-1"><a class="header-anchor" href="#五-输出作品集-输出倒逼输入"><span>五：输出作品集：输出倒逼输入</span></a></h1><p>费曼学习法简化版本：文章，到个人博客+各个技术平台（总结+解答，以教代学）</p><p>可视化：针对每一种解法，对应的可视化效果？个人博客可以比较直接的放在下面？</p><p>源码开源：解题源码，保留每一种解法+思路===》github/gitee</p><p>总结拓展（知识的关联性，不是零散的）：将这个系列的题目放在一起学习，而不是零散的学习。</p><p>工具（模块化、可以复用）：类似 sdk hutool。工具，和解题过程不同，强调的是===可拓展性，复用性强。大部分以接口的形式呈现。</p><p>学以致用：有什么用？解决生活中的实际问题，可以是解决方案，最好设计方案+源码。</p><p>技术生态：以算法+数据结构===》对应的生态到底是什么？</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><p>老马主要把刷题分为三个部分：</p><p>1）个人专题系列学习博客笔记，最好包含每一种解法的可视化过程</p><p>2）刷题的解题源码，到 github/gitee</p><ol start="3"><li>根据这个方法，整理一个 leetcode-toolkit 算法工具包，包含数据结构+算法</li></ol><p>4）学习致用，边学边用。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="如何系统的学习" tabindex="-1"><a class="header-anchor" href="#如何系统的学习"><span>如何系统的学习？</span></a></h2><p>疑问：</p><blockquote><p>力扣算法每次感觉都要从头刷题 很容易忘记。全是零碎的知识点，如何系统，有效，高效的刷题学习。最好可以学有所用，加深应用，提升价值</p></blockquote><p>这是个很典型、很真实的刷题困境：<br><strong>“刷了很多题，但过段时间又忘记，感觉像打水漂。”</strong><br> 这其实说明你已经进入了一个更高层次：你不满足于“做对题”，而是想<strong>系统化知识、提升能力、用得出来。</strong></p><p>下面我将从几个方面给你设计一套<strong>系统 + 高效 + 可沉淀 + 有价值提升的刷题学习策略：</strong></p><hr><h2 id="🧠-一、转变刷题目标-从-做题-到-构建认知体系" tabindex="-1"><a class="header-anchor" href="#🧠-一、转变刷题目标-从-做题-到-构建认知体系"><span>🧠 一、转变刷题目标：从“做题”到“构建认知体系”</span></a></h2><table><thead><tr><th>常见刷题思维</th><th>高效刷题思维</th></tr></thead><tbody><tr><td>追求刷题数量</td><td>追求“知识模型”的构建</td></tr><tr><td>题型记不住、技巧忘了</td><td>把题归类、构建知识图谱</td></tr><tr><td>做过就忘、感觉无序</td><td>有计划、有归档、有复盘</td></tr></tbody></table><h3 id="✅-建议-明确一个主线目标" tabindex="-1"><a class="header-anchor" href="#✅-建议-明确一个主线目标"><span>✅ 建议：明确一个<strong>主线目标</strong></span></a></h3><p>比如：</p><ul><li><strong>找工作</strong> → 高频面试题（字节、阿里、LeetCode Top 100）</li><li><strong>提升算法功底</strong> → 算法专题+数据结构深度理解</li><li><strong>项目/场景运用</strong> → 图、搜索、贪心、DP 等真实应用拆解</li></ul><hr><h2 id="🗂️-二、刷题思路-系统化、结构化分阶段" tabindex="-1"><a class="header-anchor" href="#🗂️-二、刷题思路-系统化、结构化分阶段"><span>🗂️ 二、刷题思路：系统化、结构化分阶段</span></a></h2><h3 id="🔵-第一阶段-构建知识树-夯实基本功" tabindex="-1"><a class="header-anchor" href="#🔵-第一阶段-构建知识树-夯实基本功"><span>🔵 第一阶段：构建知识树（夯实基本功）</span></a></h3><blockquote><p>用专题 + 模板 + 高频例题 的方式打基础</p></blockquote><p><strong>推荐专题划分顺序：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 数组 / 双指针 / 滑动窗口</span></span>
<span class="line"><span>2. 栈与队列（括号匹配、单调栈）</span></span>
<span class="line"><span>3. 哈希表（Two Sum, 频次统计）</span></span>
<span class="line"><span>4. 字符串处理（KMP，字符串哈希）</span></span>
<span class="line"><span>5. 二分查找（左闭右开/开闭边界）</span></span>
<span class="line"><span>6. 链表（反转、环检测）</span></span>
<span class="line"><span>7. 树（前中后序 + DFS / BFS）</span></span>
<span class="line"><span>8. 回溯算法（组合、排列、数独）</span></span>
<span class="line"><span>9. 动态规划（01背包、区间DP、状态压缩）</span></span>
<span class="line"><span>10. 贪心策略（区间调度、跳跃游戏）</span></span>
<span class="line"><span>11. 并查集、图论（DFS/BFS/Dijkstra/Kruskal）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每个专题准备：</p></blockquote><ul><li>一个<strong>模板总结</strong></li><li>5~10个典型例题（用错法+正解方式来理解）</li><li>错题集（记录你错过的思维点）</li></ul><hr><h3 id="🟠-第二阶段-题目归类-巩固迁移" tabindex="-1"><a class="header-anchor" href="#🟠-第二阶段-题目归类-巩固迁移"><span>🟠 第二阶段：题目归类 + 巩固迁移</span></a></h3><p><strong>方法</strong>：构建自己的<strong>题型知识库 + 思维模式</strong></p><ul><li><p>把所有题整理进 notion/obsidian/有道笔记等工具</p></li><li><p>每道题总结：</p><ul><li>解法分类（暴力？优化？贪心？）</li><li>思路关键词（前缀和 + 哈希 + 双指针）</li><li>解题模板（是否可以模板化）</li><li>易错点（哪一步是关键）</li><li>类似题目推荐</li></ul></li></ul><p>✅ <strong>目的是为了“归纳思维模型”而不是“记住题解”</strong></p><hr><h3 id="🟢-第三阶段-反复复习-模拟实战-场景应用" tabindex="-1"><a class="header-anchor" href="#🟢-第三阶段-反复复习-模拟实战-场景应用"><span>🟢 第三阶段：反复复习 + 模拟实战 + 场景应用</span></a></h3><ul><li>每 1~2 周安排一次<strong>模拟面试</strong>（限时、无提示）</li><li>复盘错题，更新“错题笔记”和“题型树”</li><li>尝试讲题、写文章、录视频（越讲越懂）</li><li>在项目中尝试用算法优化业务逻辑（比如路径规划、推荐排序、文本相似度）</li></ul><hr><h2 id="🧰-三、工具建议-让刷题变-有沉淀" tabindex="-1"><a class="header-anchor" href="#🧰-三、工具建议-让刷题变-有沉淀"><span>🧰 三、工具建议：让刷题变“有沉淀”</span></a></h2><table><thead><tr><th>工具</th><th>用法</th></tr></thead><tbody><tr><td>Notion/Obsidian</td><td>建立算法知识库/错题本/专题笔记</td></tr><tr><td>LeetCode 题单功能</td><td>分类刷题 + 收藏错题</td></tr><tr><td>GitHub + Markdown</td><td>建立自己的刷题笔记项目（可当简历作品）</td></tr><tr><td>Typora / Logseq</td><td>可本地存储笔记，做结构化梳理</td></tr><tr><td>视频讲题</td><td>模拟面试、讲给别人听能加深理解</td></tr></tbody></table><hr><h2 id="🧪-四、用得出来-价值才会提升" tabindex="-1"><a class="header-anchor" href="#🧪-四、用得出来-价值才会提升"><span>🧪 四、用得出来，价值才会提升</span></a></h2><ol><li><p><strong>项目里用算法</strong></p><ul><li>举例：某推荐系统 → 使用堆排序/滑动窗口做热度筛选</li><li>后端服务限流 → 使用滑动窗口算法实现令牌桶</li></ul></li><li><p><strong>面试中脱颖而出</strong></p><ul><li>面试官更关注“思路”而不是“做对”</li><li>你能讲清楚题型归类、思维演化路径，就能加分</li></ul></li><li><p><strong>输出沉淀为内容/作品集</strong></p><ul><li>形成自己的「算法笔记项目」/「面试笔记」/「讲题视频」</li><li>这是对外展示价值的最好方式（对内也是二次学习）</li></ul></li></ol><hr><h2 id="🧭-五、每日-每周计划推荐" tabindex="-1"><a class="header-anchor" href="#🧭-五、每日-每周计划推荐"><span>🧭 五、每日/每周计划推荐</span></a></h2><h3 id="🗓️-每日计划-60-90-分钟" tabindex="-1"><a class="header-anchor" href="#🗓️-每日计划-60-90-分钟"><span>🗓️ 每日计划（60~90 分钟）：</span></a></h3><ul><li>📚 20min：复习昨日错题 / 回顾一个专题</li><li>🧠 40min：新做 1~2 道题（重点题精做）</li><li>✍️ 30min：总结、笔记、错题集更新</li></ul><h3 id="📆-每周计划" tabindex="-1"><a class="header-anchor" href="#📆-每周计划"><span>📆 每周计划：</span></a></h3><ul><li>周一~周五：专题精刷 + 总结</li><li>周末：模拟实战 + 复盘 + 总结本周心得</li></ul><hr><h2 id="🧩-六、建议关注的资源" tabindex="-1"><a class="header-anchor" href="#🧩-六、建议关注的资源"><span>🧩 六、建议关注的资源</span></a></h2><ul><li><strong>《代码随想录》</strong>（基础+图解+思维模型）</li><li><strong>《Labuladong 的算法小抄》</strong>（DP和套路非常系统）</li><li><strong>YouTube/B站讲题博主</strong>：程序员鱼皮、小林 coding、AcWing</li><li><strong>LeetCode 题单</strong>：剑指 Offer、Top 100、热题 HOT 100</li></ul><hr><h2 id="🎯-最后一条核心建议" tabindex="-1"><a class="header-anchor" href="#🎯-最后一条核心建议"><span>🎯 最后一条核心建议</span></a></h2><blockquote><p><strong>别追求题目数量，而是追求认知体系的质量。</strong></p></blockquote><p>当你能做到：</p><ul><li>遇到一个题能迅速判断题型</li><li>能讲出多种解法思路的优劣</li><li>能从项目中看到算法的影子</li></ul><p>你就已经从“刷题者”成长为“算法工程师”了。</p><hr><p>需要我帮你设计一份你的<strong>个人刷题计划表</strong>或<strong>专题刷题路线图</strong>吗？可以根据你当前水平和目标来定制。</p><h2 id="ds" tabindex="-1"><a class="header-anchor" href="#ds"><span>DS</span></a></h2><p>我完全理解你的困扰！刷题时感觉知识零散、学了就忘、缺乏体系感，这是非常普遍的问题。关键在于<strong>转变刷题策略，从“数量驱动”变为“体系驱动”和“深度驱动”</strong>。以下是我为你设计的系统性高效刷题方案，结合认知科学和实战经验，助你学有所用：</p><hr><h3 id="一、构建知识体系-告别零散-建立-算法地图-核心基础" tabindex="-1"><a class="header-anchor" href="#一、构建知识体系-告别零散-建立-算法地图-核心基础"><span><strong>一、构建知识体系：告别零散，建立“算法地图”</strong>（核心基础）</span></a></h3><ol><li><p><strong>按“算法模式/思想”分类，而非题目标签</strong>：</p><ul><li><strong>核心模式</strong>：双指针、滑动窗口、二分查找、BFS/DFS、回溯、递归、分治、动态规划（DP）、贪心、拓扑排序、前缀和、单调栈、并查集、位运算、Trie树等。</li><li><strong>建立模式卡片</strong>：为每个模式创建一张知识卡片，包含： <ul><li><strong>核心思想</strong>（用一句话概括）</li><li><strong>适用场景</strong>（什么问题能用它？）</li><li><strong>经典模板代码</strong>（精简版）</li><li><strong>关键变种/难点</strong>（如 DP 的状态定义、初始化）</li><li><strong>关联模式</strong>（如 BFS 和最短路径问题）</li></ul></li><li><strong>可视化连接</strong>：用思维导图/XMind 连接相关模式（如：看到“子数组和” -&gt; 想到前缀和、滑动窗口）。</li></ul></li><li><p><strong>深度优先，而非广度优先</strong>：</p><ul><li><strong>选定一个模式</strong>（如滑动窗口），<strong>集中火力刷透</strong>（10-15题）。</li><li><strong>刷题步骤</strong>： <ul><li>先做<strong>最经典题</strong>（力扣官方/高频题）。</li><li>再做<strong>变种题</strong>（条件变化、限制变化）。</li><li>最后做<strong>融合题</strong>（结合其他模式，如滑动窗口+哈希）。</li></ul></li><li><strong>目标</strong>：彻底理解该模式的边界、陷阱和适用性。</li></ul></li></ol><hr><h3 id="二、高效刷题法-对抗遗忘-深度加工-执行策略" tabindex="-1"><a class="header-anchor" href="#二、高效刷题法-对抗遗忘-深度加工-执行策略"><span><strong>二、高效刷题法：对抗遗忘，深度加工</strong>（执行策略）</span></a></h3><ol><li><p><strong>“三刷五问”法</strong>（取代盲目重复）：</p><ul><li><strong>一刷</strong>：独立思考 -&gt; 卡壳不超过20分钟 -&gt; 看题解<strong>核心思路</strong>（非代码！）。</li><li><strong>二刷</strong>（隔天）：<strong>独立写出完整代码</strong>，关注边界和效率。</li><li><strong>三刷</strong>（1周后）：<strong>快速写出最优解</strong>，并口述解题逻辑。</li><li><strong>五问自己</strong>： <ul><li>为什么用这个算法/数据结构？</li><li>时间和空间复杂度是多少？能否优化？</li><li>有哪些易错点（边界、初始化）？</li><li>题目有哪些变种？还能怎么考？</li><li>实际工程中哪里可能用到它？（如 LRU Cache 用哈希+双向链表）</li></ul></li></ul></li><li><p><strong>间隔重复 + 主动回忆</strong>（科学记忆）：</p><ul><li>用 <strong>Anki/Notion 闪卡</strong>记录经典题、易错点、模式总结。</li><li>设置复习周期（1天、3天、1周、2周...），<strong>逼自己回忆解题思路</strong>而非直接看答案。</li><li><strong>手写伪代码</strong> &gt; 直接敲代码（强化逻辑记忆）。</li></ul></li><li><p><strong>从“解题”到“教题”</strong>（费曼学习法）：</p><ul><li>尝试给他人（或假想的听众）讲解一道题。</li><li>录制解题视频或写题解博客（如GitHub/Gitee）。</li><li><strong>教是最好的学</strong>：讲不通的地方就是你的知识盲点。</li></ul></li></ol><hr><h3 id="三、学以致用-连接理论与价值-提升价值感" tabindex="-1"><a class="header-anchor" href="#三、学以致用-连接理论与价值-提升价值感"><span><strong>三、学以致用：连接理论与价值</strong>（提升价值感）</span></a></h3><ol><li><p><strong>关联实际应用场景</strong>（解决“学这有什么用？”）：</p><ul><li><strong>滑动窗口</strong>：实时监控系统（如1分钟请求数限制）、网络流量控制。</li><li><strong>Trie树</strong>：搜索引擎自动补全、输入法候选词。</li><li><strong>并查集</strong>：社交网络好友关系、游戏地图连通性检测。</li><li><strong>拓扑排序</strong>：任务调度、课程安排、依赖管理（如npm包安装）。</li><li><strong>LRU Cache</strong>：数据库缓存、浏览器缓存策略。</li><li><strong>布隆过滤器</strong>：Redis防止缓存穿透、邮件垃圾过滤。</li><li><strong>学习资源</strong>：《编程珠玑》《算法设计手册》中的案例，或直接看<strong>Redis/LevelDB等开源项目源码</strong>。</li></ul></li><li><p><strong>参与能落地的项目</strong>：</p><ul><li><strong>用算法解决实际问题</strong>：如： <ul><li>写个小工具自动整理文档（字符串算法）。</li><li>优化个人网站的图片加载策略（缓存算法）。</li><li>分析股票数据（动态规划解最佳买卖时机）。</li></ul></li><li><strong>贡献开源项目</strong>：参与需要算法优化的项目（如Apache基金会项目）。</li></ul></li><li><p><strong>参加有意义的竞赛/活动</strong>：</p><ul><li><strong>Kaggle（数据科学）</strong>：大量真实数据集，需优化算法。</li><li><strong>Google Hash Code（团队编程赛）</strong>：解决接近工业界规模的问题。</li><li><strong>公司内部黑客马拉松</strong>：用算法解决业务痛点（如路径优化、推荐策略）。</li></ul></li></ol><hr><h3 id="四、高效工具链-自动化辅助" tabindex="-1"><a class="header-anchor" href="#四、高效工具链-自动化辅助"><span><strong>四、高效工具链：自动化辅助</strong></span></a></h3><table><thead><tr><th><strong>工具类型</strong></th><th><strong>推荐工具</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td><strong>知识管理</strong></td><td>Notion/Obsidian/Anki</td><td>建立互联知识库，制作复习闪卡</td></tr><tr><td><strong>刷题计划</strong></td><td>LeetCode Study Plan/自制甘特图</td><td>跟踪进度，避免随机刷题</td></tr><tr><td><strong>代码可视化</strong></td><td>Python Tutor/LeetCode动画</td><td>直观理解代码执行过程</td></tr><tr><td><strong>复杂度分析</strong></td><td>Big O Cheat Sheet (速查表)</td><td>快速评估解法优劣</td></tr><tr><td><strong>项目实践平台</strong></td><td>GitHub/GitLab, Replit</td><td>落地算法项目，积累作品集</td></tr></tbody></table><hr><h3 id="五、关键心态调整" tabindex="-1"><a class="header-anchor" href="#五、关键心态调整"><span><strong>五、关键心态调整</strong></span></a></h3><ol><li><strong>接受遗忘是正常的</strong>：大脑不是硬盘，<strong>通过体系索引+刻意回忆提取</strong>才能深化记忆。</li><li><strong>追求“模式识别”而非“背题”</strong>：面试官常考变种题，死记答案必挂。</li><li><strong>20%核心算法解决80%问题</strong>：优先精通：<strong>双指针、二分、DFS/BFS、回溯、DP、哈希、堆、树遍历</strong>。</li><li><strong>定期“返工”</strong>：每月回顾知识框架，<strong>删除过时笔记，补充新感悟</strong>。</li></ol><blockquote><p><strong>终极心法</strong>：刷题不是目的，而是<strong>训练“问题抽象能力”和“算法设计直觉”</strong>。当你拿到新题能快速定位模式、调整模板、避开陷阱时，你就完成了从“刷题者”到“问题解决者”的蜕变。</p></blockquote><p><strong>最后赠言</strong>：真正的算法高手不是记住1000道题，而是能用20种核心思想优雅解决1000种问题。你现在感觉的零散，终将在体系建成时化为掌控感。坚持下去，每一步思考都在重塑你的大脑！</p>`,97)]))}const g=n(l,[["render",a]]),p=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-000-index-02-how-to-learn.html","title":"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？","lang":"zh-CN","frontmatter":{"title":"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","topics","sf"],"published":true,"description":"一、思维的转变，刷题不是目的 二、对知识系统的分类 推荐专题划分顺序： 三、每个专题该怎么学习？ 1. 建立模式卡片： 为每个模式创建一张知识卡片，包含： * 核心思想（用一句话概括） * 适用场景（什么问题能用它？） * 经典模板代码（精简版） * 关键变种/难点（如 DP 的状态定义、初始化） * 关联模式（如 BFS 和最短路径问题） 可视化连接...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-index-02-how-to-learn.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？"}],["meta",{"property":"og:description","content":"一、思维的转变，刷题不是目的 二、对知识系统的分类 推荐专题划分顺序： 三、每个专题该怎么学习？ 1. 建立模式卡片： 为每个模式创建一张知识卡片，包含： * 核心思想（用一句话概括） * 适用场景（什么问题能用它？） * 经典模板代码（精简版） * 关键变种/难点（如 DP 的状态定义、初始化） * 关联模式（如 BFS 和最短路径问题） 可视化连接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T07:11:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T07:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从零开始的数据结构与算法-02-如何系统有效的学习数据结构与算法？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T07:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755501103000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":12.8,"words":3839},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-000-index-02-how-to-learn.md","localizedDate":"2020年6月8日","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th>常见刷题思维</th>\\n<th>高效刷题思维</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>追求刷题数量</td>\\n<td>追求“知识模型”的构建</td>\\n</tr>\\n<tr>\\n<td>题型记不住、技巧忘了</td>\\n<td>把题归类、构建知识图谱</td>\\n</tr>\\n<tr>\\n<td>做过就忘、感觉无序</td>\\n<td>有计划、有归档、有复盘</td>\\n</tr>\\n</tbody>\\n</table>\\n<h1>二、对知识系统的分类</h1>\\n<p><strong>推荐专题划分顺序：</strong></p>\\n","autoDesc":true}');export{g as comp,p as data};
