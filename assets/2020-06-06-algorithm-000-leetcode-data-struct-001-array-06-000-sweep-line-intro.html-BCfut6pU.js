import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,o as n}from"./app-CPgKS9PL.js";const o={};function i(l,e){return n(),r("div",null,e[0]||(e[0]=[t('<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="什么是扫描线算法" tabindex="-1"><a class="header-anchor" href="#什么是扫描线算法"><span>什么是扫描线算法？</span></a></h2><p>扫描线算法（<strong>Sweep Line Algorithm</strong>）是一种常用于解决几何问题（尤其是涉及区间、时间线或事件的重叠问题）的算法。</p><p>它的基本思想是“<strong>模拟一条扫描线从一个方向扫过所有事件</strong>”，在扫描过程中维护一个数据结构来追踪当前的状态（例如活动区间的数量、最小值、最大值等）。</p><h3 id="扫描线算法的基本步骤" tabindex="-1"><a class="header-anchor" href="#扫描线算法的基本步骤"><span>扫描线算法的基本步骤</span></a></h3><ol><li><p><strong>事件表示</strong>：每个问题中的区间（例如会议时间）或事件，都可以转化为若干个关键事件（例如开始时间和结束时间）。</p></li><li><p><strong>事件排序</strong>：将所有事件按照时间排序（如果时间相同，则根据事件的类型来排序，例如结束事件优先于开始事件）。</p></li><li><p><strong>扫描过程</strong>：从最早的事件开始，按照排序顺序逐一处理每个事件，并在处理每个事件时更新状态（例如活动会议的数量、最大活动时间等）。</p></li><li><p><strong>数据维护</strong>：根据事件类型，更新当前的活动状态。例如，遇到一个开始事件时，我们增加一个计数，遇到结束事件时，减少计数，或者更新其他需要维护的值。</p></li><li><p><strong>输出结果</strong>：在扫描过程中，根据需求输出解答。</p></li></ol><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>扫描线算法广泛应用于处理各种区间问题，典型的应用包括：</p><ul><li><strong>会议安排</strong>（检测会议时间是否有重叠）</li><li><strong>区间覆盖问题</strong>（检查是否有足够的资源覆盖所有区间）</li><li><strong>计算最大并发数</strong>（计算在某一时间点活跃的事件数量，如计算最多同时存在的会议数）</li><li><strong>凸包问题</strong>（计算一个点集的最小凸包）</li></ul><h3 id="扫描线算法的具体步骤" tabindex="-1"><a class="header-anchor" href="#扫描线算法的具体步骤"><span>扫描线算法的具体步骤</span></a></h3><h4 id="_1-事件表示与排序" tabindex="-1"><a class="header-anchor" href="#_1-事件表示与排序"><span>1. 事件表示与排序</span></a></h4><p>假设我们有若干个区间（如会议的开始时间和结束时间），我们首先将每个区间拆解为两个事件：</p><p>一个是开始事件，另一个是结束事件。</p><p>每个事件可以表示为一个元组 <code>(time, type)</code>，其中 <code>time</code> 表示事件发生的时间，<code>type</code> 可以是 <code>+1</code>（表示开始）或者 <code>-1</code>（表示结束）。</p><p>例如，会议区间 <code>[(5, 10), (8, 12), (13, 16)]</code> 可以拆解为事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[(5, +1), (10, -1), (8, +1), (12, -1), (13, +1), (16, -1)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>事件按时间排序。如果有多个事件发生在相同的时间点，则优先处理结束事件，因为结束事件可以使得下一个开始事件得以处理。</p><h4 id="_2-事件扫描与状态更新" tabindex="-1"><a class="header-anchor" href="#_2-事件扫描与状态更新"><span>2. 事件扫描与状态更新</span></a></h4><p>扫描线的核心是对事件的处理。在扫描线遍历时，我们保持一个计数器（或其他数据结构）来跟踪当前的活动状态。对于会议安排问题，我们使用一个计数器来记录当前同时进行的会议数量。</p><ul><li>当遇到一个 <strong>开始事件</strong>（<code>+1</code>），增加计数器，表示新的会议开始。</li><li>当遇到一个 <strong>结束事件</strong>（<code>-1</code>），减少计数器，表示一个会议结束。</li></ul><h4 id="_3-结果输出" tabindex="-1"><a class="header-anchor" href="#_3-结果输出"><span>3. 结果输出</span></a></h4><p>在扫描过程中，我们可以输出每个时间点的活动状态。例如，我们可以在每次更新计数器时，检查当前同时进行的会议数，或者记录最大会议数等。</p><h3 id="例子-检测会议是否有重叠" tabindex="-1"><a class="header-anchor" href="#例子-检测会议是否有重叠"><span>例子：检测会议是否有重叠</span></a></h3><p>假设我们有一组会议的时间区间，使用扫描线算法来判断是否所有会议都能参加。</p><p>给定的会议区间：<code>[[0, 30], [5, 10], [15, 20]]</code></p><h4 id="_1-拆解事件" tabindex="-1"><a class="header-anchor" href="#_1-拆解事件"><span>1. 拆解事件</span></a></h4><p>我们将每个会议区间拆解成开始事件和结束事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[(0, +1), (30, -1), (5, +1), (10, -1), (15, +1), (20, -1)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-事件排序" tabindex="-1"><a class="header-anchor" href="#_2-事件排序"><span>2. 事件排序</span></a></h4><p>按时间排序事件，时间相同的情况下优先处理结束事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[(0, +1), (5, +1), (10, -1), (15, +1), (20, -1), (30, -1)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-扫描事件并更新状态" tabindex="-1"><a class="header-anchor" href="#_3-扫描事件并更新状态"><span>3. 扫描事件并更新状态</span></a></h4><p>我们从第一个事件开始，逐一扫描：</p><ul><li>在时间 <code>0</code> 处，遇到开始事件 <code>+1</code>，活动会议数增加到 1。</li><li>在时间 <code>5</code> 处，遇到开始事件 <code>+1</code>，活动会议数增加到 2，说明此时有两个会议重叠。</li><li>在时间 <code>10</code> 处，遇到结束事件 <code>-1</code>，活动会议数减少到 1。</li><li>在时间 <code>15</code> 处，遇到开始事件 <code>+1</code>，活动会议数增加到 2，说明此时又有两个会议重叠。</li><li>在时间 <code>20</code> 处，遇到结束事件 <code>-1</code>，活动会议数减少到 1。</li><li>在时间 <code>30</code> 处，遇到结束事件 <code>-1</code>，活动会议数减少到 0。</li></ul><h4 id="_4-判断是否有重叠" tabindex="-1"><a class="header-anchor" href="#_4-判断是否有重叠"><span>4. 判断是否有重叠</span></a></h4><p>在扫描过程中，我们发现活动会议数有过大于 1 的情况（特别是在时间 <code>5</code> 和时间 <code>15</code>），因此有重叠会议，返回 <code>false</code>。</p><h3 id="扫描线算法的优势" tabindex="-1"><a class="header-anchor" href="#扫描线算法的优势"><span>扫描线算法的优势</span></a></h3><ol><li><p><strong>时间复杂度</strong>：事件排序的时间复杂度是 <code>O(n log n)</code>，其中 <code>n</code> 是会议数或事件数。扫描线的遍历时间复杂度是 <code>O(n)</code>。因此，整体时间复杂度是 <code>O(n log n)</code>，比暴力算法（<code>O(n^2)</code>）要高效得多。</p></li><li><p><strong>空间复杂度</strong>：需要存储所有事件，空间复杂度为 <code>O(n)</code>。</p></li><li><p><strong>易于扩展</strong>：扫描线算法可以很容易地适应更多的需求，例如统计某一时刻活动的最大数量、求得活动的区间并进行其他计算等。</p></li></ol><h3 id="扩展应用" tabindex="-1"><a class="header-anchor" href="#扩展应用"><span>扩展应用</span></a></h3><ul><li><strong>最大并发活动数</strong>：通过扫描线算法，我们可以轻松地计算在某个时刻同时进行的最多会议数（即最大并发数）。</li><li><strong>区间合并</strong>：我们还可以通过扫描线算法来合并重叠的区间。</li><li><strong>区间覆盖</strong>：检查一组区间是否能完全覆盖一个目标区间等。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>扫描线算法是一种非常强大且高效的算法，尤其适用于处理与区间重叠、事件排序相关的几何问题。</p><p>在许多情况下，它比暴力算法要高效得多，尤其是在数据量大的时候，能够显著减少计算的复杂度。</p><h2 id="扫描线算法的应用场景" tabindex="-1"><a class="header-anchor" href="#扫描线算法的应用场景"><span>扫描线算法的应用场景</span></a></h2><p>扫描线算法（Sweep Line Algorithm）是一种用于处理二维平面上的区间或事件的高效算法。</p><p>其核心思想是将问题转化为按特定顺序扫描一条虚拟的直线（通常是水平或垂直）处理事件，维护实时的状态信息。</p><p>以下是扫描线算法的主要应用场景：</p><hr><h3 id="_1-几何问题" tabindex="-1"><a class="header-anchor" href="#_1-几何问题"><span>1. <strong>几何问题</strong></span></a></h3><h4 id="线段交点检测" tabindex="-1"><a class="header-anchor" href="#线段交点检测"><span><strong>线段交点检测</strong></span></a></h4><ul><li>应用：检测一组线段中是否存在交点，或计算所有交点。</li><li>思路：将每个线段的起点和终点作为事件点，通过扫描线维护当前活跃的线段集合，并检查可能的交点。</li><li>示例题目： <ul><li><a href="https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm" target="_blank" rel="noopener noreferrer">Bentley-Ottmann Algorithm for Line Segment Intersection</a></li></ul></li></ul><h4 id="矩形重叠面积计算" tabindex="-1"><a class="header-anchor" href="#矩形重叠面积计算"><span><strong>矩形重叠面积计算</strong></span></a></h4><ul><li>应用：计算多个矩形的重叠面积。</li><li>思路：将矩形的左右边界作为事件点，在扫描过程中动态维护活动矩形的集合，并计算贡献的重叠区域。</li><li>示例题目： <ul><li><a href="https://leetcode.com/problems/rectangle-area-ii/" target="_blank" rel="noopener noreferrer">LeetCode 850. Rectangle Area II</a></li></ul></li></ul><h4 id="最近点对问题" tabindex="-1"><a class="header-anchor" href="#最近点对问题"><span><strong>最近点对问题</strong></span></a></h4><ul><li>应用：在平面上找到最近的两点。</li><li>思路：结合分治法和扫描线算法，在划分子问题时利用扫描线动态维护可能的候选点。</li><li>示例题目： <ul><li><a href="https://leetcode.com/problems/closest-points-to-a-line/" target="_blank" rel="noopener noreferrer">LeetCode 587. Closest Pair of Points</a></li></ul></li></ul><hr><h3 id="_2-区间问题" tabindex="-1"><a class="header-anchor" href="#_2-区间问题"><span>2. <strong>区间问题</strong></span></a></h3><h4 id="活动调度问题" tabindex="-1"><a class="header-anchor" href="#活动调度问题"><span><strong>活动调度问题</strong></span></a></h4><ul><li>应用：判断最多有多少个区间（如会议时间、任务）同时重叠。</li><li>思路：将区间起点和终点作为事件，通过扫描线动态计算活动的最大重叠数。</li></ul><h4 id="区间覆盖长度" tabindex="-1"><a class="header-anchor" href="#区间覆盖长度"><span><strong>区间覆盖长度</strong></span></a></h4><ul><li>应用：计算多个区间的总覆盖长度。</li><li>思路：将每个区间的左右端点作为事件点，扫描时维护当前活跃区间数量。</li><li>示例题目： <ul><li><a href="https://leetcode.com/problems/data-stream-as-disjoint-intervals/" target="_blank" rel="noopener noreferrer">LeetCode 352. Data Stream as Disjoint Intervals</a></li></ul></li></ul><hr><h3 id="_3-图像处理与计算几何" tabindex="-1"><a class="header-anchor" href="#_3-图像处理与计算几何"><span>3. <strong>图像处理与计算几何</strong></span></a></h3><h4 id="计算多边形的面积" tabindex="-1"><a class="header-anchor" href="#计算多边形的面积"><span><strong>计算多边形的面积</strong></span></a></h4><ul><li>应用：计算复杂多边形的面积或其他几何属性。</li><li>思路：将多边形边界点作为事件，通过扫描线维护当前边界的状态。</li></ul><h4 id="多边形的布尔运算" tabindex="-1"><a class="header-anchor" href="#多边形的布尔运算"><span><strong>多边形的布尔运算</strong></span></a></h4><ul><li>应用：计算两个多边形的交集、并集或差集。</li><li>思路：使用扫描线维护多边形的边界信息，动态判断重叠关系。</li></ul><hr><h3 id="_4-统计与计数问题" tabindex="-1"><a class="header-anchor" href="#_4-统计与计数问题"><span>4. <strong>统计与计数问题</strong></span></a></h3><h4 id="区间内点的个数" tabindex="-1"><a class="header-anchor" href="#区间内点的个数"><span><strong>区间内点的个数</strong></span></a></h4><ul><li>应用：统计二维空间内某个矩形范围内的点的个数。</li><li>思路：将点和矩形边界作为事件，通过扫描线动态维护点的状态。</li></ul><h4 id="在线动态统计" tabindex="-1"><a class="header-anchor" href="#在线动态统计"><span><strong>在线动态统计</strong></span></a></h4><ul><li>应用：例如在线统计区间内的元素个数或和。</li><li>示例题目： <ul><li><a href="https://leetcode.com/problems/amount-of-new-area-painted-each-day/" target="_blank" rel="noopener noreferrer">LeetCode 2158. Amount of New Area Painted Each Day</a></li></ul></li></ul><hr><h3 id="_5-动态数据维护问题" tabindex="-1"><a class="header-anchor" href="#_5-动态数据维护问题"><span>5. <strong>动态数据维护问题</strong></span></a></h3><h4 id="事件调度与处理" tabindex="-1"><a class="header-anchor" href="#事件调度与处理"><span><strong>事件调度与处理</strong></span></a></h4><ul><li>应用：如动态分配资源、任务调度问题。</li><li>思路：将任务的开始和结束时间作为事件点，通过扫描线动态分配或释放资源。</li></ul><h4 id="动态数列问题" tabindex="-1"><a class="header-anchor" href="#动态数列问题"><span><strong>动态数列问题</strong></span></a></h4><ul><li>应用：动态更新区间信息（如最大值、最小值）。</li><li>示例题目： <ul><li><a href="https://leetcode.com/problems/the-skyline-problem/" target="_blank" rel="noopener noreferrer">LeetCode 218. The Skyline Problem</a></li></ul></li></ul><hr><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>扫描线算法非常适合处理涉及区间、事件和动态维护的问题。其核心优势在于能够通过事件点的排序与动态维护，减少冗余计算，提升效率。</p><p>这使其在几何处理、区间统计以及动态事件维护中广泛应用。</p><h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p><blockquote><p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p></blockquote><h1 id="扫描线专题" tabindex="-1"><a class="header-anchor" href="#扫描线专题"><span>扫描线专题</span></a></h1><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-218-sweep-line-skyline" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.218 the-skyline-problem 力扣.218 天际线问题</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-252-sweep-line-meeting-room" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.252 meeting room 力扣.252 会议室</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-253-sweep-line-meeting-room-ii" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.253 meeting room ii 力扣.253 会议室 II</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-1851-sweep-line-minimum-interval-to-include-each-query" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.1851 minimum-interval-to-include-each-query 力扣.1851 包含每个查询的最小区间</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-223-sweep-line-rectangle-area" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.223 rectangle-area 力扣.223 矩形面积</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-3047-sweep-line-find-the-largest-area-of-square-inside-two-rectangles" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.3047 find-the-largest-area-of-square-inside-two-rectangles 力扣.3047 求交集区域的最大正方形面积</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-391-sweep-line-perfect-rectangle" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.391 perfect-rectangle 力扣.391 完美矩形</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-836-sweep-line-rectangle-overlap" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.836 rectangle-overlap 力扣.836 矩形重叠</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-001-array-06-850-sweep-line-rectangle-area-ii" target="_blank" rel="noopener noreferrer">leetcode 扫描线专题 06-leetcode.850 rectangle-area 力扣.850 矩形面积 II</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://leetcode.cn/problems/4sum/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/4sum/</a></p>',99)]))}const p=a(o,[["render",i]]),d=JSON.parse('{"path":"/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html","title":"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）","lang":"zh-CN","frontmatter":{"title":"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","array","sweep-line","sf"],"published":true,"description":"chat 什么是扫描线算法？ 扫描线算法（Sweep Line Algorithm）是一种常用于解决几何问题（尤其是涉及区间、时间线或事件的重叠问题）的算法。 它的基本思想是“模拟一条扫描线从一个方向扫过所有事件”，在扫描过程中维护一个数据结构来追踪当前的状态（例如活动区间的数量、最小值、最大值等）。 扫描线算法的基本步骤 事件表示：每个问题中的区间（...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）"}],["meta",{"property":"og:description","content":"chat 什么是扫描线算法？ 扫描线算法（Sweep Line Algorithm）是一种常用于解决几何问题（尤其是涉及区间、时间线或事件的重叠问题）的算法。 它的基本思想是“模拟一条扫描线从一个方向扫过所有事件”，在扫描过程中维护一个数据结构来追踪当前的状态（例如活动区间的数量、最小值、最大值等）。 扫描线算法的基本步骤 事件表示：每个问题中的区间（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"sweep-line"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 扫描线专题 06-扫描线算法（Sweep Line Algorithm）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":9.52,"words":2856},"filePathRelative":"posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-06-000-sweep-line-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<h2>什么是扫描线算法？</h2>\\n<p>扫描线算法（<strong>Sweep Line Algorithm</strong>）是一种常用于解决几何问题（尤其是涉及区间、时间线或事件的重叠问题）的算法。</p>\\n<p>它的基本思想是“<strong>模拟一条扫描线从一个方向扫过所有事件</strong>”，在扫描过程中维护一个数据结构来追踪当前的状态（例如活动区间的数量、最小值、最大值等）。</p>\\n<h3>扫描线算法的基本步骤</h3>\\n<ol>\\n<li>\\n<p><strong>事件表示</strong>：每个问题中的区间（例如会议时间）或事件，都可以转化为若干个关键事件（例如开始时间和结束时间）。</p>\\n</li>\\n<li>\\n<p><strong>事件排序</strong>：将所有事件按照时间排序（如果时间相同，则根据事件的类型来排序，例如结束事件优先于开始事件）。</p>\\n</li>\\n<li>\\n<p><strong>扫描过程</strong>：从最早的事件开始，按照排序顺序逐一处理每个事件，并在处理每个事件时更新状态（例如活动会议的数量、最大活动时间等）。</p>\\n</li>\\n<li>\\n<p><strong>数据维护</strong>：根据事件类型，更新当前的活动状态。例如，遇到一个开始事件时，我们增加一个计数，遇到结束事件时，减少计数，或者更新其他需要维护的值。</p>\\n</li>\\n<li>\\n<p><strong>输出结果</strong>：在扫描过程中，根据需求输出解答。</p>\\n</li>\\n</ol>","autoDesc":true}');export{p as comp,d as data};
