import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as l}from"./app-DP7ZrycQ.js";const e={};function n(r,i){return l(),s("div",null,i[0]||(i[0]=[a(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p><p><a href="https://houbb.github.io/2018/12/05/bloom-filter" target="_blank" rel="noopener noreferrer">bloom filter</a></p><p><a href="https://houbb.github.io/2019/04/01/BloomFilter-best-practice" target="_blank" rel="noopener noreferrer">bloom filter 使用最佳实践，让你少采坑！</a></p><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>todo</span></a></h1><p>工具包包的封装+文档</p><p>资源可视化</p><p>前后端===》项目</p><p>弱点解决===》场景解决方案/技术咨询</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h1 id="详细介绍一下-bloomfliter" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-bloomfliter"><span>详细介绍一下 BloomFliter</span></a></h1><p>好的，我们来系统、详细地介绍一下 <strong>Bloom Filter（布隆过滤器）</strong>。</p><hr><h2 id="一、bloom-filter-是什么" tabindex="-1"><a class="header-anchor" href="#一、bloom-filter-是什么"><span>一、Bloom Filter 是什么？</span></a></h2><p><strong>Bloom Filter 是一种空间效率极高的“概率型数据结构”，用于判断一个元素是否在一个集合中。</strong></p><p>它的特点是：</p><ul><li><strong>可以判断“可能存在”或“一定不存在”</strong></li><li><strong>存在一定误判率（可能把不存在的元素误判为存在）</strong></li><li><strong>不会漏判（存在的元素一定判断为存在）</strong></li><li><strong>不支持删除元素（标准版）</strong></li></ul><p>它特别适合<strong>大数据量、对存储和速度要求高，但容忍一定误差的场景</strong>。</p><hr><h2 id="二、bloom-filter-的核心原理" tabindex="-1"><a class="header-anchor" href="#二、bloom-filter-的核心原理"><span>二、Bloom Filter 的核心原理</span></a></h2><h3 id="_1-数据结构组成" tabindex="-1"><a class="header-anchor" href="#_1-数据结构组成"><span>1. 数据结构组成</span></a></h3><p>Bloom Filter 本质上由两部分组成：</p><ul><li><strong>一个 bit 数组（初始全为 0）</strong></li><li><strong>一组哈希函数（k 个）</strong></li></ul><h3 id="_2-添加元素-以字符串-hello-为例" tabindex="-1"><a class="header-anchor" href="#_2-添加元素-以字符串-hello-为例"><span>2. 添加元素（以字符串 <code>&quot;hello&quot;</code> 为例）</span></a></h3><ul><li>用 k 个哈希函数分别对 <code>&quot;hello&quot;</code> 进行哈希，得到 k 个下标。</li><li>在 bit 数组中，将这 k 个下标位置置为 1。</li></ul><h3 id="_3-查询元素-比如查询-world" tabindex="-1"><a class="header-anchor" href="#_3-查询元素-比如查询-world"><span>3. 查询元素（比如查询 <code>&quot;world&quot;</code>）</span></a></h3><ul><li><p>用相同的 k 个哈希函数对 <code>&quot;world&quot;</code> 哈希，得到 k 个下标。</p></li><li><p>检查这些下标在 bit 数组中对应的位置是否都是 1：</p><ul><li>如果有任意一个是 0，说明一定 <strong>没出现过</strong>。</li><li>如果全部是 1，说明 <strong>可能出现过</strong>（但也可能是其他元素共同“碰巧”设置的）。</li></ul></li></ul><hr><h2 id="三、例子-可视化理解" tabindex="-1"><a class="header-anchor" href="#三、例子-可视化理解"><span>三、例子：可视化理解</span></a></h2><p>假设我们有一个 bit 数组长度为 10：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们有 3 个哈希函数，向 Bloom Filter 中加入 <code>&quot;cat&quot;</code>：</p><ul><li><code>hash1(&quot;cat&quot;) % 10 = 1</code></li><li><code>hash2(&quot;cat&quot;) % 10 = 4</code></li><li><code>hash3(&quot;cat&quot;) % 10 = 7</code></li></ul><p>将这些位置设为 1：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[0, 1, 0, 0, 1, 0, 0, 1, 0, 0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询 <code>&quot;dog&quot;</code> 时：</p><ul><li>如果某一个位置是 0，直接返回“不存在”</li><li>如果三个位置都是 1，那就说“可能存在”</li></ul><hr><h2 id="四、优缺点总结" tabindex="-1"><a class="header-anchor" href="#四、优缺点总结"><span>四、优缺点总结</span></a></h2><h3 id="✅-优点" tabindex="-1"><a class="header-anchor" href="#✅-优点"><span>✅ 优点</span></a></h3><ul><li><strong>节省空间</strong>：比哈希表或集合更节省内存</li><li><strong>查询速度快</strong>：时间复杂度为 O(k)，k 是哈希函数个数</li><li><strong>适合并发场景</strong>：因为只涉及 bit 操作，且不支持删除，线程安全性好</li></ul><h3 id="❌-缺点" tabindex="-1"><a class="header-anchor" href="#❌-缺点"><span>❌ 缺点</span></a></h3><ul><li><strong>有误判率</strong>：查询可能返回 false positive</li><li><strong>不支持删除</strong>（除非使用 Counting Bloom Filter）</li><li><strong>哈希函数选择很关键</strong>：影响误判率和性能</li><li><strong>无法获取元素本身的集合内容</strong>：只能判断是否存在</li></ul><hr><h2 id="五、实际应用场景" tabindex="-1"><a class="header-anchor" href="#五、实际应用场景"><span>五、实际应用场景</span></a></h2><h3 id="🔍-1-网页黑名单过滤" tabindex="-1"><a class="header-anchor" href="#🔍-1-网页黑名单过滤"><span>🔍 1. 网页黑名单过滤</span></a></h3><p>判断某个 URL 是否在黑名单中，节省内存，误判也能容忍。</p><h3 id="📚-2-搜索引擎的缓存过滤器" tabindex="-1"><a class="header-anchor" href="#📚-2-搜索引擎的缓存过滤器"><span>📚 2. 搜索引擎的缓存过滤器</span></a></h3><p>判断查询请求是否在缓存中，避免频繁查数据库或分布式系统。</p><h3 id="🛒-3-电商防重复推荐" tabindex="-1"><a class="header-anchor" href="#🛒-3-电商防重复推荐"><span>🛒 3. 电商防重复推荐</span></a></h3><p>防止给用户推荐已经看过或买过的商品。</p><h3 id="📬-4-邮件反垃圾系统" tabindex="-1"><a class="header-anchor" href="#📬-4-邮件反垃圾系统"><span>📬 4. 邮件反垃圾系统</span></a></h3><p>快速判断邮件地址是否在垃圾地址库中。</p><h3 id="🧠-5-区块链" tabindex="-1"><a class="header-anchor" href="#🧠-5-区块链"><span>🧠 5. 区块链</span></a></h3><p>比如 Bitcoin 中用于过滤区块数据，客户端只接受可能相关的交易。</p><hr><h2 id="六、扩展变种" tabindex="-1"><a class="header-anchor" href="#六、扩展变种"><span>六、扩展变种</span></a></h2><table><thead><tr><th>名称</th><th>特点</th></tr></thead><tbody><tr><td><strong>Counting Bloom Filter</strong></td><td>支持删除功能，用计数器代替 bit 位</td></tr><tr><td><strong>Scalable Bloom Filter</strong></td><td>自动扩容以适应无限数据增长，维持误判率</td></tr><tr><td><strong>Compressed Bloom Filter</strong></td><td>更节省空间，适合传输</td></tr><tr><td><strong>Partitioned Bloom Filter</strong></td><td>将 bit 数组分为 k 段，每个哈希函数只对应一段，减少冲突</td></tr></tbody></table><hr><h2 id="七、误判率计算-了解" tabindex="-1"><a class="header-anchor" href="#七、误判率计算-了解"><span>七、误判率计算（了解）</span></a></h2><p>设：</p><ul><li>m：bit 数组大小</li><li>k：哈希函数个数</li><li>n：插入元素个数</li></ul><p>则查询某个元素的误判率大约为：</p><p>$$<br> \\left(1 - e^{-kn/m} \\right)^k<br> $$</p><p>你可以根据这个公式，选择合理的 m 和 k，来控制误判率。</p><hr><h2 id="八、与-hashset-的比较" tabindex="-1"><a class="header-anchor" href="#八、与-hashset-的比较"><span>八、与 HashSet 的比较</span></a></h2><table><thead><tr><th>功能/特点</th><th>Bloom Filter</th><th>HashSet</th></tr></thead><tbody><tr><td>占用内存</td><td>少得多</td><td>多</td></tr><tr><td>查询速度</td><td>快</td><td>快</td></tr><tr><td>支持删除</td><td>不支持（标准版）</td><td>支持</td></tr><tr><td>可枚举内容</td><td>否</td><td>是</td></tr><tr><td>是否存在误判</td><td>有</td><td>无</td></tr><tr><td>是否线程安全</td><td>较容易实现</td><td>需要加锁或并发容器</td></tr></tbody></table><hr><p>如果你正在做类似缓存、反垃圾、推荐系统或大规模日志去重等场景，Bloom Filter 是一个非常实用的工具。</p><p>需要的话，我可以给你写一份 Java 或 Python 的 Bloom Filter 实现。</p><h1 id="如何解决数据被删除的问题呢-比如定期重新构建一下-业界比较推荐的做法是" tabindex="-1"><a class="header-anchor" href="#如何解决数据被删除的问题呢-比如定期重新构建一下-业界比较推荐的做法是"><span>如何解决数据被删除的问题呢？比如定期重新构建一下？业界比较推荐的做法是？</span></a></h1><p>这是个很实际的问题，也是 Bloom Filter 在生产环境中经常需要面对的挑战：<strong>如何解决“不能删除元素”的问题？</strong></p><hr><h2 id="一、背景-为什么-bloom-filter-不支持删除" tabindex="-1"><a class="header-anchor" href="#一、背景-为什么-bloom-filter-不支持删除"><span>一、背景：为什么 Bloom Filter 不支持删除？</span></a></h2><p>因为 Bloom Filter 使用的是一个 bit 数组，当你添加元素时，<strong>多个元素可能会影响同一位</strong>。</p><p>比如：</p><ul><li>元素 A 和元素 B 都将第 5 位设为了 1</li><li>如果你删除 A，把第 5 位清零了，<strong>B 的存在也被破坏了</strong></li></ul><p>这就是“误删”问题。</p><hr><h2 id="二、常见解决方案" tabindex="-1"><a class="header-anchor" href="#二、常见解决方案"><span>二、常见解决方案</span></a></h2><h3 id="✅-方案一-使用-counting-bloom-filter-计数型布隆过滤器" tabindex="-1"><a class="header-anchor" href="#✅-方案一-使用-counting-bloom-filter-计数型布隆过滤器"><span>✅ 方案一：使用 <strong>Counting Bloom Filter（计数型布隆过滤器）</strong></span></a></h3><p><strong>原理</strong>：<br> 把 bit 数组变成 <strong>计数数组</strong>（比如每个位置是一个 <code>uint8</code>，初始为 0）</p><ul><li>插入元素时，对应位置 +1</li><li>删除元素时，对应位置 -1</li><li>查询时，只要对应位置 &gt; 0 就认为“可能存在”</li></ul><p><strong>优点</strong>：</p><ul><li>完整支持删除操作</li><li>实现简单</li></ul><p><strong>缺点</strong>：</p><ul><li>占用空间比普通 Bloom Filter 大（从 1bit 变成 4bit 或 8bit）</li><li>删除操作仍然不能解决“误判”问题（误删别人的数据）</li></ul><p>👉 使用场景：比较适合缓存、实时数据流、有生命周期的数据场景。</p><hr><h3 id="✅-方案二-定期-重建-bloom-filter-rebuild" tabindex="-1"><a class="header-anchor" href="#✅-方案二-定期-重建-bloom-filter-rebuild"><span>✅ 方案二：定期“重建” Bloom Filter（<strong>Rebuild</strong>）</span></a></h3><p><strong>原理</strong>：</p><ul><li>Bloom Filter 本身不支持删除</li><li>但你可以在后台维护一份真实的数据（比如 Redis、数据库）</li><li>然后<strong>定期全量重新构建</strong> Bloom Filter，清除脏数据</li></ul><p><strong>常见操作时机</strong>：</p><ul><li>每隔一段时间，比如 30 分钟、1 小时</li><li>或者数据量达到某个阈值时触发</li><li>或者后台触发器检测到某个 key 需要删除时，打个标记等待清理</li></ul><p><strong>优点</strong>：</p><ul><li>实现简单，兼容原始 Bloom Filter</li><li>不增加 Bloom Filter 的体积</li></ul><p><strong>缺点</strong>：</p><ul><li>需要额外维护真实数据源</li><li>重建 Bloom Filter 期间有可能有“脏读”</li></ul><p>👉 使用场景：大规模缓存穿透拦截（如 Redis 缓存层）</p><hr><h3 id="✅-方案三-分片-版本化-bloom-filter-double-buffer-rotating-bloom-filter" tabindex="-1"><a class="header-anchor" href="#✅-方案三-分片-版本化-bloom-filter-double-buffer-rotating-bloom-filter"><span>✅ 方案三：分片 + 版本化 Bloom Filter（<strong>Double Buffer / Rotating Bloom Filter</strong>）</span></a></h3><p><strong>原理</strong>：</p><ul><li>同时维护多个布隆过滤器，如：FilterA 和 FilterB</li><li>当前写入 FilterA，同时老的 FilterB 还在使用</li><li>等 FilterB 过期后丢弃，轮换成新的 FilterA（类似“热数据-冷数据”）</li></ul><p>你可以把这个模型想象成一个“定时轮换”的轮子。</p><p><strong>优点</strong>：</p><ul><li>不影响读写</li><li>支持定时清除旧数据</li></ul><p><strong>缺点</strong>：</p><ul><li>需要管理多份 Bloom Filter</li><li>可能短期内会存在一定冗余</li></ul><p>👉 使用场景：搜索引擎反爬、日志系统、消息去重</p><hr><h3 id="✅-方案四-使用-lru-bloom-filter-组合方案" tabindex="-1"><a class="header-anchor" href="#✅-方案四-使用-lru-bloom-filter-组合方案"><span>✅ 方案四：使用 LRU + Bloom Filter 组合方案</span></a></h3><p><strong>原理</strong>：</p><ul><li>Bloom Filter 做第一层判断</li><li>后面再跟一个 LRU 缓存记录真正查询/访问过的 key</li><li>当 LRU 淘汰某个 key 时，同时记录下来，延迟触发 Bloom Filter 的 rebuild</li></ul><p>👉 使用场景：高并发系统的缓存命中判断（比如 CDN、热点视频缓存）</p><hr><h2 id="三、业界推荐实践-总结" tabindex="-1"><a class="header-anchor" href="#三、业界推荐实践-总结"><span>三、业界推荐实践（总结）</span></a></h2><table><thead><tr><th>场景</th><th>推荐方案</th><th>理由</th></tr></thead><tbody><tr><td><strong>缓存穿透拦截</strong></td><td>普通 Bloom Filter + 定期重建</td><td>简单高效，误判影响小</td></tr><tr><td><strong>短期数据去重</strong></td><td>计数 Bloom Filter</td><td>支持删除，去重精度高</td></tr><tr><td><strong>大规模高并发去重</strong></td><td>分片 Bloom Filter + 热备</td><td>低冲突，读写分离</td></tr><tr><td><strong>需极高精度</strong></td><td>用哈希集合 + LFU 或 LRU 替代 Bloom Filter</td><td>不容忍误判时使用</td></tr></tbody></table><hr><h2 id="四、小贴士-什么时候不应该用-bloom-filter" tabindex="-1"><a class="header-anchor" href="#四、小贴士-什么时候不应该用-bloom-filter"><span>四、小贴士：什么时候<strong>不应该</strong>用 Bloom Filter？</span></a></h2><ul><li>对误判极度敏感（如金融风控）</li><li>元素量小，不差这点空间（直接用 Set 更简单）</li><li>需要频繁删除和修改（会增加实现成本）</li></ul><hr><p>如果你给我具体场景（比如你在自动化测试平台里使用 Bloom Filter 的用途），我可以帮你选最合适的方案并提供具体实现建议。是否考虑加入 Redis、Guava、RoaringBitmap 等工具库？也可以配套分析一下。</p><h1 id="是否可以通过-bloom-filter-作为第一层-redis-之类的缓存作为第二层-mysql-兜底的结合方案-来解决误判的问题" tabindex="-1"><a class="header-anchor" href="#是否可以通过-bloom-filter-作为第一层-redis-之类的缓存作为第二层-mysql-兜底的结合方案-来解决误判的问题"><span>是否可以通过 bloom-filter 作为第一层，redis 之类的缓存作为第二层，mysql 兜底的结合方案？来解决误判的问题</span></a></h1><p>非常棒的想法！你说的这个组合方案，实际上已经是**业界最经典、最成熟的“缓存穿透防护三段式架构”**之一了👇</p><hr><h2 id="✅-一、架构概览-三层过滤机制" tabindex="-1"><a class="header-anchor" href="#✅-一、架构概览-三层过滤机制"><span>✅ 一、架构概览：三层过滤机制</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        请求 Key</span></span>
<span class="line"><span>           ↓</span></span>
<span class="line"><span>╭────────────────────╮</span></span>
<span class="line"><span>│ 1. Bloom Filter (内存) │→ 若为不存在，则直接拒绝请求（一定不存在）</span></span>
<span class="line"><span>╰────────────────────╯</span></span>
<span class="line"><span>           ↓</span></span>
<span class="line"><span>╭────────────────────╮</span></span>
<span class="line"><span>│ 2. Redis 缓存层       │→ 命中则直接返回数据</span></span>
<span class="line"><span>╰────────────────────╯</span></span>
<span class="line"><span>           ↓</span></span>
<span class="line"><span>╭────────────────────╮</span></span>
<span class="line"><span>│ 3. MySQL 等数据库层   │→ 真正查询并回填缓存</span></span>
<span class="line"><span>╰────────────────────╯</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-二、这个组合能解决什么问题" tabindex="-1"><a class="header-anchor" href="#✅-二、这个组合能解决什么问题"><span>✅ 二、这个组合能解决什么问题？</span></a></h2><h3 id="🌩️-1-防止-缓存穿透" tabindex="-1"><a class="header-anchor" href="#🌩️-1-防止-缓存穿透"><span>🌩️ 1. 防止 <strong>缓存穿透</strong></span></a></h3><p>某些恶意或错误请求频繁查询根本不存在的 key，直接穿透到 DB：</p><ul><li>❌ Redis 中没有</li><li>❌ 数据库也没有</li><li>✅ Bloom Filter 先挡掉大部分不存在的 key！</li></ul><h3 id="🎯-2-降低-redis-压力" tabindex="-1"><a class="header-anchor" href="#🎯-2-降低-redis-压力"><span>🎯 2. 降低 <strong>Redis 压力</strong></span></a></h3><p>由于 Bloom Filter 是在<strong>本地内存中执行 bit 数组判断，速度极快</strong>，能挡掉大量无效请求，Redis 能只处理更“可能真实”的 key。</p><h3 id="📉-3-缓解-数据库压力" tabindex="-1"><a class="header-anchor" href="#📉-3-缓解-数据库压力"><span>📉 3. 缓解 <strong>数据库压力</strong></span></a></h3><p>对于 Bloom Filter 误判漏掉的少量 key，通过 Redis 兜一层，减轻 DB 查询频率。</p><hr><h2 id="✅-三、示例流程-以用户请求-get-product-id-12345-为例" tabindex="-1"><a class="header-anchor" href="#✅-三、示例流程-以用户请求-get-product-id-12345-为例"><span>✅ 三、示例流程（以用户请求 <code>GET /product?id=12345</code> 为例）</span></a></h2><ol><li><p><strong>Bloom Filter 判断 key=product:12345 是否可能存在</strong></p><ul><li>若明确不存在 → 直接拒绝请求，返回空</li><li>若可能存在 → 继续查询缓存</li></ul></li><li><p><strong>Redis 查询是否缓存该商品信息</strong></p><ul><li>若命中 → 返回数据</li><li>若未命中 → 进入数据库查询</li></ul></li><li><p><strong>MySQL 查询真实数据</strong></p><ul><li>若查到 → 返回数据 + 写入 Redis 缓存</li><li>若没查到 → 返回空 + 可以选择写入 Redis 空值（防止短时间内重复穿透）</li></ul></li></ol><hr><h2 id="✅-四、配套策略建议" tabindex="-1"><a class="header-anchor" href="#✅-四、配套策略建议"><span>✅ 四、配套策略建议</span></a></h2><table><thead><tr><th>项目</th><th>建议配置</th></tr></thead><tbody><tr><td>Bloom Filter</td><td>本地内存（Guava、Caffeine 或 Redis 模块），定期重建，或 Counting Bloom</td></tr><tr><td>Redis 缓存</td><td>设置过期时间，热点数据可以用永久 key，冷数据可自动淘汰</td></tr><tr><td>缓存空值</td><td>Redis 可以存 <code>&quot;__null__&quot;</code> 作为空占位，避免重复穿透</td></tr><tr><td>MySQL 查询后</td><td>若查到 → 缓存；若查不到 → 空值或异步补数据</td></tr><tr><td>熔断机制</td><td>Redis 和 DB 出现问题时快速 fail，避免雪崩</td></tr><tr><td>数据同步</td><td>可用 Binlog、定时任务、消息队列等同步数据到 Bloom Filter</td></tr></tbody></table><hr><h2 id="✅-五、代码角度如何组织-伪代码" tabindex="-1"><a class="header-anchor" href="#✅-五、代码角度如何组织-伪代码"><span>✅ 五、代码角度如何组织？（伪代码）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getProduct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. bloom filter 判断</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bloomFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mightContain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 一定不存在，直接返回</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. redis 查询</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> redisKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;product:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Product</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cached </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(redisKey);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (cached </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cached</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;__null__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cached</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. DB 查询</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Product</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dbProduct </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">queryProductById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (dbProduct </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(redisKey, dbProduct, EXPIRE_TIME);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(redisKey, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;__null__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, SHORT_EXPIRE);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 空值防穿透</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dbProduct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-六、实际案例" tabindex="-1"><a class="header-anchor" href="#✅-六、实际案例"><span>✅ 六、实际案例</span></a></h2><table><thead><tr><th>公司</th><th>应用 Bloom Filter 的场景</th></tr></thead><tbody><tr><td>淘宝</td><td>商品推荐防止重复展示</td></tr><tr><td>美团</td><td>高频业务请求去重、请求过滤</td></tr><tr><td>百度</td><td>网页索引的去重与过滤</td></tr><tr><td>腾讯</td><td>海量用户账号黑名单快速判断</td></tr><tr><td>今日头条</td><td>推荐系统历史记录过滤</td></tr></tbody></table><hr><h2 id="✅-七、小结" tabindex="-1"><a class="header-anchor" href="#✅-七、小结"><span>✅ 七、小结</span></a></h2><table><thead><tr><th>优势</th><th>实现方式</th></tr></thead><tbody><tr><td>✅ 快速拦截不存在的 key</td><td>Bloom Filter</td></tr><tr><td>✅ 缓存热点数据、减少 DB 压力</td><td>Redis</td></tr><tr><td>✅ 保证数据最终一致性</td><td>MySQL 兜底</td></tr><tr><td>✅ 减少误判副作用</td><td>Redis 空值缓存，或异步纠正</td></tr><tr><td>✅ 易于扩展</td><td>可以引入分布式布隆过滤器、Cuckoo Filter 等新方案</td></tr></tbody></table><hr><p>如果你用在自动化测试平台中，比如：<strong>判断某个测试任务是否已执行、某个任务 ID 是否存在于计划中等场景</strong>，这种架构也完全适用。</p><p>需要我帮你写具体的实现代码（Java + Redis + Guava BloomFilter）也可以告诉我 👍</p><h1 id="除了上面的问题之外-bloom-filter-使用还有哪些要注意的点" tabindex="-1"><a class="header-anchor" href="#除了上面的问题之外-bloom-filter-使用还有哪些要注意的点"><span>除了上面的问题之外，bloom-filter 使用还有哪些要注意的点？</span></a></h1><p>Bloom Filter 虽然强大，但它也不是万能的，使用时确实需要注意一些 <strong>陷阱、限制和设计决策</strong>。下面给你系统整理一下：</p><hr><h2 id="✅-一、核心特性再强调一次-理解这些才能避免误用" tabindex="-1"><a class="header-anchor" href="#✅-一、核心特性再强调一次-理解这些才能避免误用"><span>✅ 一、核心特性再强调一次（理解这些才能避免误用）</span></a></h2><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>✅ <strong>只支持新增，不支持删除</strong>（除非用 Counting Bloom）</td><td>因为不同元素可能共享 bit 位，删除容易误删</td></tr><tr><td>✅ <strong>存在一定误判（False Positive）</strong></td><td>会误判不存在的 key 为“可能存在”</td></tr><tr><td>✅ <strong>一定不会漏判（False Negative）</strong></td><td>真正存在的 key 一定会返回“可能存在”</td></tr><tr><td>✅ <strong>无法列出所有已添加的元素</strong></td><td>因为 Bloom Filter 不存储元素，只存 bit 信息</td></tr></tbody></table><hr><h2 id="🧱-二、使用-bloom-filter-时要特别注意的点" tabindex="-1"><a class="header-anchor" href="#🧱-二、使用-bloom-filter-时要特别注意的点"><span>🧱 二、使用 Bloom Filter 时要特别注意的点</span></a></h2><h3 id="_1️⃣-哈希函数的选择-至关重要" tabindex="-1"><a class="header-anchor" href="#_1️⃣-哈希函数的选择-至关重要"><span>1️⃣ 哈希函数的选择 <strong>至关重要</strong></span></a></h3><ul><li>哈希函数要独立、分布均匀</li><li>通常选择 MurmurHash、Guava 提供的 <code>Funnels</code> 等高质量 hash</li><li>太弱的 hash 函数会导致 bit 位集中，<strong>误判率暴涨</strong></li></ul><p>💡 业界常见做法：</p><ul><li>使用一个强哈希函数 + 多次扰动（例如 hash1(x), hash1(x+salt1), hash1(x+salt2)...）</li></ul><hr><h3 id="_2️⃣-合理配置参数-m-k-n" tabindex="-1"><a class="header-anchor" href="#_2️⃣-合理配置参数-m-k-n"><span>2️⃣ 合理配置参数：<code>m</code>, <code>k</code>, <code>n</code></span></a></h3><ul><li><code>m</code>: bit 数组长度</li><li><code>k</code>: 哈希函数个数</li><li><code>n</code>: 预期元素个数</li></ul><p>推荐使用误判率公式进行预估（误判率 fp）：</p><p>$$<br> fp \\approx \\left(1 - e<sup>{-kn/m}\\right)</sup>k<br> $$</p><p>🧠 最优的哈希函数数量 <code>k</code> 为：</p><p>$$<br> k = \\frac{m}{n} \\ln 2<br> $$</p><p>👉 若 m/n 比例不足、k 设置不当，会让误判率严重偏高。</p><hr><h3 id="_3️⃣-误判带来的影响不能被忽视" tabindex="-1"><a class="header-anchor" href="#_3️⃣-误判带来的影响不能被忽视"><span>3️⃣ 误判带来的影响不能被忽视</span></a></h3><p>即使误判率只有 0.1%，在高频系统中也很可观：</p><ul><li>每天 1 亿请求 → 误判 10 万次</li><li>如果误判带来“请求落库”，会造成数据库雪崩</li></ul><p>💡 解决办法：</p><ul><li>使用 Redis 缓存空值</li><li>过滤后仍需要“二次兜底验证”</li></ul><hr><h3 id="_4️⃣-容量是固定的-一旦满了误判率会迅速升高" tabindex="-1"><a class="header-anchor" href="#_4️⃣-容量是固定的-一旦满了误判率会迅速升高"><span>4️⃣ 容量是固定的，一旦满了误判率会迅速升高</span></a></h3><p>Bloom Filter 是<strong>容量敏感型结构</strong>，当加入的数据远多于预计值 <code>n</code> 时：</p><ul><li>会导致 bit 数组变得越来越“稠密”</li><li>误判率接近 100%</li></ul><p>🧩 解决办法：</p><ul><li>用 <strong>Scalable Bloom Filter</strong>（支持自动扩容）</li><li>或者当使用量超过某阈值时，<strong>主动 rebuild</strong></li></ul><hr><h3 id="_5️⃣-不支持取出数据-不是传统意义的集合" tabindex="-1"><a class="header-anchor" href="#_5️⃣-不支持取出数据-不是传统意义的集合"><span>5️⃣ 不支持取出数据（不是传统意义的集合）</span></a></h3><ul><li>无法知道到底存了哪些元素</li><li>无法遍历、删除、查看 key 的元信息</li><li>因此<strong>不能替代哈希集合（Set）或数据库</strong></li></ul><hr><h3 id="_6️⃣-不适合对数据准确性要求极高的场景" tabindex="-1"><a class="header-anchor" href="#_6️⃣-不适合对数据准确性要求极高的场景"><span>6️⃣ 不适合对数据准确性要求极高的场景</span></a></h3><p>⚠️ 禁止 Bloom Filter 使用场景：</p><ul><li>支付、交易、风控、金融等不容许误判的业务</li><li>权限控制（误判可能导致非法访问）</li><li>安全认证（误判就是漏洞）</li></ul><hr><h3 id="_7️⃣-分布式部署注意-版本同步-问题" tabindex="-1"><a class="header-anchor" href="#_7️⃣-分布式部署注意-版本同步-问题"><span>7️⃣ 分布式部署注意“版本同步”问题</span></a></h3><p>在多个实例上共享 Bloom Filter（如 Redis Bloom 模块）时，要注意：</p><ul><li>所有服务使用同一个版本的 Bloom Filter</li><li>否则可能因版本不一致、bit 数据未同步 → 判断结果不同步</li></ul><p>💡 建议：</p><ul><li>使用 Redis Bloom、Guava BloomFilter 并封装成一个独立服务</li><li>保证集群间读写一致性（用消息队列或定时同步）</li></ul><hr><h3 id="_8️⃣-冷启动期间-bloom-filter-是-空的" tabindex="-1"><a class="header-anchor" href="#_8️⃣-冷启动期间-bloom-filter-是-空的"><span>8️⃣ 冷启动期间，bloom filter 是“空的”</span></a></h3><p>系统刚启动时，Bloom Filter 可能还没加载完历史数据，导致：</p><ul><li>本应存在的 key 被误判为“不存在”</li><li>从而引发“该去查数据库的却被挡掉了”</li></ul><p>💡 解决方法：</p><ul><li>冷启动时延迟启用 Bloom Filter</li><li>启动阶段查询 Redis 和 DB，再逐步灌入 Bloom Filter</li></ul><hr><h2 id="✅-三、bloom-filter-的使用-checklist" tabindex="-1"><a class="header-anchor" href="#✅-三、bloom-filter-的使用-checklist"><span>✅ 三、Bloom Filter 的使用 checklist</span></a></h2><table><thead><tr><th>项</th><th>是否处理</th></tr></thead><tbody><tr><td>是否预估了最大数据量 <code>n</code>？</td><td>✅</td></tr><tr><td>是否根据目标误判率计算了 <code>m</code> 和 <code>k</code>？</td><td>✅</td></tr><tr><td>哈希函数是否足够分散？</td><td>✅</td></tr><tr><td>是否考虑误判的后果？</td><td>✅</td></tr><tr><td>是否设计了重建机制？</td><td>✅</td></tr><tr><td>是否有冷启动方案？</td><td>✅</td></tr><tr><td>是否记录了 Bloom Filter 的“构建版本”？</td><td>✅</td></tr><tr><td>是否使用 Redis 空值/缓存兜底？</td><td>✅</td></tr></tbody></table><hr><h2 id="✅-四、推荐工具库和组件" tabindex="-1"><a class="header-anchor" href="#✅-四、推荐工具库和组件"><span>✅ 四、推荐工具库和组件</span></a></h2><table><thead><tr><th>工具</th><th>描述</th></tr></thead><tbody><tr><td><strong>Guava BloomFilter</strong></td><td>Java，简单易用，适合本地内存构建</td></tr><tr><td><strong>Caffeine + BloomFilter</strong></td><td>本地缓存 + 过滤器结合</td></tr><tr><td><strong>RedisBloom</strong></td><td>Redis 模块，支持分布式部署和计数功能</td></tr><tr><td><strong>Apache Commons BloomFilter</strong></td><td>Java 系列工具</td></tr><tr><td><strong>Scalable BloomFilter（Google 论文）</strong></td><td>自动扩容版 Bloom Filter</td></tr><tr><td><strong>Roaring Bitmap</strong></td><td>另一个压缩位图过滤器，用于整数集过滤</td></tr></tbody></table><hr><p>如果你有具体使用场景（比如某模块接口防穿透、任务ID去重、日志过滤等），我可以基于实际场景帮你再优化一版配置和设计方案。</p>`,215)]))}const o=t(e,[["render",n]]),p=JSON.parse('{"path":"/posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html","title":"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器","lang":"zh-CN","frontmatter":{"title":"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器","date":"2018-05-30T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","hash","hashing"],"published":true,"description":"拓展阅读 一致性 hash 算法 java hash 实现 hash 冲突处理 bloom filter bloom filter 使用最佳实践，让你少采坑！ todo 工具包包的封装+文档 资源可视化 前后端===》项目 弱点解决===》场景解决方案/技术咨询 chat 详细介绍一下 BloomFliter 好的，我们来系统、详细地介绍一下 Bloo...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器"}],["meta",{"property":"og:description","content":"拓展阅读 一致性 hash 算法 java hash 实现 hash 冲突处理 bloom filter bloom filter 使用最佳实践，让你少采坑！ todo 工具包包的封装+文档 资源可视化 前后端===》项目 弱点解决===》场景解决方案/技术咨询 chat 详细介绍一下 BloomFliter 好的，我们来系统、详细地介绍一下 Bloo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T04:59:26.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"hash"}],["meta",{"property":"article:tag","content":"hashing"}],["meta",{"property":"article:published_time","content":"2018-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T04:59:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hash-13-聊一聊哈希数据结构之 BloomFliter 布隆过滤器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T04:59:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755925166000,"updatedTime":1755925166000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":13.92,"words":4176},"filePathRelative":"posts/algorithm/hash/2018-05-30-hash-14-chat-hash-data-struct-bloom-filter.md","localizedDate":"2018年5月30日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/08/13/consistent-hash\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一致性 hash 算法</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/05/30/hash-impl\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">java hash 实现</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/05/30/hash-conflict\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">hash 冲突处理</a></p>","autoDesc":true}');export{o as comp,p as data};
