import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as e}from"./app-B2yLHfja.js";const r={};function n(h,s){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="排序系列" tabindex="-1"><a class="header-anchor" href="#排序系列"><span>排序系列</span></a></h1><p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-03-select-sort" target="_blank" rel="noopener noreferrer">sort-03-SelectSort 选择排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-04-heap-sort" target="_blank" rel="noopener noreferrer">sort-04-heap sort 堆排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-05-insert-sort" target="_blank" rel="noopener noreferrer">sort-05-insert sort 插入排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-06-shell-sort" target="_blank" rel="noopener noreferrer">sort-06-shell sort 希尔排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-07-merge-sort" target="_blank" rel="noopener noreferrer">sort-07-merge sort 归并排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-08-counting-sort" target="_blank" rel="noopener noreferrer">sort-08-counting sort 计数排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-09-bucket-sort" target="_blank" rel="noopener noreferrer">sort-09-bucket sort 桶排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-10-bigfile-sort" target="_blank" rel="noopener noreferrer">sort-10-bigfile 大文件外部排序</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>大家好，我是老马。</p><p>以前从工程的角度，已经梳理过一次排序算法。</p><p>这里从力扣算法的角度，重新梳理一遍。</p><p>核心内容包含：</p><p>1）常见排序算法介绍</p><p>2）背后的核心思想</p><p>3）leetcode 经典题目练习+讲解</p><p>4）应用场景、优缺点等对比总结</p><p>5）工程 sdk 包，这个已经完成。</p><ol start="6"><li>可视化</li></ol><h1 id="希尔排序-shell-sort" tabindex="-1"><a class="header-anchor" href="#希尔排序-shell-sort"><span>希尔排序（shell Sort）</span></a></h1><h2 id="📌-一、希尔排序简介" tabindex="-1"><a class="header-anchor" href="#📌-一、希尔排序简介"><span>📌 一、希尔排序简介</span></a></h2><p><strong>希尔排序（Shell Sort）</strong> 是对插入排序的优化，是第一个突破 O(n²) 时间复杂度的排序算法，由 <strong>Donald Shell</strong> 于 1959 年提出。</p><blockquote><p><strong>核心思想：将数组按一定“间隔 gap”进行分组排序，让数据逐步趋于有序，最终用插排完成最后的排序。</strong></p></blockquote><hr><h2 id="🧠-二、核心算法思想" tabindex="-1"><a class="header-anchor" href="#🧠-二、核心算法思想"><span>🧠 二、核心算法思想</span></a></h2><p>希尔排序是 <strong>分组+插入排序</strong> 的组合：</p><ol><li>将原始数组按一定“间隔 gap”分组</li><li>对每组执行插入排序</li><li>减小 gap（例如：gap = gap / 2），重复上述过程</li><li>最终 gap = 1 时，就是普通插排，此时数据已经基本有序，效率较高</li></ol><p>这种方式称为 <strong>“缩小增量排序”</strong>。</p><hr><h2 id="🎯-三、流程图解-以-8-9-1-7-2-3-5-4-6-0-为例" tabindex="-1"><a class="header-anchor" href="#🎯-三、流程图解-以-8-9-1-7-2-3-5-4-6-0-为例"><span>🎯 三、流程图解（以 <code>[8, 9, 1, 7, 2, 3, 5, 4, 6, 0]</code> 为例）</span></a></h2><p>假设初始 gap = 5，数组长度为 10：</p><ul><li><p>分组如下：</p><ul><li>第 0 组：arr[0], arr[5] → <code>[8, 3]</code> → 插入排序后 <code>[3, 8]</code></li><li>第 1 组：arr[1], arr[6] → <code>[9, 5]</code> → <code>[5, 9]</code></li><li>...</li></ul></li><li><p>gap = 2，再分组再插排</p></li><li><p>gap = 1，最后插排</p></li></ul><p>每轮都让元素<strong>移动得更快更远</strong>，避免了插排只能相邻交换的问题。</p><hr><h2 id="✅-四、java-代码实现-常用-gap-为-gap-2" tabindex="-1"><a class="header-anchor" href="#✅-四、java-代码实现-常用-gap-为-gap-2"><span>✅ 四、Java 代码实现（常用 gap 为 gap/2）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shellSort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] arr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> gap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 对每个组进行插排</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> temp) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                arr[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> gap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            arr[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可尝试不同的 gap 序列，如 Hibbard、Knuth、Sedgewick，提高性能。</p></blockquote><hr><h2 id="📈-五、复杂度分析" tabindex="-1"><a class="header-anchor" href="#📈-五、复杂度分析"><span>📈 五、复杂度分析</span></a></h2><table><thead><tr><th>情况</th><th>时间复杂度（取决于 gap）</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>最好情况</td><td>O(n log n)</td><td>O(1)</td><td>❌ 不稳定</td></tr><tr><td>最坏情况</td><td>O(n²)（经典gap）</td><td>O(1)</td><td>❌ 不稳定</td></tr><tr><td>平均情况</td><td>O(n^1.3 ~ n^1.5)</td><td>O(1)</td><td>❌ 不稳定</td></tr></tbody></table><blockquote><p>gap 选择对性能影响很大，合理设计 gap 可接近 O(n log n) 的效率。</p></blockquote><hr><h2 id="⚖️-六、优缺点总结" tabindex="-1"><a class="header-anchor" href="#⚖️-六、优缺点总结"><span>⚖️ 六、优缺点总结</span></a></h2><table><thead><tr><th>✅ 优点</th><th>❌ 缺点</th></tr></thead><tbody><tr><td>简单易实现，基于插排但效率更高</td><td>不稳定排序</td></tr><tr><td>支持原地排序，空间复杂度 O(1)</td><td>对 gap 依赖大，难以精确分析复杂度</td></tr><tr><td>在中小数据量表现不错</td><td>不如快排在大规模数据中表现优异</td></tr></tbody></table><hr><h2 id="🧰-七、适用场景分析" tabindex="-1"><a class="header-anchor" href="#🧰-七、适用场景分析"><span>🧰 七、适用场景分析</span></a></h2><table><thead><tr><th>场景</th><th>是否推荐</th></tr></thead><tbody><tr><td>✅ 中小规模数据</td><td>推荐</td></tr><tr><td>✅ 对内存要求较高（空间小）</td><td>推荐</td></tr><tr><td>❌ 要求排序稳定</td><td>不推荐</td></tr><tr><td>❌ 数据本身已高度有序</td><td>不推荐</td></tr></tbody></table><hr><h2 id="🧩-八、leetcode-相关题目" tabindex="-1"><a class="header-anchor" href="#🧩-八、leetcode-相关题目"><span>🧩 八、LeetCode 相关题目</span></a></h2><p>虽然希尔排序在 LeetCode 中不直接出现，但可以作为自选排序算法用于解决以下通用排序类题：</p><h3 id="🔹-912-排序数组" tabindex="-1"><a class="header-anchor" href="#🔹-912-排序数组"><span>🔹 <a href="https://leetcode.cn/problems/sort-an-array/" target="_blank" rel="noopener noreferrer">912. 排序数组</a></span></a></h3><ul><li>可以尝试用希尔排序来解这题，和快排做性能比较。</li></ul><h3 id="🔹-147-对链表进行插入排序" tabindex="-1"><a class="header-anchor" href="#🔹-147-对链表进行插入排序"><span>🔹 <a href="https://leetcode.cn/problems/insertion-sort-list/" target="_blank" rel="noopener noreferrer">147. 对链表进行插入排序</a></span></a></h3><ul><li>虽然本题是链表插排，但可作为希尔排序思想的比较。</li></ul><hr><h2 id="🆚-九、与插入排序对比" tabindex="-1"><a class="header-anchor" href="#🆚-九、与插入排序对比"><span>🆚 九、与插入排序对比</span></a></h2><table><thead><tr><th>项目</th><th>插入排序</th><th>希尔排序</th></tr></thead><tbody><tr><td>时间复杂度</td><td>O(n²)</td><td>O(n^1.5)</td></tr><tr><td>分组排序</td><td>否</td><td>是</td></tr><tr><td>交换元素距离</td><td>仅相邻</td><td>可远距离</td></tr><tr><td>效率提升显著性</td><td>差</td><td>中等偏上</td></tr></tbody></table><hr><h2 id="🔚-十、一句话总结" tabindex="-1"><a class="header-anchor" href="#🔚-十、一句话总结"><span>🔚 十、一句话总结</span></a></h2><blockquote><p><strong>希尔排序 = 插排 + 分组，借助“gap”快速缩小逆序对，是插入排序的进阶优化版本，适用于中小规模排序场景。</strong></p></blockquote>`,64)]))}const o=t(r,[["render",n]]),d=JSON.parse('{"path":"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html","title":"leetcode sort 排序-06-shellSort 希尔排序入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode sort 排序-06-shellSort 希尔排序入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","sort","sf"],"published":true,"description":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode sort 排序-06-shellSort 希尔排序入门介绍"}],["meta",{"property":"og:description","content":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"sort"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode sort 排序-06-shellSort 希尔排序入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-06-shell-sort-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-00-overview-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-00-排序算法汇总</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-01-bubble-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-01-bubble sort 冒泡排序算法详解</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-02-quick-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-02-QuickSort 快速排序到底快在哪里？</a></p>","autoDesc":true}');export{o as comp,d as data};
