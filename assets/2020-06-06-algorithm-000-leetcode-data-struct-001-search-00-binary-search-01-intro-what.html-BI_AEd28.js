import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-BdKLGVT_.js";const h={};function l(e,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="二分查找算法" tabindex="-1"><a class="header-anchor" href="#二分查找算法"><span>二分查找算法</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组密切相关的二分查找算法。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>二分查找算法需要拆分下面几个部分：</p><ol><li><p>入门介绍</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><h1 id="入门介绍" tabindex="-1"><a class="header-anchor" href="#入门介绍"><span>入门介绍</span></a></h1><p>二分查找法（Binary Search）是算法中非常经典且高效的一种查找方法，适用于<strong>有序集合</strong>。</p><p>下面是对它的<strong>详细介绍、各种变体、实战技巧与常见坑点</strong>，适合用于 LeetCode 刷题和算法面试准备。</p><h2 id="✅-一、二分查找法是什么" tabindex="-1"><a class="header-anchor" href="#✅-一、二分查找法是什么"><span>✅ 一、二分查找法是什么？</span></a></h2><p><strong>二分查找</strong>是一种在<strong>有序数组中查找目标值</strong>的算法，每次将搜索区间<strong>折半</strong>，从而大大减少搜索范围，时间复杂度为 <strong>O(log n)</strong>。</p><h3 id="原理简述" tabindex="-1"><a class="header-anchor" href="#原理简述"><span>原理简述：</span></a></h3><ul><li><p>给定一个有序数组 <code>nums</code> 和一个目标值 <code>target</code>。</p></li><li><p>每次取中间值 <code>mid</code>：</p><ul><li>如果 <code>nums[mid] == target</code>，返回 <code>mid</code>。</li><li>如果 <code>nums[mid] &lt; target</code>，说明目标在右侧，左边界变为 <code>mid + 1</code>。</li><li>如果 <code>nums[mid] &gt; target</code>，目标在左侧，右边界变为 <code>mid - 1</code>。</li></ul></li></ul><hr><h2 id="🧠-二、标准模板代码-迭代版本" tabindex="-1"><a class="header-anchor" href="#🧠-二、标准模板代码-迭代版本"><span>🧠 二、标准模板代码（迭代版本）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> binarySearch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 注意：right 是闭区间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right) {               </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 区间是 [left, right]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 防止整型溢出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nums[mid] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nums[mid] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 排除 mid</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 排除 mid</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 未找到</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🛠-三、二分查找的变种-边界查找" tabindex="-1"><a class="header-anchor" href="#🛠-三、二分查找的变种-边界查找"><span>🛠 三、二分查找的变种（边界查找）</span></a></h2><p>在很多实战题中，我们不止要找是否存在某个数，还要找它的<strong>位置范围</strong>，比如第一个/最后一个等于某值的下标，这时候就要用下面这些变体：</p><hr><h3 id="_1️⃣-查找左边界-第一个等于-target-的位置" tabindex="-1"><a class="header-anchor" href="#_1️⃣-查找左边界-第一个等于-target-的位置"><span>1️⃣ 查找左边界（第一个等于 target 的位置）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> leftBound</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nums[mid] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// nums[mid] &gt;= target</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // left 是最小的满足 nums[left] &gt;= target 的位置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[left] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2️⃣-查找右边界-最后一个等于-target-的位置" tabindex="-1"><a class="header-anchor" href="#_2️⃣-查找右边界-最后一个等于-target-的位置"><span>2️⃣ 查找右边界（最后一个等于 target 的位置）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rightBound</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> left) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nums[mid] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// nums[mid] &gt; target</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mid </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // right 是最大的满足 nums[right] &lt;= target 的位置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[right] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧩-四、适用场景总结" tabindex="-1"><a class="header-anchor" href="#🧩-四、适用场景总结"><span>🧩 四、适用场景总结</span></a></h2><table><thead><tr><th>场景</th><th>是否适用二分查找？</th></tr></thead><tbody><tr><td>数组/区间是<strong>有序</strong>的</td><td>✅</td></tr><tr><td>元素存在重复值（找边界）</td><td>✅</td></tr><tr><td>要找某个<strong>最小/最大满足条件的值</strong></td><td>✅（典型二分答案）</td></tr><tr><td>无序数组、链表结构</td><td>❌（不适用）</td></tr></tbody></table><h2 id="💡-五、复杂度" tabindex="-1"><a class="header-anchor" href="#💡-五、复杂度"><span>💡 五、复杂度</span></a></h2><table><thead><tr><th>类型</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>迭代式二分查找</td><td><code>O(log n)</code></td><td><code>O(1)</code></td></tr><tr><td>递归式二分查找</td><td><code>O(log n)</code></td><td><code>O(log n)</code></td></tr><tr><td>二分查找 + 复杂操作（如前缀和、模拟）</td><td><code>O(log n * 每步复杂度)</code></td><td>依具体场景</td></tr></tbody></table><h1 id="二分查找实际有哪些应用场景-可以解决哪些实际的问题" tabindex="-1"><a class="header-anchor" href="#二分查找实际有哪些应用场景-可以解决哪些实际的问题"><span>二分查找实际有哪些应用场景？可以解决哪些实际的问题</span></a></h1><p>很多人学了二分查找只会套模板、找值，却没意识到它在<strong>实际应用中非常广泛且高效</strong>，不仅能查找“值”，还能用来<strong>优化决策、搜索答案、定位边界、减少时间复杂度</strong>。</p><hr><h2 id="✅-一、二分查找的本质-缩小区间、逼近答案" tabindex="-1"><a class="header-anchor" href="#✅-一、二分查找的本质-缩小区间、逼近答案"><span>✅ 一、二分查找的本质：<strong>缩小区间、逼近答案</strong></span></a></h2><p>它的核心思想是：</p><blockquote><p><strong>每次排除一半可能性，快速逼近目标或满足条件的最优解。</strong></p></blockquote><p>所以，<strong>不只是找某个值！</strong><br> 还包括：</p><ul><li>找某个值是否存在</li><li>找第一个/最后一个满足条件的位置</li><li>在一个值域范围内，找最小/最大可行解（“二分答案”）</li></ul><hr><h2 id="🧭-二、二分查找的典型应用场景" tabindex="-1"><a class="header-anchor" href="#🧭-二、二分查找的典型应用场景"><span>🧭 二、二分查找的典型应用场景</span></a></h2><h3 id="_1️⃣-✅-查找元素是否存在-基础场景" tabindex="-1"><a class="header-anchor" href="#_1️⃣-✅-查找元素是否存在-基础场景"><span>1️⃣ ✅ 查找元素是否存在（基础场景）</span></a></h3><ul><li><p>在有序数组中查找某个值</p></li><li><p>例子：</p><ul><li>LeetCode 704. 二分查找</li><li>搜索插入位置（35）</li></ul></li></ul><hr><h3 id="_2️⃣-✅-查找某个值的-左边界-或-右边界" tabindex="-1"><a class="header-anchor" href="#_2️⃣-✅-查找某个值的-左边界-或-右边界"><span>2️⃣ ✅ 查找某个值的“左边界”或“右边界”</span></a></h3><p>适合处理<strong>重复元素/边界条件</strong>的情况：</p><ul><li><p>查找某个元素第一次/最后一次出现的位置</p></li><li><p>判断一个值是否是数组中第一个大于/小于目标的数</p></li><li><p>例子：</p><ul><li>LeetCode 34. 查找元素的第一个和最后一个位置</li><li>LeetCode 852. 山脉数组的峰值索引</li></ul></li></ul><hr><h3 id="_3️⃣-✅-二分答案-问题-重点" tabindex="-1"><a class="header-anchor" href="#_3️⃣-✅-二分答案-问题-重点"><span>3️⃣ ✅ “二分答案”问题（重点）</span></a></h3><p>这是二分查找在实际应用中最有价值的一类场景！</p><h3 id="📌-特征" tabindex="-1"><a class="header-anchor" href="#📌-特征"><span>📌 特征：</span></a></h3><blockquote><p>在某个值的范围内，寻找<strong>最小/最大满足条件的值</strong></p></blockquote><p><strong>例子场景：</strong></p><ul><li>最快的速度、最小的开销、最多可以安排多少任务</li><li>最少的天数完成目标，最大容量满足条件</li><li>通常伴随一个 <code>check(x)</code> 判断函数</li></ul><hr><h4 id="💡-常见-二分答案-题目类型" tabindex="-1"><a class="header-anchor" href="#💡-常见-二分答案-题目类型"><span>💡 常见“二分答案”题目类型：</span></a></h4><table><thead><tr><th>问题类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>速度最小值</td><td>珂珂吃香蕉</td><td><a href="https://leetcode.cn/problems/koko-eating-bananas" target="_blank" rel="noopener noreferrer">875. 爱吃香蕉的珂珂</a></td></tr><tr><td>分配最小值</td><td>最少完成任务所需的最大时间</td><td><a href="https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days" target="_blank" rel="noopener noreferrer">1011. 在D天内送达包裹的能力</a></td></tr></tbody></table><h3 id="_4️⃣-✅-旋转数组、变形数组的搜索" tabindex="-1"><a class="header-anchor" href="#_4️⃣-✅-旋转数组、变形数组的搜索"><span>4️⃣ ✅ 旋转数组、变形数组的搜索</span></a></h3><ul><li><p>当数组不再严格递增，但仍保有一定规律，可以通过<strong>二分定位区间</strong></p></li><li><p>例子：</p><ul><li>LeetCode 33. 搜索旋转排序数组</li><li>LeetCode 153/154. 寻找旋转排序数组中的最小值</li></ul></li></ul><hr><h3 id="_5️⃣-✅-数学与实用问题中的二分查找" tabindex="-1"><a class="header-anchor" href="#_5️⃣-✅-数学与实用问题中的二分查找"><span>5️⃣ ✅ 数学与实用问题中的二分查找</span></a></h3><p>这些不是数组，而是在<strong>值的范围/结果上</strong>进行二分：</p><table><thead><tr><th>实际场景</th><th>解释</th></tr></thead><tbody><tr><td>开根号</td><td>二分逼近开根号结果（如精度为 1e-6）</td></tr><tr><td>精确计算 PI、平方根</td><td>牛顿迭代/二分逼近</td></tr><tr><td>分配资源</td><td>最小化最大负载（如服务器分配）</td></tr><tr><td>金融问题</td><td>利率估算、最小成本搜索</td></tr><tr><td>游戏设计</td><td>找到某参数下能通过某关的最小难度</td></tr></tbody></table><h2 id="🔁-总结-二分查找能解决哪些实际问题" tabindex="-1"><a class="header-anchor" href="#🔁-总结-二分查找能解决哪些实际问题"><span>🔁 总结：二分查找能解决哪些实际问题？</span></a></h2><table><thead><tr><th>类型</th><th>能解决的问题</th><th>举例</th></tr></thead><tbody><tr><td>经典查找</td><td>元素是否存在</td><td>查找、插入、定位</td></tr><tr><td>边界查找</td><td>第一个 ≥ x、最后一个 ≤ x</td><td>查找范围、计数</td></tr><tr><td>值域答案查找</td><td>最小值、最大值、最早/最晚可行解</td><td>最短时间、最大最小容量等</td></tr><tr><td>函数极值</td><td>峰值位置</td><td>山峰数组、局部最优</td></tr><tr><td>实际建模</td><td>开方、资源分配、决策优化</td><td>根号、快递分区、服务器调度</td></tr></tbody></table><hr><h2 id="🧠-一句话总结" tabindex="-1"><a class="header-anchor" href="#🧠-一句话总结"><span>🧠 一句话总结：</span></a></h2><blockquote><p>二分查找不只是“查找一个数”，更是解决“范围内最优值”的一大利器，尤其适合有单调性质、上下界、或目标决策值的问题。</p></blockquote><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有帮助，如果有其他想法的话，也可以评论区和大家分享哦。</p><p>各位极客的点赞收藏转发，是老马持续写作的最大动力！</p><p>下一节我们将开始进行相关力扣专题的练习，感兴趣的小伙伴可以关注一波，精彩内容，不容错过。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li>顺序查找</li></ul><p><a href="https://www.cnblogs.com/yw09041432/p/5908444.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yw09041432/p/5908444.html</a></p><p><a href="https://www.jb51.net/article/53863.htm" target="_blank" rel="noopener noreferrer">https://www.jb51.net/article/53863.htm</a></p><p><a href="https://blog.csdn.net/jiandanokok/article/details/50517837" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/jiandanokok/article/details/50517837</a></p><ul><li>二分查找</li></ul><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">二分搜索算法</a></p><p><a href="https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html</a></p>`,79)]))}const r=s(h,[["render",l]]),d=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html","title":"二分查找法？binary-search-01-基本概念介绍","lang":"zh-CN","frontmatter":{"title":"二分查找法？binary-search-01-基本概念介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","search","binary-search"],"published":true,"description":"二分查找算法 大家好，我是老马。 今天我们一起来学习一下数组密切相关的二分查找算法。 主要知识 二分查找算法需要拆分下面几个部分： 入门介绍 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 入门介绍 二分查找法（Binary Search）是算法中非常经典且高效的一种查找方法，适用于有序集合。 下面是对它的详细介绍、各种变体、实战技巧与...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"二分查找法？binary-search-01-基本概念介绍"}],["meta",{"property":"og:description","content":"二分查找算法 大家好，我是老马。 今天我们一起来学习一下数组密切相关的二分查找算法。 主要知识 二分查找算法需要拆分下面几个部分： 入门介绍 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 入门介绍 二分查找法（Binary Search）是算法中非常经典且高效的一种查找方法，适用于有序集合。 下面是对它的详细介绍、各种变体、实战技巧与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T07:11:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"search"}],["meta",{"property":"article:tag","content":"binary-search"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T07:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分查找法？binary-search-01-基本概念介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T07:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755501103000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":6.05,"words":1815},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-binary-search-01-intro-what.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组密切相关的二分查找算法。</p>\\n<h2>主要知识</h2>\\n<p>二分查找算法需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>入门介绍</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<h1>入门介绍</h1>\\n<p>二分查找法（Binary Search）是算法中非常经典且高效的一种查找方法，适用于<strong>有序集合</strong>。</p>\\n<p>下面是对它的<strong>详细介绍、各种变体、实战技巧与常见坑点</strong>，适合用于 LeetCode 刷题和算法面试准备。</p>","autoDesc":true}');export{r as comp,d as data};
