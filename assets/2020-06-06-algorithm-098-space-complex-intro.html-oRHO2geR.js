import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as l,o as d}from"./app-ClTxJrej.js";const i={};function n(t,e){return d(),c("div",null,e[0]||(e[0]=[l('<h1 id="算法中的空间复杂度" tabindex="-1"><a class="header-anchor" href="#算法中的空间复杂度"><span>算法中的空间复杂度</span></a></h1><p>好的，空间复杂度（Space Complexity）是算法分析中与时间复杂度同等重要的概念，它衡量的是算法在执行过程中所需额外存储空间（除输入数据本身占据的空间外）随输入数据规模（通常用 <code>n</code> 表示）增长的幅度。理解空间复杂度对于评估算法的内存消耗、优化资源利用以及设计高效系统至关重要。</p><hr><h2 id="_1-核心概念-什么是空间复杂度" tabindex="-1"><a class="header-anchor" href="#_1-核心概念-什么是空间复杂度"><span>1. 核心概念：什么是空间复杂度？</span></a></h2><ul><li>定义： 空间复杂度衡量算法在运行期间临时占用存储空间大小的变化趋势。它关注的是算法为了完成计算任务，除了存储原始输入数据之外，还需要申请多少额外的内存空间（例如，变量、数据结构、函数调用栈等）。</li><li>目的： <ul><li>评估内存消耗： 了解算法需要多少额外内存，尤其在处理大规模数据或内存受限环境（如嵌入式系统、移动设备）时至关重要。</li><li>比较算法优劣： 在解决同一问题时，不同算法可能有不同的内存需求。空间复杂度提供了一个理论框架来比较它们，帮助我们选择内存效率更高的算法。</li><li>预测资源需求： 预估当输入规模 <code>n</code> 增大时（例如从 1GB 数据到 1TB 数据），算法所需内存会如何增长。</li><li>识别内存瓶颈： 找出算法中消耗内存最多的部分，指导优化方向。</li></ul></li><li>核心思想： 忽略常数因子和低阶项，关注最高阶项。 与时间复杂度一样，当 <code>n</code> 非常大时，最高阶项对空间需求增长的影响起主导作用。</li><li>表示法： 大 O 表示法 (Big O Notation)。空间复杂度通常表示为 <code>S(n) = O(f(n))</code>，其中 <code>f(n)</code> 是一个描述空间增长率的函数（如 <code>1</code>, <code>n</code>, <code>n²</code>, <code>log n</code>）。<code>O(f(n))</code> 表示算法所需的额外空间增长率不会超过 <code>f(n)</code> 的增长率（乘以某个常数因子）。</li></ul><h2 id="_2-空间复杂度的组成" tabindex="-1"><a class="header-anchor" href="#_2-空间复杂度的组成"><span>2. 空间复杂度的组成</span></a></h2><p>算法运行期间占用的空间主要包括：</p><ol><li>指令空间 (Instruction Space)： 存储编译后的程序指令（代码本身）所需的空间。这部分通常是固定的，与输入规模 <code>n</code> 无关，因此常被忽略或归入常数项 <code>O(1)</code>。</li><li>数据空间 (Data Space)： <ul><li>常量空间 (Constant Space)： 存储固定数量的简单变量（如基本数据类型 <code>int</code>, <code>float</code>, <code>bool</code>, <code>char</code> 的变量、指针等）。这部分空间大小与 <code>n</code> 无关。</li><li>结构空间 (Structure Space)： 存储算法运行过程中动态创建的数据结构（如数组、链表、栈、队列、树、图、哈希表等）所需的空间。这部分空间的大小通常与输入规模 <code>n</code> 或其某些特征（如边的数量 <code>E</code>）直接相关，是空间复杂度分析的重点。</li></ul></li><li>栈空间 (Stack Space) / 环境栈空间： <ul><li>存储函数调用信息（返回地址、参数、局部变量等）所需的空间。</li><li>递归算法会显著影响栈空间。递归深度（即嵌套调用函数的层数）决定了栈空间的大小。例如，深度为 <code>d</code> 的递归可能需要 <code>O(d)</code> 的栈空间。</li><li>非递归算法（或递归深度固定的算法）的栈空间需求通常是常数 <code>O(1)</code>。</li></ul></li></ol><p>重点分析对象： 空间复杂度分析主要关注 数据空间 和 栈空间 中那些与输入规模 <code>n</code> 相关的部分。</p><h2 id="_3-常见的空间复杂度等级-从低到高" tabindex="-1"><a class="header-anchor" href="#_3-常见的空间复杂度等级-从低到高"><span>3. 常见的空间复杂度等级（从低到高）</span></a></h2><ol><li><p>O(1) - 常数空间 (Constant Space):</p><ul><li>含义： 算法运行所需的额外空间大小不随输入规模 <code>n</code> 的变化而变化，是一个固定的常数。</li><li>特点： 算法通常只使用固定数量的变量，或者使用的数据结构大小是固定的（与 <code>n</code> 无关）。原地算法 (In-place Algorithm) 通常具有 O(1) 的空间复杂度。</li><li>例子： <ul><li>使用有限个变量交换两个数。</li><li>在数组上遍历查找最大值/最小值（只用了几个临时变量）。</li><li>冒泡排序、选择排序、插入排序（通常只使用常数级别的额外空间进行交换或比较）。</li><li>迭代计算斐波那契数列（只用 <code>prev</code>, <code>curr</code>, <code>next</code> 三个变量）。</li></ul></li><li>图形： 一条水平直线。</li></ul></li><li><p>O(log n) - 对数空间 (Logarithmic Space):</p><ul><li>含义： 算法运行所需的额外空间大小随输入规模 <code>n</code> 的增长而对数增长（通常底数为 2）。</li><li>特点： 常见于递归深度与 <code>log n</code> 相关的算法，或者使用了空间复杂度为 <code>O(log n)</code> 的数据结构（如平衡二叉搜索树的递归操作栈）。</li><li>例子： <ul><li>二分查找（递归实现）的栈空间：递归深度是 <code>O(log₂ n)</code>。</li><li>快速排序的最优栈空间：在理想的分割（每次划分均匀）下，递归深度是 <code>O(log n)</code>，栈空间也是 <code>O(log n)</code>。</li><li>树的遍历（递归实现）：平衡树（如 AVL 树、红黑树）的深度是 <code>O(log n)</code>，递归遍历所需的栈空间也是 <code>O(log n)</code>。</li></ul></li><li>图形： 一条非常平缓上升的曲线。</li></ul></li><li><p>O(n) - 线性空间 (Linear Space):</p><ul><li>含义： 算法运行所需的额外空间大小与输入规模 <code>n</code> 成正比。如果 <code>n</code> 翻倍，所需空间也大致翻倍。</li><li>特点： 算法通常需要创建与输入规模 <code>n</code> 线性相关的数据结构。</li><li>例子： <ul><li>创建一个大小为 <code>n</code> 的新数组来存储结果（如归并排序中的合并操作）。</li><li>将长度为 <code>n</code> 的链表存入数组（数组大小 <code>O(n)</code>）。</li><li>广度优先搜索（BFS）的队列空间（在最坏情况下可能需要存储所有节点 <code>O(V) ≈ O(n)</code>）。</li><li>深度优先搜索（DFS）的递归栈空间（在树形结构或线性结构最坏情况下 <code>O(V) ≈ O(n)</code>）。</li><li>计数排序（需要大小为 <code>k</code> (数据范围) 的计数数组，如果 <code>k</code> 是常数则 <code>O(1)</code>，如果 <code>k</code> 与 <code>n</code> 相关则 <code>O(n)</code> 或 <code>O(k)</code>）。</li></ul></li><li>图形： 一条斜率为正的直线。</li></ul></li><li><p>O(n log n) - 线性对数空间 (Linearithmic Space):</p><ul><li>含义： 所需空间比 <code>O(n)</code> 稍大，但比 <code>O(n²)</code> 小得多。</li><li>特点： 相对少见，有时出现在递归树结构复杂或需要额外空间存储中间结果的算法中。</li><li>例子： <ul><li>一些高效的排序算法在非原地实现时的空间复杂度（如堆排序通常 <code>O(1)</code>，但某些实现可能达到 <code>O(n log n)</code> 如果存储堆结构有额外开销）。</li><li>处理树结构问题时，如果需要在每个节点存储与其子树大小相关的信息（子树大小本身是 <code>O(n)</code>，但树有 <code>O(n)</code> 个节点）。</li></ul></li><li>图形： 一条比 <code>O(n)</code> 更陡峭的曲线，但仍远低于 <code>O(n²)</code>。</li></ul></li><li><p>O(n²) - 平方空间 (Quadratic Space):</p><ul><li>含义： 算法运行所需的额外空间大小与输入规模 <code>n</code> 的平方成正比。</li><li>特点： 常见于需要创建二维数组（矩阵）且其大小与 <code>n</code> 相关的算法。</li><li>例子： <ul><li>使用邻接矩阵存储图（矩阵大小为 <code>V x V</code>，即 <code>O(V²) ≈ O(n²)</code>）。</li><li>动态规划中需要 <code>n x n</code> 维度的 <code>dp</code> 表（如计算最长公共子序列 LCS）。</li><li>存储所有点对之间的距离（需要 <code>O(n²)</code> 的空间）。</li><li>二维数组的转置（如果创建新数组，大小 <code>O(n²)</code>）。</li></ul></li><li>图形： 一条抛物线。</li></ul></li><li><p>O(nᶜ) - 多项式空间 (Polynomial Space) (c &gt; 2):</p><ul><li>含义： 所需空间是输入规模 <code>n</code> 的某个常数 <code>c</code> 次幂（c &gt; 2）。例如 <code>O(n³)</code>, <code>O(n⁴)</code>。</li><li>特点： 空间消耗巨大，通常只适用于小规模问题。</li><li>例子： <ul><li>使用三维 <code>dp</code> 数组解决某些复杂问题（如 <code>dp[i][j][k]</code>）。</li><li>存储所有可能的 <code>k</code> 元组（当 <code>k</code> 是常数时是 <code>O(nᵏ)</code>）。</li></ul></li><li>图形： 比 <code>O(n²)</code> 更陡峭的曲线。</li></ul></li><li><p>O(2ⁿ) / O(cⁿ) - 指数空间 (Exponential Space):</p><ul><li>含义： 所需空间随输入规模 <code>n</code> 的增长呈指数级增长。</li><li>特点： 空间需求爆炸式增长，通常出现在需要存储所有可能子集、排列、组合或状态空间的算法中。这类算法在实际中往往不可行，除非 <code>n</code> 非常小。</li><li>例子： <ul><li>暴力解决旅行商问题（TSP）时存储所有可能的路径（<code>O(n!)</code>，比指数还高）。</li><li>动态规划解决某些状态压缩问题，但状态空间本身是指数级的（如精确覆盖问题）。</li><li>穷举所有长度为 <code>n</code> 的二进制字符串（需要存储 <code>2ⁿ</code> 个字符串）。</li></ul></li><li>图形： 一条急剧上升的曲线。</li></ul></li><li><p>O(n!) - 阶乘空间 (Factorial Space):</p><ul><li>含义： 所需空间随输入规模 <code>n</code> 的增长呈阶乘级增长。</li><li>特点： 空间消耗最大的一类，几乎只存在于理论分析或极小规模问题中。</li><li>例子： <ul><li>存储集合的所有排列（<code>n!</code> 个）。</li><li>暴力解决某些组合优化问题。</li></ul></li><li>图形： 一条比指数时间更陡峭的曲线。</li></ul></li></ol><h2 id="_4-如何分析算法的空间复杂度" tabindex="-1"><a class="header-anchor" href="#_4-如何分析算法的空间复杂度"><span>4. 如何分析算法的空间复杂度？</span></a></h2><p>分析步骤与时间复杂度类似，但关注点是额外空间：</p><ol><li>定义 <code>n</code>： 明确输入规模 <code>n</code> 指什么（数组长度？节点数？数值位数？）。</li><li>识别额外空间消耗源： <ul><li>显式数据结构： 算法中显式创建的数组、链表、栈、队列、哈希表、树、图等数据结构的大小如何依赖于 <code>n</code>？(例如：创建了一个长度为 <code>n</code> 的数组 -&gt; <code>O(n)</code>；创建了一个 <code>n x n</code> 的矩阵 -&gt; <code>O(n²)</code>）。</li><li>递归调用栈： 如果是递归算法，递归的最大深度是多少？深度如何依赖于 <code>n</code>？(例如：二分查找递归深度 <code>O(log n)</code>；链表递归深度 <code>O(n)</code>）。</li><li>辅助变量： 算法中使用的简单变量（<code>int</code>, <code>float</code>, <code>pointer</code> 等）通常是 <code>O(1)</code>，除非数量依赖于 <code>n</code>（罕见）。</li><li>输入/输出空间： 通常不计入空间复杂度！空间复杂度关注的是额外空间，即算法运行过程中临时申请的、不包括存储原始输入和最终输出结果的空间。但也有观点认为如果输出规模巨大（如生成所有排列），可能需要考虑。约定俗成，分析时通常不包括输入和输出。</li></ul></li><li>计算 <code>S(n)</code>： 量化上述空间源的总大小。通常取主要消耗源的最大值。</li><li>简化到大O： 忽略常数因子、系数、低阶项，保留最高阶项。</li></ol><h3 id="分析示例" tabindex="-1"><a class="header-anchor" href="#分析示例"><span>分析示例</span></a></h3><ol><li><p>归并排序 (非原地)：</p><ul><li>需要额外的临时数组来合并两个有序子数组。这个临时数组的大小最大为 <code>n</code>。</li><li>递归深度为 <code>O(log n)</code>，但每一层递归使用的临时数组空间是独立的吗？注意： 在标准的递归归并排序实现中，虽然递归深度是 <code>O(log n)</code>，但每一层递归在合并时都需要 <code>O(n)</code> 的临时空间。关键在于，这些递归调用是顺序执行的，而不是同时活跃的。当一个递归调用完成合并并返回后，它的临时空间就被释放了，然后才进行下一个递归调用。因此，任意时刻只需要一个最大为 <code>O(n)</code> 的临时数组（在递归树的某一层合并时使用），以及递归栈 <code>O(log n)</code>。</li><li>空间复杂度： <code>O(n)</code> (主要来自合并所需的临时数组) + <code>O(log n)</code> (递归栈) = <code>O(n)</code> (因为 <code>n</code> 比 <code>log n</code> 增长快得多)。</li></ul></li><li><p>快速排序 (递归)：</p><ul><li>通常是原地排序（<code>O(1)</code> 额外数据空间）。</li><li>递归调用栈空间：最坏情况（输入已排序/逆序）下递归深度为 <code>O(n)</code>；最好/平均情况下递归深度为 <code>O(log n)</code>。</li><li>空间复杂度： <ul><li>最坏情况：<code>O(n)</code> (栈空间)</li><li>平均情况：<code>O(log n)</code> (栈空间)</li></ul></li></ul></li><li><p>深度优先搜索 (DFS) - 递归实现：</p><ul><li>需要标记节点是否访问过的数组 <code>visited</code>，大小为 <code>O(V) ≈ O(n)</code>。</li><li>递归调用栈空间：最坏情况（图是一条链）下深度为 <code>O(V) ≈ O(n)</code>。</li><li>空间复杂度： <code>O(n)</code> (<code>visited</code>) + <code>O(n)</code> (栈) = <code>O(n)</code>。</li></ul></li><li><p>广度优先搜索 (BFS)：</p><ul><li>需要标记节点是否访问过的数组 <code>visited</code>，大小为 <code>O(V) ≈ O(n)</code>。</li><li>需要一个队列 <code>queue</code>：最坏情况下需要存储所有节点 <code>O(V) ≈ O(n)</code>。</li><li>空间复杂度： <code>O(n)</code> (<code>visited</code>) + <code>O(n)</code> (<code>queue</code>) = <code>O(n)</code>。</li></ul></li><li><p>动态规划 - 斐波那契数列 (迭代)：</p><ul><li>如果使用一个大小为 <code>n+1</code> 的数组 <code>dp</code> 存储 <code>F(0)</code> 到 <code>F(n)</code> -&gt; <code>O(n)</code>。</li><li>如果只使用三个变量 (<code>prev</code>, <code>curr</code>, <code>next</code>) 滚动更新 -&gt; <code>O(1)</code>。</li></ul></li><li><p>动态规划 - 最长公共子序列 (LCS)：</p><ul><li>创建一个 <code>(m+1) x (n+1)</code> 的二维 <code>dp</code> 表（<code>m</code>, <code>n</code> 是两个输入序列的长度）-&gt; <code>O(m*n)</code>。</li></ul></li></ol><h2 id="_5-关键点与注意事项" tabindex="-1"><a class="header-anchor" href="#_5-关键点与注意事项"><span>5. 关键点与注意事项</span></a></h2><ul><li>关注额外空间： 空间复杂度分析的是算法临时申请的、不包括输入数据本身和最终输出结果的额外空间。输入和输出空间是问题固有的，与算法设计无关。</li><li>原地算法 (In-place Algorithm)： 指空间复杂度为 <code>O(1)</code> 的算法。它们通常通过直接在输入数据上进行修改、交换或覆盖来完成计算，几乎不需要额外的存储空间。冒泡、选择、插入排序通常是原地算法；堆排序是原地算法 (<code>O(1)</code> 数据空间 + <code>O(1)</code> 栈空间（迭代实现）)。</li><li>时间与空间的权衡 (Time-Space Tradeoff)： 这是算法设计的核心原则之一。通常可以通过消耗更多的内存空间来换取运行时间的减少，反之亦然。 例如： <ul><li>哈希表：用 <code>O(n)</code> 的空间换取 <code>O(1)</code> 的平均查找时间（相比数组的 <code>O(n)</code> 查找）。</li><li>动态规划：用 <code>O(n²)</code> 的空间存储子问题解，避免重复计算，将指数时间 (<code>O(2ⁿ)</code>) 优化到多项式时间 (<code>O(n²)</code>)。</li><li>归并排序：用 <code>O(n)</code> 的额外空间换取稳定的 <code>O(n log n)</code> 时间。</li><li>缓存 (Memoization/Caching)：存储计算结果，用空间换时间。</li></ul></li><li>递归 vs 迭代： 递归代码简洁，但可能带来显著的栈空间开销 (<code>O(depth)</code>)。迭代实现通常栈空间开销为 <code>O(1)</code>，但代码可能更复杂。深度很大的递归可能导致栈溢出 (Stack Overflow)。</li><li>数据结构的选择： 不同数据结构对同一操作的空间开销不同（如邻接表 vs 邻接矩阵存储图）。</li><li>共享空间： 如果多个数据结构或变量可以共享或复用同一块内存区域，则不应重复计算其空间。</li><li>垃圾回收 (Garbage Collection)： 在托管语言（如 Java, Python, C#）中，分析空间复杂度时通常不考虑垃圾回收机制本身的开销，只关注算法逻辑上申请的空间。但要意识到 GC 的存在会影响实际内存使用和性能。</li><li>实际影响： 理解空间复杂度对于防止内存溢出 (Out Of Memory, OOM) 错误至关重要。一个 <code>O(n)</code> 的算法处理 1GB 数据可能只需 1GB 额外内存，而一个 <code>O(n²)</code> 的算法处理同样的数据可能需要 1EB (Exabyte) 内存，这在当前硬件上完全不可能。</li></ul><h2 id="_6-与时间复杂度的关系" tabindex="-1"><a class="header-anchor" href="#_6-与时间复杂度的关系"><span>6. 与时间复杂度的关系</span></a></h2><ul><li>独立但相关： 时间复杂度和空间复杂度是衡量算法效率的两个独立但密切相关的维度。</li><li>并非绝对正相关： 一个时间复杂度低的算法不一定空间复杂度也低（如归并排序 <code>O(n log n)</code> 时间但 <code>O(n)</code> 空间），反之亦然（如某些空间复杂度 <code>O(1)</code> 的排序算法时间可能是 <code>O(n²)</code>）。</li><li>共同决定效率： 评价一个算法的优劣需要同时考虑时间和空间复杂度，根据实际应用场景（是时间敏感还是空间敏感）进行权衡选择。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>空间复杂度是评估算法内存资源消耗的关键指标，使用大 O 表示法描述算法所需额外存储空间随输入规模增长的渐进趋势。</p><p>掌握常见空间复杂度等级（<code>O(1)</code>, <code>O(log n)</code>, <code>O(n)</code>, <code>O(n log n)</code>, <code>O(n²)</code>, <code>O(2ⁿ)</code>, <code>O(n!)</code>）及其含义和典型例子，结合分析技巧（关注数据结构大小、递归深度），能够帮助我们：</p><ol><li>选择内存高效的算法。</li><li>预测算法处理大规模数据时的内存需求。</li><li>避免内存溢出错误。</li><li>理解并应用时间-空间权衡原则进行算法优化。</li></ol><p>与时间复杂度分析相辅相成，空间复杂度分析是设计和实现高效、可靠软件系统不可或缺的技能。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>',26)]))}const r=o(i,[["render",n]]),O=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-098-space-complex-intro.html","title":"【leetcode】力扣刷题之空间复杂度介绍 Space Complexity","lang":"zh-CN","frontmatter":{"title":"【leetcode】力扣刷题之空间复杂度介绍 Space Complexity","categories":["Algorithm"],"tags":["algorithm","tips","leetcode"],"published":true,"description":"算法中的空间复杂度 好的，空间复杂度（Space Complexity）是算法分析中与时间复杂度同等重要的概念，它衡量的是算法在执行过程中所需额外存储空间（除输入数据本身占据的空间外）随输入数据规模（通常用 n 表示）增长的幅度。理解空间复杂度对于评估算法的内存消耗、优化资源利用以及设计高效系统至关重要。 1. 核心概念：什么是空间复杂度？ 定义： 空...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-098-space-complex-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"【leetcode】力扣刷题之空间复杂度介绍 Space Complexity"}],["meta",{"property":"og:description","content":"算法中的空间复杂度 好的，空间复杂度（Space Complexity）是算法分析中与时间复杂度同等重要的概念，它衡量的是算法在执行过程中所需额外存储空间（除输入数据本身占据的空间外）随输入数据规模（通常用 n 表示）增长的幅度。理解空间复杂度对于评估算法的内存消耗、优化资源利用以及设计高效系统至关重要。 1. 核心概念：什么是空间复杂度？ 定义： 空..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T06:41:49.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"tips"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:modified_time","content":"2025-08-18T06:41:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【leetcode】力扣刷题之空间复杂度介绍 Space Complexity\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-18T06:41:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755499309000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":14.42,"words":4325},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-098-space-complex-intro.md","localizedDate":"2025年8月18日","excerpt":"\\n<p>好的，空间复杂度（Space Complexity）是算法分析中与时间复杂度同等重要的概念，它衡量的是算法在执行过程中所需额外存储空间（除输入数据本身占据的空间外）随输入数据规模（通常用 <code>n</code> 表示）增长的幅度。理解空间复杂度对于评估算法的内存消耗、优化资源利用以及设计高效系统至关重要。</p>\\n<hr>\\n<h2>1. 核心概念：什么是空间复杂度？</h2>\\n<ul>\\n<li>定义： 空间复杂度衡量算法在运行期间临时占用存储空间大小的变化趋势。它关注的是算法为了完成计算任务，除了存储原始输入数据之外，还需要申请多少额外的内存空间（例如，变量、数据结构、函数调用栈等）。</li>\\n<li>目的：\\n<ul>\\n<li>评估内存消耗： 了解算法需要多少额外内存，尤其在处理大规模数据或内存受限环境（如嵌入式系统、移动设备）时至关重要。</li>\\n<li>比较算法优劣： 在解决同一问题时，不同算法可能有不同的内存需求。空间复杂度提供了一个理论框架来比较它们，帮助我们选择内存效率更高的算法。</li>\\n<li>预测资源需求： 预估当输入规模 <code>n</code> 增大时（例如从 1GB 数据到 1TB 数据），算法所需内存会如何增长。</li>\\n<li>识别内存瓶颈： 找出算法中消耗内存最多的部分，指导优化方向。</li>\\n</ul>\\n</li>\\n<li>核心思想： 忽略常数因子和低阶项，关注最高阶项。 与时间复杂度一样，当 <code>n</code> 非常大时，最高阶项对空间需求增长的影响起主导作用。</li>\\n<li>表示法： 大 O 表示法 (Big O Notation)。空间复杂度通常表示为 <code>S(n) = O(f(n))</code>，其中 <code>f(n)</code> 是一个描述空间增长率的函数（如 <code>1</code>, <code>n</code>, <code>n²</code>, <code>log n</code>）。<code>O(f(n))</code> 表示算法所需的额外空间增长率不会超过 <code>f(n)</code> 的增长率（乘以某个常数因子）。</li>\\n</ul>","autoDesc":true}');export{r as comp,O as data};
