import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-DmgPoZ2x.js";const n={};function h(l,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="二分查找算法" tabindex="-1"><a class="header-anchor" href="#二分查找算法"><span>二分查找算法</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组密切相关的三分查找算法。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>三分查找算法需要拆分下面几个部分：</p><ol><li><p>入门介绍</p></li><li><p>题目练习（按照算法思想分类）-- 实际有哪些应用场景？可以解决哪些实际的问题</p></li><li><p>和已有知识的关系，比如对比二分查找</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><h1 id="三分查找介绍" tabindex="-1"><a class="header-anchor" href="#三分查找介绍"><span>三分查找介绍</span></a></h1><h2 id="🔍-什么是三分查找-ternary-search" tabindex="-1"><a class="header-anchor" href="#🔍-什么是三分查找-ternary-search"><span>🔍 什么是三分查找（Ternary Search）？</span></a></h2><p><strong>三分查找</strong>是一种基于分治思想的搜索算法，专门用于在<strong>单峰函数（unimodal function）或单调函数</strong>中查找极值（最大值或最小值）。</p><p>与<strong>二分查找</strong>不同的是：</p><ul><li>二分查找将区间分成 2 部分；</li><li>三分查找将区间分成 <strong>3 部分</strong>，每次排除 <strong>1/3 的区间</strong>，保留 <strong>2/3 的搜索空间</strong>。</li></ul><hr><h2 id="🧠-三分查找的适用条件" tabindex="-1"><a class="header-anchor" href="#🧠-三分查找的适用条件"><span>🧠 三分查找的适用条件</span></a></h2><p>要使用三分查找，<strong>必须满足以下条件之一</strong>：</p><h3 id="✅-场景一-一维单峰函数" tabindex="-1"><a class="header-anchor" href="#✅-场景一-一维单峰函数"><span>✅ 场景一：一维单峰函数</span></a></h3><ul><li><p>函数图像先递增后递减，存在一个极大值 <code>peak</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>     ▲</span></span>
<span class="line"><span>    ▲ ▲</span></span>
<span class="line"><span>   ▲   ▲</span></span>
<span class="line"><span>  ▲     ▲</span></span>
<span class="line"><span> ▲       ▲</span></span>
<span class="line"><span>▲         ▲</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>0 1 2 3 4 5 6<br> ↑ ↑<br> 左增 右减</p><h3 id="✅-场景二-一维单谷函数-先减后增" tabindex="-1"><a class="header-anchor" href="#✅-场景二-一维单谷函数-先减后增"><span>✅ 场景二：一维单谷函数（先减后增）</span></a></h3><ul><li>也可用三分查找来找最小值。</li></ul><h2 id="🧮-三分查找的原理" tabindex="-1"><a class="header-anchor" href="#🧮-三分查找的原理"><span>🧮 三分查找的原理</span></a></h2><p>假设我们要在区间 <code>[l, r]</code> 中找最大值：</p><h3 id="步骤如下" tabindex="-1"><a class="header-anchor" href="#步骤如下"><span>步骤如下：</span></a></h3><ol><li>取两个三等分点：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">m1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">m2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样划分为三段： <code>[l, m1]</code>, <code>[m1+1, m2-1]</code>, <code>[m2, r]</code></p><ol start="2"><li><p>比较 <code>f(m1)</code> 与 <code>f(m2)</code> 的值：</p><ul><li><p>若 <code>f(m1) &lt; f(m2)</code>，说明峰值一定在 <strong>[m1+1, r]</strong> 之间：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>若 <code>f(m1) &gt; f(m2)</code>，说明峰值一定在 <strong>[l, m2-1]</strong> 之间：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>若 <code>f(m1) == f(m2)</code>，可以任选保留 <code>[m1, m2]</code></p></li></ul></li><li><p>不断迭代，直到区间收缩到足够小（比如长度 ≤3），再暴力查找最大值。</p></li></ol><hr><h2 id="✅-三分查找的-java-模板" tabindex="-1"><a class="header-anchor" href="#✅-三分查找的-java-模板"><span>✅ 三分查找的 Java 模板</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ternarySearch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] arr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> m1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> m2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (arr[m1] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[m2]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 线性查找剩下的几个元素</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maxIdx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (arr[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[maxIdx]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            maxIdx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxIdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="对比二分查找" tabindex="-1"><a class="header-anchor" href="#对比二分查找"><span>对比二分查找</span></a></h1><h2 id="🆚-与二分查找的对比" tabindex="-1"><a class="header-anchor" href="#🆚-与二分查找的对比"><span>🆚 与二分查找的对比</span></a></h2><table><thead><tr><th>特性</th><th>二分查找</th><th>三分查找</th></tr></thead><tbody><tr><td>区间划分</td><td>两段</td><td>三段</td></tr><tr><td>每轮排除</td><td>1/2 区间</td><td>1/3 区间</td></tr><tr><td>适用场景</td><td>有序数组/找目标值</td><td>单峰函数/找极值</td></tr><tr><td>查找目标</td><td>精确值/是否存在</td><td>极大值或极小值（最大/最小索引）</td></tr><tr><td>时间复杂度</td><td>O(log₂n)</td><td>O(log₃n) ≈ O(log n)</td></tr><tr><td>代码复杂度</td><td>简单</td><td>略复杂</td></tr></tbody></table><h2 id="📌-小结" tabindex="-1"><a class="header-anchor" href="#📌-小结"><span>📌 小结</span></a></h2><ul><li>✅ 三分查找是<strong>查找极值的利器</strong>，尤其适用于**先增后减（单峰）**的函数或数组。</li><li>✅ 实现略复杂于二分查找，但应用场景明确，效果非常好。</li><li>✅ 在算法题如 LeetCode 852、找极值的浮点函数题中都可以使用。</li></ul><h1 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h1><p>三分查找（Ternary Search）虽然不如二分查找常见，但在某些类型的算法题中，它<strong>非常高效且不可替代</strong>。</p><p>它主要用于在<strong>单峰（或单谷）结构中查找极值</strong>，适用于整数数组或连续函数等问题。</p><h2 id="✅-一、三分查找适用的核心场景" tabindex="-1"><a class="header-anchor" href="#✅-一、三分查找适用的核心场景"><span>✅ 一、三分查找适用的核心场景</span></a></h2><table><thead><tr><th>场景</th><th>描述</th><th>示例问题</th></tr></thead><tbody><tr><td>1️⃣ 单峰数组找最大值</td><td>数组先递增后递减，只有一个峰值点（LeetCode 852）</td><td>🏔 山脉数组</td></tr><tr><td>2️⃣ 单谷数组找最小值</td><td>数组先递减后递增，只有一个谷值点</td><td>🏞 谷地数组问题</td></tr><tr><td>3️⃣ 单调函数求极值（浮点精度）</td><td>给定连续函数 <code>f(x)</code>，在区间 <code>[l, r]</code> 内找最大值或最小值</td><td>📉 函数最优值问题</td></tr><tr><td>4️⃣ 某些构造函数单峰的问题</td><td>类似「最小耗费」、「最优分割点」等具有单调性的构造问题</td><td>🚀 调整成本最小化</td></tr><tr><td>5️⃣ 对撞指针 + 单峰优化的问题</td><td>某些双指针问题演化为函数极值问题</td><td>🎯 跳跃或滑动窗口极值选择</td></tr></tbody></table><hr><h2 id="📌-二、三分查找能解决的问题类型" tabindex="-1"><a class="header-anchor" href="#📌-二、三分查找能解决的问题类型"><span>📌 二、三分查找能解决的问题类型</span></a></h2><table><thead><tr><th>类型</th><th>能解决的问题</th><th>示例</th></tr></thead><tbody><tr><td>✅ 极值点查找</td><td>找最大值或最小值</td><td>最大收益、峰值点</td></tr><tr><td>✅ 最优参数选择</td><td>求某函数下的最优 <code>x</code></td><td>最小时间、最小代价</td></tr><tr><td>✅ 条件优化问题</td><td>某个成本函数在某点最优</td><td>跳跃问题、能量问题</td></tr><tr><td>✅ 浮点函数优化</td><td>二次函数、对数函数等连续函数极值</td><td>区间最小值问题</td></tr></tbody></table><hr><h2 id="🚀-三、leetcode-上经典题目" tabindex="-1"><a class="header-anchor" href="#🚀-三、leetcode-上经典题目"><span>🚀 三、LeetCode 上经典题目</span></a></h2><p>以下是 <strong>LeetCode 或相关竞赛平台</strong> 上可以用三分查找优化的经典题目：</p><table><thead><tr><th>题号</th><th>标题</th><th>是否可用三分查找</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://leetcode.com/problems/peak-index-in-a-mountain-array/" target="_blank" rel="noopener noreferrer">852</a></td><td>Peak Index in a Mountain Array</td><td>✅</td><td>数组先增后减，找峰值索引</td></tr><tr><td><a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener noreferrer">162</a></td><td>Find Peak Element</td><td>✅（需判断多峰）</td><td>找一个「局部峰值」，可用改进版三分</td></tr><tr><td><a href="https://leetcode.com/problems/magnetic-force-between-two-balls/" target="_blank" rel="noopener noreferrer">1552</a></td><td>Magnetic Force Between Two Balls</td><td>✅</td><td>单调判断函数，最大化最小距离</td></tr><tr><td><a href="https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/" target="_blank" rel="noopener noreferrer">1283</a></td><td>Find the Smallest Divisor Given a Threshold</td><td>✅</td><td>可转换成单峰结构，最小满足条件的值</td></tr><tr><td><a href="https://leetcode.com/problems/koko-eating-bananas/" target="_blank" rel="noopener noreferrer">875</a></td><td>Koko Eating Bananas</td><td>✅</td><td>求最小速度，使得吃完香蕉，构成单调性函数</td></tr><tr><td><a href="https://leetcode.com/problems/fixed-point/" target="_blank" rel="noopener noreferrer">1064</a></td><td>Fixed Point</td><td>✅（特殊单调结构）</td><td>找到满足 <code>A[i] == i</code> 的点，可用三分</td></tr><tr><td><a href="https://leetcode.com/problems/ugly-number-iii/" target="_blank" rel="noopener noreferrer">1201</a></td><td>Ugly Number III</td><td>✅</td><td>求最小满足条件的数，可以二/三分优化判断函数</td></tr><tr><td><a href="https://leetcode.com/problems/divide-chocolate/" target="_blank" rel="noopener noreferrer">1231</a></td><td>Divide Chocolate</td><td>✅</td><td>二分最大最小和问题，有最优分割点</td></tr></tbody></table><h2 id="✍️-实战总结" tabindex="-1"><a class="header-anchor" href="#✍️-实战总结"><span>✍️ 实战总结</span></a></h2><h3 id="✅-三分查找-用于「极值点查找」" tabindex="-1"><a class="header-anchor" href="#✅-三分查找-用于「极值点查找」"><span>✅ 三分查找 &gt; 用于「极值点查找」</span></a></h3><ul><li>比如找：最大产出、最短耗时、最小代价、最大间距</li></ul><h3 id="✅-特别适合下列题型" tabindex="-1"><a class="header-anchor" href="#✅-特别适合下列题型"><span>✅ 特别适合下列题型：</span></a></h3><ul><li>单调 + 极值（最大化最小值、最小化最大值）</li><li>「能量值/速度/花费」优化问题</li><li>函数形式无法直接使用普通二分查找的情况</li></ul><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有帮助，如果有其他想法的话，也可以评论区和大家分享哦。</p><p>各位极客的点赞收藏转发，是老马持续写作的最大动力！</p><p>下一节我们将开始进行相关力扣专题的练习，感兴趣的小伙伴可以关注一波，精彩内容，不容错过。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li>顺序查找</li></ul><p><a href="https://www.cnblogs.com/yw09041432/p/5908444.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yw09041432/p/5908444.html</a></p><p><a href="https://www.jb51.net/article/53863.htm" target="_blank" rel="noopener noreferrer">https://www.jb51.net/article/53863.htm</a></p><p><a href="https://blog.csdn.net/jiandanokok/article/details/50517837" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/jiandanokok/article/details/50517837</a></p><ul><li>二分查找</li></ul><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">二分搜索算法</a></p><p><a href="https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ider/archive/2012/04/01/binary_search.html</a></p>`,63)]))}const p=i(n,[["render",h]]),k=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html","title":"三分查找法 Ternary-search-01-基本概念介绍","lang":"zh-CN","frontmatter":{"title":"三分查找法 Ternary-search-01-基本概念介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","search","array","data-struct","ternary-search"],"published":true,"description":"二分查找算法 大家好，我是老马。 今天我们一起来学习一下数组密切相关的三分查找算法。 主要知识 三分查找算法需要拆分下面几个部分： 入门介绍 题目练习（按照算法思想分类）-- 实际有哪些应用场景？可以解决哪些实际的问题 和已有知识的关系，比如对比二分查找 梳理对应的 sdk 包 应用实战 三分查找介绍 🔍 什么是三分查找（Ternary Search...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"三分查找法 Ternary-search-01-基本概念介绍"}],["meta",{"property":"og:description","content":"二分查找算法 大家好，我是老马。 今天我们一起来学习一下数组密切相关的三分查找算法。 主要知识 三分查找算法需要拆分下面几个部分： 入门介绍 题目练习（按照算法思想分类）-- 实际有哪些应用场景？可以解决哪些实际的问题 和已有知识的关系，比如对比二分查找 梳理对应的 sdk 包 应用实战 三分查找介绍 🔍 什么是三分查找（Ternary Search..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T07:11:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"search"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"ternary-search"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T07:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"三分查找法 Ternary-search-01-基本概念介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T07:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755501103000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":5.53,"words":1658},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-001-search-00-ternary-search-01-intro-what.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组密切相关的三分查找算法。</p>\\n<h2>主要知识</h2>\\n<p>三分查找算法需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>入门介绍</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）-- 实际有哪些应用场景？可以解决哪些实际的问题</p>\\n</li>\\n<li>\\n<p>和已有知识的关系，比如对比二分查找</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<h1>三分查找介绍</h1>\\n<h2>🔍 什么是三分查找（Ternary Search）？</h2>","autoDesc":true}');export{p as comp,k as data};
