import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-DLoeaHSZ.js";const t={};function l(p,s){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="lc136-只出现一次的数字-single-number" tabindex="-1"><a class="header-anchor" href="#lc136-只出现一次的数字-single-number"><span>LC136. 只出现一次的数字 single-number</span></a></h1><p>给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><p>示例 1 ：</p><p>输入：nums = [2,2,1]</p><p>输出：1</p><p>示例 2 ：</p><p>输入：nums = [4,1,2,1,2]</p><p>输出：4</p><p>示例 3 ：</p><p>输入：nums = [1]</p><p>输出：1</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 3 * 10^4<br> -3 * 10^4 &lt;= nums[i] &lt;= 3 * 10^4<br> 除了某个元素只出现一次以外，其余每个元素均出现两次。</p><h1 id="v1-内置函数" tabindex="-1"><a class="header-anchor" href="#v1-内置函数"><span>v1-内置函数</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>最简单的思路就是计数，但是要求算法只使用常量额外空间。</p><p>所以最基础的就不演示了。</p><p>这里最核心的是要想到位运算的特性：一个数异或自己=0</p><p>题目中除了某个元素只出现一次以外，其余每个元素均出现两次。所以全部异或，结果就是这个数。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 异或的性质是：相同的数字异或结果为 0，0 和任何数字异或结果为该数字本身。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 所以异或所有元素，最后的结果就是那个只出现一次的数字。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleNumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nums){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p>1ms 击败 98.67%</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,25)]))}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/leetcode/leetcode-75/2025-10-06-bit-operator-02-LC136-single-number.html","title":"LC136. 只出现一次的数字 single-number","lang":"zh-CN","frontmatter":{"title":"LC136. 只出现一次的数字 single-number","date":"2025-10-06T00:00:00.000Z","categories":["Leetcode-75"],"tags":["leetcode","Leetcode-75","bit-operator"],"published":true,"description":"LC136. 只出现一次的数字 single-number 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 示例 1 ： 输入：nums = [2,2,1] 输出：1 示例 2 ： 输入：nums = ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/leetcode-75/2025-10-06-bit-operator-02-LC136-single-number.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"LC136. 只出现一次的数字 single-number"}],["meta",{"property":"og:description","content":"LC136. 只出现一次的数字 single-number 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 示例 1 ： 输入：nums = [2,2,1] 输出：1 示例 2 ： 输入：nums = ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-06T06:03:10.000Z"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"Leetcode-75"}],["meta",{"property":"article:tag","content":"bit-operator"}],["meta",{"property":"article:published_time","content":"2025-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-06T06:03:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LC136. 只出现一次的数字 single-number\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-06T06:03:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759730590000,"updatedTime":1759730590000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.32,"words":396},"filePathRelative":"posts/leetcode/leetcode-75/2025-10-06-bit-operator-02-LC136-single-number.md","localizedDate":"2025年10月6日","excerpt":"\\n<p>给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\\n<p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p>\\n<p>示例 1 ：</p>\\n<p>输入：nums = [2,2,1]</p>\\n<p>输出：1</p>\\n<p>示例 2 ：</p>\\n<p>输入：nums = [4,1,2,1,2]</p>\\n<p>输出：4</p>\\n<p>示例 3 ：</p>\\n<p>输入：nums = [1]</p>\\n<p>输出：1</p>\\n<p>提示：</p>\\n<p>1 &lt;= nums.length &lt;= 3 * 10^4<br>\\n-3 * 10^4 &lt;= nums[i] &lt;= 3 * 10^4<br>\\n除了某个元素只出现一次以外，其余每个元素均出现两次。</p>","autoDesc":true}');export{d as comp,k as data};
