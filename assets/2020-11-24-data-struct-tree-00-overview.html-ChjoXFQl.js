import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as p}from"./app-CWZxhZmD.js";const n={};function o(h,e){return p(),t("div",null,e[0]||(e[0]=[a('<h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>排序</p><p>二分查找法</p><p>Tree</p><p>二叉查找树</p><p>AVL Tree</p><p>红黑树</p><p>B Tree</p><p>B+ Tree</p><hr><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-00-overview" target="_blank" rel="noopener noreferrer">Tree-00-概览</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-01-binary-tree" target="_blank" rel="noopener noreferrer">Tree-01-二叉树 Binary Tree</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-02-binary-search-tree" target="_blank" rel="noopener noreferrer">Tree-02-java 实现 BST 二叉查询树详解</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-03-avl-tree" target="_blank" rel="noopener noreferrer">Tree-03-图解 AVL 自平衡二叉查找树及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-04-red-black-tree" target="_blank" rel="noopener noreferrer">Tree-04-图解红黑树 Red Black Tree 及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-05-spaly-tree" target="_blank" rel="noopener noreferrer">Tree-05-伸展树 Splay Tree 及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-06-2-3-tree" target="_blank" rel="noopener noreferrer">Tree-06- B 树之 2-3 Tree</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-08-b-tree" target="_blank" rel="noopener noreferrer">Tree-08-多路查找树 BTree 及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-09-bplus-tree" target="_blank" rel="noopener noreferrer">Tree-09-多路查找树 B+ 树 及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-10-bstar-tree" target="_blank" rel="noopener noreferrer">Tree-10-多路查找树 B* 树 及 java 实现</a></p><p><a href="https://houbb.github.io/2020/10/17/data-struct-tree-11-database-index" target="_blank" rel="noopener noreferrer">Tree-11-mysql index 数据库索引</a></p><h1 id="什么是树" tabindex="-1"><a class="header-anchor" href="#什么是树"><span>什么是树</span></a></h1><p>树（Tree）是由多个节点（Node）的集合组成，每个节点又有多个与其关联的子节点（Child Node）。</p><p>子节点就是直接处于节点之下的节点，而父节点（Parent Node）则位于节点直接关联的上方。</p><p>树的根（Root）指的是一个没有父节点的单独的节点。</p><p>所有的树都呈现了一些共有的性质：</p><ul><li><p>只有一个根节点；</p></li><li><p>除了根节点，所有节点都有且只有一个父节点；</p></li><li><p>无环。将任意一个节点作为起始节点，都不存在任何回到该起始节点的路径。（正是前两个性质保证了无环的成立。）</p></li></ul><h1 id="常用概念" tabindex="-1"><a class="header-anchor" href="#常用概念"><span>常用概念</span></a></h1><p>根（Root）：树中最顶端的节点，根没有父节点。</p><p>子节点（Child）：节点所拥有子树的根节点称为该节点的子节点。</p><p>父节点（Parent）：如果节点拥有子节点，则该节点为子节点的父节点。</p><p>兄弟节点（Sibling）：与节点拥有相同父节点的节点。</p><p>子孙节点（Descendant）：节点向下路径上可达的节点。</p><p>叶节点（Leaf）：没有子节点的节点。</p><p>内节点（Internal Node）：至少有一个子节点的节点。</p><p>度（Degree）：节点拥有子树的数量。</p><p>边（Edge）：两个节点中间的链接。</p><p>路径（Path）：从节点到子孙节点过程中的边和节点所组成的序列。</p><p>层级（Level）：根为 Level 0 层，根的子节点为 Level 1 层，以此类推。</p><p>高度（Height）/深度（Depth）：树中层的数量。比如只有 Level 0,Level 1,Level 2 则高度为 3。</p><h1 id="类别" tabindex="-1"><a class="header-anchor" href="#类别"><span>类别</span></a></h1><h2 id="二叉查找树-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#二叉查找树-binary-search-tree"><span>二叉查找树（Binary Search Tree）</span></a></h2><p>二叉查找树，笛卡尔树，T 树</p><h2 id="自平衡二叉查找树-self-balancing-binary-search-tree" tabindex="-1"><a class="header-anchor" href="#自平衡二叉查找树-self-balancing-binary-search-tree"><span>自平衡二叉查找树（Self-balancing Binary Search Tree）</span></a></h2><p>AA 树，</p><p>AVL 树，</p><p>红黑树（Red-Black Tree），</p><p>伸展树（Splay Tree）</p><h2 id="b-树-b-tree" tabindex="-1"><a class="header-anchor" href="#b-树-b-tree"><span>B 树（B-Tree）</span></a></h2><p>2-3 树，</p><p>2-3-4 树，</p><p>B 树，</p><p>B+ 树，</p><p>B* 树</p><h2 id="字典树-trie-tree" tabindex="-1"><a class="header-anchor" href="#字典树-trie-tree"><span>字典树（Trie-Tree）</span></a></h2><p>后缀树，</p><p>基数树，</p><p>三叉查找树，</p><p>快速前缀树</p><h2 id="空间数据分割树-spatial-data-partitioning-tree" tabindex="-1"><a class="header-anchor" href="#空间数据分割树-spatial-data-partitioning-tree"><span>空间数据分割树（Spatial Data Partitioning Tree）</span></a></h2><p>R 树，</p><p>R+ 树，</p><p>R* 树，</p><p>线段树，</p><p>优先 R 树</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="http://cslibrary.stanford.edu/110/BinaryTrees.html" target="_blank" rel="noopener noreferrer">http://cslibrary.stanford.edu/110/BinaryTrees.html</a></p><p><a href="https://www.javatpoint.com/binary-tree" target="_blank" rel="noopener noreferrer">https://www.javatpoint.com/binary-tree</a></p><p><a href="https://www.javatpoint.com/tree" target="_blank" rel="noopener noreferrer">https://www.javatpoint.com/tree</a></p><p><a href="https://zhuanlan.zhihu.com/p/143396578" target="_blank" rel="noopener noreferrer">漫画：什么是红黑树？（完整版）</a></p><p><a href="https://www.cnblogs.com/gaochundong/p/btree_and_bplustree.html" target="_blank" rel="noopener noreferrer">人人都是 DBA（VII）B 树和 B+ 树</a></p>',72)]))}const l=r(n,[["render",o]]),c=JSON.parse('{"path":"/posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.html","title":"Tree-00-概览","lang":"zh-CN","frontmatter":{"title":"Tree-00-概览","date":"2020-10-17T00:00:00.000Z","categories":["Data-Struct"],"tags":["data-struct","tree","overview","sf"],"published":true,"description":"目录 排序 二分查找法 Tree 二叉查找树 AVL Tree 红黑树 B Tree B+ Tree Tree-00-概览 Tree-01-二叉树 Binary Tree Tree-02-java 实现 BST 二叉查询树详解 Tree-03-图解 AVL 自平衡二叉查找树及 java 实现 Tree-04-图解红黑树 Red Black Tree 及...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Tree-00-概览"}],["meta",{"property":"og:description","content":"目录 排序 二分查找法 Tree 二叉查找树 AVL Tree 红黑树 B Tree B+ Tree Tree-00-概览 Tree-01-二叉树 Binary Tree Tree-02-java 实现 BST 二叉查询树详解 Tree-03-图解 AVL 自平衡二叉查找树及 java 实现 Tree-04-图解红黑树 Red Black Tree 及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T16:01:00.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"tree"}],["meta",{"property":"article:tag","content":"overview"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-20T16:01:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tree-00-概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-20T16:01:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755705660000,"updatedTime":1755705660000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.66,"words":799},"filePathRelative":"posts/leetcode/datastruct/2020-11-24-data-struct-tree-00-overview.md","localizedDate":"2020年10月17日","excerpt":"\\n<p>排序</p>\\n<p>二分查找法</p>\\n<p>Tree</p>\\n<p>二叉查找树</p>\\n<p>AVL Tree</p>\\n<p>红黑树</p>\\n<p>B Tree</p>\\n<p>B+ Tree</p>\\n<hr>\\n<p><a href=\\"https://houbb.github.io/2020/10/17/data-struct-tree-00-overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Tree-00-概览</a></p>\\n<p><a href=\\"https://houbb.github.io/2020/10/17/data-struct-tree-01-binary-tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Tree-01-二叉树 Binary Tree</a></p>","autoDesc":true}');export{l as comp,c as data};
