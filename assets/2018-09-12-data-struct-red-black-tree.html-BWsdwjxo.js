import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as p}from"./app-BZYhpQRl.js";const r={};function o(s,e){return p(),t("div",null,e[0]||(e[0]=[i(`<h1 id="red-black-tree" tabindex="-1"><a class="header-anchor" href="#red-black-tree"><span>Red Black Tree</span></a></h1><p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。</p><p>它是在1972年由鲁道夫·贝尔发明的，他称之为&quot;对称二叉B树&quot;，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。</p><p>它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在 <code>O(lg(n))</code> 时间内做查找，插入和删除，这里的 n 是树中元素的数目。</p><h2 id="用途和好处" tabindex="-1"><a class="header-anchor" href="#用途和好处"><span>用途和好处</span></a></h2><p>红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。</p><p>这不只是使它们在时间敏感的应用如实时应用（real time application）中有价值，而且使它们有在提供最坏情况担保的其他数据结构中作为建造板块的价值；</p><p>例如，在计算几何中使用的很多数据结构都可以基于红黑树。</p><p>红黑树在函数式编程中也特别有用，在这里它们是最常用的持久数据结构（persistent data structure）之一，它们用来构造关联数组和集合，每次插入、删除之后它们能保持为以前的版本。</p><p>除了 <code>O(lg(n))</code> 的时间之外，红黑树的持久版本对每次插入或删除需要 <code>O(lg(n))</code> 的空间。</p><p>红黑树是2-3-4树的一种等同。</p><p>换句话说，对于每个2-3-4树，都存在至少一个数据元素是同样次序的红黑树。</p><p>在2-3-4树上的插入和删除操作也等同于在红黑树中颜色翻转和旋转。</p><p>这使得2-3-4树成为理解红黑树背后的逻辑的重要工具，这也是很多介绍算法的教科书在红黑树之前介绍2-3-4树的原因，尽管2-3-4树在实践中不经常使用。</p><p>红黑树相对于AVL树来说，牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树。</p><h2 id="性质" tabindex="-1"><a class="header-anchor" href="#性质"><span>性质</span></a></h2><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ol><li><p>节点是红色或黑色。</p></li><li><p>根是黑色。</p></li><li><p>所有叶子都是黑色（叶子是NIL节点）。</p></li><li><p>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</p></li><li><p>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</p></li></ol><figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/900px-Red-black_tree_example.svg.png" alt="red-black-image" tabindex="0" loading="lazy"><figcaption>red-black-image</figcaption></figure><ul><li>约束的作用</li></ul><p>这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。</p><p>因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。</p><p>要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。</p><p>最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。</p><p>因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。</p><p>在很多树数据结构的表示中，一个节点有可能只有一个子节点，而叶子节点包含数据。用这种范例表示红黑树是可能的，但是这会改变一些性质并使算法复杂。</p><p>为此，本文中我们使用&quot;nil叶子&quot;或&quot;空（null）叶子&quot;，如上图所示，它不包含数据而只充当树在此结束的指示。</p><p>这些节点在绘图中经常被省略，导致了这些树好像同上述原则相矛盾，而实际上不是这样。</p><p>与此有关的结论是所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子。</p><h1 id="自平衡策略" tabindex="-1"><a class="header-anchor" href="#自平衡策略"><span>自平衡策略</span></a></h1><p>对于一棵红黑树的操作最基本的无外乎增删改查，其中查和改都不会改变树的结构，所以与普通平衡二叉树操作无异。</p><p>剩下的就是增删操作，插入和删除都会破坏树的结构，不过借助一定的平衡策略能够让树重新满足定义。</p><p>平衡策略可以简单概括为三种：左旋转、右旋转，以及变色。</p><p>在插入或删除结点之后，只要我们沿着结点到根的路径上执行这三种操作，就可以最终让树重新满足定义。</p><h2 id="左旋转" tabindex="-1"><a class="header-anchor" href="#左旋转"><span>左旋转</span></a></h2><p>对于当前结点而言，如果右子结点为红色，左子结点为黑色，则执行左旋转，如下图：</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_1.png?raw=false" alt="left-rotate" tabindex="0" loading="lazy"><figcaption>left-rotate</figcaption></figure><h2 id="右旋转" tabindex="-1"><a class="header-anchor" href="#右旋转"><span>右旋转</span></a></h2><p>对于当前结点而言，如果左子、左孙子结点均为红色，则执行右旋转，如下图：</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_2.png?raw=false" alt="right-rotate" tabindex="0" loading="lazy"><figcaption>right-rotate</figcaption></figure><h2 id="变色" tabindex="-1"><a class="header-anchor" href="#变色"><span>变色</span></a></h2><p>对于当前结点而言，如果左、右子结点均为红色，则执行变色，如下图：</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_3.png?raw=false" alt="change-color" tabindex="0" loading="lazy"><figcaption>change-color</figcaption></figure><h2 id="区分左旋和右旋" tabindex="-1"><a class="header-anchor" href="#区分左旋和右旋"><span>区分左旋和右旋</span></a></h2><p>仔细观察上面&quot;左旋&quot;和&quot;右旋&quot;的示意图。</p><p>我们能清晰的发现，它们是对称的。无论是左旋还是右旋，被旋转的树，在旋转前是二叉查找树，并且旋转之后仍然是一颗二叉查找树。</p><figure><img src="https://images0.cnblogs.com/i/497634/201403/251739385617803.jpg" alt="right &amp; left" tabindex="0" loading="lazy"><figcaption>right &amp; left</figcaption></figure><h2 id="左旋示例图" tabindex="-1"><a class="header-anchor" href="#左旋示例图"><span>左旋示例图</span></a></h2><p>(以x为节点进行左旋)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>                               z</span></span>
<span class="line"><span>   x                          /                  </span></span>
<span class="line"><span>  / \\      --(左旋)--&gt;       x</span></span>
<span class="line"><span> y   z                      /</span></span>
<span class="line"><span>                           y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对x进行左旋，意味着，将“x的右孩子”设为“x的父亲节点”；即将 x 变成了一个左节点(x成了为z的左孩子)。</p><p>因此，左旋中的“左”，意味着“被旋转的节点将变成一个左节点”。</p><h2 id="右旋示例图-以x为节点进行右旋" tabindex="-1"><a class="header-anchor" href="#右旋示例图-以x为节点进行右旋"><span>右旋示例图(以x为节点进行右旋)：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>                               y</span></span>
<span class="line"><span>   x                            \\                 </span></span>
<span class="line"><span>  / \\      --(右旋)--&gt;           x</span></span>
<span class="line"><span> y   z                            \\</span></span>
<span class="line"><span>                                   z</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对x进行右旋，意味着，将“x的左孩子”设为“x的父亲节点”；即将 x 变成了一个右节点(x成了为y的右孩子)。</p><p>因此，右旋中的“右”，意味着“被旋转的节点将变成一个右节点”。</p><h1 id="插入操作" tabindex="-1"><a class="header-anchor" href="#插入操作"><span>插入操作</span></a></h1><p>红黑树作为平衡二叉树的一种，同样需要借助于查找操作定位插入点，不过红黑树约定: <code>新插入的结点一律为红色</code>，这主要也是为了简化树的自平衡过程。</p><p>对于一棵空树而言，插入结点为红色会增加一次变色操作，但是对于其余的情况，如果插入的结点是一个黑色结点，那么必然会破坏性质 5，而插入一个红色结点有可能会破坏性质 4，但是此时我们可以通过简单的策略对树进行调整以重新满足定义。</p><p>我们约定 X 为插入的结点，P 为 X 的父结点，G 为 X 的祖父结点，U 为 X 的叔叔结点。</p><p>下面遵从上述策略分场景对插入过程进行探讨：</p><h2 id="_1-新插入结点-x-是根结点" tabindex="-1"><a class="header-anchor" href="#_1-新插入结点-x-是根结点"><span>1. 新插入结点 X 是根结点</span></a></h2><p>此时新插入结点为红色，违背性质 2，只需将其变为黑色即可。</p><h2 id="_2-新插入结点-x-的父结点-p-是黑色" tabindex="-1"><a class="header-anchor" href="#_2-新插入结点-x-的父结点-p-是黑色"><span>2. 新插入结点 X 的父结点 P 是黑色</span></a></h2><p>此时需要依据新插入结点 X 值相对于父结点 P 的大小分为两种情况。</p><p>如果小于则将 X 简单插入到 P 的左子位置即可（下图左），如果 X 的值大于 P，则需要将 X 插入到 P 的右子结点位置，然后执行一次左旋转即可（下图右）。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_1.png?raw=false" alt="insert-2-p-black" tabindex="0" loading="lazy"><figcaption>insert-2-p-black</figcaption></figure><h2 id="_3-父结点-p-为红色-同时存在叔叔结点-u-也为红色" tabindex="-1"><a class="header-anchor" href="#_3-父结点-p-为红色-同时存在叔叔结点-u-也为红色"><span>3. 父结点 P 为红色，同时存在叔叔结点 U 也为红色</span></a></h2><p>因为 P 为红色，按照性质 4 则 G 必定为黑色，如果 X 的值小于 P，则需要在 P 的左子位置插入（如下图），</p><p>插入后不满足性质 4，此时只需要执行一次变色操作，将 P、G、U 的颜色反转一下即可，因为 G 变为红色，所以路径长度减 1，但是因为 P 和 U 都变为了黑色，所以路径长度又加 1，最终长度不变，但此时 G 变为了红色，所以需要继续向上递归。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_2.png?raw=false" alt="insert-3-1" tabindex="0" loading="lazy"><figcaption>insert-3-1</figcaption></figure><p>如果 X 的值大于 P，则需要在 P 的右子位置插入（如下图），插入后不满足性质 4，此时需要先执行左旋转变为上面这种情况，继续变色即可。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_3.png?raw=false" alt="insert-3-2" tabindex="0" loading="lazy"><figcaption>insert-3-2</figcaption></figure><h2 id="_4-父结点-p-为红色-同时叔叔结点-u-为黑色或不存在" tabindex="-1"><a class="header-anchor" href="#_4-父结点-p-为红色-同时叔叔结点-u-为黑色或不存在"><span>4. 父结点 P 为红色，同时叔叔结点 U 为黑色或不存在</span></a></h2><p>因为 P 为红色，按照性质 4 则 G 必定为黑色，如果 X 的值小于 P，则需要在 P 的左子位置插入（如下图），</p><p>插入后不满足性质 4，此时需要先执行一次右旋转，旋转之后仍然违背性质 4，同时左子树的高度减 1，这个时候需要再执行一次变色操作即可满足定义。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_4.png?raw=false" alt="insert-4-1" tabindex="0" loading="lazy"><figcaption>insert-4-1</figcaption></figure><p>如果 X 的值大于 P，则需要在 P 的右子位置插入（如下图），插入后不满足性质 4，此时我们需要执行一次左旋转，然后就转换成了上面这种情况，继续右旋转、变色即可。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_5.png?raw=false" alt="insert-4-2" tabindex="0" loading="lazy"><figcaption>insert-4-2</figcaption></figure><h1 id="删除操作" tabindex="-1"><a class="header-anchor" href="#删除操作"><span>删除操作</span></a></h1><p>红黑树作为平衡二叉树的一种，同样需要借助于查找操作定位删除点，在执行删除之前我们需要判断待删除结点有几个孩子结点，如果是 2 个的话我们需要从结点的左子树中寻找值最大的结点，或者从右子树中寻找值最小的结点，并用结点值替换掉待删除结点（只要目标结点值从树上消失即可，不要纠结具体删除的是哪个结点）。</p><p>这两个结点有一个共性，即最多只有一个孩子结点（因为已经是自己所处范围内的最大和最小了嘛，一山不容二虎（鼠）），此时就将需求转变成删除只有一个孩子结点的结点，相对要简单了许多。</p><p>我们约定 X 为待删除的结点，P 为 X 的父结点，S 为 X 的孩子结点，B 为 X 的兄弟结点，BL 为 B 的左孩子结点，BR 为 B 的右孩子结点。</p><ol><li><p>如果待删除结点 X 是一个红色结点，则直接删除即可，不会违反定义。</p></li><li><p>如果待删除结点 X 是一个黑色结点，且其孩子结点 S 是红色的，那么只需要将 X 替换成 S，同时将 S 由红变黑即可。</p></li><li><p>如果需要删除的结点 X 是黑色的，同时它的孩子结点 S 也是黑色的，这种情况需要进一步分场景讨论。</p></li></ol><p>对于第三种情况我们首先将 X 替换成 S，并重命名其为 N，N 沿用 X 对于长辈和晚辈的称呼，需要清楚这里实际删除的是 X 结点，并且删除之后通过 N 的路径长度减 1。</p><h2 id="_1-n-是新的根" tabindex="-1"><a class="header-anchor" href="#_1-n-是新的根"><span>1. N 是新的根</span></a></h2><p>这种情况比较简单，不需要再做任何调整。</p><h2 id="_2-n-的父结点、兄弟结点-b-以及-b-的孩子结点均为黑色" tabindex="-1"><a class="header-anchor" href="#_2-n-的父结点、兄弟结点-b-以及-b-的孩子结点均为黑色"><span>2. N 的父结点、兄弟结点 B，以及 B 的孩子结点均为黑色</span></a></h2><p>如下图，此时只需要将 B 变为红色即可，这样所有通过 B 的路径减 1，与所有通过 N 的路径正好一致，但是此时通过 P 的路径都减少了 1 个长度，所以需要向上递归对结点 P 继续判定。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_1.png?raw=false" alt="delete-2-1" tabindex="0" loading="lazy"><figcaption>delete-2-1</figcaption></figure><h2 id="_3-n-的兄弟结点-b-为红色-其余结点均为黑色" tabindex="-1"><a class="header-anchor" href="#_3-n-的兄弟结点-b-为红色-其余结点均为黑色"><span>3. N 的兄弟结点 B 为红色，其余结点均为黑色</span></a></h2><p>如下图，此时需要执行一次左旋转，然后将 P 和 B 的颜色互换。</p><p>调整前后各个结点的路径没有变化，但是因为之前经过 N 的路径长度少了一个单位，所以此时仍然不满足定义，需要按照后面的场景继续调整。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_2.png?raw=false" alt="delete-3-1" tabindex="0" loading="lazy"><figcaption>delete-3-1</figcaption></figure><h2 id="_4-n-的父结点-p-为红色-兄弟结点-b-以及-b-的孩子结点均为黑色" tabindex="-1"><a class="header-anchor" href="#_4-n-的父结点-p-为红色-兄弟结点-b-以及-b-的孩子结点均为黑色"><span>4. N 的父结点 P 为红色，兄弟结点 B，以及 B 的孩子结点均为黑色</span></a></h2><p>如下图，此时我们只需要简单互换 P 和 B 的颜色，这种情况下对于不通过 N 的结点路径没有影响，但是却让通过 N 的结点路径加 1，正好弥补之前删除操作所带来的损失。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_3.png?raw=false" alt="delete-4-1" tabindex="0" loading="lazy"><figcaption>delete-4-1</figcaption></figure><h2 id="_5-n-的兄弟结点-b-为黑色-b-的左孩子为红色-b-的右孩子为黑色" tabindex="-1"><a class="header-anchor" href="#_5-n-的兄弟结点-b-为黑色-b-的左孩子为红色-b-的右孩子为黑色"><span>5. N 的兄弟结点 B 为黑色，B 的左孩子为红色，B 的右孩子为黑色</span></a></h2><p>如下图，此时我们需要先执行一次右旋转操作，然后互换 B 与 BL 的颜色，操作之后通过所有结点的路径长度并没有发生变化，却让 N 有了一个新的黑色兄弟结点，并且该兄弟结点的右孩子为红色，从而可以按照接下去介绍的一种场景继续调整。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_4.png?raw=false" alt="delete-5-1" tabindex="0" loading="lazy"><figcaption>delete-5-1</figcaption></figure><p>注：白色结点表示该结点既可以是黑色也可以是红色，后续图示亦是如此。</p><h2 id="_6-n-的兄弟结点-b-为黑色-b-的右孩子为红色" tabindex="-1"><a class="header-anchor" href="#_6-n-的兄弟结点-b-为黑色-b-的右孩子为红色"><span>6. N 的兄弟结点 B 为黑色，B 的右孩子为红色</span></a></h2><p>如下图，此时我们需要先执行一次左旋转，并互换 P 和 B 的颜色，同时将 B 的右孩子结点变为黑色。</p><p>变更之后，除 N 外其余结点的路径长度未发生变化，但是经过 N 的路径上却增加了一个黑色结点，这刚好弥补之前删除操作所带来的损失。</p><figure><img src="https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_5.png?raw=false" alt="delete-6-1" tabindex="0" loading="lazy"><figcaption>delete-6-1</figcaption></figure><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noopener noreferrer">红黑树</a></p><p><a href="https://www.jianshu.com/p/4cd37000f4e3" target="_blank" rel="noopener noreferrer">JAVA学习-红黑树详解</a></p><p><a href="https://www.cnblogs.com/skywang12345/p/3245399.html" target="_blank" rel="noopener noreferrer">红黑树(一)之 原理和算法详细介绍</a></p><p><a href="https://www.cnblogs.com/skywang12345/p/3624343.html" target="_blank" rel="noopener noreferrer">红黑树(五)之 Java的实现</a></p><p><a href="https://tech.meituan.com/redblack_tree.html" target="_blank" rel="noopener noreferrer">红黑树深入剖析及Java实现</a></p><p><a href="https://my.oschina.net/wangzhenchao/blog/1785932" target="_blank" rel="noopener noreferrer">那些年，面试被虐过的红黑树</a></p>`,112)]))}const h=a(r,[["render",o]]),g=JSON.parse('{"path":"/posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.html","title":"数据结构之红黑树 Red Black Tree","lang":"zh-CN","frontmatter":{"title":"数据结构之红黑树 Red Black Tree","date":"2018-09-12T00:00:00.000Z","categories":["Data-Struct"],"tags":["data-struct","java","sh"],"published":true,"description":"Red Black Tree 红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。 它是在1972年由鲁道夫·贝尔发明的，他称之为\\"对称二叉B树\\"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。 它是复杂的，但它...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"数据结构之红黑树 Red Black Tree"}],["meta",{"property":"og:description","content":"Red Black Tree 红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。 它是在1972年由鲁道夫·贝尔发明的，他称之为\\"对称二叉B树\\"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。 它是复杂的，但它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/900px-Red-black_tree_example.svg.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T16:01:00.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-20T16:01:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构之红黑树 Red Black Tree\\",\\"image\\":[\\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/900px-Red-black_tree_example.svg.png\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_1.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_2.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_3.png?raw=false\\",\\"https://images0.cnblogs.com/i/497634/201403/251739385617803.jpg\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_1.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_2.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_3.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_4.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_i_5.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_1.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_2.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_3.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_4.png?raw=false\\",\\"https://github.com/plotor/plotor.github.io/blob/master/images/2018/rbt_d_5.png?raw=false\\"],\\"datePublished\\":\\"2018-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-20T16:01:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755705660000,"updatedTime":1755705660000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.47,"words":3741},"filePathRelative":"posts/leetcode/datastruct/2018-09-12-data-struct-red-black-tree.md","localizedDate":"2018年9月12日","excerpt":"\\n<p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。</p>\\n<p>它是在1972年由鲁道夫·贝尔发明的，他称之为\\"对称二叉B树\\"，它现代的名字是在Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文中获得的。</p>\\n<p>它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在 <code>O(lg(n))</code> 时间内做查找，插入和删除，这里的 n 是树中元素的数目。</p>\\n<h2>用途和好处</h2>\\n<p>红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。</p>","autoDesc":true}');export{h as comp,g as data};
