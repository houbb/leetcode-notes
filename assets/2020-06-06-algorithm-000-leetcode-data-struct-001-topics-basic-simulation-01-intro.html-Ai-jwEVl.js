import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-CzfUXQ5Z.js";const n={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇"><span>基础篇</span></a></h1><p>数组-矩阵</p><p>字符串-字符串匹配</p><p>排序：计数+桶+基数</p><p>模拟</p><p>枚举</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下力扣基础之模拟-simulation" tabindex="-1"><a class="header-anchor" href="#详细介绍一下力扣基础之模拟-simulation"><span>详细介绍一下力扣基础之模拟 simulation</span></a></h2><p>我们来系统讲解一下力扣（LeetCode）中的<strong>基础技巧之一：模拟（Simulation）</strong>，包括：</p><ul><li>什么是模拟？</li><li>什么时候用模拟？</li><li>模拟题常见类型</li><li>解题模板与技巧</li><li>高频题推荐</li></ul><hr><h2 id="一、什么是模拟-simulation" tabindex="-1"><a class="header-anchor" href="#一、什么是模拟-simulation"><span>一、什么是模拟（Simulation）？</span></a></h2><p><strong>模拟</strong>就是：</p><blockquote><p><strong>根据题目的描述，按步骤“模拟”整个过程，一步步实现题目中的操作逻辑。</strong></p></blockquote><p>比如：</p><ul><li>题目说“顺时针旋转矩阵” → 你就写代码一步步转</li><li>题目说“从左往右删除重复字符” → 你就模拟这个过程</li></ul><h3 id="✅-本质就是-把题目的-自然语言-变成-代码实现-。" tabindex="-1"><a class="header-anchor" href="#✅-本质就是-把题目的-自然语言-变成-代码实现-。"><span>✅ 本质就是：<strong>把题目的“自然语言”变成“代码实现”</strong>。</span></a></h3><hr><h2 id="二、什么时候用模拟" tabindex="-1"><a class="header-anchor" href="#二、什么时候用模拟"><span>二、什么时候用模拟？</span></a></h2><p>以下场景适合用模拟：</p><table><thead><tr><th>场景</th><th>示例</th></tr></thead><tbody><tr><td>题目描述一个复杂的<strong>操作流程</strong></td><td>生命游戏、矩阵旋转</td></tr><tr><td>需要按指定规则执行每一步</td><td>模拟扫雷、机器人移动、洗牌</td></tr><tr><td>操作太复杂，没办法用公式或抽象模型解决</td><td>字符串编辑、棋盘跳跃</td></tr></tbody></table><hr><h2 id="三、模拟题常见类型" tabindex="-1"><a class="header-anchor" href="#三、模拟题常见类型"><span>三、模拟题常见类型</span></a></h2><h3 id="_1-数组-字符串模拟" tabindex="-1"><a class="header-anchor" href="#_1-数组-字符串模拟"><span>1. <strong>数组/字符串模拟</strong></span></a></h3><p>对数组、字符串做具体操作。</p><p>📌 题目例子：</p><ul><li><a href="https://leetcode.cn/problems/plus-one/" target="_blank" rel="noopener noreferrer">66. 加一</a>：模拟大整数加法</li><li><a href="https://leetcode.cn/problems/richest-customer-wealth/" target="_blank" rel="noopener noreferrer">1672. 最富有客户的资产总量</a></li><li><a href="https://leetcode.cn/problems/roman-to-integer/" target="_blank" rel="noopener noreferrer">13. 罗马数字转整数</a></li><li><a href="https://leetcode.cn/problems/length-of-last-word/" target="_blank" rel="noopener noreferrer">58. 最后一个单词的长度</a></li></ul><hr><h3 id="_2-矩阵模拟" tabindex="-1"><a class="header-anchor" href="#_2-矩阵模拟"><span>2. <strong>矩阵模拟</strong></span></a></h3><p>矩阵类题目里模拟操作流程。</p><p>📌 题目例子：</p><ul><li><a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noopener noreferrer">48. 旋转图像</a>：原地旋转二维矩阵</li><li><a href="https://leetcode.cn/problems/spiral-matrix-ii/" target="_blank" rel="noopener noreferrer">59. 螺旋矩阵 II</a></li><li><a href="https://leetcode.cn/problems/set-matrix-zeroes/" target="_blank" rel="noopener noreferrer">73. 矩阵置零</a></li><li><a href="https://leetcode.cn/problems/game-of-life/" target="_blank" rel="noopener noreferrer">289. 生命游戏</a>：模拟状态变化</li></ul><hr><h3 id="_3-数独-棋盘类模拟" tabindex="-1"><a class="header-anchor" href="#_3-数独-棋盘类模拟"><span>3. <strong>数独/棋盘类模拟</strong></span></a></h3><p>在二维格子中执行一系列合法操作。</p><p>📌 题目例子：</p><ul><li><a href="https://leetcode.cn/problems/valid-sudoku/" target="_blank" rel="noopener noreferrer">36. 有效的数独</a></li><li><a href="https://leetcode.cn/problems/sudoku-solver/" target="_blank" rel="noopener noreferrer">37. 解数独</a>（+ 回溯）</li><li><a href="https://leetcode.cn/problems/find-winner-on-a-tic-tac-toe-game/" target="_blank" rel="noopener noreferrer">1275. 找出井字棋的获胜者</a></li></ul><hr><h3 id="_4-模拟移动-机器人轨迹" tabindex="-1"><a class="header-anchor" href="#_4-模拟移动-机器人轨迹"><span>4. <strong>模拟移动 / 机器人轨迹</strong></span></a></h3><p>模拟物体移动、路径追踪。</p><p>📌 题目例子：</p><ul><li><a href="https://leetcode.cn/problems/robot-return-to-origin/" target="_blank" rel="noopener noreferrer">657. 机器人能否返回原点</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noopener noreferrer">73. 螺旋矩阵</a></li><li><a href="https://leetcode.cn/problems/robot-bounded-in-circle/" target="_blank" rel="noopener noreferrer">1041. 困于环中的机器人</a></li></ul><hr><h3 id="_5-数据结构模拟题" tabindex="-1"><a class="header-anchor" href="#_5-数据结构模拟题"><span>5. <strong>数据结构模拟题</strong></span></a></h3><p>用数组/栈/队列/链表等手动实现一些逻辑。</p><p>📌 题目例子：</p><ul><li><a href="https://leetcode.cn/problems/implement-queue-using-stacks/" target="_blank" rel="noopener noreferrer">232. 用栈实现队列</a></li><li><a href="https://leetcode.cn/problems/implement-stack-using-queues/" target="_blank" rel="noopener noreferrer">225. 用队列实现栈</a></li><li><a href="https://leetcode.cn/problems/min-stack/" target="_blank" rel="noopener noreferrer">155. 最小栈</a></li></ul><hr><h2 id="四、解题思路-模板技巧" tabindex="-1"><a class="header-anchor" href="#四、解题思路-模板技巧"><span>四、解题思路 &amp; 模板技巧</span></a></h2><h3 id="✅-通用思路" tabindex="-1"><a class="header-anchor" href="#✅-通用思路"><span>✅ 通用思路：</span></a></h3><ol><li>理解题目中给的“步骤”</li><li>写出伪代码或流程图</li><li>照着模拟逻辑一步步写代码</li><li>注意边界 &amp; 状态更新</li></ol><hr><h3 id="🔁-常见套路-比如旋转矩阵" tabindex="-1"><a class="header-anchor" href="#🔁-常见套路-比如旋转矩阵"><span>🔁 常见套路（比如旋转矩阵）：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 先转置矩阵</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        swap</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(matrix[i][j]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> matrix[j][i])</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 再水平翻转</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(matrix[i])</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="⬅-方向数组-模拟移动" tabindex="-1"><a class="header-anchor" href="#⬅-方向数组-模拟移动"><span>⬅ 方向数组（模拟移动）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] dx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 右下左上</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] dy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dir </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 初始方向</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> step </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> step </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dx[dir]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ny </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dy[dir]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 判断是否越界</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (合法) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ny</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        dir </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (dir </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 顺时针转向</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、模拟题的注意事项" tabindex="-1"><a class="header-anchor" href="#五、模拟题的注意事项"><span>五、模拟题的注意事项</span></a></h2><table><thead><tr><th>注意点</th><th>原因</th></tr></thead><tbody><tr><td>状态更新顺序不能错</td><td>有些题目要“先读旧状态，再写新状态”</td></tr><tr><td>容易写出 bug 的细节要特别小心</td><td>比如边界判断、数组越界、方向数组</td></tr><tr><td>不要强行优化成 O(1)</td><td>模拟题核心是“过程”，不是性能</td></tr></tbody></table><hr><h2 id="六、模拟题推荐刷题顺序-入门-→-提升" tabindex="-1"><a class="header-anchor" href="#六、模拟题推荐刷题顺序-入门-→-提升"><span>六、模拟题推荐刷题顺序（入门 → 提升）</span></a></h2><h3 id="✅-入门级" tabindex="-1"><a class="header-anchor" href="#✅-入门级"><span>✅ 入门级：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/plus-one/" target="_blank" rel="noopener noreferrer">66. 加一</a></li><li><a href="https://leetcode.cn/problems/length-of-last-word/" target="_blank" rel="noopener noreferrer">58. 最后一个单词长度</a></li><li><a href="https://leetcode.cn/problems/robot-return-to-origin/" target="_blank" rel="noopener noreferrer">657. 机器人能否返回原点</a></li></ul><h3 id="✅-中级" tabindex="-1"><a class="header-anchor" href="#✅-中级"><span>✅ 中级：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noopener noreferrer">48. 旋转图像</a></li><li><a href="https://leetcode.cn/problems/game-of-life/" target="_blank" rel="noopener noreferrer">289. 生命游戏</a></li><li><a href="https://leetcode.cn/problems/set-matrix-zeroes/" target="_blank" rel="noopener noreferrer">73. 矩阵置零</a></li></ul><h3 id="✅-进阶" tabindex="-1"><a class="header-anchor" href="#✅-进阶"><span>✅ 进阶：</span></a></h3><ul><li><a href="https://leetcode.cn/problems/sudoku-solver/" target="_blank" rel="noopener noreferrer">37. 解数独</a></li><li><a href="https://leetcode.cn/problems/missing-number-in-arithmetic-progression/" target="_blank" rel="noopener noreferrer">1228. 等差数列中缺失的数字</a></li><li><a href="https://leetcode.cn/problems/find-winner-on-a-tic-tac-toe-game/" target="_blank" rel="noopener noreferrer">1275. 找出井字棋的获胜者</a></li></ul>`,77)]))}const k=s(n,[["render",l]]),d=JSON.parse('{"path":"/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html","title":"leetcode 基础篇专题之模拟 simulation 01-入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode 基础篇专题之模拟 simulation 01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","topics","leetcode","simulation","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode 基础篇专题之模拟 simulation 01-入门介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"simulation"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode 基础篇专题之模拟 simulation 01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.08,"words":1225},"filePathRelative":"posts/leetcode/topliked-100/basic/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-basic-simulation-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{k as comp,d as data};
