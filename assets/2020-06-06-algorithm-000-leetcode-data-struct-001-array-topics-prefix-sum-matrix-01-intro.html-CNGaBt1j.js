import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-CPiNG31I.js";const n={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p><blockquote><p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p></blockquote><h1 id="二维前缀和" tabindex="-1"><a class="header-anchor" href="#二维前缀和"><span>二维前缀和</span></a></h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么？</span></a></h2><p>二维前缀和（<code>prefixSum[i][j]</code>）是指：从原矩阵的左上角 <code>(0, 0)</code> 到位置 <code>(i - 1, j - 1)</code> 的<strong>矩形区域内所有元素的总和</strong>。</p><p>注意是<strong>从左上角 (0,0) 开始</strong>，包括边界，不包括下标 <code>i</code> 和 <code>j</code> 本身（这是为了方便加减运算，类似一维前缀和数组多开一位）。</p><h2 id="前缀和数组的构造方法" tabindex="-1"><a class="header-anchor" href="#前缀和数组的构造方法"><span>前缀和数组的构造方法</span></a></h2><p>设原矩阵为 <code>matrix[m][n]</code>，我们构造一个大小为 <code>(m + 1) × (n + 1)</code> 的前缀和矩阵 <code>prefix[m+1][n+1]</code>，初始化全为 0。</p><p>✅ 状态定义：</p><p>prefix[i+1][j+1] 表示 matrix 中从 (0,0) 到 (i,j) 这个矩形的元素和。</p><p>✅ 状态转移公式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prefix[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i][j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> matrix[i][j]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每个部分的解释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>prefix[i+1][j]：表示从 (0,0) 到 (i, j-1) 的子矩阵和，也就是当前行的左边部分（不包括当前位置元素）。</span></span>
<span class="line"><span>prefix[i][j+1]：表示从 (0,0) 到 (i-1, j) 的子矩阵和，也就是当前列的上面部分（不包括当前位置元素）。</span></span>
<span class="line"><span>prefix[i][j]：表示从 (0,0) 到 (i-1, j-1) 的子矩阵和，这是上面两部分重叠的区域。</span></span>
<span class="line"><span>matrix[i][j]：当前单元格的值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔍-如何查询任意子矩形和" tabindex="-1"><a class="header-anchor" href="#🔍-如何查询任意子矩形和"><span>🔍 如何查询任意子矩形和？</span></a></h2><p>查询 <code>(row1, col1)</code> 到 <code>(row2, col2)</code> 的子矩阵总和：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 因为 prefix 多了一行一列，所以都要 +1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][col2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row1][col2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][col1] </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">    +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row1][col1]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li>包括了 (0,0)-(row2,col2) 之间所有值；</li><li>减去上面那一块 (0,0)-(row1-1,col2)；</li><li>减去左边那一块 (0,0)-(row2,col1-1)；</li><li>多减了左上角的 (0,0)-(row1-1,col1-1)，所以加回来。</li></ul><h3 id="一个直观的例子" tabindex="-1"><a class="header-anchor" href="#一个直观的例子"><span>一个直观的例子</span></a></h3><p>假设一个 5*5 的矩阵，如果求 (2,2)-&gt;(3,3) 的累加之和。</p><p>那么：</p><figure><img src="https://i-blog.csdnimg.cn/direct/a2ba226bce3c4c71971953f4d1bcf1db.png#pic_center" alt="二维前缀和" tabindex="0" loading="lazy"><figcaption>二维前缀和</figcaption></figure><p>解释：</p><p>因为黄色部分被多减掉一次，需加回来。结合图还是比较好理解的</p><p>你可以在线体验</p><blockquote><p><a href="https://houbb.github.io/leetcode-notes/leetcode/visible/T304-prefix-sum-matrix-summary.html" target="_blank" rel="noopener noreferrer">二维前缀和在线体验</a></p></blockquote><h2 id="代码实现模板-java" tabindex="-1"><a class="header-anchor" href="#代码实现模板-java"><span>代码实现模板（Java）</span></a></h2><h3 id="构造前缀和数组" tabindex="-1"><a class="header-anchor" href="#构造前缀和数组"><span>构造前缀和数组：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> m </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> matrix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> matrix[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] prefix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[m</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        prefix[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i][j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[i][j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> matrix[i][j]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询任意矩形和" tabindex="-1"><a class="header-anchor" href="#查询任意矩形和"><span>查询任意矩形和：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sumRegion</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> row1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> col1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> row2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> col2) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][col2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">         -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row1][col2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">         -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][col1]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">         +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefix[row1][col1]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h2><ul><li><p>预处理构造前缀和：<code>O(m * n)</code></p></li><li><p>每次查询：<code>O(1)</code> —— <strong>非常快！</strong></p></li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><p>二维前缀和非常适用于：</p><ul><li>多次查询二维区域和；</li><li>棋盘类问题、图像处理、地图积分等；</li><li>任何需要在矩形区域内做和/平均/计数的问题。</li></ul><h2 id="常见的二维前缀和题目列表" tabindex="-1"><a class="header-anchor" href="#常见的二维前缀和题目列表"><span>常见的二维前缀和题目列表</span></a></h2><table><thead><tr><th>题号</th><th>题目名</th><th>难度</th><th>技巧点</th></tr></thead><tbody><tr><td><strong>LC 304</strong></td><td><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable" target="_blank" rel="noopener noreferrer">二维区域和检索 - 矩阵不可变</a></td><td>🟢 简单</td><td>基础二维前缀和</td></tr><tr><td><strong>LC 1314</strong></td><td><a href="https://leetcode.cn/problems/matrix-block-sum/" target="_blank" rel="noopener noreferrer">矩阵区域和</a></td><td>🟡 中等</td><td>二维前缀和 + 滑动窗口</td></tr><tr><td><strong>LC 308</strong>（会员）</td><td><a href="https://leetcode.cn/problems/range-sum-query-2d-mutable/" target="_blank" rel="noopener noreferrer">二维区域和检索 - 可变</a></td><td>🔴 困难</td><td>树状数组 / 线段树（动态前缀和）</td></tr><tr><td><strong>LC 1277</strong></td><td><a href="https://leetcode.cn/problems/count-square-submatrices-with-all-ones/" target="_blank" rel="noopener noreferrer">统计全为 1 的正方形子矩阵</a></td><td>🟡 中等</td><td>前缀和优化判断</td></tr></tbody></table><h2 id="💡-拓展技巧" tabindex="-1"><a class="header-anchor" href="#💡-拓展技巧"><span>💡 拓展技巧</span></a></h2><p>二维前缀和不仅可以用来“查询区域和”，还可以拓展为：</p><ul><li>查询区域内最大/最小值（配合单调队列）</li><li>查询区域内的均值、频率（变种前缀计数）</li><li>多维数据处理：比如图像滤波、区域卷积等</li></ul><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,45)]))}const k=s(n,[["render",h]]),d=JSON.parse('{"path":"/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html","title":"二维前缀和 Prefix Sum Matrix-01-基本概念","lang":"zh-CN","frontmatter":{"title":"二维前缀和 Prefix Sum Matrix-01-基本概念","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","prefix-sum","prefix-sum-matrix","matrix","leetcode"],"published":true,"description":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 二维前缀和 是什么？ 二维前缀和（prefixSum[i][j]）是指：从原矩阵的左上角 (0, 0) 到位置 (i - 1, j - 1) 的矩形区域内所有元素的总和。 注意是从左上角 (0,0) 开始，包...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"二维前缀和 Prefix Sum Matrix-01-基本概念"}],["meta",{"property":"og:description","content":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 二维前缀和 是什么？ 二维前缀和（prefixSum[i][j]）是指：从原矩阵的左上角 (0, 0) 到位置 (i - 1, j - 1) 的矩形区域内所有元素的总和。 注意是从左上角 (0,0) 开始，包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i-blog.csdnimg.cn/direct/a2ba226bce3c4c71971953f4d1bcf1db.png#pic_center"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"prefix-sum"}],["meta",{"property":"article:tag","content":"prefix-sum-matrix"}],["meta",{"property":"article:tag","content":"matrix"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二维前缀和 Prefix Sum Matrix-01-基本概念\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/direct/a2ba226bce3c4c71971953f4d1bcf1db.png#pic_center\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.27,"words":981},"filePathRelative":"posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-prefix-sum-matrix-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>\\n<blockquote>\\n<p><a href=\\"https://github.com/houbb/leetcode\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/houbb/leetcode</a></p>\\n</blockquote>\\n<h1>二维前缀和</h1>\\n<h2>是什么？</h2>\\n<p>二维前缀和（<code>prefixSum[i][j]</code>）是指：从原矩阵的左上角 <code>(0, 0)</code> 到位置 <code>(i - 1, j - 1)</code> 的<strong>矩形区域内所有元素的总和</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
