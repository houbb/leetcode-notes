import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as t}from"./app-BXEJzcOL.js";const n={};function p(l,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="lc104-二叉树的最大深度-maximum-depth-of-binary-tree" tabindex="-1"><a class="header-anchor" href="#lc104-二叉树的最大深度-maximum-depth-of-binary-tree"><span>LC104. 二叉树的最大深度 maximum-depth-of-binary-tree</span></a></h1><p>给定一个二叉树 root ，返回其最大深度。</p><p>二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。</p><figure><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>示例 1：</p><p>输入：root = [3,9,20,null,null,15,7]<br> 输出：3<br> 示例 2：</p><p>输入：root = [1,null,2]<br> 输出：2</p><p>提示：</p><p>树中节点的数量在 [0, 10^4] 区间内。<br> -100 &lt;= Node.val &lt;= 100</p><h1 id="v1-递归" tabindex="-1"><a class="header-anchor" href="#v1-递归"><span>v1-递归</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>树用递归解决一般是最简单的。</p><p>我们其实只需要对比左、右节点的最大高度，最后的结果就是二者中的最大值+1</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxDepth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxDepth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxDepth</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">right</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(left, right)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p>0ms 100%</p><h2 id="反思" tabindex="-1"><a class="header-anchor" href="#反思"><span>反思</span></a></h2><p>发现自己做二叉树还是没有深入理解，只是凭直觉在解题。</p><p>还没有真正的入门。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,21)]))}const o=s(n,[["render",p]]),d=JSON.parse('{"path":"/posts/leetcode/leetcode-75/2025-09-28-binary-tree-01-LC104-maximum-depth-of-binary-tree.html","title":"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree","lang":"zh-CN","frontmatter":{"title":"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree","date":"2025-09-24T00:00:00.000Z","categories":["Leetcode-75"],"tags":["leetcode","Leetcode-75","binary-tree"],"published":true,"description":"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree 给定一个二叉树 root ，返回其最大深度。 二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。 11 示例 1： 输入：root = [3,9,20,null,null,15,7] 输出：3 示例 2： 输入：root = [1,null,2]...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/leetcode-75/2025-09-28-binary-tree-01-LC104-maximum-depth-of-binary-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree"}],["meta",{"property":"og:description","content":"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree 给定一个二叉树 root ，返回其最大深度。 二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。 11 示例 1： 输入：root = [3,9,20,null,null,15,7] 输出：3 示例 2： 输入：root = [1,null,2]..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-28T09:32:35.000Z"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"Leetcode-75"}],["meta",{"property":"article:tag","content":"binary-tree"}],["meta",{"property":"article:published_time","content":"2025-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-28T09:32:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LC104. 二叉树的最大深度 maximum-depth-of-binary-tree\\",\\"image\\":[\\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\\"],\\"datePublished\\":\\"2025-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-28T09:32:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759051955000,"updatedTime":1759051955000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"posts/leetcode/leetcode-75/2025-09-28-binary-tree-01-LC104-maximum-depth-of-binary-tree.md","localizedDate":"2025年9月24日","excerpt":"\\n<p>给定一个二叉树 root ，返回其最大深度。</p>\\n<p>二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\\n<figure><img src=\\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\\" alt=\\"1\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1</figcaption></figure>\\n<p>示例 1：</p>\\n<p>输入：root = [3,9,20,null,null,15,7]<br>\\n输出：3<br>\\n示例 2：</p>\\n<p>输入：root = [1,null,2]<br>\\n输出：2</p>","autoDesc":true}');export{o as comp,d as data};
