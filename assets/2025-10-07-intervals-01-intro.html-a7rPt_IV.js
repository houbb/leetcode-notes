import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-aeBU5i96.js";const h={};function l(e,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="🧩-一、什么是「区间集合」问题" tabindex="-1"><a class="header-anchor" href="#🧩-一、什么是「区间集合」问题"><span>🧩 一、什么是「区间集合」问题？</span></a></h2><p>在 LeetCode 上，「区间集合」问题通常是指：</p><blockquote><p>给定若干个区间（形如 <code>[start, end]</code>），让你去<strong>合并、插入、统计重叠、计算空隙</strong>、或<strong>选择最大不重叠子集</strong>等操作。</p></blockquote><p>例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：[[1,3], [2,6], [8,10], [15,18]]</span></span>
<span class="line"><span>输出：[[1,6], [8,10], [15,18]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是经典的“区间合并”问题。</p><hr><h2 id="🧠-二、常见的区间题目类型-按思维模式分" tabindex="-1"><a class="header-anchor" href="#🧠-二、常见的区间题目类型-按思维模式分"><span>🧠 二、常见的区间题目类型（按思维模式分）</span></a></h2><table><thead><tr><th>类别</th><th>典型问题</th><th>主要操作思维</th><th>常用算法</th></tr></thead><tbody><tr><td>① 区间合并</td><td>LC56、LC57、LC435</td><td>合并重叠区间</td><td>排序 + 线性扫描</td></tr><tr><td>② 插入区间</td><td>LC57</td><td>插入并合并</td><td>同样是排序 + 合并逻辑</td></tr><tr><td>③ 区间交集</td><td>LC986</td><td>找两个集合的交集</td><td>双指针</td></tr><tr><td>④ 区间去重 / 选择</td><td>LC435、LC452</td><td>选出最大不重叠集合</td><td>贪心（按end排序）</td></tr><tr><td>⑤ 区间覆盖</td><td>LC1288、LC1024</td><td>选最少区间覆盖一段范围</td><td>贪心（扫描法）</td></tr><tr><td>⑥ 区间差集</td><td>LC1272</td><td>从区间集合中删除一段区间</td><td>扫描判断交集部分</td></tr><tr><td>⑦ 区间调度 / 会议室</td><td>LC253、LC759</td><td>判断重叠次数或所需资源数</td><td>最小堆 / 扫描线</td></tr><tr><td>⑧ 区间计数 / 差分</td><td>LC715、LC370</td><td>多次增删统计</td><td>差分数组 / 有序表</td></tr></tbody></table><hr><h2 id="⚙️-三、通用套路与思路总结" tabindex="-1"><a class="header-anchor" href="#⚙️-三、通用套路与思路总结"><span>⚙️ 三、通用套路与思路总结</span></a></h2><h3 id="🪜-step-1-排序-关键" tabindex="-1"><a class="header-anchor" href="#🪜-step-1-排序-关键"><span>🪜 Step 1：排序（关键）</span></a></h3><p>几乎所有区间问题的第一步都是：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(intervals, (a, b) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按<strong>起点</strong>排序后，我们才能保证线性遍历时相邻区间可直接比较是否重叠。</p><hr><h3 id="🪜-step-2-判断重叠条件" tabindex="-1"><a class="header-anchor" href="#🪜-step-2-判断重叠条件"><span>🪜 Step 2：判断重叠条件</span></a></h3><p>两个区间 <code>[a1, a2]</code> 与 <code>[b1, b2]</code> 的关系：</p><table><thead><tr><th>关系</th><th>条件</th><th>说明</th></tr></thead><tbody><tr><td>重叠</td><td><code>b1 &lt;= a2</code></td><td>右边的起点 ≤ 左边的终点</td></tr><tr><td>不重叠</td><td><code>b1 &gt; a2</code></td><td>右边的起点在左边之后</td></tr></tbody></table><p>重叠 → 合并：<code>merged = [a1, max(a2, b2)]</code></p><hr><h3 id="🪜-step-3-合并-or-插入-or-统计" tabindex="-1"><a class="header-anchor" href="#🪜-step-3-合并-or-插入-or-统计"><span>🪜 Step 3：合并 or 插入 or 统计</span></a></h3><p>核心逻辑通常长这样👇：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[]</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> res </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(intervals, (a,b)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] cur </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> intervals[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> intervals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (intervals[i][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 重叠 -&gt; 合并</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], intervals[i][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 不重叠 -&gt; 保存旧区间</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cur);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        cur </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> intervals[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cur);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="💡-四、重点题型详解" tabindex="-1"><a class="header-anchor" href="#💡-四、重点题型详解"><span>💡 四、重点题型详解</span></a></h2><h3 id="_1️⃣-区间合并-lc56" tabindex="-1"><a class="header-anchor" href="#_1️⃣-区间合并-lc56"><span>1️⃣ 区间合并（LC56）</span></a></h3><p><strong>题意：</strong><br> 合并所有重叠区间。</p><p><strong>解法：</strong><br> 排序 + 一次扫描<br> → 如果下一个区间的 <code>start &lt;= 当前end</code> 就合并，否则输出当前区间。</p><hr><h3 id="_2️⃣-插入区间-lc57" tabindex="-1"><a class="header-anchor" href="#_2️⃣-插入区间-lc57"><span>2️⃣ 插入区间（LC57）</span></a></h3><p><strong>题意：</strong><br> 在一组非重叠区间中插入一个新的区间，并返回合并后的结果。</p><p><strong>思路：</strong></p><ul><li>先把所有在新区间<strong>左边</strong>的加进去；</li><li>再合并所有与新区间<strong>重叠</strong>的；</li><li>最后把右边剩余区间加进去。</li></ul><p><strong>代码：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[]</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> res </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] cur </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> intervals) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cur);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在左边</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]) {        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在右边</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newInterval);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        newInterval </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cur</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {                                   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 重叠</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newInterval[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], cur[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(newInterval);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3️⃣-区间交集-lc986" tabindex="-1"><a class="header-anchor" href="#_3️⃣-区间交集-lc986"><span>3️⃣ 区间交集（LC986）</span></a></h3><p><strong>思路：</strong><br> 双指针法同时遍历两个有序区间集合：</p><ul><li>如果有重叠，就取交集；</li><li>谁的 end 小，谁往后移动。</li></ul><hr><h3 id="_4️⃣-不重叠区间数量-lc435" tabindex="-1"><a class="header-anchor" href="#_4️⃣-不重叠区间数量-lc435"><span>4️⃣ 不重叠区间数量（LC435）</span></a></h3><p><strong>思路：</strong><br> 按 <code>end</code> 升序排序，贪心选区间，尽可能早结束。</p><p><strong>模板：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(intervals, (a,b)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> end </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> intervals[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (intervals[i][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> end) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        end </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> intervals[i][</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 这类题常用在会议室安排、活动选择问题中。</p><hr><h3 id="_5️⃣-区间覆盖问题-lc1024、lc1288" tabindex="-1"><a class="header-anchor" href="#_5️⃣-区间覆盖问题-lc1024、lc1288"><span>5️⃣ 区间覆盖问题（LC1024、LC1288）</span></a></h3><p><strong>问题本质：</strong><br> 选最少区间使得 <code>[0, T]</code> 被完全覆盖。</p><p><strong>技巧：</strong></p><ul><li>按起点排序；</li><li>每次选择在当前可达范围内<strong>右端点最大的区间</strong>（贪心扩展）。</li></ul><hr><h3 id="_6️⃣-区间调度最小会议室数-lc253" tabindex="-1"><a class="header-anchor" href="#_6️⃣-区间调度最小会议室数-lc253"><span>6️⃣ 区间调度最小会议室数（LC253）</span></a></h3><p><strong>方法一：最小堆</strong><br> 每次放入会议，若最早结束时间 ≤ 新会议开始，就可以复用。</p><p><strong>方法二：扫描线（推荐）</strong><br> 把所有 <code>start</code> 记为 +1，<code>end</code> 记为 -1，排序扫描求最大并发数。</p><hr><h2 id="🧮-五、通用算法模板总结" tabindex="-1"><a class="header-anchor" href="#🧮-五、通用算法模板总结"><span>🧮 五、通用算法模板总结</span></a></h2><table><thead><tr><th>场景</th><th>模板思维</th><th>算法</th></tr></thead><tbody><tr><td>合并重叠</td><td>排序 + 线性扫描</td><td>O(n log n)</td></tr><tr><td>插入并合并</td><td>分类：左、右、重叠</td><td>O(n)</td></tr><tr><td>区间交集</td><td>双指针</td><td>O(n + m)</td></tr><tr><td>不重叠最大数量</td><td>按结束时间贪心</td><td>O(n log n)</td></tr><tr><td>区间覆盖</td><td>扫描线/贪心</td><td>O(n log n)</td></tr><tr><td>多会议室数</td><td>扫描线 / 最小堆</td><td>O(n log n)</td></tr></tbody></table><hr><h2 id="🔍-六、思维图-文字版" tabindex="-1"><a class="header-anchor" href="#🔍-六、思维图-文字版"><span>🔍 六、思维图（文字版）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>区间集合问题</span></span>
<span class="line"><span>├── 基础型</span></span>
<span class="line"><span>│   ├── 合并区间（56）</span></span>
<span class="line"><span>│   └── 插入区间（57）</span></span>
<span class="line"><span>├── 交集型</span></span>
<span class="line"><span>│   ├── 两集合交集（986）</span></span>
<span class="line"><span>│   └── 区间差集（1272）</span></span>
<span class="line"><span>├── 贪心型</span></span>
<span class="line"><span>│   ├── 不重叠最大数（435）</span></span>
<span class="line"><span>│   └── 区间覆盖最小数（1024/1288）</span></span>
<span class="line"><span>└── 扫描线型</span></span>
<span class="line"><span>    ├── 会议室数（253）</span></span>
<span class="line"><span>    └── 最大并发数统计</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧱-七、典型陷阱" tabindex="-1"><a class="header-anchor" href="#🧱-七、典型陷阱"><span>🧱 七、典型陷阱</span></a></h2><ol><li><p><strong>边界判断混乱</strong></p><ul><li><code>[start, end]</code> 是闭区间？半开区间？</li><li>如果题目没说，通常默认闭区间。</li></ul></li><li><p><strong>忘记加最后一个区间</strong></p><ul><li>合并完循环后，别忘 <code>res.add(cur)</code></li></ul></li><li><p><strong>不排序就直接遍历</strong></p><ul><li>绝大多数题都必须排序。</li></ul></li><li><p><strong>重叠判断条件错</strong></p><ul><li>一定是 <code>next.start &lt;= cur.end</code> 才算重叠。</li></ul></li></ol><hr><h2 id="🧭-八、进阶方向" tabindex="-1"><a class="header-anchor" href="#🧭-八、进阶方向"><span>🧭 八、进阶方向</span></a></h2><ul><li>支持动态插入删除区间（例如 LeetCode 715 Range Module）</li><li>使用「线段树 / 平衡树」维护动态区间</li><li>区间和差分统计（370, 1094）</li></ul>`,67)]))}const d=i(h,[["render",l]]),r=JSON.parse('{"path":"/posts/algorithm/2025-10-07-intervals-01-intro.html","title":"区间集合","lang":"zh-CN","frontmatter":{"title":"区间集合","date":"2025-10-06T00:00:00.000Z","categories":["Althgorim"],"tags":["althgorim","intervals"],"published":true,"description":"🧩 一、什么是「区间集合」问题？ 在 LeetCode 上，「区间集合」问题通常是指： 给定若干个区间（形如 [start, end]），让你去合并、插入、统计重叠、计算空隙、或选择最大不重叠子集等操作。 例如： 这就是经典的“区间合并”问题。 🧠 二、常见的区间题目类型（按思维模式分） ⚙️ 三、通用套路与思路总结 🪜 Step 1：排序（关键...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/2025-10-07-intervals-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"区间集合"}],["meta",{"property":"og:description","content":"🧩 一、什么是「区间集合」问题？ 在 LeetCode 上，「区间集合」问题通常是指： 给定若干个区间（形如 [start, end]），让你去合并、插入、统计重叠、计算空隙、或选择最大不重叠子集等操作。 例如： 这就是经典的“区间合并”问题。 🧠 二、常见的区间题目类型（按思维模式分） ⚙️ 三、通用套路与思路总结 🪜 Step 1：排序（关键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-07T19:59:16.000Z"}],["meta",{"property":"article:tag","content":"althgorim"}],["meta",{"property":"article:tag","content":"intervals"}],["meta",{"property":"article:published_time","content":"2025-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-07T19:59:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"区间集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-07T19:59:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759864211000,"updatedTime":1759867156000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"posts/algorithm/2025-10-07-intervals-01-intro.md","localizedDate":"2025年10月6日","excerpt":"<h2>🧩 一、什么是「区间集合」问题？</h2>\\n<p>在 LeetCode 上，「区间集合」问题通常是指：</p>\\n<blockquote>\\n<p>给定若干个区间（形如 <code>[start, end]</code>），让你去<strong>合并、插入、统计重叠、计算空隙</strong>、或<strong>选择最大不重叠子集</strong>等操作。</p>\\n</blockquote>\\n<p>例如：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>输入：[[1,3], [2,6], [8,10], [15,18]]</span></span>\\n<span class=\\"line\\"><span>输出：[[1,6], [8,10], [15,18]]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,r as data};
