import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-BTw5xxUW.js";const t={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="lc236-二叉树的最近公共祖先-lowest-common-ancestor-of-a-binary-tree" tabindex="-1"><a class="header-anchor" href="#lc236-二叉树的最近公共祖先-lowest-common-ancestor-of-a-binary-tree"><span>LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree</span></a></h1><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>示例 1：</p><figure><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br> 输出：3<br> 解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</p><p>示例 2：</p><figure><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br> 输出：5<br> 解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。</p><p>示例 3：</p><p>输入：root = [1,2], p = 1, q = 2<br> 输出：1</p><p>提示：</p><p>树中节点数目在范围 [2, 10^5] 内。<br> -10^9 &lt;= Node.val &lt;= 10^9<br> 所有 Node.val 互不相同 。<br> p != q<br> p 和 q 均存在于给定的二叉树中。</p><h1 id="v1-递归" tabindex="-1"><a class="header-anchor" href="#v1-递归"><span>v1-递归</span></a></h1><h2 id="核心流程" tabindex="-1"><a class="header-anchor" href="#核心流程"><span>核心流程</span></a></h2><ol><li><p>终止条件：</p><ul><li>如果当前节点 <code>root</code> 是 <code>null</code>，说明到达叶子节点的下一层，返回 <code>null</code>，表示没找到。</li><li>如果当前节点就是 <code>p</code> 或 <code>q</code>，说明找到了其中一个节点，直接返回该节点。</li></ul></li><li><p>递归遍历左右子树：</p><ul><li>递归调用左子树，寻找 <code>p</code> 或 <code>q</code>。</li><li>递归调用右子树，寻找 <code>p</code> 或 <code>q</code>。</li></ul></li><li><p>判断返回结果：</p><ul><li>如果左右子树都返回非空（<code>leftNode != null &amp;&amp; rightNode != null</code>），说明 <code>p</code> 和 <code>q</code> 分别位于当前节点的两边，当前节点 <code>root</code> 就是它们的最近公共祖先。</li><li>如果只有一边非空，说明两个节点都在这一边，返回非空那边的结果。</li><li>如果两边都是空，返回空。</li></ul></li></ol><p>算法通过递归的方式从下往上找，当左右子树各自找到一个目标节点时，当前节点即为最近公共祖先。如果两个节点都在一侧，就沿着该侧继续向上返回找到的节点。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lowestCommonAncestor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> q) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 如果二者就是 root</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> q) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 递归找最近的子树</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        TreeNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> leftNode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lowestCommonAncestor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> q)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        TreeNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rightNode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lowestCommonAncestor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">right</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> q)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //看二者的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 两边</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(leftNode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> rightNode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 单边</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(leftNode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> leftNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> rightNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p>7ms 99.72%</p><h2 id="为什么这么做是对的" tabindex="-1"><a class="header-anchor" href="#为什么这么做是对的"><span>为什么这么做是对的？</span></a></h2><h3 id="为什么递归向下找-最终返回的就是最近公共祖先" tabindex="-1"><a class="header-anchor" href="#为什么递归向下找-最终返回的就是最近公共祖先"><span>为什么递归向下找，最终返回的就是最近公共祖先？</span></a></h3><p>我们来看这个递归过程的核心逻辑：</p><h4 id="_1-递归从根节点开始往下走" tabindex="-1"><a class="header-anchor" href="#_1-递归从根节点开始往下走"><span>1. 递归从根节点开始往下走：</span></a></h4><ul><li>在每个节点，递归去左右子树找 <code>p</code> 或 <code>q</code>。</li><li>返回值是“在当前子树里找到的 <code>p</code> 或 <code>q</code> 节点”或者<code>null</code>（没找到）。</li></ul><h4 id="_2-三种可能的返回情况" tabindex="-1"><a class="header-anchor" href="#_2-三种可能的返回情况"><span>2. 三种可能的返回情况：</span></a></h4><p>最核心的其实就下面的 3 个场景：</p><ul><li>都没找到（左、右子树都返回null）：说明当前子树里没有 <code>p</code> 和 <code>q</code>，返回 <code>null</code>。</li><li>只在一边找到（左或右返回非空）：说明 <code>p</code> 和 <code>q</code> 都在该子树中（或者其中一个刚好是当前节点），返回找到的那个节点。</li><li>两边都找到（左右都返回非空）：说明 <code>p</code>、<code>q</code> 分别在当前节点的两边，当前节点正是它们的最近公共祖先。</li></ul><h4 id="_3-为什么-两个节点分别在左右子树-时-当前节点就是最近公共祖先" tabindex="-1"><a class="header-anchor" href="#_3-为什么-两个节点分别在左右子树-时-当前节点就是最近公共祖先"><span>3. 为什么“两个节点分别在左右子树”时，当前节点就是最近公共祖先？</span></a></h4><ul><li>公共祖先定义： 最近公共祖先是路径上离两个节点最近的那个公共节点。</li><li>如果 <code>p</code>、<code>q</code> 分别在左右子树，那么它们的路径必定通过当前节点，且当前节点是最靠近它们的公共节点了。</li><li>因为如果更低层有公共祖先，两个节点不会分开在左右子树，而会都在同一侧。</li></ul><h4 id="_4-为什么返回-p-或-q-节点本身" tabindex="-1"><a class="header-anchor" href="#_4-为什么返回-p-或-q-节点本身"><span>4. 为什么返回 <code>p</code> 或 <code>q</code> 节点本身？</span></a></h4><ul><li>如果当前节点是 <code>p</code> 或 <code>q</code>，说明至少找到了一个目标节点，可以把它往上返回。</li><li>这样父节点知道“我这边找到了一个目标节点”。</li><li>递归最终会找到两个目标节点的位置。</li></ul><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://leetcode.cn/studyplan/top-100-liked/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/studyplan/top-100-liked/</a></p>`,44)]))}const d=s(t,[["render",l]]),o=JSON.parse('{"path":"/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html","title":"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree","lang":"zh-CN","frontmatter":{"title":"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","topics","leetcode","tree","binary-tree","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-18T06:45:14.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"tree"}],["meta",{"property":"article:tag","content":"binary-tree"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-18T06:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法篇专题之树 Tree 02-LC236. 二叉树的最近公共祖先 lowest-common-ancestor-of-a-binary-tree\\",\\"image\\":[\\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\\",\\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-18T06:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758177914000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":3},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.3,"words":1291},"filePathRelative":"posts/leetcode/topliked-100/tree/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-binary-tree-02-leetcode-13-LC236.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{d as comp,o as data};
