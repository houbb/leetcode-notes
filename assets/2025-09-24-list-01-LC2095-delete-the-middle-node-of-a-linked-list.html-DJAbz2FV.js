import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CxuXvQYp.js";const l={};function t(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="lc2095-删除链表的中间节点-delete-the-middle-node-of-a-linked-list" tabindex="-1"><a class="header-anchor" href="#lc2095-删除链表的中间节点-delete-the-middle-node-of-a-linked-list"><span>LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list</span></a></h1><p>给你一个链表的头节点 head 。删除 链表的 中间节点 ，并返回修改后的链表的头节点 head 。</p><p>长度为 n 链表的中间节点是从头数起第 ⌊n / 2⌋ 个节点（下标从 0 开始），其中 ⌊x⌋ 表示小于或等于 x 的最大整数。</p><p>对于 n = 1、2、3、4 和 5 的情况，中间节点的下标分别是 0、1、1、2 和 2 。</p><p>示例 1：</p><figure><img src="https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>输入：head = [1,3,4,7,1,2,6]<br> 输出：[1,3,4,1,2,6]<br> 解释：<br> 上图表示给出的链表。节点的下标分别标注在每个节点的下方。<br> 由于 n = 7 ，值为 7 的节点 3 是中间节点，用红色标注。<br> 返回结果为移除节点后的新链表。</p><p>示例 2：</p><figure><img src="https://assets.leetcode.com/uploads/2021/11/16/eg2drawio.png" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><p>输入：head = [1,2,3,4]<br> 输出：[1,2,4]<br> 解释：<br> 上图表示给出的链表。<br> 对于 n = 4 ，值为 3 的节点 2 是中间节点，用红色标注。</p><p>示例 3：</p><figure><img src="https://assets.leetcode.com/uploads/2021/11/16/eg3drawio.png" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><p>输入：head = [2,1]<br> 输出：[2]<br> 解释：<br> 上图表示给出的链表。<br> 对于 n = 2 ，值为 1 的节点 1 是中间节点，用红色标注。<br> 值为 2 的节点 0 是移除节点 1 后剩下的唯一一个节点。</p><p>提示：</p><p>链表中节点的数目在范围 [1, 10^5] 内</p><p>1 &lt;= Node.val &lt;= 10^5</p><h1 id="v1-快慢指针" tabindex="-1"><a class="header-anchor" href="#v1-快慢指针"><span>v1-快慢指针</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><h3 id="找到中间节点" tabindex="-1"><a class="header-anchor" href="#找到中间节点"><span>找到中间节点</span></a></h3><p>针对这种找中点的链表，最简单的思路是从头到尾遍历，计算出总长度，然后再计算一半的大小，从头到尾再找一次。</p><p>比较推荐的方法是快慢指针。</p><p>快指针一次走2步，慢指针走一步。</p><p>这样，快指针到头时，慢指针就在中间位置。</p><h3 id="删除中间节点" tabindex="-1"><a class="header-anchor" href="#删除中间节点"><span>删除中间节点</span></a></h3><p>删除的时候，需要考虑一些边界场景</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pre-middle-next #1</span></span>
<span class="line"><span>pre-middle #2</span></span>
<span class="line"><span>middle-next #3</span></span>
<span class="line"><span>middle #4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实可以简化为2个场景</p><p>1）middle 没有 pre。直接返回 middle.next 作为结果</p><p>2）middle 有 pre。<code>pre.next = middle.next;</code> 移除 middle，然后返回以前的 head 即可</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ListNode</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> deleteMiddle</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> head) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tempHead </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 开始迭代</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fast </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> slow </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> slowPre </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(fast </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            fast </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(fast </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 快走2步</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            fast </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 慢节点走一步，同时记录慢节点的 pre</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            slowPre </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> slow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            slow </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> slow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // slow 就是中点</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //1. 没有 pre 前，直接返回 slow.next</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(slowPre </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> slow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 移除 middle</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> next </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> slow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        slowPre</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 返回新的头</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> tempHead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p>3ms 击败 100.00%</p><h2 id="反思" tabindex="-1"><a class="header-anchor" href="#反思"><span>反思</span></a></h2><p>快慢指针是链表中的常用技巧，值得掌握。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,36)]))}const k=i(l,[["render",t]]),r=JSON.parse('{"path":"/posts/leetcode/leetcode-75/2025-09-24-list-01-LC2095-delete-the-middle-node-of-a-linked-list.html","title":"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list","lang":"zh-CN","frontmatter":{"title":"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list","date":"2025-09-24T00:00:00.000Z","categories":["Leetcode-75"],"tags":["leetcode","Leetcode-75","list"],"published":true,"description":"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list 给你一个链表的头节点 head 。删除 链表的 中间节点 ，并返回修改后的链表的头节点 head 。 长度为 n 链表的中间节点是从头数起第 ⌊n / 2⌋ 个节点（下标从 0 开始），其中 ⌊x⌋ 表示小于或等于 x 的最大整数。 对于...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/leetcode-75/2025-09-24-list-01-LC2095-delete-the-middle-node-of-a-linked-list.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list"}],["meta",{"property":"og:description","content":"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list 给你一个链表的头节点 head 。删除 链表的 中间节点 ，并返回修改后的链表的头节点 head 。 长度为 n 链表的中间节点是从头数起第 ⌊n / 2⌋ 个节点（下标从 0 开始），其中 ⌊x⌋ 表示小于或等于 x 的最大整数。 对于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:49:34.000Z"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"Leetcode-75"}],["meta",{"property":"article:tag","content":"list"}],["meta",{"property":"article:published_time","content":"2025-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:49:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LC2095. 删除链表的中间节点 delete-the-middle-node-of-a-linked-list\\",\\"image\\":[\\"https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png\\",\\"https://assets.leetcode.com/uploads/2021/11/16/eg2drawio.png\\",\\"https://assets.leetcode.com/uploads/2021/11/16/eg3drawio.png\\"],\\"datePublished\\":\\"2025-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:49:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1758682174000,"updatedTime":1758682174000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.31,"words":693},"filePathRelative":"posts/leetcode/leetcode-75/2025-09-24-list-01-LC2095-delete-the-middle-node-of-a-linked-list.md","localizedDate":"2025年9月24日","excerpt":"\\n<p>给你一个链表的头节点 head 。删除 链表的 中间节点 ，并返回修改后的链表的头节点 head 。</p>\\n<p>长度为 n 链表的中间节点是从头数起第 ⌊n / 2⌋ 个节点（下标从 0 开始），其中 ⌊x⌋ 表示小于或等于 x 的最大整数。</p>\\n<p>对于 n = 1、2、3、4 和 5 的情况，中间节点的下标分别是 0、1、1、2 和 2 。</p>\\n<p>示例 1：</p>\\n<figure><img src=\\"https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png\\" alt=\\"1\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1</figcaption></figure>","autoDesc":true}');export{k as comp,r as data};
