import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as d}from"./app-B1VZWV8o.js";const n={};function s(a,t){return d(),e("div",null,t[0]||(t[0]=[o('<h1 id="排序系列" tabindex="-1"><a class="header-anchor" href="#排序系列"><span>排序系列</span></a></h1><p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-03-select-sort" target="_blank" rel="noopener noreferrer">sort-03-SelectSort 选择排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-04-heap-sort" target="_blank" rel="noopener noreferrer">sort-04-heap sort 堆排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-05-insert-sort" target="_blank" rel="noopener noreferrer">sort-05-insert sort 插入排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-06-shell-sort" target="_blank" rel="noopener noreferrer">sort-06-shell sort 希尔排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-07-merge-sort" target="_blank" rel="noopener noreferrer">sort-07-merge sort 归并排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-08-counting-sort" target="_blank" rel="noopener noreferrer">sort-08-counting sort 计数排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-09-bucket-sort" target="_blank" rel="noopener noreferrer">sort-09-bucket sort 桶排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-10-bigfile-sort" target="_blank" rel="noopener noreferrer">sort-10-bigfile 大文件外部排序</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>大家好，我是老马。</p><p>以前从工程的角度，已经梳理过一次排序算法。</p><p>这里从力扣算法的角度，重新梳理一遍。</p><p>核心内容包含：</p><p>1）常见排序算法介绍</p><p>2）背后的核心思想</p><p>3）leetcode 经典题目练习+讲解</p><p>4）应用场景、优缺点等对比总结</p><p>5）工程 sdk 包，这个已经完成。</p><ol start="6"><li>可视化</li></ol><h1 id="整体对比" tabindex="-1"><a class="header-anchor" href="#整体对比"><span>整体对比</span></a></h1><p>下面是<strong>常见排序算法的完整对比表</strong>，包括：时间复杂度、空间复杂度、是否稳定、优缺点等信息，方便系统地掌握。</p><hr><h3 id="🧱-一、基础排序算法-适合入门" tabindex="-1"><a class="header-anchor" href="#🧱-一、基础排序算法-适合入门"><span>🧱 一、基础排序算法（适合入门）</span></a></h3><table><thead><tr><th>算法</th><th>时间复杂度 (平均/最坏)</th><th>空间复杂度</th><th>稳定性</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>冒泡排序</strong> Bubble Sort</td><td>O(n²) / O(n²)</td><td>O(1)</td><td>✅ 稳定</td><td>实现简单，适合教学</td><td>效率极低，适合数据很小或几乎有序</td></tr><tr><td><strong>选择排序</strong> Selection Sort</td><td>O(n²) / O(n²)</td><td>O(1)</td><td>❌ 不稳定</td><td>交换次数少，结构清晰</td><td>比冒泡还慢，不能利用已有序性</td></tr><tr><td><strong>插入排序</strong> Insertion Sort</td><td>O(n²) / O(n²)</td><td>O(1)</td><td>✅ 稳定</td><td>适合小规模、部分有序数据</td><td>大数据量时效率低</td></tr></tbody></table><hr><h3 id="⚙️-二、进阶排序算法-效率更高" tabindex="-1"><a class="header-anchor" href="#⚙️-二、进阶排序算法-效率更高"><span>⚙️ 二、进阶排序算法（效率更高）</span></a></h3><table><thead><tr><th>算法</th><th>时间复杂度 (平均/最坏)</th><th>空间复杂度</th><th>稳定性</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>归并排序</strong> Merge Sort</td><td>O(n log n) / O(n log n)</td><td>O(n)</td><td>✅ 稳定</td><td>稳定，时间稳定，适合链表等结构</td><td>空间消耗大，递归实现复杂</td></tr><tr><td><strong>快速排序</strong> Quick Sort</td><td>O(n log n) / O(n²)</td><td>O(log n)（递归栈）</td><td>❌ 不稳定</td><td>平均快，原地排序，实用性强</td><td>最坏情况退化为 O(n²)，不稳定</td></tr><tr><td><strong>希尔排序</strong> Shell Sort</td><td>约 O(n¹.³) / O(n²)</td><td>O(1)</td><td>❌ 不稳定</td><td>改进插入排序，速度提升大</td><td>增量序列选择影响性能，难分析</td></tr><tr><td><strong>堆排序</strong> Heap Sort</td><td>O(n log n) / O(n log n)</td><td>O(1)</td><td>❌ 不稳定</td><td>不使用递归，不需要额外内存</td><td>实现略复杂，不稳定</td></tr></tbody></table><hr><h3 id="🚀-三、线性排序算法-特定场景" tabindex="-1"><a class="header-anchor" href="#🚀-三、线性排序算法-特定场景"><span>🚀 三、线性排序算法（特定场景）</span></a></h3><table><thead><tr><th>算法</th><th>时间复杂度 (平均/最坏)</th><th>空间复杂度</th><th>稳定性</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>计数排序</strong> Counting Sort</td><td>O(n + k) / O(n + k)</td><td>O(k)</td><td>✅ 稳定</td><td>非比较排序，适合范围小的整数</td><td>数据范围大时空间消耗严重</td></tr><tr><td><strong>桶排序</strong> Bucket Sort</td><td>O(n + k) / O(n²)</td><td>O(n + k)</td><td>✅ 稳定</td><td>适合小数和均匀分布</td><td>依赖数据分布，桶内排序开销大</td></tr><tr><td><strong>基数排序</strong> Radix Sort</td><td>O(n·k) / O(n·k)</td><td>O(n + k)</td><td>✅ 稳定</td><td>适合定长整数或字符串，效率高</td><td>需要额外空间，非比较型，不通用</td></tr></tbody></table><blockquote><p>注：k 表示值域或位数（如基数或最大整数范围）</p></blockquote><hr><h3 id="📌-总结推荐-按使用场景" tabindex="-1"><a class="header-anchor" href="#📌-总结推荐-按使用场景"><span>📌 总结推荐（按使用场景）</span></a></h3><table><thead><tr><th>场景</th><th>推荐算法</th></tr></thead><tbody><tr><td>初学者入门</td><td>冒泡排序、插入排序</td></tr><tr><td>面试常考 + 实用</td><td>快速排序、归并排序</td></tr><tr><td>数据几乎有序</td><td>插入排序、冒泡排序（优化版）</td></tr><tr><td>大量数据 + 空间充足</td><td>归并排序、基数排序</td></tr><tr><td>内存紧张</td><td>快速排序、堆排序（原地排序）</td></tr><tr><td>要求稳定</td><td>插入、冒泡、归并、计数、基数</td></tr><tr><td>特殊整数范围</td><td>计数排序、桶排序、基数排序</td></tr></tbody></table><h1 id="每种常见排序算法的核心思想" tabindex="-1"><a class="header-anchor" href="#每种常见排序算法的核心思想"><span>每种常见排序算法的核心思想</span></a></h1><p>下面是<strong>每种常见排序算法的核心思想</strong>简要总结，帮你快速理解“它到底在干什么”。</p><h3 id="🧱-一、基础排序-核心是-模拟人工排序过程" tabindex="-1"><a class="header-anchor" href="#🧱-一、基础排序-核心是-模拟人工排序过程"><span>🧱 一、基础排序（核心是“模拟人工排序过程”）</span></a></h3><table><thead><tr><th>算法</th><th>核心思想</th></tr></thead><tbody><tr><td><strong>冒泡排序</strong> Bubble Sort</td><td>反复比较<strong>相邻元素</strong>，大的往后交换，让最大元素“像气泡一样”冒到最后。</td></tr><tr><td><strong>选择排序</strong> Selection Sort</td><td>每次从未排序区域中<strong>选择最小值</strong>，放到已排序区的末尾。</td></tr><tr><td><strong>插入排序</strong> Insertion Sort</td><td>类似整理扑克牌，<strong>将当前元素插入到前面已排好序的部分中</strong>合适的位置。</td></tr></tbody></table><hr><h3 id="⚙️-二、进阶排序-核心是-分治、结构控制" tabindex="-1"><a class="header-anchor" href="#⚙️-二、进阶排序-核心是-分治、结构控制"><span>⚙️ 二、进阶排序（核心是“分治、结构控制”）</span></a></h3><table><thead><tr><th>算法</th><th>核心思想</th></tr></thead><tbody><tr><td><strong>归并排序</strong> Merge Sort</td><td>典型<strong>分治法</strong>：先分成左右两半，分别排序，再把两个有序数组<strong>合并</strong>。</td></tr><tr><td><strong>快速排序</strong> Quick Sort</td><td>也是<strong>分治法</strong>：选一个“基准值”，把比它小的放左边，大的放右边，然后<strong>递归排序两边</strong>。</td></tr><tr><td><strong>希尔排序</strong> Shell Sort</td><td>对插入排序的改进：<strong>先分组进行粗排序</strong>，然后逐步缩小间隔，最后整体插入排序。</td></tr><tr><td><strong>堆排序</strong> Heap Sort</td><td>利用<strong>堆这种数据结构</strong>，不断取出堆顶最大/最小值，然后重新调整成堆。</td></tr></tbody></table><hr><h3 id="🚀-三、线性排序-核心是-用空间换时间" tabindex="-1"><a class="header-anchor" href="#🚀-三、线性排序-核心是-用空间换时间"><span>🚀 三、线性排序（核心是“用空间换时间”）</span></a></h3><table><thead><tr><th>算法</th><th>核心思想</th></tr></thead><tbody><tr><td><strong>计数排序</strong> Counting Sort</td><td>建一个计数数组记录每个数的出现次数，<strong>然后按顺序还原排序结果</strong>。</td></tr><tr><td><strong>桶排序</strong> Bucket Sort</td><td>把数据<strong>按范围分到多个桶里</strong>，每个桶内部排序后合并。</td></tr><tr><td><strong>基数排序</strong> Radix Sort</td><td>按数字的<strong>每一位从低到高</strong>进行多轮排序，常用<strong>计数排序做子步骤</strong>。</td></tr></tbody></table><hr><h3 id="🧠-一句话记住它们的核心思想" tabindex="-1"><a class="header-anchor" href="#🧠-一句话记住它们的核心思想"><span>🧠 一句话记住它们的核心思想：</span></a></h3><table><thead><tr><th>算法</th><th>一句话记忆核心</th></tr></thead><tbody><tr><td>冒泡</td><td>相邻交换，最大慢慢冒出来</td></tr><tr><td>选择</td><td>每轮选最小，放到前面</td></tr><tr><td>插入</td><td>当前值往前插入合适位置</td></tr><tr><td>归并</td><td>分成两半 → 各自排序 → 合并</td></tr><tr><td>快排</td><td>选基准 → 分左右 → 递归处理</td></tr><tr><td>希尔</td><td>分组插排，逐步缩小步长</td></tr><tr><td>堆排</td><td>构造大/小顶堆，每次取堆顶</td></tr><tr><td>计数</td><td>统计出现次数，反推出排序</td></tr><tr><td>桶排</td><td>分桶 → 桶内排 → 合并</td></tr><tr><td>基数</td><td>按位排（个位→十位…），多轮稳定排序</td></tr></tbody></table>',51)]))}const i=r(n,[["render",s]]),l=JSON.parse('{"path":"/posts/leetcode/top-100-liked/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html","title":"leetcode sort 排序-00-整体概览介绍","lang":"zh-CN","frontmatter":{"title":"leetcode sort 排序-00-整体概览介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","sort","sf"],"published":true,"description":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode sort 排序-00-整体概览介绍"}],["meta",{"property":"og:description","content":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"sort"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode sort 排序-00-整体概览介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":5.28,"words":1584},"filePathRelative":"posts/leetcode/top-100-liked/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-00-overview.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-00-overview-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-00-排序算法汇总</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-01-bubble-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-01-bubble sort 冒泡排序算法详解</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-02-quick-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-02-QuickSort 快速排序到底快在哪里？</a></p>","autoDesc":true}');export{i as comp,l as data};
