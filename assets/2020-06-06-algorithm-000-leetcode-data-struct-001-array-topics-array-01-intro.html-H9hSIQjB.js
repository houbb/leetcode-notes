import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-Cma39SrW.js";const h={};function n(r,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p><blockquote><p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p></blockquote><h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>在力扣（LeetCode）中，“<strong>普通数组</strong>”是最基础也是最常见的数据结构之一。虽然“普通数组”这个说法听起来很简单，但它在算法题中扮演着非常重要的角色，很多高级技巧（如前缀和、差分、滑动窗口等）也是在数组的基础上发展出来的。</p><hr><h2 id="一、什么是普通数组" tabindex="-1"><a class="header-anchor" href="#一、什么是普通数组"><span>一、什么是普通数组？</span></a></h2><p>在编程中，“数组”（Array）是一种<strong>线性数据结构</strong>，用于按照顺序存储一组相同类型的元素。</p><p>在 Java 中：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] nums </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 Python 中：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nums </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="二、数组的特点" tabindex="-1"><a class="header-anchor" href="#二、数组的特点"><span>二、数组的特点</span></a></h2><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>连续内存</td><td>数组中的元素在内存中是连续存储的，支持通过下标快速访问（O(1) 时间复杂度）。</td></tr><tr><td>支持随机访问</td><td>可以通过下标 <code>nums[i]</code> 快速访问或修改元素。</td></tr><tr><td>固定大小</td><td>大多数语言中数组的大小一旦定义就不能更改（例如 Java），除非重新创建。</td></tr></tbody></table><hr><h2 id="三、力扣中数组的常见操作" tabindex="-1"><a class="header-anchor" href="#三、力扣中数组的常见操作"><span>三、力扣中数组的常见操作</span></a></h2><ol><li><p><strong>遍历数组</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 访问 nums[i]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>查找最大/最小值</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> max </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MIN_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    max </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(max, num);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>求和</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>排序</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nums);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h2 id="四、常见题型分类" tabindex="-1"><a class="header-anchor" href="#四、常见题型分类"><span>四、常见题型分类</span></a></h2><table><thead><tr><th>题型</th><th>说明</th></tr></thead><tbody><tr><td>前缀和</td><td>快速计算某一段区间的和（如：<code>LC 560</code>, <code>LC 303</code>）</td></tr><tr><td>滑动窗口</td><td>高效处理连续区间问题（如：<code>LC 209</code>, <code>LC 239</code>）</td></tr><tr><td>双指针</td><td>常用于有序数组查找问题（如：<code>LC 167</code>, <code>LC 26</code>）</td></tr><tr><td>差分数组</td><td>用于处理区间频繁更新问题（如：<code>LC 370</code>）</td></tr><tr><td>排序 + 二分 / 去重</td><td>排序后进行二分、哈希、指针去重（如：<code>LC 1</code>, <code>LC 15</code>）</td></tr><tr><td>动态规划状态数组</td><td>DP 本质上也常用数组保存状态（如：<code>LC 198</code>, <code>LC 70</code>）</td></tr><tr><td>计数 / 桶排序思想</td><td>如：<code>LC 169</code>, <code>LC 75</code>, <code>LC 451</code></td></tr></tbody></table><hr><h2 id="五、力扣数组典型题目推荐" tabindex="-1"><a class="header-anchor" href="#五、力扣数组典型题目推荐"><span>五、力扣数组典型题目推荐</span></a></h2><table><thead><tr><th>题号</th><th>标题</th><th>类型</th></tr></thead><tbody><tr><td>1</td><td>两数之和</td><td>哈希+数组</td></tr><tr><td>26</td><td>删除有序数组中的重复项</td><td>双指针</td></tr><tr><td>27</td><td>移除元素</td><td>双指针</td></tr><tr><td>53</td><td>最大子数组和</td><td>动态规划（Kadane 算法）</td></tr><tr><td>238</td><td>除自身以外数组的乘积</td><td>前缀积 + 后缀积</td></tr><tr><td>283</td><td>移动零</td><td>双指针</td></tr><tr><td>560</td><td>和为 K 的子数组</td><td>前缀和 + 哈希</td></tr><tr><td>704</td><td>二分查找</td><td>数组 + 二分</td></tr><tr><td>977</td><td>有序数组的平方</td><td>双指针</td></tr></tbody></table><hr><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h2><p>普通数组虽然简单，但它是：</p><ul><li><strong>所有线性结构的基础</strong></li><li><strong>几乎所有算法入门的起点</strong></li><li><strong>力扣中最频繁使用的数据结构之一</strong></li></ul><p>很多题目看似是“高级技巧”，本质上都围绕数组做文章。学透数组，就等于打开了算法题的大门。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有帮助，如果有其他想法的话，也可以评论区和大家分享哦。</p><p>各位极客的点赞收藏转发，是老马持续写作的最大动力！</p><p>感兴趣的小伙伴可以关注一波，精彩内容，不容错过。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,34)]))}const p=s(h,[["render",n]]),k=JSON.parse('{"path":"/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html","title":"力扣 数组 array -01-入门介绍","lang":"zh-CN","frontmatter":{"title":"力扣 数组 array -01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","array","leetcode"],"published":true,"description":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 数组 在力扣（LeetCode）中，“普通数组”是最基础也是最常见的数据结构之一。虽然“普通数组”这个说法听起来很简单，但它在算法题中扮演着非常重要的角色，很多高级技巧（如前缀和、差分、滑动窗口等）也是在数组...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"力扣 数组 array -01-入门介绍"}],["meta",{"property":"og:description","content":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 数组 在力扣（LeetCode）中，“普通数组”是最基础也是最常见的数据结构之一。虽然“普通数组”这个说法听起来很简单，但它在算法题中扮演着非常重要的角色，很多高级技巧（如前缀和、差分、滑动窗口等）也是在数组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"array"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"力扣 数组 array -01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.73,"words":818},"filePathRelative":"posts/leetcode/top-100-liked/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-array-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>\\n<blockquote>\\n<p><a href=\\"https://github.com/houbb/leetcode\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/houbb/leetcode</a></p>\\n</blockquote>\\n<h1>数组</h1>\\n<p>在力扣（LeetCode）中，“<strong>普通数组</strong>”是最基础也是最常见的数据结构之一。虽然“普通数组”这个说法听起来很简单，但它在算法题中扮演着非常重要的角色，很多高级技巧（如前缀和、差分、滑动窗口等）也是在数组的基础上发展出来的。</p>","autoDesc":true}');export{p as comp,k as data};
