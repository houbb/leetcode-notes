import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as t}from"./app-DWML8MdU.js";const l={};function h(e,i){return t(),n("div",null,i[0]||(i[0]=[a(`<h2 id="一、图连通性的基本概念" tabindex="-1"><a class="header-anchor" href="#一、图连通性的基本概念"><span>一、图连通性的基本概念</span></a></h2><p>在图论中，**连通性（Connectivity）**描述图中节点之间可达的关系：</p><ul><li><p><strong>节点可达（Reachability）</strong>：如果存在一条从节点 A 到节点 B 的路径，则称 A 可达 B。</p></li><li><p><strong>连通图（Connected Graph）</strong>：</p><ul><li><p><strong>无向图</strong>：如果任意两个节点之间都有路径，称图是连通的。</p></li><li><p><strong>有向图</strong>：</p><ul><li><strong>强连通（Strongly Connected）</strong>：每对节点 u,v 都有路径 u→v 和 v→u。</li><li><strong>弱连通（Weakly Connected）</strong>：将有向图看作无向图后连通，则称弱连通。</li></ul></li></ul></li></ul><hr><h2 id="二、分类" tabindex="-1"><a class="header-anchor" href="#二、分类"><span>二、分类</span></a></h2><h3 id="_1️⃣-无向图" tabindex="-1"><a class="header-anchor" href="#_1️⃣-无向图"><span>1️⃣ 无向图</span></a></h3><ul><li><strong>连通图（Connected Graph）</strong>：任意两点可达。</li><li><strong>不连通图（Disconnected Graph）</strong>：存在至少一对点不可达。</li><li><strong>连通分量（Connected Component）</strong>：图中每个最大连通子图。</li></ul><h3 id="_2️⃣-有向图" tabindex="-1"><a class="header-anchor" href="#_2️⃣-有向图"><span>2️⃣ 有向图</span></a></h3><ul><li><strong>强连通（Strongly Connected）</strong>：每对节点 u,v 都可以互相到达。</li><li><strong>弱连通（Weakly Connected）</strong>：忽略边的方向后是连通的。</li><li><strong>强连通分量（SCC, Strongly Connected Component）</strong>：最大强连通子图。</li></ul><hr><h2 id="三、检测连通性的方法" tabindex="-1"><a class="header-anchor" href="#三、检测连通性的方法"><span>三、检测连通性的方法</span></a></h2><h3 id="_1️⃣-无向图连通性" tabindex="-1"><a class="header-anchor" href="#_1️⃣-无向图连通性"><span>1️⃣ 无向图连通性</span></a></h3><ul><li><p><strong>DFS/BFS 遍历</strong>：</p><ul><li>从一个节点出发遍历整个图。</li><li>如果遍历后所有节点都被访问 → 连通图。</li><li>否则 → 不连通，可以统计 <strong>连通分量</strong> 数量。</li></ul></li></ul><p><strong>Java示例（DFS）</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> countConnectedComponents</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> graph) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] visited </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[n]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">visited[i]) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            dfs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> visited)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> dfs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] visited) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    visited[node] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> neighbor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">visited[neighbor]) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dfs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(neighbor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> visited)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2️⃣-有向图强连通性" tabindex="-1"><a class="header-anchor" href="#_2️⃣-有向图强连通性"><span>2️⃣ 有向图强连通性</span></a></h3><ul><li><p><strong>Kosaraju 算法</strong>（经典两次 DFS）</p></li><li><p><strong>Tarjan 算法</strong>（单次 DFS 求 SCC）</p></li><li><p><strong>思路</strong>：</p><ul><li>找出图中所有强连通分量</li><li>判断图整体是否强连通（只有一个强连通分量）</li></ul></li></ul><hr><h2 id="四、图连通性的应用场景" tabindex="-1"><a class="header-anchor" href="#四、图连通性的应用场景"><span>四、图连通性的应用场景</span></a></h2><ol><li><p><strong>网络连通性</strong></p><ul><li>网络是否存在孤立节点，是否能从任意节点通信到其他节点。</li></ul></li><li><p><strong>社会网络分析</strong></p><ul><li>用户是否在同一社交圈（强/弱连通分量）。</li></ul></li><li><p><strong>地图和交通</strong></p><ul><li>城市之间道路是否连通。</li></ul></li><li><p><strong>任务依赖管理</strong></p><ul><li>任务是否能被完全执行（类似 LC841/LC207）。</li></ul></li><li><p><strong>电力或水系统</strong></p><ul><li>系统是否存在孤立设备，保证整体连通性。</li></ul></li></ol><hr><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h2><ol><li><strong>无向图</strong>：连通图 = 任意节点可达，DFS/BFS 可轻松判断。</li><li><strong>有向图</strong>：强连通/弱连通不同，需 SCC 算法判断。</li><li><strong>核心思想</strong>：从一个节点出发，遍历能到达哪些节点 → 判断可达性 → 推导连通性。</li><li><strong>实际意义</strong>：网络、交通、权限、任务依赖等场景都能应用。</li></ol>`,24)]))}const k=s(l,[["render",h]]),d=JSON.parse('{"path":"/posts/data-struct/2025-10-01-graph-03-connect.html","title":"图的连通性（Graph Connectivity）","lang":"zh-CN","frontmatter":{"title":"图的连通性（Graph Connectivity）","date":"2025-10-01T00:00:00.000Z","categories":["Data Struct"],"tags":["data-struct","graph","sh"],"published":true,"description":"一、图连通性的基本概念 在图论中，**连通性（Connectivity）**描述图中节点之间可达的关系： 节点可达（Reachability）：如果存在一条从节点 A 到节点 B 的路径，则称 A 可达 B。 连通图（Connected Graph）： 无向图：如果任意两个节点之间都有路径，称图是连通的。 有向图： 强连通（Strongly Conne...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/data-struct/2025-10-01-graph-03-connect.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"图的连通性（Graph Connectivity）"}],["meta",{"property":"og:description","content":"一、图连通性的基本概念 在图论中，**连通性（Connectivity）**描述图中节点之间可达的关系： 节点可达（Reachability）：如果存在一条从节点 A 到节点 B 的路径，则称 A 可达 B。 连通图（Connected Graph）： 无向图：如果任意两个节点之间都有路径，称图是连通的。 有向图： 强连通（Strongly Conne..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-01T13:25:18.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"graph"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-01T13:25:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图的连通性（Graph Connectivity）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-01T13:25:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759325118000,"updatedTime":1759325118000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"posts/data-struct/2025-10-01-graph-03-connect.md","localizedDate":"2025年10月1日","excerpt":"<h2>一、图连通性的基本概念</h2>\\n<p>在图论中，**连通性（Connectivity）**描述图中节点之间可达的关系：</p>\\n<ul>\\n<li>\\n<p><strong>节点可达（Reachability）</strong>：如果存在一条从节点 A 到节点 B 的路径，则称 A 可达 B。</p>\\n</li>\\n<li>\\n<p><strong>连通图（Connected Graph）</strong>：</p>\\n<ul>\\n<li>\\n<p><strong>无向图</strong>：如果任意两个节点之间都有路径，称图是连通的。</p>\\n</li>\\n<li>\\n<p><strong>有向图</strong>：</p>\\n<ul>\\n<li><strong>强连通（Strongly Connected）</strong>：每对节点 u,v 都有路径 u→v 和 v→u。</li>\\n<li><strong>弱连通（Weakly Connected）</strong>：将有向图看作无向图后连通，则称弱连通。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
