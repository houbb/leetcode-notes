import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-D0vxDu8V.js";const t={};function h(e,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="一、图的基本概念" tabindex="-1"><a class="header-anchor" href="#一、图的基本概念"><span>一、图的基本概念</span></a></h2><p>在力扣中，“图”通常指由 <strong>顶点（Nodes / Vertices）</strong> 和 <strong>边（Edges）</strong> 组成的数据结构。图可以是：</p><ol><li><strong>有向图（Directed Graph）</strong>：边有方向，例如 <code>A -&gt; B</code> 表示只能从 A 到 B。</li><li><strong>无向图（Undirected Graph）</strong>：边无方向，例如 <code>A - B</code> 表示 A 可以到 B，B 也可以到 A。</li><li><strong>带权图（Weighted Graph）</strong>：边有权重（cost、距离等）。</li><li><strong>无权图（Unweighted Graph）</strong>：边没有权重。</li></ol><p>其他重要概念：</p><ul><li><p><strong>度（Degree）</strong>：一个顶点的边数。</p><ul><li>有向图中分为入度和出度。</li></ul></li><li><p><strong>邻居（Neighbor / Adjacent Node）</strong>：直接相连的节点。</p></li><li><p><strong>连通性（Connectivity）</strong>：图是否为连通图，即是否所有节点之间都可达。</p></li><li><p><strong>环（Cycle）</strong>：起点和终点相同的一条路径。</p></li></ul><hr><h2 id="二、图的存储方式" tabindex="-1"><a class="header-anchor" href="#二、图的存储方式"><span>二、图的存储方式</span></a></h2><p>在力扣题目中，图的输入通常有三种方式：</p><h3 id="_1-邻接矩阵-adjacency-matrix" tabindex="-1"><a class="header-anchor" href="#_1-邻接矩阵-adjacency-matrix"><span>1. 邻接矩阵（Adjacency Matrix）</span></a></h3><ul><li>用二维数组表示图，<code>matrix[i][j]</code> 表示顶点 i 到顶点 j 是否有边或边的权重。</li><li>优点：快速查询是否有边，复杂度 O(1)。</li><li>缺点：空间复杂度高，O(V²)。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] graph </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-邻接表-adjacency-list" tabindex="-1"><a class="header-anchor" href="#_2-邻接表-adjacency-list"><span>2. 邻接表（Adjacency List）</span></a></h3><ul><li>每个顶点存储一个邻居列表。</li><li>优点：节省空间，特别适合稀疏图。</li><li>力扣题目中最常用。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> graph </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 0 -&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 1 -&gt; 0 (无向)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-边列表-edge-list" tabindex="-1"><a class="header-anchor" href="#_3-边列表-edge-list"><span>3. 边列表（Edge List）</span></a></h3><ul><li>存储边的集合 <code>(u, v)</code> 或 <code>(u, v, w)</code>。</li><li>常用于最小生成树算法（Kruskal）。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] edges </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {{0,1},{1,2},{0,2}}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="三、图的遍历" tabindex="-1"><a class="header-anchor" href="#三、图的遍历"><span>三、图的遍历</span></a></h2><p>力扣图题中最常用的两种遍历：</p><h3 id="_1-广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#_1-广度优先搜索-bfs"><span>1. 广度优先搜索（BFS）</span></a></h3><ul><li><p>按层遍历图。</p></li><li><p>常用 <strong>队列（Queue）</strong> 实现。</p></li><li><p>用于：</p><ul><li>最短路径（无权图）</li><li>分层问题</li><li>二分图检测</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Queue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] visited </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[n]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(start);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">visited[start] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> node </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> neighbor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">visited[neighbor]) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            visited[neighbor] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">offer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(neighbor);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-深度优先搜索-dfs" tabindex="-1"><a class="header-anchor" href="#_2-深度优先搜索-dfs"><span>2. 深度优先搜索（DFS）</span></a></h3><ul><li><p>尽可能深地访问图。</p></li><li><p>用于：</p><ul><li>连通性</li><li>拓扑排序</li><li>回溯</li><li>检测环</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] visited </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[n]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> dfs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> node) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    visited[node] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> neighbor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">visited[neighbor]) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dfs</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(neighbor)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、图的常用算法" tabindex="-1"><a class="header-anchor" href="#四、图的常用算法"><span>四、图的常用算法</span></a></h2><p>力扣图题中高频算法：</p><h3 id="_1-最短路径" tabindex="-1"><a class="header-anchor" href="#_1-最短路径"><span>1. 最短路径</span></a></h3><ul><li><p><strong>无权图</strong>：BFS</p></li><li><p><strong>带权图</strong>：</p><ul><li>Dijkstra（非负权）</li><li>Bellman-Ford（可处理负权）</li><li>Floyd-Warshall（任意两点最短路径）</li></ul></li></ul><h3 id="_2-拓扑排序-topological-sort" tabindex="-1"><a class="header-anchor" href="#_2-拓扑排序-topological-sort"><span>2. 拓扑排序（Topological Sort）</span></a></h3><ul><li><p>有向无环图（DAG）常用。</p></li><li><p>方法：</p><ul><li>BFS + 入度数组（Kahn 算法）</li><li>DFS + 栈</li></ul></li></ul><h3 id="_3-并查集-union-find" tabindex="-1"><a class="header-anchor" href="#_3-并查集-union-find"><span>3. 并查集（Union Find）</span></a></h3><ul><li><p>用于判断连通性、环、岛屿数量等。</p></li><li><p>力扣题目如：</p><ul><li>LC200. 岛屿数量</li><li>LC684. 冗余连接</li></ul></li></ul><h3 id="_4-最小生成树-mst" tabindex="-1"><a class="header-anchor" href="#_4-最小生成树-mst"><span>4. 最小生成树（MST）</span></a></h3><ul><li>Kruskal 或 Prim</li><li>常用于带权无向图</li></ul><h3 id="_5-检测环" tabindex="-1"><a class="header-anchor" href="#_5-检测环"><span>5. 检测环</span></a></h3><ul><li><strong>无向图</strong>：DFS + parent 判断</li><li><strong>有向图</strong>：DFS + 访问状态（白/灰/黑）</li></ul><h3 id="_6-二分图检测" tabindex="-1"><a class="header-anchor" href="#_6-二分图检测"><span>6. 二分图检测</span></a></h3><ul><li><p>BFS/DFS + 染色</p></li><li><p>力扣题目：</p><ul><li>LC785. 判断二分图</li></ul></li></ul><hr><h2 id="五、力扣图题的输入类型示例" tabindex="-1"><a class="header-anchor" href="#五、力扣图题的输入类型示例"><span>五、力扣图题的输入类型示例</span></a></h2><p>力扣上图题输入通常是：</p><ol><li><p><strong>二维数组</strong>（邻接矩阵/边列表）</p><ul><li>LC207. 课程表 <code>int[][] prerequisites</code></li></ul></li><li><p><strong>邻接表形式</strong></p><ul><li>LC207. 课程表也可</li></ul></li><li><p><strong>节点类</strong>（Node 对象）</p><ul><li>LC133. 克隆图</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> neighbors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="六、力扣经典图题分类" tabindex="-1"><a class="header-anchor" href="#六、力扣经典图题分类"><span>六、力扣经典图题分类</span></a></h2><table><thead><tr><th>类别</th><th>代表题</th><th>常用算法</th></tr></thead><tbody><tr><td>BFS</td><td>LC127 单词接龙</td><td>BFS</td></tr><tr><td>DFS</td><td>LC695 岛屿数量</td><td>DFS</td></tr><tr><td>拓扑排序</td><td>LC207 课程表</td><td>BFS/DFS</td></tr><tr><td>并查集</td><td>LC200 岛屿数量</td><td>Union-Find</td></tr><tr><td>最短路径</td><td>LC743 网络延迟时间</td><td>Dijkstra</td></tr><tr><td>最小生成树</td><td>LC1584 连接所有点的最小费用</td><td>Kruskal / Prim</td></tr><tr><td>克隆图</td><td>LC133 克隆图</td><td>DFS/BFS</td></tr></tbody></table><hr><p>总结：</p><ol><li>力扣图题核心是<strong>遍历与路径问题</strong>。</li><li>熟练掌握 BFS、DFS 是基础。</li><li>根据题目选择合适的存储方式（邻接表、邻接矩阵、边列表）。</li><li>高阶题目会涉及<strong>拓扑排序、并查集、最短路径、最小生成树</strong>等。</li></ol>`,51)]))}const r=s(t,[["render",h]]),d=JSON.parse('{"path":"/posts/data-struct/2025-10-01-graph-01-intro.html","title":"图简介 graph intro","lang":"zh-CN","frontmatter":{"title":"图简介 graph intro","date":"2025-10-01T00:00:00.000Z","categories":["Data Struct"],"tags":["data-struct","graph","sh"],"published":true,"description":"一、图的基本概念 在力扣中，“图”通常指由 顶点（Nodes / Vertices） 和 边（Edges） 组成的数据结构。图可以是： 有向图（Directed Graph）：边有方向，例如 A -> B 表示只能从 A 到 B。 无向图（Undirected Graph）：边无方向，例如 A - B 表示 A 可以到 B，B 也可以到 A。 带权图（...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/data-struct/2025-10-01-graph-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"图简介 graph intro"}],["meta",{"property":"og:description","content":"一、图的基本概念 在力扣中，“图”通常指由 顶点（Nodes / Vertices） 和 边（Edges） 组成的数据结构。图可以是： 有向图（Directed Graph）：边有方向，例如 A -> B 表示只能从 A 到 B。 无向图（Undirected Graph）：边无方向，例如 A - B 表示 A 可以到 B，B 也可以到 A。 带权图（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-01T12:27:57.000Z"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"graph"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-01T12:27:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图简介 graph intro\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-01T12:27:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1759321677000,"updatedTime":1759321677000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.22,"words":966},"filePathRelative":"posts/data-struct/2025-10-01-graph-01-intro.md","localizedDate":"2025年10月1日","excerpt":"<h2>一、图的基本概念</h2>\\n<p>在力扣中，“图”通常指由 <strong>顶点（Nodes / Vertices）</strong> 和 <strong>边（Edges）</strong> 组成的数据结构。图可以是：</p>\\n<ol>\\n<li><strong>有向图（Directed Graph）</strong>：边有方向，例如 <code>A -&gt; B</code> 表示只能从 A 到 B。</li>\\n<li><strong>无向图（Undirected Graph）</strong>：边无方向，例如 <code>A - B</code> 表示 A 可以到 B，B 也可以到 A。</li>\\n<li><strong>带权图（Weighted Graph）</strong>：边有权重（cost、距离等）。</li>\\n<li><strong>无权图（Unweighted Graph）</strong>：边没有权重。</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
