import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,o as a}from"./app-BFHuJZDu.js";const r={};function n(h,t){return a(),e("div",null,t[0]||(t[0]=[i(`<h1 id="排序系列" tabindex="-1"><a class="header-anchor" href="#排序系列"><span>排序系列</span></a></h1><p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-03-select-sort" target="_blank" rel="noopener noreferrer">sort-03-SelectSort 选择排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-04-heap-sort" target="_blank" rel="noopener noreferrer">sort-04-heap sort 堆排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-05-insert-sort" target="_blank" rel="noopener noreferrer">sort-05-insert sort 插入排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-06-shell-sort" target="_blank" rel="noopener noreferrer">sort-06-shell sort 希尔排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-07-merge-sort" target="_blank" rel="noopener noreferrer">sort-07-merge sort 归并排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-08-counting-sort" target="_blank" rel="noopener noreferrer">sort-08-counting sort 计数排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-09-bucket-sort" target="_blank" rel="noopener noreferrer">sort-09-bucket sort 桶排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-10-bigfile-sort" target="_blank" rel="noopener noreferrer">sort-10-bigfile 大文件外部排序</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>大家好，我是老马。</p><p>以前从工程的角度，已经梳理过一次排序算法。</p><p>这里从力扣算法的角度，重新梳理一遍。</p><p>核心内容包含：</p><p>1）常见排序算法介绍</p><p>2）背后的核心思想</p><p>3）leetcode 经典题目练习+讲解</p><p>4）应用场景、优缺点等对比总结</p><p>5）工程 sdk 包，这个已经完成。</p><ol start="6"><li>可视化</li></ol><h1 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h1><h2 id="📌-一、插入排序是什么" tabindex="-1"><a class="header-anchor" href="#📌-一、插入排序是什么"><span>📌 一、插入排序是什么？</span></a></h2><p>插入排序是一种<strong>模仿人手整理扑克牌的排序方法</strong>。</p><p>从第二个元素开始，每次将当前元素<strong>插入到前面已经有序的区域</strong>中合适的位置。</p><hr><h2 id="🧠-二、算法核心思想" tabindex="-1"><a class="header-anchor" href="#🧠-二、算法核心思想"><span>🧠 二、算法核心思想</span></a></h2><blockquote><p>从第一个元素开始假设已经有序，从第二个元素开始向前扫描，<strong>找到合适的位置插入当前元素</strong>，使得插入后前部分依然有序。</p></blockquote><h3 id="类比" tabindex="-1"><a class="header-anchor" href="#类比"><span>类比：</span></a></h3><p>像玩扑克牌时，一张一张拿牌，每次将新拿的牌插入到已经排好序的牌堆中合适的位置。</p><hr><h2 id="🔧-三、算法逻辑-伪代码" tabindex="-1"><a class="header-anchor" href="#🔧-三、算法逻辑-伪代码"><span>🔧 三、算法逻辑（伪代码）</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>for i from 1 to n - 1:</span></span>
<span class="line"><span>    key = arr[i]</span></span>
<span class="line"><span>    j = i - 1</span></span>
<span class="line"><span>    while j &gt;= 0 and arr[j] &gt; key:</span></span>
<span class="line"><span>        arr[j + 1] = arr[j]</span></span>
<span class="line"><span>        j = j - 1</span></span>
<span class="line"><span>    arr[j + 1] = key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把 <code>arr[i]</code> 插入到前面 <code>arr[0...i-1]</code> 这段<strong>有序区域</strong></li><li>倒着比较、腾出位置插入</li></ul><hr><h2 id="✅-四、java-实现代码" tabindex="-1"><a class="header-anchor" href="#✅-四、java-实现代码"><span>✅ 四、Java 实现代码</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insertionSort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] arr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> key) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            arr[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> arr[j]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 元素后移</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        arr[j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 插入正确位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🎨-五、插入排序可视化示例-排序-4-2-5-1" tabindex="-1"><a class="header-anchor" href="#🎨-五、插入排序可视化示例-排序-4-2-5-1"><span>🎨 五、插入排序可视化示例（排序 <code>[4, 2, 5, 1]</code>）</span></a></h2><table><thead><tr><th>i</th><th>当前值 <code>key</code></th><th>插入过程</th><th>数组状态</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>4 &gt; 2 → 移动</td><td><code>[2, 4, 5, 1]</code></td></tr><tr><td>2</td><td>5</td><td>5 &gt;= 4 → 无需移动</td><td><code>[2, 4, 5, 1]</code></td></tr><tr><td>3</td><td>1</td><td>5 &gt; 1 → 移动...4 &gt; 1 → 移动...2 &gt; 1 → 移动</td><td><code>[1, 2, 4, 5]</code></td></tr></tbody></table><hr><h2 id="📈-六、时间和空间复杂度分析" tabindex="-1"><a class="header-anchor" href="#📈-六、时间和空间复杂度分析"><span>📈 六、时间和空间复杂度分析</span></a></h2><table><thead><tr><th>情况</th><th>比较次数</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>最好情况</td><td>O(n)（已排序）</td><td>✅ O(n)</td><td>O(1)</td></tr><tr><td>最坏情况</td><td>O(n²)（逆序）</td><td>❌ O(n²)</td><td>O(1)</td></tr><tr><td>平均情况</td><td>O(n²)</td><td>❌ O(n²)</td><td>O(1)</td></tr><tr><td>稳定性</td><td>✅ 稳定排序</td><td></td><td></td></tr></tbody></table><blockquote><p>比如 <code>[1,2,3,4,5]</code>，插入排序会一轮都不动，直接 O(n) 结束。</p></blockquote><hr><h2 id="⚖️-七、优点-缺点" tabindex="-1"><a class="header-anchor" href="#⚖️-七、优点-缺点"><span>⚖️ 七、优点 &amp; 缺点</span></a></h2><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>实现简单，代码短</td><td>时间复杂度高，不能应对大数据</td></tr><tr><td>稳定排序</td><td>插入多次会有较多数据移动</td></tr><tr><td>适合少量、部分有序的数据</td><td>不适合大规模无序数据</td></tr><tr><td>原地排序，空间复杂度低</td><td>-</td></tr></tbody></table><hr><h2 id="📦-八、适用场景" tabindex="-1"><a class="header-anchor" href="#📦-八、适用场景"><span>📦 八、适用场景</span></a></h2><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>✅ 数据量小</td><td>插入排序处理 1000 以内数据基本没问题</td></tr><tr><td>✅ 数据接近有序</td><td>效率可达 O(n)，优于选择/冒泡</td></tr><tr><td>✅ 有稳定性要求</td><td>插入排序是稳定排序</td></tr><tr><td>❌ 大规模随机无序数据</td><td>性能太差，推荐快排/归并</td></tr></tbody></table><hr><h2 id="💡-九、leetcode-上可用插入排序解的题目" tabindex="-1"><a class="header-anchor" href="#💡-九、leetcode-上可用插入排序解的题目"><span>💡 九、LeetCode 上可用插入排序解的题目</span></a></h2><p>虽然实际应用中不会用插排做最优解，但这些题目适合用来练习插入排序的写法与思路：</p><hr><h3 id="🔹-147-对链表进行插入排序" tabindex="-1"><a class="header-anchor" href="#🔹-147-对链表进行插入排序"><span>🔹 <a href="https://leetcode.cn/problems/insertion-sort-list/" target="_blank" rel="noopener noreferrer">147. 对链表进行插入排序</a></span></a></h3><ul><li>✅ 插入排序的链表版，不能使用索引，只能指针操作</li><li>考察对链表插入位置处理逻辑</li></ul><hr><h3 id="🔹-912-排序数组" tabindex="-1"><a class="header-anchor" href="#🔹-912-排序数组"><span>🔹 <a href="https://leetcode.cn/problems/sort-an-array/" target="_blank" rel="noopener noreferrer">912. 排序数组</a></span></a></h3><ul><li>✅ 用插入排序可以完成，但在大数据下效率不高</li><li>适合写一个插排版本训练基本功</li></ul><hr><h3 id="🔹-21-合并两个有序链表" tabindex="-1"><a class="header-anchor" href="#🔹-21-合并两个有序链表"><span>🔹 <a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noopener noreferrer">21. 合并两个有序链表</a></span></a></h3><ul><li>虽然不是排序题，但可以借助插入排序的稳定性思路处理</li></ul><hr><h2 id="🔚-十、一句话总结" tabindex="-1"><a class="header-anchor" href="#🔚-十、一句话总结"><span>🔚 十、一句话总结</span></a></h2><blockquote><p>插入排序是一种“逐个插入到有序区”的排序方法，<strong>思路简单、实现容易、适合少量或近乎有序的数据</strong>，但性能不足以处理大规模数据。</p></blockquote>`,67)]))}const p=s(r,[["render",n]]),d=JSON.parse('{"path":"/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html","title":"leetcode sort 排序-03-insertSort 插入排序入门介绍","lang":"zh-CN","frontmatter":{"title":"leetcode sort 排序-03-insertSort 插入排序入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","sort","sf"],"published":true,"description":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode sort 排序-03-insertSort 插入排序入门介绍"}],["meta",{"property":"og:description","content":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"sort"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode sort 排序-03-insertSort 插入排序入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.81,"words":1143},"filePathRelative":"posts/leetcode/topliked-100/sort/2020-06-06-algorithm-000-leetcode-data-struct-006-sort-03-insert-sort-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-00-overview-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-00-排序算法汇总</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-01-bubble-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-01-bubble sort 冒泡排序算法详解</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-02-quick-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-02-QuickSort 快速排序到底快在哪里？</a></p>","autoDesc":true}');export{p as comp,d as data};
