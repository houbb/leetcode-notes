import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-C90Pawdm.js";const l={};function h(t,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-bit-树状数组" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-bit-树状数组"><span>详细介绍一下 BIT 树状数组</span></a></h2><h3 id="什么是树状数组-bit" tabindex="-1"><a class="header-anchor" href="#什么是树状数组-bit"><span>什么是树状数组 (BIT)？</span></a></h3><p>树状数组（Binary Indexed Tree，简称 BIT）是一种高效的数据结构，主要用于处理<strong>前缀和</strong>相关的问题。</p><p>它支持以下操作：</p><ol><li><strong>前缀查询</strong>：查询数组从索引 <code>1</code> 到索引 <code>i</code> 的前缀和。</li><li><strong>单点更新</strong>：将数组的某个元素增加或减少一个值。</li></ol><p>树状数组的时间复杂度为 (O(\\log n))，适合动态维护数组的前缀和。</p><hr><h3 id="树状数组的核心思想" tabindex="-1"><a class="header-anchor" href="#树状数组的核心思想"><span>树状数组的核心思想</span></a></h3><p>树状数组通过构造一个辅助数组 <code>BIT</code> 来存储部分前缀和信息，从而在 (O(\\log n)) 时间内完成前缀查询和更新。</p><ol><li><p><strong>BIT[i] 的含义</strong>：<code>BIT[i]</code> 存储从索引 <code>i - 2^r + 1</code> 到索引 <code>i</code> 的区间和，其中 (r) 是 (i) 的二进制表示中最低位 <code>1</code> 的位置。例如：</p><ul><li>(BIT[1] = arr[1])</li><li>(BIT[2] = arr[1] + arr[2])</li><li>(BIT[4] = arr[1] + arr[2] + arr[3] + arr[4])</li></ul></li><li><p>通过维护这种区间和关系，可以递归分解任意前缀和或更新操作。</p></li></ol><hr><h3 id="核心公式" tabindex="-1"><a class="header-anchor" href="#核心公式"><span>核心公式</span></a></h3><ol><li><p><strong>最低有效位</strong>（Lowest Significant Bit，LSB）计算：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>LSB(i) = i &amp; -i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>(LSB(4) = 4 &amp; -4 = 4)</li><li>(LSB(6) = 6 &amp; -6 = 2)</li></ul></li><li><p><strong>更新操作</strong>：将索引 <code>i</code> 的值增加 <code>delta</code>，影响所有包含 <code>i</code> 的区间。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>i += LSB(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>前缀和查询</strong>：查询从 <code>1</code> 到 <code>i</code> 的前缀和。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>i -= LSB(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h3 id="树状数组的实现" tabindex="-1"><a class="header-anchor" href="#树状数组的实现"><span>树状数组的实现</span></a></h3><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>将输入数组的值逐个更新到树状数组中。</p><p><strong>代码实现</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FenwickTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] BIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 树状数组</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 数组大小</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FenwickTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> size;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        BIT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 树状数组索引从 1 开始</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 单点更新，将索引 i 的值增加 delta</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> delta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            BIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> delta;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 前进到下一个包含 i 的区间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 查询前缀和，从 1 到 i</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 回退到上一个区间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 查询区间 [l, r] 的和</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(r) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(l </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="示例运行" tabindex="-1"><a class="header-anchor" href="#示例运行"><span>示例运行</span></a></h3><h4 id="输入数组" tabindex="-1"><a class="header-anchor" href="#输入数组"><span>输入数组</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 11</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1"><span>初始化</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FenwickTree</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ft </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FenwickTree</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, arr[i]);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 初始化树状数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>树状数组的内容（索引从 1 开始）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BIT = [0, 1, 4, 5, 16, 9, 20]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="查询前缀和" tabindex="-1"><a class="header-anchor" href="#查询前缀和"><span>查询前缀和</span></a></h4><p>查询索引 <code>1</code> 到 <code>4</code> 的前缀和：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 16</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="区间查询" tabindex="-1"><a class="header-anchor" href="#区间查询"><span>区间查询</span></a></h4><p>查询区间 <code>[2, 5]</code> 的和：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">queryRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 24</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="单点更新" tabindex="-1"><a class="header-anchor" href="#单点更新"><span>单点更新</span></a></h4><p>将索引 <code>3</code> 的值增加 <code>2</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 更新后，arr[3] = 7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更新后树状数组内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BIT = [0, 1, 4, 7, 18, 9, 20]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询更新后的前缀和：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 18</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="树状数组的时间复杂度" tabindex="-1"><a class="header-anchor" href="#树状数组的时间复杂度"><span>树状数组的时间复杂度</span></a></h3><ol><li><strong>单点更新</strong>：每次更新沿着树状数组的路径向上，最多进行 (O(\\log n)) 次操作。</li><li><strong>前缀查询</strong>：每次查询沿着树状数组的路径向下，最多进行 (O(\\log n)) 次操作。</li><li><strong>区间查询</strong>：通过两次前缀查询完成，时间复杂度为 (O(\\log n))。</li></ol><hr><h3 id="优点和局限性" tabindex="-1"><a class="header-anchor" href="#优点和局限性"><span>优点和局限性</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li>易于实现，代码量小。</li><li>时间复杂度低，适合频繁的动态查询和更新。</li></ol><h4 id="局限性" tabindex="-1"><a class="header-anchor" href="#局限性"><span>局限性</span></a></h4><ol><li>仅支持前缀和相关的操作。</li><li>对于复杂操作（如区间更新和区间查询），需要改进（如带懒惰标记的树状数组）。</li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>树状数组是一种高效的数据结构，用于处理动态数组的前缀和查询和单点更新。</p><p>其核心公式基于最低有效位，能够快速定位和更新相关区间信息，非常适合在在线算法和竞赛中使用。</p><h2 id="为什么-bit-可以提升性能-核心原理是什么" tabindex="-1"><a class="header-anchor" href="#为什么-bit-可以提升性能-核心原理是什么"><span>为什么 BIT 可以提升性能，核心原理是什么？</span></a></h2><p>树状数组（Binary Indexed Tree, BIT）能够提升性能的核心原理在于它的<strong>高效的前缀和查询和更新操作</strong>，可以将这些操作的时间复杂度降低到 <code>O(log n)</code>，从而在处理多个查询时显著提高效率。</p><h3 id="_1-树状数组的结构" tabindex="-1"><a class="header-anchor" href="#_1-树状数组的结构"><span>1. <strong>树状数组的结构</strong></span></a></h3><p>树状数组是一种基于二进制的数组结构，它可以在一个一维数组上模拟出一棵树，支持两个操作：</p><ul><li><p><strong>更新操作（Update）</strong>：更新某个位置的值。</p></li><li><p><strong>查询操作（Query）</strong>：查询前缀和，即从数组的开头到某个位置的所有元素之和。</p></li></ul><h3 id="_2-核心原理" tabindex="-1"><a class="header-anchor" href="#_2-核心原理"><span>2. <strong>核心原理</strong></span></a></h3><h4 id="a-前缀和的高效查询" tabindex="-1"><a class="header-anchor" href="#a-前缀和的高效查询"><span>a) <strong>前缀和的高效查询</strong></span></a></h4><p>树状数组通过在数组中存储<strong>部分前缀和</strong>来加速查询过程。</p><p>每个树状数组节点不存储整个数组的前缀和，而是存储某些区间的和，这样可以通过<strong>二进制拆分</strong>来加速查询。</p><ul><li>假设数组 <code>arr</code> 有 8 个元素，我们用树状数组来管理这些元素。</li></ul><p>树状数组的节点存储了以下内容：</p><ul><li>索引为 1 存储了 <code>arr[1]</code>；</li><li>索引为 2 存储了 <code>arr[1] + arr[2]</code>；</li><li>索引为 3 存储了 <code>arr[3]</code>；</li><li>索引为 4 存储了 <code>arr[1] + arr[2] + arr[3] + arr[4]</code>；</li><li>索引为 5 存储了 <code>arr[5]</code>，以此类推。</li></ul><p>这种结构使得我们能够通过快速地合并这些部分和来获得完整的前缀和。</p><h4 id="b-更新操作的高效性" tabindex="-1"><a class="header-anchor" href="#b-更新操作的高效性"><span>b) <strong>更新操作的高效性</strong></span></a></h4><p>在树状数组中，更新某个位置的值时，只需要修改涉及该位置的几个树状数组节点。</p><p>具体来说，更新操作通过二进制的低位部分找到需要修改的节点，然后更新这些节点，时间复杂度是 <code>O(log n)</code>。</p><h4 id="c-二进制拆分与树状数组节点的关系" tabindex="-1"><a class="header-anchor" href="#c-二进制拆分与树状数组节点的关系"><span>c) <strong>二进制拆分与树状数组节点的关系</strong></span></a></h4><p>树状数组的关键思想是利用<strong>二进制拆分</strong>来处理前缀和：</p><ul><li>每个节点所管理的区间大小与二进制数字有关。</li></ul><p>例如，节点 3 可能对应的是 <code>arr[1] + arr[2]</code>，节点 4 可能对应的是 <code>arr[1] + arr[2] + arr[3] + arr[4]</code>。</p><ul><li>利用这种关系，通过将查询区间拆分成几个较小的区间，我们可以在 <code>O(log n)</code> 时间内求得前缀和。</li></ul><h4 id="d-查询操作如何加速" tabindex="-1"><a class="header-anchor" href="#d-查询操作如何加速"><span>d) <strong>查询操作如何加速</strong></span></a></h4><p>假设我们要查询从数组的起点到某个位置 <code>i</code> 的前缀和。</p><p>通过树状数组结构，我们可以从位置 <code>i</code> 开始，逐步“跳跃”到更低的索引，直到查询到完整的前缀和：</p><ul><li><p>从 <code>i</code> 向前查询时，我们跳过不必要的部分，即跳到它二进制表示中的前 <code>1</code> 位所对应的区间，直到查询到区间的和为止。</p></li><li><p>这个过程最多需要 <code>log n</code> 次跳跃，因此查询操作的时间复杂度为 <code>O(log n)</code>。</p></li></ul><h3 id="_3-树状数组如何提升性能" tabindex="-1"><a class="header-anchor" href="#_3-树状数组如何提升性能"><span>3. <strong>树状数组如何提升性能</strong></span></a></h3><p>树状数组可以在多次更新和查询中显著提高效率的原因是：</p><ul><li><p><strong>更新操作</strong>：更新树状数组的某个元素时，时间复杂度为 <code>O(log n)</code>，而不像直接操作数组那样需要线性扫描。通过不断更新树状数组的节点，可以高效地维持动态数据。</p></li><li><p><strong>查询操作</strong>：查询前缀和时，时间复杂度为 <code>O(log n)</code>，这是由于树状数组结构允许我们通过二进制拆分来减少查询区间的大小，而不是在数组中逐个元素累加。</p></li></ul><p>对于一个包含多个查询的场景，树状数组通过 <code>O(log n)</code> 的时间复杂度使得每个查询变得高效，尤其在多次查询的情况下，与暴力 <code>O(n)</code> 查询相比，性能上得到了显著提升。</p><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. <strong>总结</strong></span></a></h3><p>树状数组之所以能提高性能，关键在于它利用了<strong>部分前缀和的巧妙存储</strong>和<strong>二进制拆分</strong>，从而实现了更新和查询的<strong>对数时间复杂度</strong>。</p><p>这使得在处理大量数据和多次查询时，相较于暴力算法显著提高了效率。</p>`,86)]))}const r=s(l,[["render",h]]),d=JSON.parse('{"path":"/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html","title":"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组","lang":"zh-CN","frontmatter":{"title":"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","offline-query-optimize","sf"],"published":true,"description":"chat 详细介绍一下 BIT 树状数组 什么是树状数组 (BIT)？ 树状数组（Binary Indexed Tree，简称 BIT）是一种高效的数据结构，主要用于处理前缀和相关的问题。 它支持以下操作： 前缀查询：查询数组从索引 1 到索引 i 的前缀和。 单点更新：将数组的某个元素增加或减少一个值。 树状数组的时间复杂度为 (O(\\\\log n))...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组"}],["meta",{"property":"og:description","content":"chat 详细介绍一下 BIT 树状数组 什么是树状数组 (BIT)？ 树状数组（Binary Indexed Tree，简称 BIT）是一种高效的数据结构，主要用于处理前缀和相关的问题。 它支持以下操作： 前缀查询：查询数组从索引 1 到索引 i 的前缀和。 单点更新：将数组的某个元素增加或减少一个值。 树状数组的时间复杂度为 (O(\\\\log n))..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T07:11:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"offline-query-optimize"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T07:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"leetcode offline-query-optimize 离线查询优化-06-BIT 树状数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-18T07:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755501103000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2}]},"readingTime":{"minutes":6.85,"words":2056},"filePathRelative":"posts/leetcode/2020-06-06-algorithm-000-leetcode-data-struct-003-offline-query-optimize-06-BIT-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<h2>详细介绍一下 BIT 树状数组</h2>\\n<h3>什么是树状数组 (BIT)？</h3>\\n<p>树状数组（Binary Indexed Tree，简称 BIT）是一种高效的数据结构，主要用于处理<strong>前缀和</strong>相关的问题。</p>\\n<p>它支持以下操作：</p>\\n<ol>\\n<li><strong>前缀查询</strong>：查询数组从索引 <code>1</code> 到索引 <code>i</code> 的前缀和。</li>\\n<li><strong>单点更新</strong>：将数组的某个元素增加或减少一个值。</li>\\n</ol>\\n<p>树状数组的时间复杂度为 (O(\\\\log n))，适合动态维护数组的前缀和。</p>","autoDesc":true}');export{r as comp,d as data};
