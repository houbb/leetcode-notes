import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as h}from"./app-BFHuJZDu.js";const n={};function t(p,e){return h(),i("div",null,e[0]||(e[0]=[s(`<h1 id="hash-算法" tabindex="-1"><a class="header-anchor" href="#hash-算法"><span>Hash 算法</span></a></h1><p>散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。</p><p>也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><p>比方我们存储 70 个元素，但我们可能为这 70 个元素申请了 100 个元素的空间。</p><p><code>70/100=0.7</code>，这个数字称为<strong>负载因子</strong>。</p><p>我们之所以这样做，也是为了“高速存取”的目的。</p><p>我们基于一种结果尽可能随机平均分布的固定函数H为每一个元素安排存储位置，这样就能够避免遍历性质的线性搜索，以达到高速存取。</p><p>可是因为此随机性，也必定导致一个问题就是冲突。</p><p>所谓冲突，即两个元素通过散列函数H得到的地址同样，那么这两个元素称为“同义词”。</p><p>这类似于 70 个人去一个有 100 个椅子的饭店吃饭。散列函数的计算结果是一个存储单位地址，每一个存储单位称为“桶”。</p><p>设一个散列表有 m 个桶，则散列函数的值域应为<code>[0,m-1]</code>。</p><h2 id="冲突" tabindex="-1"><a class="header-anchor" href="#冲突"><span>冲突</span></a></h2><p>解决冲突是一个复杂问题。冲突主要取决于：</p><p>（1）散列函数，一个好的散列函数的值应尽可能平均分布。</p><p>（2）处理冲突方法。</p><p>（3）负载因子的大小。太大不一定就好，并且浪费空间严重，负载因子和散列函数是联动的。</p><p>为此，有很多 hash 算法为解决这些问题而生。</p><h1 id="hash-的介绍" tabindex="-1"><a class="header-anchor" href="#hash-的介绍"><span>hash 的介绍</span></a></h1><ul><li>参考</li></ul><p><a href="https://medium.com/zkcapital/the-state-of-hashing-algorithms-the-why-the-how-and-the-future-b21d5c0440de" target="_blank" rel="noopener noreferrer">The State of Hashing Algorithms — The Why, The How, and The Future</a></p><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why"><span>Why</span></a></h2><p>在学习区块链时，新来者听到的关键字之一是哈希和哈希算法的概念，对于安全性来说，哈希算法似乎无处不在。运行一个分散的网络和共识机器，比如通过p2p连接数万个节点的比特币(Bitcoin)或Ethereum (Ethereum)网络，既需要“信任”，也需要验证效率。</p><p>也就是说，这些系统需要以一种紧凑的格式对信息进行编码，以便其参与者能够安全、快速地进行验证。</p><p>比特币和Ethereum所处理的主要原语是块的概念，这是一个包含交易、时间戳和其他重要元数据的数据结构。<br> 它们安全性的一个关键部分是能够将有关网络全局状态的大量信息压缩为一个短消息标准，如果需要的话，可以有效地验证这个标准，称为哈希。</p><p>从密码存储到文件验证系统，密码哈希到处都在使用。</p><p><strong>基本思想是使用确定性算法，它接受一个输入，每次生成一个固定长度的字符串。也就是说，使用相同的输入总是会得到相同的输出。</strong></p><p>决定论不仅对哈希很重要，而且单个位在不同输入之间的变化也会产生完全不同的哈希。</p><p>哈希算法的一个问题是不可避免的冲突。也就是说，哈希是一个固定长度的字符串这一事实意味着，对于我们能想象到的每一个输入，都有可能产生相同的哈希值。碰撞是坏的。这意味着，如果攻击者能够根据需要创建冲突，则攻击者可以将恶意文件或数据传递为具有正确、适当的散列并伪装成合法的。</p><p>一个好的哈希函数的目标是使攻击者很难找到生成相同哈希值的输入的方法计算哈希的效率不应该太高，因为这使得人为计算冲突对攻击者来说更容易。</p><p>哈希算法需要抵抗“前图像攻击”。也就是说，给定一个hash，计算retrace所采取的确定步骤来重现创建hash的值(即pre-image)应该非常困难。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Given s= hash(x), finding x should be near impossible.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>综上所述，“好的”散列算法具有以下3个特性:</p><ul><li><p>在输入中更改一个位应该会产生雪崩效应，并导致完全不同的散列</p></li><li><p>碰撞的概率应该很低吗</p></li><li><p>在某种程度上，不牺牲碰撞阻力的效率</p></li></ul><h1 id="breaking-hashes" tabindex="-1"><a class="header-anchor" href="#breaking-hashes"><span>Breaking Hashes</span></a></h1><p>最初的散列算法标准之一是MD5散列，它广泛用于文件完整性验证(校验和)，并在web应用程序数据库中存储散列密码。</p><p>它的功能非常简单，因为它为每个输入输出一个固定的128位字符串，并且在几轮之间使用简单的单向操作来计算它的确定性输出。</p><p>它的短输出长度和操作的简单性使得MD5非常容易被破坏，并且容易受到所谓的生日攻击(birthday attack)。</p><h2 id="birthday-attack" tabindex="-1"><a class="header-anchor" href="#birthday-attack"><span>birthday attack</span></a></h2><p>你听说过这样一个事实吗?</p><p>如果你把23个人放在一个房间里，有50%的几率其中两个人同一天生日?把房间里的数字提高到70，你有99.9%的机会。</p><p>这源于我们所说的鸽子洞原理，这个原理大概是说，给100只鸽子和99个盒子把它们放进去，必须装满，一个盒子会共用2只鸽子。</p><p>也就是说，固定的输出约束意味着存在固定的排列程度，在此基础上可以找到碰撞。</p><p>实际上，MD5的抗碰撞能力非常弱，一个简单的2.4GHz奔腾处理器可以在几秒钟内计算出人工哈希碰撞。</p><p>此外，在当前web的早期，它的广泛使用已经在网上创建了大量泄漏的MD5预映像，只需对它们的散列进行简单的谷歌搜索就可以找到这些映像。</p><h1 id="diversity-and-evolution-of-hashing-algorithms" tabindex="-1"><a class="header-anchor" href="#diversity-and-evolution-of-hashing-algorithms"><span>Diversity and Evolution of Hashing Algorithms</span></a></h1><h2 id="sha1-sha2" tabindex="-1"><a class="header-anchor" href="#sha1-sha2"><span>SHA1 &amp; SHA2</span></a></h2><p>NSA(是的，那个NSA)一直是哈希算法标准的先驱，他们最初提出的安全哈希算法(SHA1)创造了160位固定长度的输出。</p><p>不幸的是，SHA1仅仅通过增加输出长度、单向操作的数量和这些单向操作的复杂性改进了MD5，但是对于尝试不同攻击向量的更强大的机器，它没有提供任何基本的改进。</p><p>那么我们怎样才能做得更好呢?</p><h2 id="sha3" tabindex="-1"><a class="header-anchor" href="#sha3"><span>SHA3</span></a></h2><p>2006年，美国国家标准与技术研究院(NIST)发布了一项竞赛，希望找到一种可以替代SHA2的产品，这种产品在内部结构上与SHA2有本质区别，从而成为一种标准。</p><p>因此，SHA3诞生于一种名为KECCAK(发音为ketch-ak)的哈希算法。</p><p>尽管有了这个名字，SHA3内部还是有很大的不同，它采用了一种被称为海绵结构的机制，这种机制使用随机排列来吸收和输出数据，<br> 同时作为随机性的来源，为哈希算法的未来输入提供数据。</p><p>SHA3维护一个内部状态，其中包含更多与输出相关的信息，这使得它能够克服以前算法的局限性。NIST在2015年成为标准。</p><h2 id="hashing-and-proof-of-work" tabindex="-1"><a class="header-anchor" href="#hashing-and-proof-of-work"><span>Hashing and Proof of Work</span></a></h2><p>当将哈希算法集成到区块链协议中时，更老的比特币都选择了SHA256，而Ethereum使用的是经过修改的SHA3 (KECCAK256)来证明其工作算法。<br> 然而，使用工作证明为区块链选择哈希函数的一个重要质量是计算上述哈希的效率。</p><p>比特币SHA256的实现可以通过被称为应用专用集成电路(或asic)的专用硬件来特别高效地计算。</p><p>关于在挖掘池中使用asic以及它们如何使协议趋向于集中计算，已经写了很多。</p><p>也就是说，工作证明鼓励计算效率高的计算机组聚合到池中，并增加我们所表示的“哈希能力”，即机器每隔一段时间可以计算的哈希数的度量。</p><p>Ethereum，选择了一个被称为KECCAK256的改良SHA3。</p><p>此外，Ethereum的工作证明算法Dagger-Hashimoto在硬件上是难以计算的内存。</p><h2 id="比特币为什么选择-double-sha256" tabindex="-1"><a class="header-anchor" href="#比特币为什么选择-double-sha256"><span>比特币为什么选择 double SHA256</span></a></h2><p>比特币使用SHA256进行数据哈希的方式很有趣，因为它在协议中对算法进行了两次迭代。</p><p>注意，这不是针对生日攻击的对策，因为很明显，如果hash(x) = hash(y)，那么hash(x)) = hash(y)。</p><p>相反，双SHA256用于减轻长度扩展攻击。</p><p>从本质上讲，这种攻击涉及到恶意的参与者，他们知道哈希输入的长度，可以通过向哈希值附加一个秘密字符串来欺骗哈希函数，使其开始其内部状态的某个部分。<br> SHA256是SHA2算法家族中的一员，它受到了这个问题的困扰，比特币通过计算两次哈希来减轻这个问题。</p><h2 id="ethereum-2-0-and-blake" tabindex="-1"><a class="header-anchor" href="#ethereum-2-0-and-blake"><span>Ethereum 2.0 and BLAKE</span></a></h2><p>SHA3并不是NIST 2006年哈希竞赛的唯一突破。尽管SHA3赢了，一个被称为BLAKE的算法也紧随其后。<br> 对于Ethereum 2.0的分片实现来说，更高效的哈希几乎是一个特性需求，也是研究团队非常重视的问题。<br> 与KECCAK256相比，BLAKE2b哈希算法在保持高度安全性的同时，其出色的效率得到了广泛的探索。</p><p>在现代CPU上，计算BLAKE2b实际上比KECCAK快3倍。</p><h1 id="moving-forward-the-future-of-hashing-algorithms" tabindex="-1"><a class="header-anchor" href="#moving-forward-the-future-of-hashing-algorithms"><span>Moving Forward: The Future of Hashing Algorithms</span></a></h1><p>似乎无论我们做什么，我们要么</p><p>(1)增加了内部哈希操作的复杂性，要么</p><p>(2)增加了哈希输出的长度，希望攻击者的计算机不能足够快地有效地计算冲突。</p><p>为了保证网络的安全，我们依赖于单向操作的前图像的模糊性。</p><p>也就是说，哈希算法的安全目标是使任何人尽可能难以找到两个哈希到相同输出的值，尽管可能存在无数次的冲突。</p><h2 id="量子计算的未来呢-哈希算法安全吗" tabindex="-1"><a class="header-anchor" href="#量子计算的未来呢-哈希算法安全吗"><span>量子计算的未来呢?哈希算法安全吗?</span></a></h2><p>简而言之，目前的理解是，哈希算法将经得起时间和量子计算的考验。</p><p>量子计算能够打破的是那些由精确的技巧和RSA加密等理论建立起来的严格的、基本的数学结构的问题。另一方面，哈希算法的内部结构不那么正式。</p><p>量子计算机的确提高了非结构化问题(如哈希)的计算速度，但最终，它们还是会像今天的计算机一样，强行发起攻击。</p><p>不管我们为协议选择什么算法，很明显我们正走向一个计算效率更高的未来，我们必须用我们最好的判断力来选择适合这项工作的工具，以及那些有望经得起时间考验的工具。</p><h1 id="优秀的-hash-算法" tabindex="-1"><a class="header-anchor" href="#优秀的-hash-算法"><span>优秀的 hash 算法</span></a></h1><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>一个好的哈希函数必须具备以下两点特性：</p><ul><li>一个好的哈希函数应该是可逆的。</li></ul><p>对于哈希函数输入值 x 和输出值 y，如果存在 f(x) = y，就一定存在 g(y) = x。</p><p>说白了，就是哈希函数可以将某一个值x转换成一个key，也可以把这个key还原回成x。</p><p>具有可逆性的哈希函数可以从根本上消除哈希过程中的冲突(collisions)。</p><ul><li>一个好的哈希函数应该容易造成雪崩效应。</li></ul><p>这里的雪崩效应是从比特位的角度出发的，它指的是，输入值1bit位的变化会造成输出值1/2的bit位发生变化。</p><p>哈希函数应只负责将输入值尽量均匀的分布在某一空间，而不管实际的物理内存是否可以容纳该空间。</p><p>我们可以将放置哈希结果的物理内存块的大小设置成2的n次方的形式。</p><p>这条特性的主要目的是使得哈希结果更为离散均匀。</p><h2 id="可逆性" tabindex="-1"><a class="header-anchor" href="#可逆性"><span>可逆性</span></a></h2><ul><li>简单例子</li></ul><p>以下式子都是可逆的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>x + 常数 = y;</span></span>
<span class="line"><span>x - 常数 = y;</span></span>
<span class="line"><span>x ^ 常数 = y;</span></span>
<span class="line"><span>~x = y;</span></span>
<span class="line"><span>x * 常数 =y;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>个人理解</li></ul><p>我觉得这部分应该是数学概念上的可逆性。</p><p><a href="https://baike.baidu.com/item/%E5%8F%8D%E5%87%BD%E6%95%B0" target="_blank" rel="noopener noreferrer">反函数-百度百科</a></p><p>一般地，设函数 y=f(x)(x∈A) 的值域是 C，若找得到一个函数 g(y) 在每一处 g(y) 都等于 x，这样的函数 x= g(y)(y∈C) 叫做函数 y=f(x)(x∈A) 的反函数，<br> 记作 y=f^(-1)(x) 。</p><p>反函数 <code>y=f^(-1)(x)</code> 的定义域、值域分别是函数y=f(x)的值域、定义域。最具有代表性的反函数就是对数函数与指数函数。</p><p>一般地，如果 x 与 y 关于某种对应关系 f(x) 相对应，y=f(x)，则 y=f(x) 的反函数为 x=f(y)。</p><p><strong>存在反函数(默认为单值函数）的条件是原函数必须是一一对应的（不一定是整个数域内的）</strong>。</p><h2 id="雪崩效应" tabindex="-1"><a class="header-anchor" href="#雪崩效应"><span>雪崩效应</span></a></h2><p>雪崩效应之前也讲过，说白了，就是输入数据1bit位的变化会导致输出数据N bit位的变化，这个N是大于等于1/2输出数据长度的。我们还是从简单的运算说起。</p><p>备注：b 代表二进制</p><ul><li>加减运算</li></ul><p>加减运算很容易引起雪崩响应，这很容易理解，例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1111b + 1b = 10000b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>or</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1000b - 1b = 111b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>位移运算</li></ul><p>取反运算也很容易产生雪崩效应，例如(00001111)2 &lt;&lt; 2 = (00111100)2。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>00001111b &lt;&lt; 2 = 00111100b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>乘除运算</li></ul><p>乘除运算的本质就是位移与加减法的组合，所以也是可以一起雪崩效应的。</p><ul><li>取反、异或运算</li></ul><p>取反和异或运算也很容易产生雪崩效应，如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>~1111b =0000b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>and</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1101b ^ 1010b = 0111b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="哈希函数的设计" tabindex="-1"><a class="header-anchor" href="#哈希函数的设计"><span>哈希函数的设计</span></a></h1><p>一个好的哈希函数应满足假设：每个关键字都等可能地被哈希到 m 个槽位的任何一个之中，并且与其他的关键字已被哈希到哪一个槽位中无关。</p><p>不幸的是，通常情况下不太可能检查这一条件是否成立，因为人们很少能知道关键字所符合的概率分布，而各关键字可能并不是完全互相独立的。</p><p>在实践中，常常运用启发式技术来构造好的哈希函数。</p><p>比如在设计中，可以利用有关关键字分布的限制性信息等。</p><p>除法哈希法和乘法哈希法属于启发式的方法，而全域哈希法则采用了随机化技术来获取良好的性能。</p><h2 id="除法哈希法-the-division-method" tabindex="-1"><a class="header-anchor" href="#除法哈希法-the-division-method"><span>除法哈希法（The Division Method）</span></a></h2><p>一种好的哈希做法是以独立于数据中可能存在的任何模式的方式导出哈希值。例如，除法哈希法用一个特定的质数来除所给的关键字，所得的余数即为该关键字的哈希值。</p><p>除法哈希函数可表示为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hash(key) = key mod m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 key 表示被哈希的关键字，m 表示哈希表的大小，mod 为取余操作。假定所选择的质数与关键字分布中的任何模式都是无关的，这种方法常常可以给出很好的结果。</p><h2 id="乘法哈希法-the-multiplication-method" tabindex="-1"><a class="header-anchor" href="#乘法哈希法-the-multiplication-method"><span>乘法哈希法（The Multiplication Method）</span></a></h2><p>乘法哈希函数可表示为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hash(key) = floor( m * ( A * key mod 1) )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 floor 表示对表达式进行下取整，常数 A 取值范围为（<code>0&lt;A&lt;1</code>），m 表示哈希表的大小，mod 为取余操作。</p><p>[A * key mod 1] 表示将 key 乘上某个在 0~1 之间的数并取乘积的小数部分，该表达式等价于 [A*key - floor(A * key)]。</p><p>乘法哈希法的一个优点是对 m 的选择没有什么特别的要求，一般选择它为 2 的某个幂次，这是因为我们可以在大多数计算机上更方便的实现该哈希函数。</p><p>虽然这个方法对任何的 A 值都适用，但对某些值效果更好，最佳的选择与待哈希的数据的特征有关。</p><p>Don Knuth 认为 A ≈ (√5-1)/2 = 0.618 033 988... 比较好，可称为黄金分割点。</p><h2 id="全域哈希法-universal-hashing" tabindex="-1"><a class="header-anchor" href="#全域哈希法-universal-hashing"><span>全域哈希法（Universal Hashing）</span></a></h2><p>在向哈希表中插入元素时，如果所有的元素全部被哈希到同一个桶中，此时数据的存储实际上就是一个链表，那么平均的查找时间为 Θ(n) 。</p><p>而实际上，任何一个特定的哈希函数都有可能出现这种最坏情况，唯一有效的改进方法就是随机地选择哈希函数，使之独立于要存储的元素。</p><p>这种方法称作全域哈希（Universal Hashing）。</p><p>全域哈希的基本思想是在执行开始时，从一组哈希函数中，随机地抽取一个作为要使用的哈希函数。</p><p>就像在快速排序中一样，随机化保证了没有哪一种输入会始终导致最坏情况的发生。</p><p>同时，随机化也使得即使是对同一个输入，算法在每一次执行时的情况也都不一样。</p><p>这样就确保了对于任何输入，算法都具有较好的平均运行情况。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hasha,b(key) = ((a*key + b) mod p) mod m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，p 为一个足够大的质数，使得每一个可能的关键字 key 都落在 0 到 p - 1 的范围内。m 为哈希表中槽位数。</p><p>任意 a∈{1,2,3,…,p-1}，b∈{0,1,2,…,p-1}。</p><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/08/13/consistent-hash" target="_blank" rel="noopener noreferrer">一致性 hash 算法</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-impl" target="_blank" rel="noopener noreferrer">java hash 实现</a></p><p><a href="https://houbb.github.io/2018/05/30/hash-conflict" target="_blank" rel="noopener noreferrer">hash 冲突处理</a></p><p><a href="https://houbb.github.io/2018/12/05/bloom-filter" target="_blank" rel="noopener noreferrer">bloom filter</a></p><p><a href="https://houbb.github.io/2019/04/01/BloomFilter-best-practice" target="_blank" rel="noopener noreferrer">bloom filter 使用最佳实践，让你少采坑！</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li>hash 算法</li></ul><p><a href="http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm" target="_blank" rel="noopener noreferrer">http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm</a></p><p><a href="https://segmentfault.com/a/1190000010990136" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000010990136</a></p><p><a href="https://blog.csdn.net/jasper_xulei/article/details/18364313" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/jasper_xulei/article/details/18364313</a></p><p><a href="https://www.cnblogs.com/hzorac/p/5399042.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/hzorac/p/5399042.html</a></p><p><a href="https://www.jianshu.com/p/32faad2d711f" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/32faad2d711f</a></p><p><a href="http://blog.jobbole.com/106733/" target="_blank" rel="noopener noreferrer">http://blog.jobbole.com/106733/</a></p><p><a href="https://blog.csdn.net/tanggao1314/article/details/51457585" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/tanggao1314/article/details/51457585</a></p><ul><li>反函数</li></ul><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86" target="_blank" rel="noopener noreferrer">反函数定理</a></p><p><a href="https://blog.csdn.net/u010182633/article/details/64501915" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u010182633/article/details/64501915</a></p><ul><li>感知 Hash 算法</li></ul><p><a href="https://blog.csdn.net/whuhan2013/article/details/50993146" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/whuhan2013/article/details/50993146</a></p>`,172)]))}const o=a(n,[["render",t]]),d=JSON.parse('{"path":"/posts/algorithm/hash/2018-05-30-hash.html","title":"Hash 哈希","lang":"zh-CN","frontmatter":{"title":"Hash 哈希","date":"2018-05-30T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","hash","hashing"],"published":true,"description":"Hash 算法 散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。 也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 基础概念 比方我们存储 70 个元素，但我们可能为这 70 个元素申请了 100 个元素的空间。 70...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/algorithm/hash/2018-05-30-hash.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Hash 哈希"}],["meta",{"property":"og:description","content":"Hash 算法 散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。 也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 基础概念 比方我们存储 70 个元素，但我们可能为这 70 个元素申请了 100 个元素的空间。 70..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-23T04:59:26.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"hash"}],["meta",{"property":"article:tag","content":"hashing"}],["meta",{"property":"article:published_time","content":"2018-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-23T04:59:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hash 哈希\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-23T04:59:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755925166000,"updatedTime":1755925166000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":15.47,"words":4641},"filePathRelative":"posts/algorithm/hash/2018-05-30-hash.md","localizedDate":"2018年5月30日","excerpt":"\\n<p>散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。</p>\\n<p>也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>\\n<h2>基础概念</h2>\\n<p>比方我们存储 70 个元素，但我们可能为这 70 个元素申请了 100 个元素的空间。</p>\\n<p><code>70/100=0.7</code>，这个数字称为<strong>负载因子</strong>。</p>\\n<p>我们之所以这样做，也是为了“高速存取”的目的。</p>\\n<p>我们基于一种结果尽可能随机平均分布的固定函数H为每一个元素安排存储位置，这样就能够避免遍历性质的线性搜索，以达到高速存取。</p>","autoDesc":true}');export{o as comp,d as data};
