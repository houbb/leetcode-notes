import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-Cks_2bhM.js";const n={};function l(h,s){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><p>大家好，我是老马。</p><p>今天我们一起来学习一下数组这种数据结构。</p><h2 id="主要知识" tabindex="-1"><a class="header-anchor" href="#主要知识"><span>主要知识</span></a></h2><p>数组需要拆分下面几个部分：</p><ol><li><p>理论介绍</p></li><li><p>源码分析</p></li><li><p>数据结构实现？</p></li><li><p>题目练习（按照算法思想分类）</p></li><li><p>梳理对应的 sdk 包</p></li><li><p>应用实战</p></li></ol><p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p><p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p><p>简单介绍1，重点为4。其他不是本系列的重点。</p><h1 id="数据结构篇" tabindex="-1"><a class="header-anchor" href="#数据结构篇"><span>数据结构篇</span></a></h1><h2 id="通用基础" tabindex="-1"><a class="header-anchor" href="#通用基础"><span>通用基础</span></a></h2><p>链表</p><p>树</p><p>哈希表</p><p>stack 栈</p><p>queue 队列</p><p>ordered set 有序集合</p><p>heap 堆</p><p>graph 图</p><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><p>并查集</p><p>字典树</p><p>线段树</p><p>树状数组</p><p>后缀数组</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><p><a href="https://leetcode.cn/studyplan/top-100-liked/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/studyplan/top-100-liked/</a></p><h2 id="详细介绍一下力扣数据结构之有序集合" tabindex="-1"><a class="header-anchor" href="#详细介绍一下力扣数据结构之有序集合"><span>详细介绍一下力扣数据结构之有序集合</span></a></h2><p>在力扣（LeetCode）中，“<strong>有序集合（Ordered Set）</strong>”是一个比较常用但又容易混淆的概念，常出现在涉及<strong>查找第 k 大/小元素</strong>、<strong>区间查找</strong>、<strong>滑动窗口最大/最小值</strong>、<strong>平衡树模拟</strong>等题目中。</p><p>虽然 Java 和 C++ 的标准库都没有直接叫做 &quot;Ordered Set&quot; 的数据结构，但可以通过某些容器来模拟。</p><hr><h2 id="🧠-有序集合的定义" tabindex="-1"><a class="header-anchor" href="#🧠-有序集合的定义"><span>🧠 有序集合的定义</span></a></h2><p><strong>有序集合</strong>是指：元素集合内部维持一定的顺序（一般是从小到大），同时集合中的元素是<strong>唯一的</strong>，支持如下操作：</p><ul><li>插入元素（有序插入）</li><li>删除元素</li><li>判断是否包含某元素</li><li>查找第 k 小/大元素</li><li>查找某个数的前驱/后继</li><li>支持快速地遍历区间内的元素</li></ul><hr><h2 id="🧰-不同语言的实现方式" tabindex="-1"><a class="header-anchor" href="#🧰-不同语言的实现方式"><span>🧰 不同语言的实现方式</span></a></h2><table><thead><tr><th>语言</th><th>模拟方式</th></tr></thead><tbody><tr><td><strong>C++</strong></td><td><code>std::set</code> 或 <code>std::multiset</code>（平衡树）</td></tr><tr><td><strong>Java</strong></td><td><code>TreeSet</code> / <code>TreeMap</code>（基于红黑树）</td></tr><tr><td><strong>Python</strong></td><td><code>SortedContainers</code> 库中的 <code>SortedSet</code>（三方库）或手动维护排序 + 二分</td></tr><tr><td><strong>Go、JS 等</strong></td><td>通常需要手动维护排序 + 二分</td></tr></tbody></table><hr><h2 id="🧩-力扣常见题型场景" tabindex="-1"><a class="header-anchor" href="#🧩-力扣常见题型场景"><span>🧩 力扣常见题型场景</span></a></h2><h3 id="_1-滑动窗口最大值-中位数" tabindex="-1"><a class="header-anchor" href="#_1-滑动窗口最大值-中位数"><span>1. 滑动窗口最大值 / 中位数</span></a></h3><p>题目如：</p><ul><li><a href="https://leetcode.cn/problems/sliding-window-maximum/" target="_blank" rel="noopener noreferrer">239. 滑动窗口最大值</a></li><li><a href="https://leetcode.cn/problems/sliding-window-median/" target="_blank" rel="noopener noreferrer">480. 滑动窗口中位数</a></li></ul><p>👉 解法：用有序集合（如 TreeSet 或 multiset）来维护一个固定长度的窗口，支持快速插入、删除、查找中位数或最大/最小值。</p><h3 id="_2-动态查找排名、第-k-大-小" tabindex="-1"><a class="header-anchor" href="#_2-动态查找排名、第-k-大-小"><span>2. 动态查找排名、第 k 大/小</span></a></h3><p>题目如：</p><ul><li><a href="https://leetcode.cn/problems/kth-largest-element-in-a-stream/" target="_blank" rel="noopener noreferrer">703. 数据流中的第K大元素</a></li><li><a href="https://leetcode.cn/problems/find-median-from-data-stream/" target="_blank" rel="noopener noreferrer">295. 数据流的中位数</a></li></ul><p>👉 解法：可以使用有序集合、堆或平衡树（如 <code>TreeMap</code> + size 记录）进行模拟。</p><h3 id="_3-区间内查找比某个数大的最小值-小的最大值" tabindex="-1"><a class="header-anchor" href="#_3-区间内查找比某个数大的最小值-小的最大值"><span>3. 区间内查找比某个数大的最小值/小的最大值</span></a></h3><p>题目如：</p><ul><li><a href="https://leetcode.cn/problems/contains-duplicate-iii/" target="_blank" rel="noopener noreferrer">220. 存在重复元素 III</a></li></ul><p>👉 解法：维护一个 <code>TreeSet</code> 或 <code>SortedList</code>，支持快速查询某个元素的天花板（ceiling）或地板（floor）。</p><hr><h2 id="🔨-示例代码" tabindex="-1"><a class="header-anchor" href="#🔨-示例代码"><span>🔨 示例代码</span></a></h2><h3 id="java-使用-treeset-实现有序集合" tabindex="-1"><a class="header-anchor" href="#java-使用-treeset-实现有序集合"><span>Java 使用 TreeSet 实现有序集合</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.TreeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderedSetExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        TreeSet</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 插入元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 自动有序：[3, 5, 7]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(set);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查找比 4 大的最小元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ceiling</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 查找比 5 小的最大元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">floor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 删除元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(set); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// [3, 7]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧠-有序集合常见操作复杂度" tabindex="-1"><a class="header-anchor" href="#🧠-有序集合常见操作复杂度"><span>🧠 有序集合常见操作复杂度</span></a></h2><table><thead><tr><th>操作</th><th>时间复杂度（红黑树、平衡树等）</th></tr></thead><tbody><tr><td>插入元素</td><td>O(log n)</td></tr><tr><td>删除元素</td><td>O(log n)</td></tr><tr><td>查询是否存在</td><td>O(log n)</td></tr><tr><td>查找第 k 小</td><td>O(log n)（需额外支持）</td></tr><tr><td>查找前驱/后继</td><td>O(log n)</td></tr><tr><td>区间遍历</td><td>O(k) 线性</td></tr></tbody></table><hr><h2 id="🧠-力扣常用变种" tabindex="-1"><a class="header-anchor" href="#🧠-力扣常用变种"><span>🧠 力扣常用变种</span></a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>multiset</strong></td><td>支持重复元素（如 C++ 的 multiset）</td></tr><tr><td><strong>indexable set</strong></td><td>支持按下标查找第 k 大/小（如 C++ 的 PBDS，Java 需自己维护）</td></tr><tr><td><strong>TreeMap</strong></td><td>Key 有序，Value 可统计个数，适合处理重复元素</td></tr></tbody></table><hr><h2 id="✨-总结" tabindex="-1"><a class="header-anchor" href="#✨-总结"><span>✨ 总结</span></a></h2><table><thead><tr><th>特性</th><th>有序集合</th><th>哈希集合（HashSet）</th></tr></thead><tbody><tr><td>是否有序</td><td>✅ 是</td><td>❌ 否</td></tr><tr><td>插入/删除/查找</td><td>O(log n)</td><td>O(1)</td></tr><tr><td>支持查找第 k 小</td><td>✅ 是</td><td>❌ 否</td></tr><tr><td>支持区间查询</td><td>✅ 是</td><td>❌ 否</td></tr></tbody></table>`,64)]))}const d=i(n,[["render",l]]),k=JSON.parse('{"path":"/posts/leetcode/top-100-liked/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html","title":"算法篇专题之有序集合 ordered set s01-入门介绍","lang":"zh-CN","frontmatter":{"title":"算法篇专题之有序集合 ordered set s01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","topics","leetcode","ordered-set","sf"],"published":true,"description":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"算法篇专题之有序集合 ordered set s01-入门介绍"}],["meta",{"property":"og:description","content":"数组 大家好，我是老马。 今天我们一起来学习一下数组这种数据结构。 主要知识 数组需要拆分下面几个部分： 理论介绍 源码分析 数据结构实现？ 题目练习（按照算法思想分类） 梳理对应的 sdk 包 应用实战 因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。 为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。 简单介绍1，重点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"topics"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"ordered-set"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法篇专题之有序集合 ordered set s01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.49,"words":1046},"filePathRelative":"posts/leetcode/top-100-liked/hash/2020-06-06-algorithm-000-leetcode-data-struct-001-topics-datastruct-ordered-set-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>今天我们一起来学习一下数组这种数据结构。</p>\\n<h2>主要知识</h2>\\n<p>数组需要拆分下面几个部分：</p>\\n<ol>\\n<li>\\n<p>理论介绍</p>\\n</li>\\n<li>\\n<p>源码分析</p>\\n</li>\\n<li>\\n<p>数据结构实现？</p>\\n</li>\\n<li>\\n<p>题目练习（按照算法思想分类）</p>\\n</li>\\n<li>\\n<p>梳理对应的 sdk 包</p>\\n</li>\\n<li>\\n<p>应用实战</p>\\n</li>\\n</ol>\\n<p>因为这个是 leetcode 系列，所以重点是 4、5(对4再一次总结)。</p>\\n<p>为了照顾没有基础的小伙伴，会简单介绍一下1的基础理论。</p>","autoDesc":true}');export{d as comp,k as data};
