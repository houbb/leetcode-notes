import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-rGAVnKEK.js";const e={};function h(l,s){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p><blockquote><p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p></blockquote><h1 id="详细介绍一下力扣矩阵" tabindex="-1"><a class="header-anchor" href="#详细介绍一下力扣矩阵"><span>详细介绍一下力扣矩阵</span></a></h1><p>“力扣矩阵”这个说法可能是你指代 LeetCode（力扣）中与 <strong>矩阵相关的算法题</strong>，这种类型的题目在刷题中很常见，主要考察二维数组的遍历、状态转移、路径搜索、动态规划等技巧。</p><p>下面我将详细介绍：</p><hr><h2 id="🧩-力扣矩阵题型分类总览" tabindex="-1"><a class="header-anchor" href="#🧩-力扣矩阵题型分类总览"><span>🧩 力扣矩阵题型分类总览</span></a></h2><table><thead><tr><th>类型</th><th>说明</th><th>典型例题</th></tr></thead><tbody><tr><td>遍历类</td><td>按行、按列、对角线、螺旋等方式遍历</td><td>54 螺旋矩阵、498 对角线遍历</td></tr><tr><td>搜索类</td><td>DFS / BFS 遍历路径、连通块</td><td>200 岛屿数量、695 最大岛屿面积</td></tr><tr><td>路径类</td><td>从左上到右下的最短路径、最大路径</td><td>64 最小路径和、62 不同路径</td></tr><tr><td>动态规划</td><td>依赖前状态来更新当前状态</td><td>64 最小路径和、221 最大正方形</td></tr><tr><td>模拟类</td><td>需要模拟某种操作或规律</td><td>59 螺旋矩阵 II、73 矩阵置零</td></tr><tr><td>前缀和 / 差分</td><td>快速计算子矩阵和</td><td>304 二维区域和检索、1094 拼车</td></tr><tr><td>状态压缩</td><td>将矩阵转为位图进行优化</td><td>980 不同路径 III、1349 参加考试的最大学生数</td></tr></tbody></table><hr><h2 id="🧠-常用基础知识" tabindex="-1"><a class="header-anchor" href="#🧠-常用基础知识"><span>🧠 常用基础知识</span></a></h2><h3 id="✅-二维数组声明-遍历" tabindex="-1"><a class="header-anchor" href="#✅-二维数组声明-遍历"><span>✅ 二维数组声明 &amp; 遍历</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] matrix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[m][n]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 行优先遍历</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(matrix[i][j]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✅-常见方向数组-上下左右、八方向" tabindex="-1"><a class="header-anchor" href="#✅-常见方向数组-上下左右、八方向"><span>✅ 常见方向数组（上下左右、八方向）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 上下左右</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] directions </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 八个方向（对角线）</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[][] directions8 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="💡-重点题型详解" tabindex="-1"><a class="header-anchor" href="#💡-重点题型详解"><span>💡 重点题型详解</span></a></h2><h3 id="_1️⃣-螺旋遍历类" tabindex="-1"><a class="header-anchor" href="#_1️⃣-螺旋遍历类"><span>1️⃣ 螺旋遍历类</span></a></h3><h4 id="示例-leetcode-54-螺旋矩阵" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-54-螺旋矩阵"><span>示例：LeetCode 54 - 螺旋矩阵</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>[</span></span>
<span class="line"><span> [1, 2, 3],</span></span>
<span class="line"><span> [4, 5, 6],</span></span>
<span class="line"><span> [7, 8, 9]</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输出：[1,2,3,6,9,8,7,4,5]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🧠 思路：</p><ul><li>用四个边界：<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code></li><li>每次按顺时针走一圈，收缩边界</li></ul><hr><h3 id="_2️⃣-搜索连通块类" tabindex="-1"><a class="header-anchor" href="#_2️⃣-搜索连通块类"><span>2️⃣ 搜索连通块类</span></a></h3><h4 id="示例-leetcode-200-岛屿数量" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-200-岛屿数量"><span>示例：LeetCode 200 - 岛屿数量</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>[</span></span>
<span class="line"><span> [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span></span>
<span class="line"><span> [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;],</span></span>
<span class="line"><span> [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输出：3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🧠 思路：</p><ul><li>遍历每个点，遇到 “1” 就 DFS/BFS，把连通的 “1” 都淹掉</li><li>遍历中统计启动次数即为岛屿数</li></ul><hr><h3 id="_3️⃣-最短路径类-bfs" tabindex="-1"><a class="header-anchor" href="#_3️⃣-最短路径类-bfs"><span>3️⃣ 最短路径类（BFS）</span></a></h3><h4 id="示例-leetcode-1091-二进制矩阵中的最短路径" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-1091-二进制矩阵中的最短路径"><span>示例：LeetCode 1091 - 二进制矩阵中的最短路径</span></a></h4><ul><li>起点 (0,0)，终点 (n-1,n-1)，八方向移动</li></ul><p>🧠 思路：</p><ul><li>BFS 层序遍历，找到最短路径</li><li>维护访问数组避免死循环</li></ul><hr><h3 id="_4️⃣-最小路径和类-动态规划" tabindex="-1"><a class="header-anchor" href="#_4️⃣-最小路径和类-动态规划"><span>4️⃣ 最小路径和类（动态规划）</span></a></h3><h4 id="示例-leetcode-64-最小路径和" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-64-最小路径和"><span>示例：LeetCode 64 - 最小路径和</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：</span></span>
<span class="line"><span>[</span></span>
<span class="line"><span> [1,3,1],</span></span>
<span class="line"><span> [1,5,1],</span></span>
<span class="line"><span> [4,2,1]</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>输出：7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🧠 思路：</p><ul><li>状态定义：dp[i][j] 为到达 (i,j) 的最小路径和</li><li>转移方程：<code>dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]</code></li></ul><hr><h3 id="_5️⃣-模拟类" tabindex="-1"><a class="header-anchor" href="#_5️⃣-模拟类"><span>5️⃣ 模拟类</span></a></h3><h4 id="示例-leetcode-73-矩阵置零" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-73-矩阵置零"><span>示例：LeetCode 73 - 矩阵置零</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果某个元素为 0，则其所在行列都变成 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>🧠 思路：</p><ul><li>先记录所有需要置零的行和列</li><li>再二次遍历将对应行列置零</li></ul><hr><h3 id="_6️⃣-前缀和-差分类" tabindex="-1"><a class="header-anchor" href="#_6️⃣-前缀和-差分类"><span>6️⃣ 前缀和 / 差分类</span></a></h3><h4 id="示例-leetcode-304-二维区域和检索" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-304-二维区域和检索"><span>示例：LeetCode 304 - 二维区域和检索</span></a></h4><p>🧠 思路：</p><ul><li>构建二维前缀和数组 preSum[i][j]</li><li>任意子矩阵和 = 右下 - 上方 - 左边 + 左上</li></ul><hr><h3 id="_7️⃣-状态压缩类" tabindex="-1"><a class="header-anchor" href="#_7️⃣-状态压缩类"><span>7️⃣ 状态压缩类</span></a></h3><h4 id="示例-leetcode-1349-参加考试的最大学生数" tabindex="-1"><a class="header-anchor" href="#示例-leetcode-1349-参加考试的最大学生数"><span>示例：LeetCode 1349 - 参加考试的最大学生数</span></a></h4><p>🧠 思路：</p><ul><li>每一行可能的坐法可以用 bitmask 表示</li><li>状态转移时需要判断两行之间是否冲突</li><li>用 <code>dp[row][state]</code> 表示第 row 行状态为 state 时的最大人数</li></ul><hr><h2 id="📚-推荐刷题顺序-由浅入深" tabindex="-1"><a class="header-anchor" href="#📚-推荐刷题顺序-由浅入深"><span>📚 推荐刷题顺序（由浅入深）</span></a></h2><table><thead><tr><th>阶段</th><th>推荐题目编号</th></tr></thead><tbody><tr><td>入门遍历</td><td>54、59、498</td></tr><tr><td>简单 DP</td><td>62、63、64、120</td></tr><tr><td>中等搜索</td><td>200、695、733、542</td></tr><tr><td>高阶 DP</td><td>221、85、1277</td></tr><tr><td>前缀和</td><td>304、1314</td></tr><tr><td>状态压缩</td><td>1349、980</td></tr></tbody></table><hr><h2 id="🧰-常见技巧小结" tabindex="-1"><a class="header-anchor" href="#🧰-常见技巧小结"><span>🧰 常见技巧小结</span></a></h2><table><thead><tr><th>技巧</th><th>用途</th></tr></thead><tbody><tr><td>标记 visited</td><td>DFS/BFS 防止重复访问</td></tr><tr><td>多方向遍历</td><td>搜索类题目必备</td></tr><tr><td>动态规划</td><td>优化搜索，避免重复计算</td></tr><tr><td>状态压缩</td><td>在矩阵规模大时减少空间复杂度</td></tr><tr><td>二维前缀和</td><td>快速求子矩阵和</td></tr><tr><td>滑动窗口</td><td>图像处理或热力图类题目</td></tr></tbody></table><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有帮助，如果有其他想法的话，也可以评论区和大家分享哦。</p><p>各位极客的点赞收藏转发，是老马持续写作的最大动力！</p><p>感兴趣的小伙伴可以关注一波，精彩内容，不容错过。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,68)]))}const r=i(e,[["render",h]]),k=JSON.parse('{"path":"/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html","title":"力扣矩阵 matrix -01-入门介绍","lang":"zh-CN","frontmatter":{"title":"力扣矩阵 matrix -01-入门介绍","date":"2020-06-08T00:00:00.000Z","categories":["TopLiked100"],"tags":["algorithm","data-struct","matrix","leetcode"],"published":true,"description":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 详细介绍一下力扣矩阵 “力扣矩阵”这个说法可能是你指代 LeetCode（力扣）中与 矩阵相关的算法题，这种类型的题目在刷题中很常见，主要考察二维数组的遍历、状态转移、路径搜索、动态规划等技巧。 下面我将详细...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"力扣矩阵 matrix -01-入门介绍"}],["meta",{"property":"og:description","content":"开源地址 为了便于大家学习，所有实现均已开源。欢迎 fork + star~ https://github.com/houbb/leetcode 详细介绍一下力扣矩阵 “力扣矩阵”这个说法可能是你指代 LeetCode（力扣）中与 矩阵相关的算法题，这种类型的题目在刷题中很常见，主要考察二维数组的遍历、状态转移、路径搜索、动态规划等技巧。 下面我将详细..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-24T02:52:43.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"matrix"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-24T02:52:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"力扣矩阵 matrix -01-入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-24T02:52:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758682363000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":4},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.74,"words":1122},"filePathRelative":"posts/leetcode/topliked-100/array/2020-06-06-algorithm-000-leetcode-data-struct-001-array-topics-matrix-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p>\\n<blockquote>\\n<p><a href=\\"https://github.com/houbb/leetcode\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/houbb/leetcode</a></p>\\n</blockquote>\\n<h1>详细介绍一下力扣矩阵</h1>\\n<p>“力扣矩阵”这个说法可能是你指代 LeetCode（力扣）中与 <strong>矩阵相关的算法题</strong>，这种类型的题目在刷题中很常见，主要考察二维数组的遍历、状态转移、路径搜索、动态规划等技巧。</p>","autoDesc":true}');export{r as comp,k as data};
