import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-DBrlZJhV.js";const l={};function t(p,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="位运算专题" tabindex="-1"><a class="header-anchor" href="#位运算专题"><span>位运算专题</span></a></h1><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算基本概念介绍</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert" target="_blank" rel="noopener noreferrer">Java Bit Operation-位运算类型转换</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-intro" target="_blank" rel="noopener noreferrer">leetcode bit operator 位运算入门介绍</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-01-136-single-number" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-02-137-single-number-ii" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.137 single-number-ii 力扣.137 只出现一次的数字II</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-03-260-single-number-iii" target="_blank" rel="noopener noreferrer">leetcode 002-leetcode.260 single-number-iii 力扣.260 只出现一次的数字III</a></p><h1 id="进制" tabindex="-1"><a class="header-anchor" href="#进制"><span>进制</span></a></h1><h2 id="计算机只有-0-和-1" tabindex="-1"><a class="header-anchor" href="#计算机只有-0-和-1"><span>计算机只有 0 和 1</span></a></h2><p>常见的进制如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>十进制：10</span></span>
<span class="line"><span>八进制：012</span></span>
<span class="line"><span>十六进制：0x0a</span></span>
<span class="line"><span>二进制：1010</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然有很多种进制，但是实际上计算机所认识的数据只有 0 和 1, 因此所有的数值不管它是十进制、十六进制也好都会统统在底层被翻译成二进制数值。</p><h2 id="bit、byte、word" tabindex="-1"><a class="header-anchor" href="#bit、byte、word"><span>bit、byte、word</span></a></h2><ul><li><p>bit (位) bit 电脑记忆体中最小的单位，在二进位电脑系统中，每一 bit 可以代表 0 或 1 的数位讯号。所以它能表示的数字范围就是 0 ~ 1。</p></li><li><p>byte (字节) 一个 byte 由 8 bit 组成，所以理论上一个 byte 能表示的数据范围是 0 ~ 255。</p></li><li><p>word (字) 一个 word 由 2 byte 组成，所以理论上一个 word 能表示的数据范围是 0 ~ 65535。</p></li></ul><h1 id="_32-位与-64-位操作系统" tabindex="-1"><a class="header-anchor" href="#_32-位与-64-位操作系统"><span>32 位与 64 位操作系统</span></a></h1><p>一般计算机设备上，CPU 主要有 32 位和 64 位（当然，单片机有 8 位和 16 位），32 位 CPU 能够寻址的范围是 4 GB。</p><p>所以过去的电脑设备内存最高一般只能到达 4 GB。后来，随着芯片技术的发展，越来越多的机器采用了 64 位 CPU。</p><p>这使得机器的最大内存可以为 16 GB。</p><p>那么好，我们再来谈谈 32 位操作系统与 64 位操作系统。实际上它们分别是针对 CPU 类型设计的软件系统。</p><p>32 bit 是 4 byte。通常一条 CPU 指令是 4 byte。在 32 位操作系统上，如果一条 CPU 指令是 4 byte，那么 CPU 执行一次能够读取 32 bit 内容，所以一个指令周期内就能够完成指令，如果一条 CPU 指令是 8 byte 的话，那么 32 位操作系统就需要通过 2 个指令周期才能完成指令的读取，而对应的 64 位操作系统因为一次能够读取 64 bit 内容，所以它在一个指令周期就能够读取指令。所以，理论上，64 位的操作系统是要比 32 位操作系统要快 1 倍。</p><p>但还有几个需要大家注意的地方是：</p><ol><li><p>64 位 CPU 机器可以安装 32 位操作系统，但效率自然跟 32 位操作系统一样。</p></li><li><p>32 位 CPU 机器也可以安装 64 位操作系统。</p></li><li><p>64 位 CPU 机器安装 64 位操作系统才最有效率，但跟软件优化也有关系。</p></li></ol><p>不同的操作系统平台，给 C/C++ 基本数据类型变量分配的字节是不一样的。</p><h2 id="_32" tabindex="-1"><a class="header-anchor" href="#_32"><span>32</span></a></h2><p>32 位编译器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>char ：1个字节</span></span>
<span class="line"><span>char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）</span></span>
<span class="line"><span>short int : 2个字节</span></span>
<span class="line"><span>int：  4个字节</span></span>
<span class="line"><span>unsigned int : 4个字节</span></span>
<span class="line"><span>float:  4个字节</span></span>
<span class="line"><span>double:   8个字节</span></span>
<span class="line"><span>long:   4个字节</span></span>
<span class="line"><span>long long:  8个字节</span></span>
<span class="line"><span>unsigned long:  4个字节</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_64" tabindex="-1"><a class="header-anchor" href="#_64"><span>64</span></a></h2><p>64 位编译器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>char ：1个字节</span></span>
<span class="line"><span>char*(即指针变量): 8个字节</span></span>
<span class="line"><span>short int : 2个字节</span></span>
<span class="line"><span>int：  4个字节</span></span>
<span class="line"><span>unsigned int : 4个字节</span></span>
<span class="line"><span>float:  4个字节</span></span>
<span class="line"><span>double:   8个字节</span></span>
<span class="line"><span>long:   8个字节</span></span>
<span class="line"><span>long long:  8个字节</span></span>
<span class="line"><span>unsigned long:  8个字节</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面讲的是 C/C++ 在不同平台上的字节长度差别，但是对于 Java 而言，由于 Java 是跨平台语言，所以 JVM 表现下的基础数据字节长度其实都是一致的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int：4 个字节。</span></span>
<span class="line"><span>short：2 个字节。</span></span>
<span class="line"><span>long：8 个字节。</span></span>
<span class="line"><span>byte：1 个字节。</span></span>
<span class="line"><span>float：4 个字节。</span></span>
<span class="line"><span>double：8 个字节。</span></span>
<span class="line"><span>char：2 个字节。</span></span>
<span class="line"><span>boolean：boolean属于布尔类型，在存储的时候不使用字节，仅仅使用 1 位来存储，范围仅仅为0和1，其字面量为true和false。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 Java 与 C/C++ 的基本数据类型字节长度有些不一致，所以涉及到网络通信交互或者是 JNI 开发时，数据的转换有时需要考虑下基础的字节长度。</p><p>本篇文章的主要内容是 Java 中的位操作，所以基础数据长度也是以 Java 中定义的为准。</p><h1 id="原码-反码-补码" tabindex="-1"><a class="header-anchor" href="#原码-反码-补码"><span>原码 反码 补码</span></a></h1><p>我们已经知道了一个 int 型数值是 4 个字节。每个字节有 8 位。</p><p>但对于一个 int 或者其它整数类型如 （long）的数值而言还要注意的是，它的最高位是符号位。</p><h2 id="符号位" tabindex="-1"><a class="header-anchor" href="#符号位"><span>符号位</span></a></h2><p>最高位为0表示正数。</p><p>最高位为1表示负数。</p><h2 id="原码" tabindex="-1"><a class="header-anchor" href="#原码"><span>原码</span></a></h2><p>将一个数字转换成二进制就是这个数值的原码。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int a = 5;   //原码  0000 0000 0000 0101</span></span>
<span class="line"><span>int b = -3;  //原码  1000 0000 0000 0011</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反码" tabindex="-1"><a class="header-anchor" href="#反码"><span>反码</span></a></h2><p>分两种情况：正数和负数</p><p>正数 正数的反码就是原码。</p><p>负数 负数的反码是在原码的基础上，符号位不变 其它位都取反。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5 的原码：0000 0000 0000 0101</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-3 的原码：1000 0000 0000 0011</span></span>
<span class="line"><span>-3 的反码：1111 1111 1111 1100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补码" tabindex="-1"><a class="header-anchor" href="#补码"><span>补码</span></a></h2><p>仍然分正数和负数两种情况</p><p>正数 正数的补码就是原码。</p><p>负数 负数的补码在反码的基础上加 1。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5 的补码：0000 0000 0000 0101</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-3 的反码：1111 1111 1111 1100</span></span>
<span class="line"><span>-3 的补码：1111 1111 1111 1101</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><p>计算机在进行数值运算的时候，是通过补码表示每个数值的。</p><p>比如</p><p><code>5 - 3 = 5 + ( -3 )</code> 相当于</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    0000 0000 0000 0101</span></span>
<span class="line"><span>+   1111 1111 1111 1101</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>= 1 0000 0000 0000 0010</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的结果是 <code>1 0000 0000 0000 0010</code> 这样的二进制，由于 int 类型只有 4 byte，所以最高位产生了溢出，进位 1 被丢弃。</p><p>结果就变成了 0010 也就是 2，5 - 3 = 2 没有毛病。</p><h1 id="java-位运算" tabindex="-1"><a class="header-anchor" href="#java-位运算"><span>java 位运算</span></a></h1><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>| 符号 | 描述 运算规则 |<br> |:---|:---|:---|<br> | &amp; | 与 | 两个位都为 1 时，结果才为 1 |<br> | I | 或 | 两个位都是 0 时，结果才为 0 |<br> | ^ | 异或 | 两个位相同时为 0，相异为 1 |<br> | ~ | 取反 | 0 变 1，1 变 0 |<br> | <code>&lt;&lt;</code> | 左移 | 各二进位全部左移若干位，高位丢弃，低位补 0 |<br> | <code>&gt;&gt;</code> | 右移 | 各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位(算术右移)，有的补 0 (逻辑右移) |<br> | <code>&gt;&gt;&gt;</code> | 无符号右移 | 忽略符号位，空位都以0补齐 |</p><h2 id="与运算符" tabindex="-1"><a class="header-anchor" href="#与运算符"><span>&amp; 与运算符</span></a></h2><p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。</p><p>如果某 bit 的两个数值对应的值都是 1，则结果值相应的 bit 就是 1，否则为 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0 &amp; 0 = 0,</span></span>
<span class="line"><span>0 &amp; 1 = 0,</span></span>
<span class="line"><span>1 &amp; 1 = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 &amp; 5 = 1 这是因为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    0000 0011</span></span>
<span class="line"><span>&amp;   0000 0101</span></span>
<span class="line"><span>=   0000 0001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照规则，将两个数值按照低位到高位一一对齐运算，因为只有第 0 位都为 1，所以计算结果为 1。</p><h2 id="或运算符" tabindex="-1"><a class="header-anchor" href="#或运算符"><span>| 或运算符</span></a></h2><p>与运算时，进行运算的两个数，从最低位到最高位，一一对应。</p><p>如果某 bit 的两个数值对应的值只要 1 个为 1，则结果值相应的 bit 就是 1，否则为 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0 | 0 = 0,</span></span>
<span class="line"><span>0 | 1 = 1,</span></span>
<span class="line"><span>1 | 1 = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 | 5 = 7 这是因为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    0000 0011</span></span>
<span class="line"><span>|   0000 0101</span></span>
<span class="line"><span>=   0000 0111</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取反运算符" tabindex="-1"><a class="header-anchor" href="#取反运算符"><span>~ 取反运算符</span></a></h2><p>对操作数的每一位进行操作，1 变成 0，0 变成 1。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5   0000 0101</span></span>
<span class="line"><span>~5  1111 1010</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异或运算符" tabindex="-1"><a class="header-anchor" href="#异或运算符"><span>^ 异或运算符</span></a></h2><p>两个操作数进行异或时，对于同一位上，如果数值相同则为 0，数值不同则为 1。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 ^ 0 = 1,</span></span>
<span class="line"><span>1 ^ 1 = 0,</span></span>
<span class="line"><span>0 ^ 0 = 0;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 ^ 5 = 6, 这是因为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    0000 0011       // 3</span></span>
<span class="line"><span>|   0000 0101       // 5</span></span>
<span class="line"><span>--------------</span></span>
<span class="line"><span>=   0000 0110       // 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是 3 ^ 5 = 6, 而 6 ^ 5 = 3</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    0000 0110       // 6</span></span>
<span class="line"><span>|   0000 0101       // 5</span></span>
<span class="line"><span>--------------</span></span>
<span class="line"><span>=   0000 0011       // 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对这个特性，我们可以将异或运算作为一个简单的数据加密的形式。</p><p>比如，将一个mp4文件所有数值与一个种子数值进行异或得到加密后的数据，解密的时候再将数据与种子数值进行异或一次就可以了。</p><p>所以说异或运算可以作为简单的加解密运算算法。</p><h2 id="右移运算符" tabindex="-1"><a class="header-anchor" href="#右移运算符"><span>&gt;&gt; 右移运算符</span></a></h2><p>a &gt;&gt; b 将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向右方向移动 b 位，符号位不变，高位空出来的位补数值 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5 &gt;&gt; 1 ===&gt;  1000 0000 0000 0101 &gt;&gt; 1  = 1000 0000 0000 0010 = 2</span></span>
<span class="line"><span>7 &gt;&gt; 2 ===&gt;  1000 0000 0000 0111 &gt;&gt; 2  = 1000 0000 0000 0001 = 1</span></span>
<span class="line"><span>9 &gt;&gt; 3 ===&gt;  1000 0000 0000 1001 &gt;&gt; 3  = 1000 0000 0000 0001 = 1</span></span>
<span class="line"><span>11 &gt;&gt; 2 ===&gt; 1000 0000 0000 1011 &gt;&gt; 2 = 1000 0000 0000 0010 = 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家发现什么规律没有？<code>a &gt;&gt; b = a / ( 2 ^ b )</code></p><p>所以 5 &gt;&gt; 1= 5 / 2 = 2,11 &gt;&gt; 2 = 11 / 4 = 2。</p><h2 id="左移运算符" tabindex="-1"><a class="header-anchor" href="#左移运算符"><span>&lt;&lt; 左移运算符</span></a></h2><p>a &lt;&lt; b 将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向左方向移动 b 位，符号位不变，低位空出来的位补数值 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>5 &lt;&lt; 1 ===&gt;  1000 0000 0000 0101 &lt;&lt; 1  = 1000 0000 0000 1010 = 10</span></span>
<span class="line"><span>7 &lt;&lt; 2 ===&gt;  1000 0000 0000 0111 &lt;&lt; 2  = 1000 0000 0001 1100 = 28</span></span>
<span class="line"><span>9 &lt;&lt; 3 ===&gt;  1000 0000 0000 1001 &lt;&lt; 3  = 1000 0000 0100 1000 = 72</span></span>
<span class="line"><span>11 &lt;&lt; 2 ===&gt; 1000 0000 0000 1011 &lt;&lt; 2 = 1000 0000 0010 1100 = 44</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显就可以看出 <code>a &lt;&lt; b = a * (2 ^ b)</code></p><p>综合上面两个可以看到，如果某个数值右移 n 位，就相当于拿这个数值去除以 2 的 n 次幂。如果某个数值左移 n 位，就相当于这个数值乘以 2 ^ n。</p><h1 id="实战技巧" tabindex="-1"><a class="header-anchor" href="#实战技巧"><span>实战技巧</span></a></h1><p>TBC...</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://blog.csdn.net/xiaochunyong/article/details/7748713" target="_blank" rel="noopener noreferrer">Java 位运算(移位、位与、或、异或、非）</a></p><p><a href="https://zhuanlan.zhihu.com/p/30108890" target="_blank" rel="noopener noreferrer">Java中的移位运算符</a></p><p><a href="https://www.jianshu.com/p/b677858bc085" target="_blank" rel="noopener noreferrer">Java 位操作全面总结</a></p><p><a href="https://juejin.im/entry/58f9b6118d6d8100588060d6" target="_blank" rel="noopener noreferrer">可能是最通俗易懂的 Java 位操作运算讲解</a></p><ul><li>位移运算符</li></ul><p><a href="http://www.cnblogs.com/hongten/p/hongten_java_yiweiyunsuangfu.html" target="_blank" rel="noopener noreferrer">http://www.cnblogs.com/hongten/p/hongten_java_yiweiyunsuangfu.html</a></p>`,107)]))}const h=a(l,[["render",t]]),c=JSON.parse('{"path":"/posts/leetcode/top-100-liked/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html","title":"java 位运算介绍 bit operator base intro","lang":"zh-CN","frontmatter":{"title":"java 位运算介绍 bit operator base intro","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","data-struct","bit-operator","leetcode","sf"],"published":true,"description":"位运算专题 Java Bit Operation-位运算基本概念介绍 Java Bit Operation-位运算类型转换 leetcode bit operator 位运算入门介绍 leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 leetcode 002-leetcode.137 sin...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/top-100-liked/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"java 位运算介绍 bit operator base intro"}],["meta",{"property":"og:description","content":"位运算专题 Java Bit Operation-位运算基本概念介绍 Java Bit Operation-位运算类型转换 leetcode bit operator 位运算入门介绍 leetcode 002-leetcode.136 single-number 力扣.136 只出现一次的数字 leetcode 002-leetcode.137 sin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T18:54:20.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"data-struct"}],["meta",{"property":"article:tag","content":"bit-operator"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T18:54:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 位运算介绍 bit operator base intro\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T18:54:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1756580060000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":8.57,"words":2570},"filePathRelative":"posts/leetcode/top-100-liked/bit-operation/2020-06-06-algorithm-000-leetcode-data-struct-002-bit-operator-00-base.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-base\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Bit Operation-位运算基本概念介绍</a></p>\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-000-leetcode-data-struct-002-bit-operator-00-convert\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Bit Operation-位运算类型转换</a></p>","autoDesc":true}');export{h as comp,c as data};
