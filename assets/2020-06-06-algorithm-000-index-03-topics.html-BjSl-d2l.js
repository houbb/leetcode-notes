import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as s}from"./app-CxuXvQYp.js";const l={};function i(g,t){return s(),o("div",null,t[0]||(t[0]=[n('<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h1 id="系统分类" tabindex="-1"><a class="header-anchor" href="#系统分类"><span>系统分类</span></a></h1><p><strong>我们要构建一个更完整的「LeetCode 数据结构与算法知识图谱」：</strong></p><ul><li>✅ 覆盖 <strong>所有经典算法思想</strong>（排序、分治、扫描线、位运算等）</li><li>✅ 明确哪些算法和哪些数据结构强相关（比如：树 + DFS、堆 + 贪心）</li><li>✅ 按照<strong>学习难度</strong> &amp; <strong>适配阶段</strong>循序渐进</li><li>✅ 易于整理成 <strong>笔记 / Notion / 题单</strong></li></ul><hr><h2 id="📚-完整版-leetcode-数据结构与算法系统分类-升级加强版" tabindex="-1"><a class="header-anchor" href="#📚-完整版-leetcode-数据结构与算法系统分类-升级加强版"><span>📚 完整版：LeetCode 数据结构与算法系统分类（升级加强版）</span></a></h2><hr><h3 id="🟢-一、基础数据结构-基本操作" tabindex="-1"><a class="header-anchor" href="#🟢-一、基础数据结构-基本操作"><span>🟢 一、基础数据结构 + 基本操作</span></a></h3><table><thead><tr><th>模块</th><th>内容</th><th>关键算法 / 技巧</th></tr></thead><tbody><tr><td>数组 Array</td><td>遍历、滑动窗口、双指针、前缀和、差分数组、矩阵</td><td>双指针、哈希、区间处理</td></tr><tr><td>字符串 String</td><td>反转、子串、KMP</td><td>模拟、字符串哈希、滚动哈希</td></tr><tr><td>链表 Linked List</td><td>单/双链表、快慢指针</td><td>翻转、合并、环检测</td></tr><tr><td>栈 Stack</td><td>括号匹配、逆波兰表达式</td><td>单调栈、辅助栈</td></tr><tr><td>队列 Queue</td><td>普通队列、双端队列</td><td>滑动窗口最大值</td></tr></tbody></table><p>哈希：哈希函数、滚动哈希、一致性哈希、bloom-filter</p><p>模拟?</p><p>枚举？</p><hr><h3 id="🟠-二、树结构-遍历算法" tabindex="-1"><a class="header-anchor" href="#🟠-二、树结构-遍历算法"><span>🟠 二、树结构 + 遍历算法</span></a></h3><table><thead><tr><th>模块</th><th>内容</th><th>技巧</th></tr></thead><tbody><tr><td>二叉树 Binary Tree</td><td>先中后序遍历</td><td>递归 / 栈模拟</td></tr><tr><td>BFS &amp; 层序</td><td>102. 二叉树层序遍历</td><td>队列</td></tr><tr><td>树的构造</td><td>中序+后序重构、序列化</td><td>分治</td></tr><tr><td>树上DP</td><td>337. 打家劫舍 III</td><td>后序DP</td></tr></tbody></table><hr><h3 id="🟡-三、图结构-搜索算法" tabindex="-1"><a class="header-anchor" href="#🟡-三、图结构-搜索算法"><span>🟡 三、图结构 + 搜索算法</span></a></h3><table><thead><tr><th>模块</th><th>内容</th><th>技巧</th></tr></thead><tbody><tr><td>图的遍历</td><td>DFS / BFS</td><td>递归/队列</td></tr><tr><td>拓扑排序</td><td>207. 课程表</td><td>入度表</td></tr><tr><td>并查集 Union-Find</td><td>547. 省份数量</td><td>路径压缩</td></tr><tr><td>最短路径</td><td>Dijkstra / Floyd / Bellman-Ford</td><td>最小堆</td></tr><tr><td>图构造</td><td>拓扑图、无向图、邻接表</td><td>边集建图</td></tr></tbody></table><hr><h3 id="🔵-四、常用算法思想-💥全核心模块💥" tabindex="-1"><a class="header-anchor" href="#🔵-四、常用算法思想-💥全核心模块💥"><span>🔵 四、常用算法思想（💥全核心模块💥）</span></a></h3><table><thead><tr><th>类型</th><th>子类</th><th>代表题目/技巧</th></tr></thead><tbody><tr><td><strong>排序算法</strong></td><td>- 快速排序<br>- 归并排序<br>- 计数排序<br>- 堆排序</td><td><strong>88. 合并两个有序数组</strong><br><strong>912. 排序数组</strong><br><strong>315. 计算右侧小于当前元素（归并+索引）</strong></td></tr><tr><td><strong>分治算法</strong></td><td>- 归并排序<br>- 最大子数组和<br>- 树构造</td><td><strong>53. 最大子序和</strong><br><strong>241. 为表达式加括号</strong></td></tr><tr><td><strong>贪心算法</strong></td><td>- 区间调度<br>- 加油问题<br>- 跳跃游戏</td><td><strong>55. 跳跃游戏</strong><br><strong>435. 无重叠区间</strong></td></tr><tr><td><strong>回溯算法</strong></td><td>- 子集 / 排列 / 数独 / N皇后</td><td><strong>46. 全排列</strong><br><strong>51. N皇后</strong></td></tr><tr><td><strong>二分查找</strong></td><td>- 搜索有序数组<br>- 二分答案</td><td><strong>34. 查找区间</strong><br><strong>410. 分割数组最大值</strong></td></tr><tr><td><strong>扫描线算法</strong></td><td>- 区间交叉处理</td><td><strong>56. 合并区间</strong><br><strong>218. 天际线问题</strong></td></tr><tr><td><strong>滑动窗口</strong></td><td>- 固定 / 动态窗口</td><td><strong>76. 最小覆盖子串</strong><br><strong>3. 无重复最长子串</strong></td></tr><tr><td><strong>前缀和 / 差分</strong></td><td>- 区间统计 / 快速构造数组</td><td><strong>560. 和为 K 的子数组</strong><br><strong>370. 区间加法</strong></td></tr><tr><td><strong>位运算</strong></td><td>- 异或 / 掩码 / 状态压缩</td><td><strong>136. 只出现一次的数字</strong><br><strong>268. 缺失数字</strong></td></tr><tr><td><strong>数学类</strong></td><td>- 质数、欧拉函数、快速幂</td><td><strong>204. 计数质数</strong><br><strong>50. Pow(x, n)</strong></td></tr><tr><td><strong>概率算法</strong></td><td>- 蓄水池抽样、随机算法</td><td><strong>382. 链表随机节点</strong></td></tr></tbody></table><h3 id="核心算法" tabindex="-1"><a class="header-anchor" href="#核心算法"><span>核心算法</span></a></h3><p>DP--记忆化</p><p>递归</p><p>二分</p><p>DFS</p><p>BFS</p><p>回溯</p><p>greedy</p><p>分治算法：快排序、归并</p><h3 id="核心技巧" tabindex="-1"><a class="header-anchor" href="#核心技巧"><span>核心技巧</span></a></h3><p>双指针</p><p>滑动窗口</p><p>位运算</p><p>扫描线</p><p>哈希函数--滚动哈希</p><p>counting 计数</p><h3 id="🔶-五、动态规划分类" tabindex="-1"><a class="header-anchor" href="#🔶-五、动态规划分类"><span>🔶 五、动态规划分类</span></a></h3><table><thead><tr><th>类型</th><th>内容</th><th>例题</th></tr></thead><tbody><tr><td>一维DP</td><td>斐波那契 / 股票 / 打家劫舍</td><td>70. 爬楼梯、198. 打家劫舍</td></tr><tr><td>二维DP</td><td>编辑距离 / 公共子序列</td><td>72. 编辑距离、1143. LCS</td></tr><tr><td>区间DP</td><td>括号加法 / 合并石头</td><td>312. 戳气球</td></tr><tr><td>背包DP</td><td>0/1 背包 / 完全背包</td><td>416. 分割等和子集</td></tr><tr><td>状态压缩</td><td>旅行商问题 / 子集 DP</td><td>847. 访问所有节点最短路径</td></tr></tbody></table><hr><h3 id="🟣-六、特殊结构算法-提升段" tabindex="-1"><a class="header-anchor" href="#🟣-六、特殊结构算法-提升段"><span>🟣 六、特殊结构算法（提升段）</span></a></h3><table><thead><tr><th>模块</th><th>内容</th><th>技巧</th></tr></thead><tbody><tr><td><strong>堆（优先队列）</strong></td><td>TopK、合并多个有序链表</td><td>小顶堆、快排替代</td></tr><tr><td><strong>字典树 Trie</strong></td><td>单词前缀匹配</td><td>插入/查找字符树</td></tr><tr><td><strong>线段树 / 树状数组</strong></td><td>区间查询 / 修改</td><td>307. 区域和更新</td></tr><tr><td><strong>LRU 缓存结构</strong></td><td>双向链表 + 哈希表</td><td>146. LRU Cache</td></tr></tbody></table><p>并查集</p><p>Trie</p><p>suffix array 后缀数组</p><h2 id="🎓-建议学习顺序-按阶段" tabindex="-1"><a class="header-anchor" href="#🎓-建议学习顺序-按阶段"><span>🎓 建议学习顺序（按阶段）</span></a></h2><table><thead><tr><th>阶段</th><th>内容</th><th>建议周期</th></tr></thead><tbody><tr><td>🟩 入门阶段</td><td>数组、字符串、双指针、基础哈希</td><td>1-2 周</td></tr><tr><td>🟨 基础进阶</td><td>链表、栈队列、递归、树</td><td>1-2 周</td></tr><tr><td>🟦 算法精讲</td><td>二分、回溯、排序、贪心、前缀和</td><td>2 周</td></tr><tr><td>🟥 算法拔高</td><td>动态规划、图论、状态压缩</td><td>2-3 周</td></tr><tr><td>🟪 高阶专题</td><td>线段树、字典树、拓扑图</td><td>按需选学</td></tr></tbody></table><hr><h2 id="✅-最终成果可以形成" tabindex="-1"><a class="header-anchor" href="#✅-最终成果可以形成"><span>✅ 最终成果可以形成：</span></a></h2><ul><li>一个 <strong>算法学习大图谱</strong>（Notion/Obsidian/思维导图）</li><li>每个分类配对应 <strong>LeetCode 精选题单</strong></li><li>搭建自己的 <strong>刷题笔记库或 GitHub 仓库</strong></li><li>自己构建的 <strong>错题集 + 模板题集 + 应用题集</strong></li></ul><h1 id="结构和算法之间的关系" tabindex="-1"><a class="header-anchor" href="#结构和算法之间的关系"><span>结构和算法之间的关系</span></a></h1><p>好的，对LeetCode中的数据结构和算法进行系统分类并遵循循序渐进的学习路径，是一个非常有效的学习方法。</p><p>以下是一个全面的分类体系，按照从基础到进阶、从简单到复杂的顺序排列：</p><p><strong>核心原则：</strong></p><ol><li><strong>先数据结构，后算法：</strong> 理解数据结构是应用算法的基础。</li><li><strong>先基础操作，后复杂应用：</strong> 掌握数据结构的基本操作（增删改查）是解决更复杂问题的前提。</li><li><strong>由浅入深：</strong> 从线性结构到非线性结构，从简单算法到组合算法。</li><li><strong>关联性学习：</strong> 学习数据结构时，同步学习与之密切相关的典型算法。</li></ol><p><strong>系统分类与学习路径：</strong></p><h2 id="第一阶段-基础数据结构与算法-入门" tabindex="-1"><a class="header-anchor" href="#第一阶段-基础数据结构与算法-入门"><span>第一阶段：基础数据结构与算法 (入门)</span></a></h2><ol><li><p><strong>数组 (Array) &amp; 字符串 (String)</strong></p><ul><li><strong>特点：</strong> 连续内存、随机访问高效、大小固定（通常）、插入删除低效（中间）。</li><li><strong>核心操作：</strong> 遍历、索引访问、查找。</li><li><strong>密切关联算法：</strong><ul><li><strong>二分查找 (Binary Search)：</strong> 在<strong>有序数组</strong>中高效查找（基础模板、变种）。</li><li><strong>双指针 (Two Pointers)：</strong> 解决有序数组对、滑动窗口、快慢指针（去重、链表基础）问题。<strong>非常重要！</strong></li><li><strong>滑动窗口 (Sliding Window)：</strong> 解决子串/子数组问题（固定大小或可变大小）。</li><li><strong>前缀和 (Prefix Sum)：</strong> 快速计算子数组的和（一维、二维）。</li><li><strong>基础排序思想：</strong> 理解选择、冒泡、插入排序的原理（虽然效率低，但帮助理解）。</li></ul></li><li><strong>学习目标：</strong> 熟练掌握遍历、二分查找、双指针的各种应用场景。</li></ul></li><li><p><strong>链表 (Linked List)</strong></p><ul><li><strong>特点：</strong> 非连续内存、顺序访问、插入删除高效（特定位置）、无随机访问。</li><li><strong>核心操作：</strong> 遍历、插入（头/尾/中）、删除（头/尾/中）、查找（按值/位置）。</li><li><strong>密切关联算法：</strong><ul><li><strong>指针操作：</strong> 熟练操作指针（或引用）是链表题的核心。</li><li><strong>虚拟头节点 (Dummy Node)：</strong> 简化头节点操作（插入/删除）。</li><li><strong>双指针进阶：</strong><ul><li><strong>快慢指针 (Fast &amp; Slow Pointers)：</strong> 找中点、判断环、找环入口。<strong>极其重要！</strong></li><li><strong>前后指针：</strong> 链表反转、特定节点删除。</li></ul></li><li><strong>链表反转 (Reverse Linked List)：</strong> 迭代法、递归法。基础中的基础。</li><li><strong>链表合并 (Merge Linked Lists)：</strong> 合并两个有序链表（迭代、递归）。</li></ul></li><li><strong>学习目标：</strong> 熟练操作指针，掌握快慢指针技巧，能独立完成链表反转和合并。</li></ul></li><li><p><strong>基础线性结构：栈 (Stack) &amp; 队列 (Queue)</strong></p><ul><li><strong>栈 (LIFO)：</strong><ul><li><strong>特点：</strong> 后进先出。</li><li><strong>核心操作：</strong> <code>push</code>, <code>pop</code>, <code>peek/top</code>, <code>isEmpty</code>。</li><li><strong>密切关联算法：</strong><ul><li>括号匹配、表达式求值（中缀转后缀/后缀计算）、函数调用栈模拟、单调栈（解决“下一个更大元素”类问题）。</li></ul></li></ul></li><li><strong>队列 (FIFO)：</strong><ul><li><strong>特点：</strong> 先进先出。</li><li><strong>核心操作：</strong> <code>enqueue/offer</code>, <code>dequeue/poll</code>, <code>peek/front</code>, <code>isEmpty</code>。</li><li><strong>密切关联算法：</strong><ul><li>BFS基础层序遍历、滑动窗口最大值（双端队列Deque）、任务调度。</li></ul></li></ul></li><li><strong>实现：</strong> 常用数组或链表实现。</li><li><strong>学习目标：</strong> 理解LIFO/FIFO特性，掌握经典应用场景（括号匹配、BFS层序基础），了解单调栈和双端队列的用途。</li></ul></li></ol><h2 id="第二阶段-核心数据结构与算法-进阶" tabindex="-1"><a class="header-anchor" href="#第二阶段-核心数据结构与算法-进阶"><span>第二阶段：核心数据结构与算法 (进阶)</span></a></h2><ol start="4"><li><p><strong>哈希表 (Hash Table / Map / Set)</strong></p><ul><li><strong>特点：</strong> 基于键值对、平均O(1)的查找、插入、删除（理想情况下）。</li><li><strong>核心思想：</strong> 哈希函数、冲突解决（链地址法、开放寻址法）。</li><li><strong>密切关联算法：</strong><ul><li><strong>快速查找与去重：</strong> 利用<code>O(1)</code>查找特性解决需要频繁检查元素是否存在或计数的问题（两数之和、重复元素检测、频率统计）。</li><li><strong>配合其他数据结构：</strong> 常作为辅助数据结构加速查找过程（如DFS/BFS中的<code>visited</code>记录）。</li></ul></li><li><strong>学习目标：</strong> 理解哈希原理，熟练运用Map和Set解决查找、计数、去重问题。</li></ul></li><li><p><strong>树 (Tree) - 基础 (二叉树为主)</strong></p><ul><li><strong>特点：</strong> 分层结构、非线性。</li><li><strong>核心概念：</strong> 节点、根、叶子、父节点、子节点、兄弟节点、深度、高度、路径。</li><li><strong>二叉树 (Binary Tree)：</strong><ul><li><strong>核心遍历：</strong> <strong>极其重要！</strong><ul><li><strong>深度优先遍历 (DFS)：</strong><ul><li><strong>前序遍历 (Preorder)：</strong> 根 -&gt; 左 -&gt; 右 (常用于复制、序列化)。</li><li><strong>中序遍历 (Inorder)：</strong> 左 -&gt; 根 -&gt; 右 (在<strong>二叉搜索树BST</strong>中产生有序序列)。</li><li><strong>后序遍历 (Postorder)：</strong> 左 -&gt; 右 -&gt; 根 (常用于删除、表达式树计算)。</li></ul></li><li><strong>广度优先遍历 (BFS) / 层序遍历 (Level Order)：</strong> 按层遍历 (利用队列)。</li></ul></li><li><strong>递归：</strong> 树的问题天然适合递归解决（定义子树上的操作）。</li><li><strong>二叉搜索树 (Binary Search Tree, BST)：</strong><ul><li><strong>性质：</strong> 左子树所有节点值 &lt; 根节点值 &lt; 右子树所有节点值。</li><li><strong>密切关联算法：</strong><ul><li>查找、插入、删除（需处理多种情况）。</li><li>利用中序遍历有序性解决相关问题（验证BST、BST第K小元素、恢复BST）。</li><li>利用BST性质优化搜索（如范围搜索）。</li></ul></li></ul></li></ul></li><li><strong>学习目标：</strong> 熟练掌握递归思想，深刻理解并能独立实现DFS三种遍历和BFS层序遍历（递归和迭代）。掌握BST的基本性质与操作。</li></ul></li><li><p><strong>堆 (Heap) / 优先队列 (Priority Queue)</strong></p><ul><li><strong>特点：</strong> 一种特殊的完全二叉树，父节点值总 &gt;= 或 &lt;= 子节点值（大顶堆/小顶堆）。优先队列是堆的抽象。</li><li><strong>核心操作：</strong> <code>insert/push</code> (O(log n)), <code>extract-max/pop</code> (O(log n)), <code>peek</code> (O(1))。</li><li><strong>密切关联算法：</strong><ul><li><strong>Top K 问题：</strong> 最大/最小的K个元素（用堆维护）。</li><li><strong>流式数据中位数：</strong> 利用大小顶堆组合。</li><li><strong>Dijkstra算法（单源最短路径）、Prim算法（最小生成树）</strong> 的核心优化数据结构。</li></ul></li><li><strong>学习目标：</strong> 理解堆的结构和性质，掌握优先队列的API，熟练解决Top K问题。</li></ul></li><li><p><strong>递归 (Recursion) &amp; 回溯 (Backtracking)</strong></p><ul><li><strong>递归：</strong> 函数直接或间接调用自身。<strong>树DFS的基础。</strong><ul><li><strong>核心要素：</strong> 递归终止条件、递归调用、递归返回处理（后序）。</li><li><strong>思维：</strong> 将问题分解为结构相似的子问题。</li></ul></li><li><strong>回溯：</strong> 一种通过<strong>尝试所有可能性</strong>并<strong>在失败时撤销（回溯）</strong> 来寻找问题解的算法。本质是DFS + 剪枝。 <ul><li><strong>核心思想：</strong> 选择 -&gt; 递归 -&gt; 撤销选择。</li><li><strong>模板：</strong> 非常结构化。</li><li><strong>密切关联问题：</strong><ul><li>排列、组合、子集问题（N皇后、数独、全排列、组合总和）。</li><li>图的路径搜索（DFS实现）。</li></ul></li></ul></li><li><strong>学习目标：</strong> 深刻理解递归的调用栈和返回过程，掌握回溯法的经典模板并能解决排列组合类问题。</li></ul></li></ol><h2 id="第三阶段-高级数据结构与算法-深入" tabindex="-1"><a class="header-anchor" href="#第三阶段-高级数据结构与算法-深入"><span>第三阶段：高级数据结构与算法 (深入)</span></a></h2><ol start="8"><li><p><strong>树 (Tree) - 进阶</strong></p><ul><li><strong>平衡二叉搜索树 (AVL, Red-Black Tree - 了解原理)：</strong> 理解其如何通过旋转保持平衡，保证O(log n)操作。LeetCode中通常直接使用语言库（如<code>TreeMap</code>, <code>TreeSet</code>）。</li><li><strong>字典树 (Trie / Prefix Tree)：</strong><ul><li><strong>特点：</strong> 专门处理字符串集合的前缀查找。</li><li><strong>核心操作：</strong> 插入单词、搜索单词、搜索前缀。</li><li><strong>密切关联问题：</strong> 单词搜索II（配合DFS）、自动补全、拼写检查。</li></ul></li><li><strong>线段树 (Segment Tree) &amp; 树状数组 (Fenwick Tree / Binary Indexed Tree)：</strong><ul><li><strong>特点：</strong> 用于高效处理<strong>区间查询</strong>（如区间和、最小值）和<strong>单点/区间更新</strong>。</li><li><strong>应用场景：</strong> 解决频繁查询和更新数组区间信息的问题。</li></ul></li><li><strong>学习目标：</strong> 理解Trie结构并解决字符串前缀问题。理解线段树/树状数组解决区间问题的思路（能实现或理解模板）。</li></ul></li><li><p><strong>图 (Graph)</strong></p><ul><li><strong>特点：</strong> 由顶点和边构成，表示实体间关系。比树更一般（可有环、可不连通）。</li><li><strong>核心概念：</strong> 顶点、边（有向/无向、权重）、度（入度/出度）、邻接点、连通分量。</li><li><strong>表示方法：</strong> 邻接矩阵、邻接表（常用）。</li><li><strong>密切关联算法：</strong><ul><li><strong>遍历：</strong><ul><li><strong>广度优先搜索 (BFS)：</strong> 利用队列，<strong>最短路径（无权图）</strong>、层级遍历。</li><li><strong>深度优先搜索 (DFS)：</strong> 利用栈（递归或迭代），<strong>连通分量、拓扑排序（有向无环图DAG）、环检测、路径记录</strong>。</li></ul></li><li><strong>拓扑排序 (Topological Sorting)：</strong> 对有向无环图(DAG)排序，解决任务调度、编译依赖。</li><li><strong>最短路径 (Shortest Path)：</strong><ul><li><strong>Dijkstra算法：</strong> <strong>非负权重图</strong>单源最短路径。<strong>核心数据结构：优先队列（小顶堆）。</strong></li><li><strong>Bellman-Ford算法：</strong> 可处理负权边（无负权环），单源。</li><li><strong>Floyd-Warshall算法：</strong> 所有顶点对最短路径。</li></ul></li><li><strong>最小生成树 (Minimum Spanning Tree - MST)：</strong><ul><li><strong>Prim算法：</strong> 从一个顶点开始扩展。<strong>核心数据结构：优先队列（小顶堆）。</strong></li><li><strong>Kruskal算法：</strong> 按权重从小到大选择边，用<strong>并查集</strong>判断是否形成环。</li></ul></li><li><strong>并查集 (Union-Find / Disjoint Set Union - DSU)：</strong><ul><li><strong>特点：</strong> 高效处理<strong>不相交集合</strong>的<strong>合并(Union)<strong>与</strong>查找(Find)</strong> 操作。</li><li><strong>核心操作：</strong> <code>find</code> (路径压缩), <code>union</code> (按秩合并)。</li><li><strong>密切关联问题：</strong> 连通性问题（岛屿数量、朋友圈）、Kruskal算法实现、检测环（无向图）。</li></ul></li></ul></li><li><strong>学习目标：</strong> 掌握图的两种表示方法，熟练实现BFS和DFS遍历。掌握拓扑排序、Dijkstra（优先队列优化）、并查集（路径压缩+按秩合并）、基础MST（Prim/Kruskal）的原理和实现。</li></ul></li><li><p><strong>高级算法</strong></p><ul><li><strong>动态规划 (Dynamic Programming - DP)：</strong><ul><li><strong>核心思想：</strong> 将复杂问题分解为重叠子问题，记忆化子问题的解（避免重复计算），自底向上或自顶向下（记忆化搜索）求解。</li><li><strong>关键要素：</strong> 状态定义、状态转移方程、初始化、边界条件。</li><li><strong>经典问题：</strong><ul><li>线性DP：斐波那契、爬楼梯、最长递增子序列(LIS)、最大子数组和、背包问题(01背包、完全背包)。</li><li>区间DP：最长回文子串、石子合并。</li><li>树形DP：二叉树中的最大路径和、打家劫舍III。</li><li>状态压缩DP：旅行商问题(TSP)简化版。</li></ul></li></ul></li><li><strong>贪心算法 (Greedy Algorithm)：</strong><ul><li><strong>核心思想：</strong> 每一步都做出<strong>当前看起来最优</strong>的选择，希望导致全局最优解。</li><li><strong>特点：</strong> 高效，但<strong>需要证明其正确性</strong>（有时困难）。</li><li><strong>经典问题：</strong> 活动选择、区间调度、找零钱（特定面额）、霍夫曼编码、Dijkstra/Prim算法（本质包含贪心）。</li></ul></li><li><strong>学习目标：</strong> 理解DP的核心思想和解题步骤（状态、转移方程），能解决经典背包、LCS、LIS问题。理解贪心思想并能识别适用场景（需注意证明）。</li></ul></li></ol><h2 id="第四阶段-补充与专项-查漏补缺与优化" tabindex="-1"><a class="header-anchor" href="#第四阶段-补充与专项-查漏补缺与优化"><span>第四阶段：补充与专项 (查漏补缺与优化)</span></a></h2><ol start="11"><li><p><strong>位运算 (Bit Manipulation)</strong></p><ul><li><strong>核心操作：</strong> AND(<code>&amp;</code>), OR(<code>|</code>), XOR(<code>^</code>), NOT(<code>~</code>), 左移(<code>&lt;&lt;</code>), 右移(<code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>)。</li><li><strong>常用技巧：</strong> 判断奇偶、交换两数、取反、检查某位、设置/清除/翻转特定位、统计1的个数、判断2的幂、只出现一次的数字（异或）、位掩码。</li><li><strong>学习目标：</strong> 掌握常用位操作技巧，用于空间优化和特定问题（如状态压缩）。</li></ul></li><li><p><strong>数学与设计</strong></p><ul><li><strong>数学：</strong> 质数判断/生成、最大公约数/最小公倍数（欧几里得算法）、进制转换、随机数生成、概率、组合数学（排列组合计算）。</li><li><strong>设计：</strong><ul><li><strong>LRU缓存：</strong> 结合哈希表（快速查找）和双向链表（维护顺序）实现。</li><li><strong>LFU缓存：</strong> 比LRU更复杂，需维护频率信息。</li><li><strong>数据结构设计：</strong> 设计支持特定操作的栈/队列/哈希表等（如最小栈、用栈实现队列）。</li></ul></li><li><strong>学习目标：</strong> 掌握基础数学算法。理解经典系统设计问题（LRU）的实现原理。</li></ul></li><li><p><strong>高级图论与字符串</strong></p><ul><li><strong>图：</strong> 网络流（Ford-Fulkerson）、强连通分量（Kosaraju, Tarjan）、欧拉路径/回路。</li><li><strong>字符串：</strong><ul><li><strong>高级匹配：</strong> KMP算法（高效子串查找）、Rabin-Karp（哈希滚动）、Boyer-Moore。</li><li><strong>后缀数组 &amp; 后缀自动机：</strong> 解决复杂字符串问题（最长重复子串、不同子串计数等）。</li></ul></li><li><strong>学习目标：</strong> 了解更高级的图论和字符串算法（KMP等），解决更复杂的问题。</li></ul></li></ol><p><strong>总结建议：</strong></p><ol><li><strong>按顺序学习：</strong> 强烈建议按照上述阶段顺序学习，打好基础再攻坚克难。</li><li><strong>理解优先：</strong> 不要死记硬背代码。深刻理解数据结构的内在原理和算法的核心思想。</li><li><strong>刻意练习：</strong> 每个类别学习后，集中刷该类别对应的经典题目（LeetCode的标签功能很好用）。从Easy开始，逐步过渡到Medium和Hard。</li><li><strong>归纳总结：</strong> 对做过的题目进行分类总结，提炼解题模板和技巧（如回溯模板、双指针类型、DP状态定义套路）。</li><li><strong>重视基础：</strong> 数组、链表、哈希表、栈、队列、树（遍历、BST）、递归、双指针、二分查找是绝对的基础，必须滚瓜烂熟。它们是解决更复杂问题的基石。</li><li><strong>攻克难点：</strong> 动态规划、图论（尤其是Dijkstra、并查集）、回溯是公认的难点，需要投入更多时间和精力去理解和练习。</li><li><strong>利用资源：</strong> LeetCode官方分类、讨论区、优质题解（尤其高赞图解）、经典算法书籍（《算法导论》、《算法4》）、在线教程都是宝贵资源。</li></ol><p>这个分类体系涵盖了LeetCode中绝大多数题目涉及的数据结构和算法。</p><p>按照这个路径，结合理解、练习和总结，你就能建立起系统的知识框架，逐步提升解决算法问题的能力。</p>',68)]))}const a=r(l,[["render",i]]),p=JSON.parse('{"path":"/posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.html","title":"从零开始的数据结构与算法-02-leetcode 算法系统分类","lang":"zh-CN","frontmatter":{"title":"从零开始的数据结构与算法-02-leetcode 算法系统分类","date":"2020-06-08T00:00:00.000Z","categories":["Index"],"tags":["index"],"published":true,"description":"chat 系统分类 我们要构建一个更完整的「LeetCode 数据结构与算法知识图谱」： ✅ 覆盖 所有经典算法思想（排序、分治、扫描线、位运算等） ✅ 明确哪些算法和哪些数据结构强相关（比如：树 + DFS、堆 + 贪心） ✅ 按照学习难度 & 适配阶段循序渐进 ✅ 易于整理成 笔记 / Notion / 题单 📚 完整版：LeetCode 数据结...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"从零开始的数据结构与算法-02-leetcode 算法系统分类"}],["meta",{"property":"og:description","content":"chat 系统分类 我们要构建一个更完整的「LeetCode 数据结构与算法知识图谱」： ✅ 覆盖 所有经典算法思想（排序、分治、扫描线、位运算等） ✅ 明确哪些算法和哪些数据结构强相关（比如：树 + DFS、堆 + 贪心） ✅ 按照学习难度 & 适配阶段循序渐进 ✅ 易于整理成 笔记 / Notion / 题单 📚 完整版：LeetCode 数据结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-18T03:07:34.000Z"}],["meta",{"property":"article:tag","content":"index"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-18T03:07:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从零开始的数据结构与算法-02-leetcode 算法系统分类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-18T03:07:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1758164854000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":3}]},"readingTime":{"minutes":15.27,"words":4582},"filePathRelative":"posts/leetcode/index/2020-06-06-algorithm-000-index-03-topics.md","localizedDate":"2020年6月8日","excerpt":"\\n<h1>系统分类</h1>\\n<p><strong>我们要构建一个更完整的「LeetCode 数据结构与算法知识图谱」：</strong></p>\\n<ul>\\n<li>✅ 覆盖 <strong>所有经典算法思想</strong>（排序、分治、扫描线、位运算等）</li>\\n<li>✅ 明确哪些算法和哪些数据结构强相关（比如：树 + DFS、堆 + 贪心）</li>\\n<li>✅ 按照<strong>学习难度</strong> &amp; <strong>适配阶段</strong>循序渐进</li>\\n<li>✅ 易于整理成 <strong>笔记 / Notion / 题单</strong></li>\\n</ul>","autoDesc":true}');export{a as comp,p as data};
