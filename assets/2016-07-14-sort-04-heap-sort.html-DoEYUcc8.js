import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-BU0iNymk.js";const l={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="排序系列" tabindex="-1"><a class="header-anchor" href="#排序系列"><span>排序系列</span></a></h1><p><a href="https://houbb.github.io/2016/07/14/sort-00-overview-sort" target="_blank" rel="noopener noreferrer">sort-00-排序算法汇总</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-01-bubble-sort" target="_blank" rel="noopener noreferrer">sort-01-bubble sort 冒泡排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-02-quick-sort" target="_blank" rel="noopener noreferrer">sort-02-QuickSort 快速排序到底快在哪里？</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-03-select-sort" target="_blank" rel="noopener noreferrer">sort-03-SelectSort 选择排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-04-heap-sort" target="_blank" rel="noopener noreferrer">sort-04-heap sort 堆排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-05-insert-sort" target="_blank" rel="noopener noreferrer">sort-05-insert sort 插入排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-06-shell-sort" target="_blank" rel="noopener noreferrer">sort-06-shell sort 希尔排序算法详解</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-07-merge-sort" target="_blank" rel="noopener noreferrer">sort-07-merge sort 归并排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-08-counting-sort" target="_blank" rel="noopener noreferrer">sort-08-counting sort 计数排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-09-bucket-sort" target="_blank" rel="noopener noreferrer">sort-09-bucket sort 桶排序</a></p><p><a href="https://houbb.github.io/2016/07/14/sort-10-bigfile-sort" target="_blank" rel="noopener noreferrer">sort-10-bigfile 大文件外部排序</a></p><h1 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h1><p>堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</p><p>堆是一个近似完全二叉树的结构，并同时满足堆的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。</p><blockquote><p>基础知识 <a href="https://houbb.github.io/2019/01/18/jcip-11-binary-heap" target="_blank" rel="noopener noreferrer">JCIP-11-二叉堆</a></p></blockquote><h2 id="最大堆" tabindex="-1"><a class="header-anchor" href="#最大堆"><span>最大堆</span></a></h2><p>若以升序排序说明，把数组转换成最大堆(Max-Heap Heap)，这是一种满足最大堆性质(Max-Heap Property)的二叉树：对于除了根之外的每个节点i, <code>A[parent(i)] ≥ A[i]</code>。</p><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为<strong>大顶堆</strong>；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p><p>重复从最大堆取出数值最大的结点(把根结点和最后一个结点交换，把交换后的最后一个结点移出堆)，并让残余的堆维持最大堆性质。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/213524_3ba9f78f_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子:</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/213551_10f81d49_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h2 id="堆节点的访问" tabindex="-1"><a class="header-anchor" href="#堆节点的访问"><span>堆节点的访问</span></a></h2><p>通常堆是通过一维数组来实现的。</p><p>在数组起始位置为0的情形中：</p><p>则父节点和子节点的位置关系如下：</p><p>(01) 索引为i的左孩子的索引是 (2*i+1);</p><p>(02) 索引为i的左孩子的索引是 (2*i+2);</p><p>(03) 索引为i的父结点的索引是 floor((i-1)/2);</p><figure><img src="https://images0.cnblogs.com/i/497634/201403/182342224903953.jpg" alt="堆节点的访问" tabindex="0" loading="lazy"><figcaption>堆节点的访问</figcaption></figure><h2 id="堆的操作" tabindex="-1"><a class="header-anchor" href="#堆的操作"><span>堆的操作</span></a></h2><p>在堆的数据结构中，堆中的最大值总是位于根节点（在优先队列中使用堆的话堆中的最小值位于根节点）。</p><p>堆中定义以下几种操作：</p><p>最大堆调整（Max Heapify）：将堆的末端子节点作调整，使得子节点永远小于父节点</p><p>创建最大堆（Build Max Heap）：将堆中的所有数据重新排序</p><p>堆排序（HeapSort）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</p><h1 id="堆排序算法图解" tabindex="-1"><a class="header-anchor" href="#堆排序算法图解"><span>堆排序算法图解</span></a></h1><p>这个图解来自 <a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener noreferrer">图解排序算法(三)之堆排序</a>，画的非常漂亮。</p><h2 id="基本思想" tabindex="-1"><a class="header-anchor" href="#基本思想"><span>基本思想</span></a></h2><p>将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。</p><p>将其与末尾元素进行交换，此时末尾就为最大值。</p><p>然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><h3 id="步骤一-构造初始堆" tabindex="-1"><a class="header-anchor" href="#步骤一-构造初始堆"><span>步骤一 构造初始堆</span></a></h3><p>将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</p><p>a. 假设给定无序序列结构如下</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/213924_088bce46_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>b. 此时我们从最后一个非叶子结点开始（叶子结点自然不用调整，第一个非叶子结点 <code>arr.length/2-1</code>=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214141_f7e9e763_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>c. 找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214213_3d9bbf67_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>d. 这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214244_4ada6e1b_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>此时，我们就将一个无序的序列构造成了一个大顶堆。</p><h3 id="步骤二-调整堆" tabindex="-1"><a class="header-anchor" href="#步骤二-调整堆"><span>步骤二 调整堆</span></a></h3><p>将堆顶元素与末尾元素进行交换，使末尾元素最大。</p><p>然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</p><p>a. 将堆顶元素9和末尾元素4进行交换</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214503_9875c206_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>b. 重新调整结构，使其继续满足堆定义</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214533_df83e74f_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>c. 再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214610_5301fe8e_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p><figure><img src="https://images.gitee.com/uploads/images/2020/1115/214631_d864a55c_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h2 id="简单总结" tabindex="-1"><a class="header-anchor" href="#简单总结"><span>简单总结</span></a></h2><p>再简单总结下堆排序的基本思路：</p><p>a. 将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</p><p>b. 将堆顶元素与末尾元素交换，将最大元素&quot;沉&quot;到数组末端;</p><p>c. 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</p><h1 id="java-实现" tabindex="-1"><a class="header-anchor" href="#java-实现"><span>java 实现</span></a></h1><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>为了和前面的逻辑保持一致，我们暂时依然使用 list 去实现这个堆排序。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.github.houbb.sort.core.api</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.github.houbb.log.integration.core.Log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.github.houbb.log.integration.core.LogFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.github.houbb.sort.core.util.InnerSortUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 堆排序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> binbin.hou</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@since</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 0.0.4</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HeapSort</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Log</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> log </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LogFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HeapSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SuppressWarnings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doSort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">original</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> maxIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> original</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         *  第一步：将数组堆化</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         *  beginIndex = 第一个非叶子节点。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         *  从第一个非叶子节点开始即可。无需从最后一个叶子节点开始。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         *  叶子节点可以看作已符合堆要求的节点，根节点就是它自己且自己以下值为最大。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beginIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> original</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> beginIndex; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i--) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            maxHeapify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(original, i, maxIndex);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 第二步：对堆化数据排序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 每次都是移出最顶层的根节点A[0]，与最尾部节点位置调换，同时遍历长度 - 1。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 然后从新整理被换到根节点的末尾元素，使其符合堆的特性。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 直至未排序的堆长度为 0。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maxIndex; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i--) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            InnerSortUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">swap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(original, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            maxHeapify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(original, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 调整索引为 index 处的数据，使其符合堆的特性。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> list</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> index</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 需要堆化处理的数据的索引</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   未排序的堆（数组）的长度</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@since</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 0.0.4</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SuppressWarnings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> maxHeapify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> li</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 左子节点索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ri</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> li </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 右子节点索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cMax</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> li;             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子节点值最大索引，默认左子节点。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 左子节点索引超出计算范围，直接返回。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (li </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 先判断左右子节点，哪个较大。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ri </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> InnerSortUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list, ri, li)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            cMax </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ri;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InnerSortUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list, cMax, index)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            InnerSortUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">swap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list, cMax, index);      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果父节点被子节点调换，</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            maxHeapify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list, cMax, len);  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 则需要继续判断换下后的父节点是否符合堆的特性。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RandomUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;开始排序：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SortHelper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">heap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(list);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;完成排序：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> list);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>开始排序：[48, 6, 85, 16, 93, 13, 0, 68, 68, 18]</span></span>
<span class="line"><span>完成排序：[0, 6, 13, 16, 18, 48, 68, 68, 85, 93]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，上面的排序已经开源，开源地址：</p><blockquote><p><a href="https://github.com/houbb/sort" target="_blank" rel="noopener noreferrer">https://github.com/houbb/sort</a></p></blockquote><p>欢迎大家 fork/star，鼓励一下作者~~</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)...1]逐步递减，近似为nlogn。</p><p>所以堆排序时间复杂度一般认为就是O(nlogn)级。</p><p>ps: 个人理解一般树的数据结构，时间复杂度都是 logn 级别的。</p><p>希望本文对你有帮助，如果有其他想法的话，也可以评论区和大家分享哦。</p><p>各位<strong>极客</strong>的点赞收藏转发，是老马持续写作的最大动力！</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86%E7%A9%8D" target="_blank" rel="noopener noreferrer">堆</a></p><p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener noreferrer">图解排序算法(三)之堆排序</a></p>`,93)]))}const r=s(l,[["render",e]]),d=JSON.parse('{"path":"/posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.html","title":"sort-04-heap sort 堆排序算法详解","lang":"zh-CN","frontmatter":{"title":"sort-04-heap sort 堆排序算法详解","date":"2016-07-14T00:00:00.000Z","categories":["Algorithm"],"tags":["sort","exchange-sorts"],"published":true,"description":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"sort-04-heap sort 堆排序算法详解"}],["meta",{"property":"og:description","content":"排序系列 sort-00-排序算法汇总 sort-01-bubble sort 冒泡排序算法详解 sort-02-QuickSort 快速排序到底快在哪里？ sort-03-SelectSort 选择排序算法详解 sort-04-heap sort 堆排序算法详解 sort-05-insert sort 插入排序算法详解 sort-06-shell s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.gitee.com/uploads/images/2020/1115/213524_3ba9f78f_508704.png \\"屏幕截图.png\\""}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T15:22:26.000Z"}],["meta",{"property":"article:tag","content":"sort"}],["meta",{"property":"article:tag","content":"exchange-sorts"}],["meta",{"property":"article:published_time","content":"2016-07-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-20T15:22:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sort-04-heap sort 堆排序算法详解\\",\\"image\\":[\\"https://images.gitee.com/uploads/images/2020/1115/213524_3ba9f78f_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/213551_10f81d49_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images0.cnblogs.com/i/497634/201403/182342224903953.jpg\\",\\"https://images.gitee.com/uploads/images/2020/1115/213924_088bce46_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214141_f7e9e763_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214213_3d9bbf67_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214244_4ada6e1b_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214503_9875c206_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214533_df83e74f_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214610_5301fe8e_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1115/214631_d864a55c_508704.png \\\\\\"屏幕截图.png\\\\\\"\\"],\\"datePublished\\":\\"2016-07-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-20T15:22:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755703346000,"updatedTime":1755703346000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":7.59,"words":2277},"filePathRelative":"posts/leetcode/sorts/2016-07-14-sort-04-heap-sort.md","localizedDate":"2016年7月14日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-00-overview-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-00-排序算法汇总</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-01-bubble-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-01-bubble sort 冒泡排序算法详解</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/07/14/sort-02-quick-sort\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">sort-02-QuickSort 快速排序到底快在哪里？</a></p>","autoDesc":true}');export{r as comp,d as data};
