import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as t}from"./app-Cma39SrW.js";const r={};function n(l,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="前缀和专题" tabindex="-1"><a class="header-anchor" href="#前缀和专题"><span>前缀和专题</span></a></h1><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-46-prefix-sum-01-intro" target="_blank" rel="noopener noreferrer">46-Prefix Sum 力扣前缀和介绍</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum" target="_blank" rel="noopener noreferrer">47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-48-prefix-sum-238-product-of-array-except-self" target="_blank" rel="noopener noreferrer">48-product-of-array-except-self 力扣 238. 除自身以外的数组的乘积</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-49-prefix-sum-303-range-sum-query-immutable" target="_blank" rel="noopener noreferrer">49-303. range-sum-query-immutable 力扣 303. 区域和检索 - 数组不可变</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-50-prefix-sum-307-range-sum-query-mutable" target="_blank" rel="noopener noreferrer">50-307. range-sum-query-mutable 力扣 307. 区域和检索 - 数组可变</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-50-prefix-sum-tree-array" target="_blank" rel="noopener noreferrer">50-树状数组 Binary Indexed Tree，简称 BIT FenwickTree</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-51-prefix-sum-1124-longest-well-performing-interval" target="_blank" rel="noopener noreferrer">51-1124. longest-well-performing-interval 力扣 1124. 表现良好的最长时间段 前缀和+HashMap</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-52-prefix-sum-410-split-array-largest-sum" target="_blank" rel="noopener noreferrer">52-410. split-array-largest-sum 力扣 410. 分割数组的最大值</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-53-prefix-sum-523-continuous-subarray-sum" target="_blank" rel="noopener noreferrer">53-523. continuous-subarray-sum 力扣 523. 连续的子数组和 同余定理 前缀和+HashMap</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-54-prefix-sum-325-longest-array-sum-equal-k" target="_blank" rel="noopener noreferrer">54-325. max-size-subarray-sum-equals-k 力扣 325：和等于 k 的最长子数组长度</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-55-prefix-sum-525-contiguous-array" target="_blank" rel="noopener noreferrer">53-525. continuous-subarray-sum 力扣 525. 连续的子数组和 同余定理 前缀和+HashMap</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-56-prefix-sum-560-subarray-sum-equals-k" target="_blank" rel="noopener noreferrer">56-560. subarray-sum-equals-k 力扣 560. 和为 k 的子数组 前缀和+HashMap</a></p><p><a href="https://houbb.github.io/2020/06/08/algorithm-020-leetcode-57-prefix-sum-1371-find-the-longest-substring-containing-vowels-in-even-counts" target="_blank" rel="noopener noreferrer">57-1371. find-the-longest-substring-containing-vowels-in-even-counts 力扣 1371. 每个元音包含偶数次的最长子字符串</a></p><h1 id="开源地址" tabindex="-1"><a class="header-anchor" href="#开源地址"><span>开源地址</span></a></h1><p>为了便于大家学习，所有实现均已开源。欢迎 fork + star~</p><blockquote><p><a href="https://github.com/houbb/leetcode" target="_blank" rel="noopener noreferrer">https://github.com/houbb/leetcode</a></p></blockquote><h1 id="前缀和" tabindex="-1"><a class="header-anchor" href="#前缀和"><span>前缀和</span></a></h1><p>前缀和（Prefix Sum）是一种常见的数组预处理技巧，主要用于 <strong>快速计算区间的累加和</strong>，大幅度优化原本需要 <code>O(n)</code> 时间的区间求和操作，将其降为 <code>O(1)</code>。</p><h2 id="一、什么是前缀和" tabindex="-1"><a class="header-anchor" href="#一、什么是前缀和"><span>一、什么是前缀和？</span></a></h2><p>对一个数组 <code>nums = [a₀, a₁, a₂, ..., aₙ₋₁]</code>，它的前缀和数组 <code>prefixSum</code> 定义为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>prefixSum[0] = 0 （有时也会直接等于 a₀，视实现方式而定）</span></span>
<span class="line"><span>prefixSum[1] = a₀</span></span>
<span class="line"><span>prefixSum[2] = a₀ + a₁</span></span>
<span class="line"><span>prefixSum[3] = a₀ + a₁ + a₂</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>prefixSum[i] = a₀ + a₁ + ... + a₍ᵢ₋₁₎</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个数组之后，就可以在 <strong>常数时间</strong> 内计算任意区间 <code>[l, r]</code> 的和：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum(l, r) = prefixSum[r + 1] - prefixSum[l]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意：这里的 <code>prefixSum[i]</code> 是前 <code>i</code> 个数的和，因此需要 <strong>从索引 1 开始存储原数组的前缀和</strong>，<code>prefixSum[0] = 0</code>。</p></blockquote><h2 id="在线可视化" tabindex="-1"><a class="header-anchor" href="#在线可视化"><span>在线可视化</span></a></h2><blockquote><p><a href="https://houbb.github.io/leetcode-notes/leetcode/visible/array-prefix-sum-visual.html" target="_blank" rel="noopener noreferrer">前缀和</a></p></blockquote><h2 id="二、代码实现-以-java-为例" tabindex="-1"><a class="header-anchor" href="#二、代码实现-以-java-为例"><span>二、代码实现（以 Java 为例）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构建前缀和</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] prefixSum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 多开一位，prefixSum[0] = 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    prefixSum[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefixSum[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nums[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 查询区间和 [l, r]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefixSum[r </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prefixSum[l]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、复杂度分析" tabindex="-1"><a class="header-anchor" href="#四、复杂度分析"><span>四、复杂度分析</span></a></h2><ul><li>构建：O(n)</li><li>区间查询：O(1)</li></ul><p>相比直接遍历区间求和（O(n)），前缀和大大加快了查询速度。</p><hr><h2 id="五、注意事项" tabindex="-1"><a class="header-anchor" href="#五、注意事项"><span>五、注意事项</span></a></h2><ol><li><p><strong>前缀和数组要多开一位</strong>，避免边界问题。</p></li><li><p>适合 <strong>频繁查询</strong>、但不修改数组的情况。</p></li><li><p>如果原数组频繁修改（如变动某个元素），需要重新计算前缀和。</p><ul><li>这种场景建议用更强的数据结构：如树状数组、线段树。</li></ul></li></ol><hr><h2 id="六、例题推荐" tabindex="-1"><a class="header-anchor" href="#六、例题推荐"><span>六、例题推荐</span></a></h2><p>好的，下面是补充了<strong>力扣题目难度</strong>的表格，每题都是前缀和或差分相关的经典题：</p><table><thead><tr><th>题目编号</th><th>名称</th><th>类型</th><th>难度</th></tr></thead><tbody><tr><td>LC 303</td><td>区域和检索 - 数组不可变</td><td>基础前缀和</td><td>🟢 简单</td></tr><tr><td>LC 724</td><td>寻找数组的中心索引</td><td>前缀和判等</td><td>🟢 简单</td></tr><tr><td>LC 304</td><td>二维区域和检索 - 矩阵不可变</td><td>二维前缀和</td><td>🟡 中等</td></tr><tr><td>LC 560</td><td>和为 K 的子数组</td><td>前缀和 + HashMap</td><td>🔴 中等</td></tr><tr><td>LC 525</td><td>连续数组（0 和 1 数量相等）</td><td>差分 + 前缀和</td><td>🔴 中等</td></tr></tbody></table><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>`,41)]))}const o=i(r,[["render",n]]),d=JSON.parse('{"path":"/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html","title":"46-Prefix Sum 力扣前缀和介绍","lang":"zh-CN","frontmatter":{"title":"46-Prefix Sum 力扣前缀和介绍","date":"2020-06-08T00:00:00.000Z","categories":["Algorithm"],"tags":["algorithm","prefix-sum","leetcode"],"published":true,"description":"前缀和专题 46-Prefix Sum 力扣前缀和介绍 47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组 48-product-of-array-except-self 力扣 238. 除自身以外的数组的乘积 49-303. range-sum-query-immutable 力扣 303. 区域和检索 - 数...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/leetcode-notes/posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"46-Prefix Sum 力扣前缀和介绍"}],["meta",{"property":"og:description","content":"前缀和专题 46-Prefix Sum 力扣前缀和介绍 47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组 48-product-of-array-except-self 力扣 238. 除自身以外的数组的乘积 49-303. range-sum-query-immutable 力扣 303. 区域和检索 - 数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T12:19:07.000Z"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"prefix-sum"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2020-06-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T12:19:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"46-Prefix Sum 力扣前缀和介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T12:19:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755499309000,"updatedTime":1755865147000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":3,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.4,"words":1019},"filePathRelative":"posts/leetcode/history1/2020-06-06-algorithm-020-leetcode-46-prefix-sum-01-intro.md","localizedDate":"2020年6月8日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-020-leetcode-46-prefix-sum-01-intro\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">46-Prefix Sum 力扣前缀和介绍</a></p>\\n<p><a href=\\"https://houbb.github.io/2020/06/08/algorithm-020-leetcode-47-prefix-sum-209-minimum-size-subarray-sum\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">47-minimum-size-subarray-sum 力扣 209. 长度最小的子数组</a></p>","autoDesc":true}');export{o as comp,d as data};
